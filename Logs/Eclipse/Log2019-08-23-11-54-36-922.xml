<Events startTimestamp="1566575676922" logVersion="1.0.0.1">
  <Command __id="1433" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sat Aug 24 09:04:51 EDT 2019" timestamp="76215072" />
  <Command __id="1434" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 09:04:53 EDT 2019" timestamp="76216084" />
  <Command __id="1435" _type="ShellCommand" date="Sat Aug 24 09:05:14 EDT 2019" timestamp="76237564" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1436" _type="ShellCommand" date="Sat Aug 24 09:05:24 EDT 2019" timestamp="76247728" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1437" _type="ShellCommand" date="Sat Aug 24 09:05:28 EDT 2019" timestamp="76251210" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1438" _type="ShellCommand" date="Sat Aug 24 09:07:49 EDT 2019" timestamp="76392220" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1439" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 09:07:49 EDT 2019" timestamp="76392233" />
  <Command __id="1440" _type="ShellCommand" date="Sat Aug 24 09:07:59 EDT 2019" timestamp="76402631" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1441" _type="ShellCommand" date="Sat Aug 24 09:08:35 EDT 2019" timestamp="76438892" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1443" _type="MoveCaretCommand" caretOffset="1021" date="Sat Aug 24 09:14:02 EDT 2019" docOffset="1021" timestamp="76765288" />
  <Command __id="1444" _type="ShellCommand" date="Sat Aug 24 09:15:30 EDT 2019" timestamp="76853781" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1445" _type="ShellCommand" date="Sat Aug 24 09:15:47 EDT 2019" timestamp="76870201" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1446" _type="EclipseCommand" commandID="org.eclipse.search.ui.openFileSearchPage" date="Sat Aug 24 09:15:47 EDT 2019" timestamp="76870220" />
  <Command __id="1447" _type="MoveCaretCommand" caretOffset="1238" date="Sat Aug 24 09:15:51 EDT 2019" docOffset="1238" timestamp="76874782" />
  <Command __id="1448" _type="SelectTextCommand" caretOffset="1245" date="Sat Aug 24 09:15:51 EDT 2019" end="1245" start="1224" timestamp="76875023" />
  <Command __id="1449" _type="CopyCommand" date="Sat Aug 24 09:15:52 EDT 2019" timestamp="76875923" />
  <Command __id="1450" _type="ShellCommand" date="Sat Aug 24 09:16:03 EDT 2019" timestamp="76887039" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1451" _type="PasteCommand" date="Sat Aug 24 09:16:05 EDT 2019" timestamp="76889064" />
  <Command __id="1452" _type="ShellCommand" date="Sat Aug 24 09:16:09 EDT 2019" timestamp="76892362" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1453" _type="EclipseCommand" commandID="org.eclipse.search.ui.openFileSearchPage" date="Sat Aug 24 09:16:09 EDT 2019" timestamp="76892448" />
  <Command __id="1455" _type="MoveCaretCommand" caretOffset="39062" date="Sat Aug 24 09:16:33 EDT 2019" docOffset="40903" timestamp="76916150" />
  <Command __id="1456" _type="ShellCommand" date="Sat Aug 24 09:17:07 EDT 2019" timestamp="76950193" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1457" _type="ShellCommand" date="Sat Aug 24 09:17:12 EDT 2019" timestamp="76955690" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1458" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 09:17:12 EDT 2019" timestamp="76955704" />
  <Command __id="2111" _type="MoveCaretCommand" caretOffset="124" date="Sat Aug 24 10:54:04 EDT 2019" docOffset="187" timestamp="82767911" />
  <Command __id="2113" _type="MoveCaretCommand" caretOffset="371" date="Sat Aug 24 10:54:24 EDT 2019" docOffset="371" timestamp="82787253" />
  <Command __id="2114" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sat Aug 24 10:54:27 EDT 2019" timestamp="82790642" />
  <Command __id="2115" _type="BreakPointCommand" date="Sat Aug 24 10:54:27 EDT 2019" lineNumber="10" timestamp="82790643" type="BreakPointAdded" />
  <Command __id="2117" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 10:54:33 EDT 2019" docOffset="0" timestamp="82796967" />
  <Command __id="2118" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sat Aug 24 10:54:42 EDT 2019" timestamp="82805648" />
  <Command __id="2119" _type="BreakPointCommand" date="Sat Aug 24 10:54:42 EDT 2019" lineNumber="10" timestamp="82805649" type="BreakPointAdded" />
  <Command __id="2120" _type="ShellCommand" date="Sat Aug 24 10:54:51 EDT 2019" timestamp="82814798" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2121" _type="EHExceptionCommand" date="Sat Aug 24 10:54:55 EDT 2019" timestamp="82818397" type="Exception">
    <outputString><![CDATA[W*** Received notification(s) for unknown (possibly invisible or unrecognized atomic-shape) property: TestRunStarted of object: PointAngleSuite[13.0 pts](grader.basics.junit.AGradableJUnitSuite@d1f74b8). Ignoring notification.
]]></outputString>
  </Command>
  <Command __id="2122" _type="ShellCommand" date="Sat Aug 24 10:54:55 EDT 2019" timestamp="82818561" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2123" _type="RunCommand" date="Sat Aug 24 10:54:55 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="82818700" type="Run" />
  <Command __id="2124" _type="MoveCaretCommand" caretOffset="275" date="Sat Aug 24 10:54:56 EDT 2019" docOffset="275" timestamp="82819912" />
  <Command __id="2125" _type="ExceptionCommand" date="Sat Aug 24 10:54:57 EDT 2019" timestamp="82820459" type="Exception">
    <exceptionString><![CDATA[Terminated execution after milliseconds:2000 suspecting infinite loop
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:204)
	at grader.basics.execution.BasicProjectExecution.timedInvoke(BasicProjectExecution.java:311)
	at grader.basics.execution.BasicProjectExecution.timedInvoke(BasicProjectExecution.java:286)
	at grader.basics.project.BasicProjectIntrospection.createInstance(BasicProjectIntrospection.java:2309)
	at grader.basics.project.BasicProjectIntrospection.createInstance(BasicProjectIntrospection.java:2152)
	at gradingTools.compXYZ.assignment1.testcases.AbstractPointTest.createPoint(AbstractPointTest.java:29)
	at gradingTools.compXYZ.assignment1.testcases.AbstractPointTest.test(AbstractPointTest.java:39)
	at gradingTools.compXYZ.assignment1.testcases.PointAngleZeroDegreeTest.test(PointAngleZeroDegreeTest.java:10)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:267)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:127)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6592)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6354)
	at java.desktop/java.awt.Container.processEvent(Container.java:2261)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4966)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2319)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4798)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4914)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4552)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4484)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2305)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4798)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue.access$600(EventQueue.java:97)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
java.lang.NullPointerException
	at java.base/java.util.Hashtable.put(Hashtable.java:475)
	at util.models.Hashcodetable.put(Hashcodetable.java:15)
	at grader.basics.project.BasicProjectIntrospection.forceCreateProxy(BasicProjectIntrospection.java:2181)
	at grader.basics.project.BasicProjectIntrospection.createProxy(BasicProjectIntrospection.java:2196)
	at grader.basics.project.BasicProjectIntrospection.createInstance(BasicProjectIntrospection.java:2311)
	at grader.basics.project.BasicProjectIntrospection.createInstance(BasicProjectIntrospection.java:2152)
	at gradingTools.compXYZ.assignment1.testcases.AbstractPointTest.createPoint(AbstractPointTest.java:29)
	at gradingTools.compXYZ.assignment1.testcases.AbstractPointTest.test(AbstractPointTest.java:39)
	at gradingTools.compXYZ.assignment1.testcases.PointAngleZeroDegreeTest.test(PointAngleZeroDegreeTest.java:10)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:267)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:127)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1357)
	at bus.uigen.editors.TreeAdapter.mouseClicked(TreeAdapter.java:469)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:278)
	at java.desktop/java.awt.AWTEventMulticaster.mouseClicked(AWTEventMulticaster.java:277)
	at java.desktop/java.awt.Component.processMouseEvent(Component.java:6592)
	at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3342)
	at java.desktop/java.awt.Component.processEvent(Component.java:6354)
	at java.desktop/java.awt.Container.processEvent(Container.java:2261)
	at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4966)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2319)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4798)
	at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4914)
	at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4552)
	at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4484)
	at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2305)
	at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2772)
	at java.desktop/java.awt.Component.dispatchEvent(Component.java:4798)
	at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:772)
	at java.desktop/java.awt.EventQueue.access$600(EventQueue.java:97)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:721)
	at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:715)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:97)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
	at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:743)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
	at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:742)
	at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
	at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
	at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
Test Failed:Cartesian Point class not found
Steps traced since last test:
I***(BasicProjectClassesManager) finding type by name:gradingTools.compXYZ.assignment1.testcases.Point
I***(BasicProjectClassesManager) finding type by name:Point
I***(BasicProjectIntrospection) Looking for unique class matching name null tags [] name regex .*Point.* tag regex null
I***(BasicProjectClassesManager) finding type by name match:.*Point.*
I***(BasicProjectIntrospection) Found no class matching descriptor.
I***(BasicProjectIntrospection) Looking for unique class matching name null tags [Point] name regex null tag regex null
I***(BasicProjectClassesManager) Finding type by pattern:point
I***(BasicProjectIntrospection) Found no class matching descriptor.
I***(BasicProjectIntrospection) Looking for best class matching methods [public abstract void gradingTools.compXYZ.assignment1.testcases.Point.print(), public abstract int gradingTools.compXYZ.assignment1.testcases.Point.getY(), public abstract int gradingTools.compXYZ.assignment1.testcases.Point.getX(), public abstract gradingTools.compXYZ.assignment1.testcases.Point gradingTools.compXYZ.assignment1.testcases.Point.translate(gradingTools.compXYZ.assignment1.testcases.Point,int,int), public abstract double gradingTools.compXYZ.assignment1.testcases.Point.getAngle(), public abstract double gradingTools.compXYZ.assignment1.testcases.Point.getRadius()]
I***(BasicProjectClassesManager) finding type by name:gradingTools.compXYZ.assignment1.testcases.Point
I***(BasicProjectClassesManager) finding type by name:Point
I***(BasicProjectIntrospection) Looking for unique class matching name null tags [] name regex .*Point.* tag regex null
I***(BasicProjectClassesManager) finding type by name match:.*Point.*
I***(BasicProjectIntrospection) Found no class matching descriptor.
I***(BasicProjectIntrospection) Looking for unique class matching name null tags [Point] name regex null tag regex null
I***(BasicProjectClassesManager) Finding type by pattern:point
I***(BasicProjectIntrospection) Found no class matching descriptor.
I***(BasicProjectIntrospection) Looking for best class matching methods [public abstract void gradingTools.compXYZ.assignment1.testcases.Point.print(), public abstract int gradingTools.compXYZ.assignment1.testcases.Point.getY(), public abstract int gradingTools.compXYZ.assignment1.testcases.Point.getX(), public abstract gradingTools.compXYZ.assignment1.testcases.Point gradingTools.compXYZ.assignment1.testcases.Point.translate(gradingTools.compXYZ.assignment1.testcases.Point,int,int), public abstract double gradingTools.compXYZ.assignment1.testcases.Point.getAngle(), public abstract double gradingTools.compXYZ.assignment1.testcases.Point.getRadius()]
I***(BasicProjectIntrospection) Found type:class testables.java.wrongangle.WALocation
I***(BasicProjectIntrospection) Found type:class testables.java.wrongangle.WALocation
I***(BasicProjectExecution) Calling constructor public testables.java.wrongangle.WALocation(int,int)with args:[10, 0]timeOut:2000
I***(BasicProjectIntrospection) Class instantiation failed:java.lang.NullPointerException

]]></exceptionString>
  </Command>
  <Command __id="2126" _type="ShellCommand" date="Sat Aug 24 10:55:26 EDT 2019" timestamp="82849718" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2127" _type="ShellCommand" date="Sat Aug 24 10:55:26 EDT 2019" timestamp="82849864" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2128" _type="RunCommand" date="Sat Aug 24 10:56:03 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="82886991" type="Debug" />
  <Command __id="2129" _type="RunCommand" date="Sat Aug 24 10:56:03 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="82886991" type="Debug" />
  <Command __id="2130" _type="RunCommand" date="Sat Aug 24 10:56:03 EDT 2019" kind="HitBreakPoint" projectName="DemoCourseLocalBasicChecks" timestamp="82886991" type="Run" />
  <Command __id="2131" _type="ShellCommand" date="Sat Aug 24 10:56:51 EDT 2019" timestamp="82934968" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2132" _type="ShellCommand" date="Sat Aug 24 10:57:22 EDT 2019" timestamp="82965593" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2133" _type="EclipseCommand" commandID="org.eclipse.search.ui.openFileSearchPage" date="Sat Aug 24 10:57:22 EDT 2019" timestamp="82965674" />
  <Command __id="2134" _type="ShellCommand" date="Sat Aug 24 10:57:22 EDT 2019" timestamp="82965928" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2135" _type="ShellCommand" date="Sat Aug 24 10:57:25 EDT 2019" timestamp="82968210" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2137" _type="SelectTextCommand" caretOffset="668" date="Sat Aug 24 10:57:30 EDT 2019" end="668" start="643" timestamp="82974004" />
  <DocumentChange __id="1914" _type="Delete" date="Sat Aug 24 10:20:35 EDT 2019" docASTNodeCount="120" docActiveCodeLength="835" docExpressionCount="78" docLength="886" endLine="21" length="2" offset="487" repeat="2" startLine="21" timestamp="80758551" timestamp2="80758755">
    <text><![CDATA[EC]]></text>
  </DocumentChange>
  <DocumentChange __id="1918" _type="Insert" date="Sat Aug 24 10:20:36 EDT 2019" docASTNodeCount="120" docActiveCodeLength="837" docExpressionCount="78" docLength="888" length="2" offset="487" repeat="2" timestamp="80759428" timestamp2="80759696">
    <text><![CDATA[AC]]></text>
  </DocumentChange>
  <DocumentChange __id="1927" _type="Delete" date="Sat Aug 24 10:20:49 EDT 2019" docASTNodeCount="120" docActiveCodeLength="835" docExpressionCount="78" docLength="886" endLine="21" length="2" offset="487" repeat="2" startLine="21" timestamp="80772664" timestamp2="80772878">
    <text><![CDATA[AC]]></text>
  </DocumentChange>
  <DocumentChange __id="1931" _type="Insert" date="Sat Aug 24 10:20:50 EDT 2019" docASTNodeCount="120" docActiveCodeLength="837" docExpressionCount="78" docLength="888" length="2" offset="487" repeat="2" timestamp="80773510" timestamp2="80773860">
    <text><![CDATA[Ts]]></text>
  </DocumentChange>
  <DocumentChange __id="1935" _type="Delete" date="Sat Aug 24 10:20:51 EDT 2019" docASTNodeCount="120" docActiveCodeLength="836" docExpressionCount="78" docLength="887" endLine="21" length="1" offset="488" startLine="21" timestamp="80774416">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="1937" _type="Insert" date="Sat Aug 24 10:20:51 EDT 2019" docASTNodeCount="120" docActiveCodeLength="843" docExpressionCount="78" docLength="894" length="7" offset="488" repeat="7" timestamp="80774568" timestamp2="80775684">
    <text><![CDATA[estable]]></text>
  </DocumentChange>
  <Command __id="1960" _type="FileOpenCommand" date="Sat Aug 24 10:21:11 EDT 2019" docASTNodeCount="240" docActiveCodeLength="1674" docExpressionCount="145" docLength="1798" projectName="DemoCourseLocalBasicChecks" timestamp="80794237">
    <filePath><![CDATA[D:\dewan_backup\Java\DemoCourseLocalBasicChecks\src\testables\java\testcases\ECAbstractPointTest.java]]></filePath>
    <snapshot><![CDATA[package testables.java.testcases;

import grader.basics.junit.BasicJUnitUtils;
import grader.basics.junit.NotesAndScore;
import grader.basics.project.BasicProjectIntrospection;
import testables.java.allcorrect.TestablePoint;

import org.junit.Assert;

public abstract class ECAbstractPointTest {

	public static final String ANGLE_TESTS = "Angle Tests";
	boolean checkStructure;

	TestablePoint point;
	double fractionComplete = 0.0;

	protected void assertAngle(double aComputed, double aCorrect) {
		Assert.assertTrue("computedAngle " + aComputed + " != correctAngle " + aCorrect + NotesAndScore.PERCENTAGE_MARKER + fractionComplete, Math.abs(aComputed - aCorrect) < 0.1);

	}
	protected void assertRadius(double aComputed, double aCorrect) {
		Assert.assertTrue("computedRadius " + aComputed + " != correctRadius " + aCorrect + NotesAndScore.PERCENTAGE_MARKER + fractionComplete, Math.abs(aComputed - aCorrect) < 0.1);
	}
	protected abstract void checkComputations (double aComputedAngle, double aComputedRadius, double aCorrectAngle, double aCorrectRadius) ;
	public void createPoint(int theX, int theY) {
		point = (TestablePoint) BasicProjectIntrospection.createInstance(
				TestablePoint.class, new Object[] { theX, theY});
	}
	public void test(int theX, int theY, double aCorrectRadius,
			double aCorrectAngle) {
		try {
//			point = (ACreditPoint) BasicProjectIntrospection.createInstance(
//					ECreditPoint.class, new Object[] { theX, theY});
			createPoint(theX, theY);
			double aComputedRadius =  point.getRadius();
			double aComputedAngle = point.getAngle();
			checkComputations(aComputedAngle, aComputedRadius, aCorrectAngle, aCorrectRadius);		

		} catch (Exception e) {
			BasicJUnitUtils.assertTrue(e, fractionComplete);
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="1964" _type="FileOpenCommand" date="Sat Aug 24 10:21:26 EDT 2019" docASTNodeCount="101" docActiveCodeLength="497" docExpressionCount="67" docLength="501" projectName="DemoCourseLocalBasicChecks" timestamp="80809525">
    <filePath><![CDATA[D:\dewan_backup\Java\DemoCourseLocalBasicChecks\src\testables\java\testcases\Main.java]]></filePath>
  </Command>
  <DocumentChange __id="1968" _type="Delete" date="Sat Aug 24 10:21:31 EDT 2019" docASTNodeCount="101" docActiveCodeLength="495" docExpressionCount="67" docLength="499" endLine="11" length="2" offset="338" repeat="2" startLine="11" timestamp="80814717" timestamp2="80814966">
    <text><![CDATA[EC]]></text>
  </DocumentChange>
  <DocumentChange __id="1972" _type="Insert" date="Sat Aug 24 10:21:32 EDT 2019" docASTNodeCount="101" docActiveCodeLength="503" docExpressionCount="67" docLength="507" length="8" offset="338" repeat="8" timestamp="80815599" timestamp2="80816767">
    <text><![CDATA[Testable]]></text>
  </DocumentChange>
  <DocumentChange __id="1990" _type="Delete" date="Sat Aug 24 10:21:40 EDT 2019" docASTNodeCount="101" docActiveCodeLength="501" docExpressionCount="67" docLength="505" endLine="11" length="2" offset="366" repeat="2" startLine="11" timestamp="80823181" timestamp2="80823446">
    <text><![CDATA[EC]]></text>
  </DocumentChange>
  <DocumentChange __id="1994" _type="Insert" date="Sat Aug 24 10:21:40 EDT 2019" docASTNodeCount="101" docActiveCodeLength="510" docExpressionCount="67" docLength="514" length="9" offset="366" repeat="9" timestamp="80823917" timestamp2="80825752">
    <text><![CDATA[ATestable]]></text>
  </DocumentChange>
  <DocumentChange __id="2018" _type="Insert" date="Sat Aug 24 10:21:48 EDT 2019" docASTNodeCount="109" docActiveCodeLength="561" docExpressionCount="74" docLength="565" length="51" offset="62" repeat="2" timestamp="80832016" timestamp2="80832016">
    <text><![CDATA[

import testables.java.allcorrect.TestablePoint;]]></text>
  </DocumentChange>
  <DocumentChange __id="2026" _type="Delete" date="Sat Aug 24 10:21:53 EDT 2019" docASTNodeCount="109" docActiveCodeLength="557" docExpressionCount="74" docLength="561" endLine="4" length="4" offset="62" startLine="2" timestamp="80836876">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="2027" _type="Insert" date="Sat Aug 24 10:21:53 EDT 2019" docASTNodeCount="117" docActiveCodeLength="620" docExpressionCount="81" docLength="624" length="63" offset="62" repeat="3" timestamp="80836877" timestamp2="80836878">
    <text><![CDATA[

import testables.java.allcorrect.ATestableCartesianPoint;
]]></text>
  </DocumentChange>
  <Command __id="2037" _type="FileOpenCommand" date="Sat Aug 24 10:22:22 EDT 2019" docASTNodeCount="120" docActiveCodeLength="843" docExpressionCount="78" docLength="894" projectName="DemoCourseLocalBasicChecks" timestamp="80865702">
    <filePath><![CDATA[D:\dewan_backup\Java\DemoCourseLocalBasicChecks\src\testables\java\testcases\ECPointTranslationTest.java]]></filePath>
    <snapshot><![CDATA[package testables.java.testcases;

import grader.basics.junit.BasicJUnitUtils;

import org.junit.Assert;
import org.junit.Test;

public class ECPointTranslationTest extends ECAbstractPointTest{

	@Override
	protected void checkComputations(double aComputedAngle,
			double aComputedRadius, double aCorrectAngle, double aCorrectRadius) {
		// TODO Auto-generated method stub
		
	}
	// all or nothing
	@Test
	public void test() {
		try {
			
			createPoint(5, 10);
			TestablePoint retVal = point.translate(point, 5, 10);
			int actualX = retVal.getX();
			int actualY = retVal.getY();
			Assert.assertTrue(
					"X property " +  actualX +  " is not equal to 10 or " +						
					"Y property " + actualY + " is not equal to 20 ",					
					actualX == 10 && actualY == 20) ;
		} catch (Exception e) {
			BasicJUnitUtils.assertTrue(e, fractionComplete);
		}
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="2044" _type="Insert" date="Sat Aug 24 10:22:32 EDT 2019" docASTNodeCount="128" docActiveCodeLength="892" docExpressionCount="85" docLength="943" length="49" offset="80" repeat="2" timestamp="80875766" timestamp2="80875767">
    <text><![CDATA[
import testables.java.allcorrect.TestablePoint;]]></text>
  </DocumentChange>
  <Command __id="2061" _type="FileOpenCommand" date="Sat Aug 24 10:24:04 EDT 2019" docASTNodeCount="1390" docActiveCodeLength="11547" docExpressionCount="908" docLength="18769" projectName="GraderBasics" timestamp="80967984">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\project\BasicProject.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.project;

import grader.basics.BasicLanguageDependencyManager;
import grader.basics.config.BasicConfigurationManagerSelector;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProcessRunner;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.RunningProject;
import grader.basics.settings.BasicGradingEnvironment;
import grader.basics.trace.BinaryFolderMade;
import grader.basics.trace.BinaryFolderNotFound;
import grader.basics.trace.ProjectFolderNotFound;
import grader.basics.trace.SourceFolderAssumed;
import grader.basics.trace.SourceFolderNotFound;
import grader.basics.util.DirectoryUtils;
import grader.basics.util.Option;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import util.pipe.InputGenerator;
import util.trace.TraceableLog;
import util.trace.TraceableLogFactory;
import util.trace.Tracer;
//import scala.Option;

/**
 * A "standard" project. That is, an IDE-based java project.
 */
public class BasicProject implements Project {
    
	protected boolean isInfinite;
    protected File projectFolder;
    protected File sourceFolder;
    protected Option<ClassesManager> classesManager;
    protected TraceableLog traceableLog;
    protected boolean noSrc;
    protected String sourceFilePattern = null;
    protected File buildFolder;
    protected File objectFolder;
//    protected SakaiProject project;

    
	/**
     * Basic constructor
     *
     * @param aDirectory The location of the project
     * @param name      The name of the project, such as "Assignment1"
     * @throws FileNotFoundException
     */
//    public StandardProject(File directory, String name) throws FileNotFoundException {
//        // Find the folder. We could be there or it could be in a different folder
//    	if (directory == null) return;
//        Option<File> src = DirectoryUtils.locateFolder(directory, "src");
//        if (src.isEmpty()) {
//          throw new FileNotFoundException("No src folder");
////
////        	noSrc = true;
////        	sourceFolder = directory;
////        	this.directory = sourceFolder;
//        } else {
//        sourceFolder = src.get();
//        this.directory = src.get().getParentFile();
//        }
//
//        try {
//            File sourceFolder = new File(this.directory, "src");
//            File buildFolder = getBuildFolder("main." + name);
//            classesManager = Option.apply((ClassesManager) new ProjectClassesManager(buildFolder, sourceFolder));
//        } catch (Exception e) {
//            classesManager = Option.empty();
//        }
//
//        // Create the traceable log
//        traceableLog = TraceableLogFactory.getTraceableLog();
//
//    }
//	public StandardProject(SakaiProject project, File aDirectory, String name) throws FileNotFoundException {
//		
//	}
    protected void setProject (Object aProject) {
    	
    }
    public BasicProject(String aSourceFilePattern) throws FileNotFoundException {
    	this (null,  new File("."), null, aSourceFilePattern);
    }
    protected void searchForSourceAndProjectFolder() throws FileNotFoundException {
    	

//        Option<File> src = DirectoryUtils.locateFolder(aDirectory, "src");
        Option<File> src = DirectoryUtils.locateFolder(projectFolder, Project.SOURCE);

        if (src.isEmpty()) {
        	SourceFolderNotFound.newCase(projectFolder.getAbsolutePath(), this).getMessage();

        	Set<File> sourceFiles = DirectoryUtils.getSourceFiles(projectFolder, sourceFilePattern);
        	if (!sourceFiles.isEmpty()) {
                    File aSourceFile = sourceFiles.iterator().next();
                    sourceFolder = aSourceFile.getParentFile(); // assuming no packages!
                    this.projectFolder = sourceFolder.getParentFile();
                    SourceFolderAssumed.newCase(sourceFolder.getAbsolutePath(), this);
        	} else {
                    ProjectFolderNotFound.newCase(projectFolder.getAbsolutePath(), this).getMessage();
                    throw new FileNotFoundException("No source files found");
        	}
        	noSrc = true;
//                throw new FileNotFoundException("No src folder");
//        	sourceFolder = aDirectory;
//        	this.directory = sourceFolder;
        } else {
            sourceFolder = src.get();
            this.projectFolder = src.get().getParentFile();
        }
    }
    // rewriting Josh's code
    // going back to Josh';s code
    public BasicProject(Object aProject, File aDirectory, String name, String aSourceFilePattern) throws FileNotFoundException {
        // Find the folder. We could be there or it could be in a different folder
//    	File anActualDirectory = aDirectory;
//    	boolean aNeedToSearchForProject = true;
    	if (aDirectory == null) { 
//    		String aLocation = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getGradableProjectLocation();
//            if (aLocation != null) {
//            	aNeedToSearchForProject = false;
//            } else {
//            	aLocation = ".";
//            }
//            aDirectory = new File(aLocation);
    		throw new FileNotFoundException("No directory given");
        }
    	sourceFilePattern = aSourceFilePattern;
    	setProject(aProject);
    	
    	// will do this in standardproject
//    	project = aProject;
//    	BasicConfigurationManagerSelector.getConfigurationManager().createProjectConfiguration(aDirectory);
//    	BasicConfigurationManagerSelector.getConfigurationManager().setProjectDirectory(aDirectory);

    	projectFolder = aDirectory;
//        Option<File> src = DirectoryUtils.locateFolder(aDirectory, "src");
//        Option<File> src = DirectoryUtils.locateFolder(aDirectory, Project.SOURCE);
//
//        if (src.isEmpty()) {
//        	SourceFolderNotFound.newCase(aDirectory.getAbsolutePath(), this).getMessage();
//
//        	Set<File> sourceFiles = DirectoryUtils.getSourceFiles(aDirectory, sourceFilePattern);
//        	if (!sourceFiles.isEmpty()) {
//                    File aSourceFile = sourceFiles.iterator().next();
//                    sourceFolder = aSourceFile.getParentFile(); // assuming no packages!
//                    this.directory = sourceFolder.getParentFile();
//                    SourceFolderAssumed.newCase(sourceFolder.getAbsolutePath(), this);
//        	} else {
//                    ProjectFolderNotFound.newCase(aDirectory.getAbsolutePath(), this).getMessage();
//                    throw new FileNotFoundException("No source files found");
//        	}
//        	noSrc = true;
////                throw new FileNotFoundException("No src folder");
////        	sourceFolder = aDirectory;
////        	this.directory = sourceFolder;
//        } else {
//            sourceFolder = src.get();
//            this.directory = src.get().getParentFile();
//        }
        searchForSourceAndProjectFolder();

        try {
//            File sourceFolder = new File(this.directory, "src");
        	 String aBinaryFolderLocation = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBinaryFolderLocation();
        	 if (aBinaryFolderLocation != null) {
        		 Option<File> anOption = DirectoryUtils.locateFolder(projectFolder, aBinaryFolderLocation);
        		 if (anOption != null && !anOption.isEmpty()) {
        			 buildFolder = anOption.get();
        		 }
        	 } 
        	 if (buildFolder == null) {
        		 buildFolder = getBuildFolder("main." + name);
        	 }
        	 String anObjectFolderLocation = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getObjectFolderLocation();
        	 if (anObjectFolderLocation != null) {
        		 Option<File> anOption = DirectoryUtils.locateFolder(projectFolder, anObjectFolderLocation);
        		 if (anOption != null && !anOption.isEmpty()) {
        			 objectFolder = anOption.get();
        		 }
        	 } 
        	 if (objectFolder == null) {
        		 objectFolder = buildFolder;
        	 }
        	
//         	CurrentProjectHolder.setProject(this); // so that classesManager can find it

             classesManager = createClassesManager(buildFolder);

        
        } catch (Exception e) {
        	e.printStackTrace();
            classesManager = Option.empty();
        }

        // Create the traceable log
        traceableLog = TraceableLogFactory.getTraceableLog();
    }
    protected Option<ClassesManager> createClassesManager(File buildFolder) throws ClassNotFoundException, IOException {
//        classesManager = Option.apply((ClassesManager) new ProjectClassesManager(project, buildFolder, sourceFolder));

       return Option.apply((ClassesManager) new BasicProjectClassesManager(this, null, buildFolder, sourceFolder, sourceFilePattern));

    }
    protected Option<File> out;
    protected Option<File> bin;
    protected Map<String, File> preferredClassToBuildFolder = new HashMap(); // wonder if it will ever have more than one entry
    /**
     * Caching version of Josh's code
     * This figures out where the build folder is, taking into account variations due to IDE
     *
     * @param preferredClass The name of the class that has the main method, such as "main.Assignment1"
     * @return The build folder
     * @throws FileNotFoundException
     */
    public File getBuildFolder(String preferredClass) throws FileNotFoundException {
    	  File retVal = preferredClassToBuildFolder.get(preferredClass);
    	  if (retVal == null) {
    		  retVal = searchBuildFolder(preferredClass);
    		  if (retVal == null)
    			  return null;
    		  preferredClassToBuildFolder.put(preferredClass, retVal);
    	  }
    	  return retVal;
    }
    
    protected File searchBuildFolder(String preferredClass) throws FileNotFoundException {
  	   for (String aBinary:Project.BINARIES) {
  		   bin = DirectoryUtils.locateFolder(projectFolder, aBinary);
  		   if (bin != null && !bin.isEmpty())
  			   break;
  	   }
//        if (out == null)
//  	  out = DirectoryUtils.locateFolder(directory, Project.BINARY_2);
//
//
//      
//
//        if (bin == null)
//      bin = DirectoryUtils.locateFolder(directory,  Project.BINARY_0); // just to handle grader itself, as it has execuot.c
//      if (bin.isEmpty())
//      	bin = DirectoryUtils.locateFolder(directory,  Project.BINARY);




      // If there is no 'out' or 'bin' folder then give up
//      if (out.isEmpty() && bin.isEmpty()) {
      if (bin == null || bin.isEmpty()) {

      	if (noSrc) {
                  return sourceFolder;
              } 
//          throw new FileNotFoundException();
      	BinaryFolderNotFound.newCase(projectFolder.getAbsolutePath(), this);
      	File retVal = new File(projectFolder, Project.BINARY);
      	retVal.mkdirs();
//      	project.getClassLoader().setBinaryFileSystemFolderName(retVal.getAbsolutePath());
      	BinaryFolderMade.newCase(retVal.getAbsolutePath(), this);
      	return retVal.getAbsoluteFile();
      	
      } else {
          // There can be more folders under it, so look around some more
          // But first check the class name to see what we are looking for
          File dir = null;
//          if (out.isDefined()) {
//              dir = out.get();
//          }
          if (bin.isDefined()) {
              dir = bin.get();
          }
          if (preferredClass == null || preferredClass.isEmpty()) {
              return dir;
          }

          if (preferredClass.contains(".")) {
              Option<File> packageDir = DirectoryUtils.locateFolder(dir, preferredClass.split("\\.")[0]);
              if (packageDir.isDefined()) {
                  return packageDir.get().getParentFile();
              } else {
                  return dir;
              }
          } else {
              return dir;
          }
      }
  }
    
    /**
     * This figures out where the build folder is, taking into account variations due to IDE
     *
     * @param preferredClass The name of the class that has the main method, such as "main.Assignment1"
     * @return The build folder
     * @throws FileNotFoundException
     */
    @Deprecated
    public File getNonCachingBuildFolder(String preferredClass) throws FileNotFoundException {
//        Option<File> out = DirectoryUtils.locateFolder(directory, "out");
        Option<File> anOut = DirectoryUtils.locateFolder(projectFolder, Project.BINARY_2);
//        if (out.isEmpty())
//        	out = DirectoryUtils.locateFolder(directory, Project.BINARY_0);

        

//        Option<File> bin = DirectoryUtils.locateFolder(directory, "bin");
        Option<File> aBin = DirectoryUtils.locateFolder(projectFolder,  Project.BINARY_0); // just to handle grader itself, as it has execuot.c
        if (aBin.isEmpty())
//        Option<File> bin = DirectoryUtils.locateFolder(directory,  Project.BINARY);
        	aBin = DirectoryUtils.locateFolder(projectFolder,  Project.BINARY);




        // If there is no 'out' or 'bin' folder then give up
        if (anOut.isEmpty() && aBin.isEmpty()) {
        	if (noSrc) {
                    return sourceFolder;
                } 
//            throw new FileNotFoundException();
        	BinaryFolderNotFound.newCase(projectFolder.getAbsolutePath(), this);
        	File retVal = new File(projectFolder, Project.BINARY);
        	retVal.mkdirs();
//        	project.getClassLoader().setBinaryFileSystemFolderName(retVal.getAbsolutePath());
        	BinaryFolderMade.newCase(retVal.getAbsolutePath(), this);
        	return retVal.getAbsoluteFile();
        	
        } else {
            // There can be more folders under it, so look around some more
            // But first check the class name to see what we are looking for
            File dir = null;
            if (anOut.isDefined()) {
                dir = anOut.get();
            }
            if (aBin.isDefined()) {
                dir = aBin.get();
            }
            if (preferredClass == null || preferredClass.isEmpty()) {
                return dir;
            }

            if (preferredClass.contains(".")) {
                Option<File> packageDir = DirectoryUtils.locateFolder(dir, preferredClass.split("\\.")[0]);
                if (packageDir.isDefined()) {
                    return packageDir.get().getParentFile();
                } else {
                    return dir;
                }
            } else {
                return dir;
            }
        }
    }

    @Override
    public TraceableLog getTraceableLog() {
        return traceableLog;
    }

    @Override
    public RunningProject start(String input) throws NotRunnableException {
//        return new ReflectionRunner(this).run(input);
    	return null; // should not be called
    }

    @Override
    public RunningProject launch(String input) throws NotRunnableException {
        return new BasicProcessRunner(this).run(input);
    }

//    @Override
//    public RunningProject start(String input, int timeout) throws NotRunnableException {
//        return new ReflectionRunner(this).run(input, timeout);
//    }

    @Override
    public RunningProject launch(InputGenerator anOutputBasedInputGenerator, String input, int timeout) throws NotRunnableException {
        return new BasicProcessRunner(this).run(anOutputBasedInputGenerator, input, timeout);
    }
    @Override
    public RunningProject launch(InputGenerator anOutputBasedInputGenerator, Map<String, String> aProcessToInput, int timeout) throws NotRunnableException {
        return new BasicProcessRunner(this).run(anOutputBasedInputGenerator, aProcessToInput, timeout);
    }
    
    @Override
    public RunningProject launch( String input, int timeout) throws NotRunnableException {
        return new BasicProcessRunner(this).run(input, timeout);
    }
    @Override
    public RunningProject launch( String input, String[] anArgs, int timeout) throws NotRunnableException {
        return new BasicProcessRunner(this).run(input, anArgs, timeout);
    }
//
    @Override
    public RunningProject launchInteractive() throws NotRunnableException {
    	return null; // should not be called
//    	ARunningProject retVal = new InteractiveConsoleProcessRunner(this).run("");
////    	retVal.createFeatureTranscript();
//    	return retVal;
////        return new InteractiveConsoleProcessRunner(this).run("");
    }
//    @Override
//    public RunningProject launchInteractive(String[] args) throws NotRunnableException {
//    	ARunningProject retVal = new InteractiveConsoleProcessRunner(this).run("", args);
////    	retVal.createFeatureTranscript();
//    	return retVal;
////        return new InteractiveConsoleProcessRunner(this).run("");
//    }

    @Override
    public Option<ClassesManager> getClassesManager() {
        return classesManager;
    }

    @Override
    public File getSourceFolder() {
        return sourceFolder;
    }
    public String toString() {
    	return sourceFolder + " :" + sourceFilePattern;
    }
    public static void main (String[] args) {
    	try {
			BasicGradingEnvironment.get().setLoadClasses(true);
//			Project aProject = new BasicProject(null, new File("."), null);
			Project anAllCorrectProject = new BasicProject(null, new File("."), null, "allcorrect");

			Class anAllCorrectClass = BasicProjectIntrospection.findClass(anAllCorrectProject, "ACartesianPoint");
			System.out.println ("An all correct" + anAllCorrectClass);
			Project aWrongAngleProject = new BasicProject(null, new File("."), null, "wrongangle");

			Class aWrongAngleClass = BasicProjectIntrospection.findClass(anAllCorrectProject, "ACartesianPoint");
			System.out.println ("A wrong" + aWrongAngleClass);
			
			
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    @Override
    public boolean isInfinite() {
    	return isInfinite;
    }
    @Override
    public void setInfinite(boolean newVal) {
    	isInfinite = newVal;
    }
    @Override
    public File getProjectFolder() {
    	return projectFolder;
    }
    @Override
    public File getBuildFolder() {
		return buildFolder;
	}
    @Override
    public File getObjectFolder() {
		return objectFolder;
	}
}
]]></snapshot>
  </Command>
  <Command __id="2104" _type="FileOpenCommand" date="Sat Aug 24 10:53:32 EDT 2019" docASTNodeCount="228" docActiveCodeLength="1272" docExpressionCount="144" docLength="1473" projectName="DemoCourseLocalBasicChecks" timestamp="82735746">
    <filePath><![CDATA[D:\dewan_backup\Java\DemoCourseLocalBasicChecks\src\testables\java\allcorrect\ATestableCartesianPoint.java]]></filePath>
    <snapshot><![CDATA[package testables.java.allcorrect;

import util.annotations.Explanation;
import util.annotations.Tags;
import bus.uigen.ObjectEditor;
@Explanation("Uses Cartesian representation.")
@Tags({"cartesian", "point"})
public class ATestableCartesianPoint implements TestablePoint {	
	protected int x, y;
	public ATestableCartesianPoint(int theX, int theY) {
		x = theX;
		y = theY;
	}
	public ATestableCartesianPoint(double theRadius, double theAngle) {
		x =  (int) (theRadius*Math.cos(theAngle));
		y = (int) (theRadius*Math.sin(theAngle));
	}
	public int getX() { return x; }
	public int getY() { return y; } 	
	public double getAngle() { 
		return Math.atan2(y, x); 
//		return 0;
	}
	@Tags({"radius", "getter"})	
	public double getRadius() { 
		return Math.sqrt(x*x + y*y); 
//		return 0;
	}
//	@Override
//	public void print (String aString, ACPoint aPoint) {
//		System.out.println (aString + aPoint.getX() + " " + aPoint.getY());
//	}
	public void print () {
		System.out.println ("X: " + x + " Y:" + y);
	}
	@Override
	public TestablePoint translate (TestablePoint aPoint, int anXDelta, int aYDelta) {
		return new ATestableCartesianPoint (aPoint.getX() + anXDelta, aPoint.getY() + aYDelta);
	}
	public static void main(String args[]) {
		TestablePoint point =  new ATestableCartesianPoint (50, 100);
//		ObjectEditor.edit(point);
		point = new ATestableCartesianPoint(100, Math.PI/4);
		ObjectEditor.edit(point);
//		
	}
}
]]></snapshot>
  </Command>
  <Command __id="2108" _type="FileOpenCommand" date="Sat Aug 24 10:53:49 EDT 2019" docASTNodeCount="111" docActiveCodeLength="655" docExpressionCount="60" docLength="1054" projectName="DemoCourseLocalBasicChecks" timestamp="82752191">
    <filePath><![CDATA[D:\dewan_backup\Java\DemoCourseLocalBasicChecks\src\testables\java\missingcode\MCCartesianPoint.java]]></filePath>
  </Command>
  <Command __id="2110" _type="FileOpenCommand" date="Sat Aug 24 10:54:04 EDT 2019" docASTNodeCount="228" docActiveCodeLength="1272" docExpressionCount="144" docLength="1473" projectName="DemoCourseLocalBasicChecks" timestamp="82767804">
    <filePath><![CDATA[D:\dewan_backup\Java\DemoCourseLocalBasicChecks\src\testables\java\allcorrect\ATestableCartesianPoint.java]]></filePath>
  </Command>
  <Command __id="2112" _type="FileOpenCommand" date="Sat Aug 24 10:54:24 EDT 2019" docASTNodeCount="111" docActiveCodeLength="655" docExpressionCount="60" docLength="1054" projectName="DemoCourseLocalBasicChecks" timestamp="82787155">
    <filePath><![CDATA[D:\dewan_backup\Java\DemoCourseLocalBasicChecks\src\testables\java\missingcode\MCCartesianPoint.java]]></filePath>
  </Command>
  <Command __id="2116" _type="FileOpenCommand" date="Sat Aug 24 10:54:33 EDT 2019" docASTNodeCount="127" docActiveCodeLength="694" docExpressionCount="71" docLength="1017" projectName="DemoCourseLocalBasicChecks" timestamp="82796838">
    <filePath><![CDATA[D:\dewan_backup\Java\DemoCourseLocalBasicChecks\src\testables\java\wrongangle\WALocation.java]]></filePath>
  </Command>
  <Command __id="2136" _type="FileOpenCommand" date="Sat Aug 24 10:57:30 EDT 2019" docASTNodeCount="390" docActiveCodeLength="3185" docExpressionCount="242" docLength="10443" projectName="GraderBasics" timestamp="82973863">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\execution\ABasicMainClassFinder.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.execution;


import grader.basics.config.BasicStaticConfigurationUtils;
import grader.basics.project.BasicProjectIntrospection;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
//import grader.project.Project;
//import framework.project.ClassDescription;
//import framework.project.ClassesManager;
//import framework.project.Project;

public class ABasicMainClassFinder implements MainClassFinder {
    public static final String DEFAULT_MAIN_PACKAGE_NAME = "main";
    
    protected boolean isEntryPoint (String aCandidate,
    		grader.basics.project.Project aProject
//    		framework.project.ClassesManager manager
    		) {
    	if (aCandidate == null)
    		return false;
    	Class aCandidateClass = BasicProjectIntrospection.findClass(aProject, aCandidate);
    	if (aCandidateClass == null) {
    		return false;
    	}
    	try {
    	Method method = aCandidateClass.getMethod("main", String[].class);
		return method != null;

    	} catch (NoSuchMethodException e) {
    		return false;
    	}
		
//    	for (framework.project.ClassDescription description : manager.getClassDescriptions()) {
//			try {
//				if (!description.getJavaClass().getCanonicalName().equals(aCandidate))
//					continue;
//				Method method = description.getJavaClass().getMethod("main", String[].class);
//				
//				return method != null;
//				
////				return description.getJavaClass().getCanonicalName();
////				return description.getJavaClass().getCanonicalName();
//
//			} catch (NoSuchMethodException e) {
//				return false;
//			}
//		}
//    	return false;
    	
    }
    
//    protected List<String> getEntryPoints(ProxyClassLoader aLoader, Project project) throws NotRunnableException {
//		if (project.getClassesManager() == null)
//			throw new NotRunnableException();
//		List<String> entryPoints = new ArrayList();
//	
//
//		ClassesManager manager = project.getClassesManager();
////		String aCandidate = StaticConfigurationUtils.getEntryPoint();
////		if (isEntryPoint(aCandidate, manager)) {
////			entryPoints.add(aCandidate);
////			return entryPoints;
////		}
//		for (ClassDescription description : manager.getClassDescriptions()) {
//			try {
//				description.getJavaClass().getMethod("main", String[].class);
//				entryPoints.add(description.getJavaClass().getCanonicalName());
//				return entryPoints;
////				return description.getJavaClass().getCanonicalName();
////				return description.getJavaClass().getCanonicalName();
//
//			} catch (NoSuchMethodException e) {
//				// Move along
//			}
//		}
//		throw new NotRunnableException();
//	}
    protected void setEntryPoints(grader.basics.project.Project project, Map<String, String> anEntryPoints) {
//      ProjectWrapper projectWrapper = (ProjectWrapper) project;
//      projectWrapper.getProject().setEntryPoints(anEntryPoints);


    }
    /**
     * This figures out what class is the "entry point", or, what class has main(args)
     * @param project The project to run
     * @return The class canonical name. i.e. "foo.bar.SomeClass"
     * @throws grader.basics.execution.NotRunnableException
     * @see grader.basics.execution.ABasicMainClassFinder which repeats this code (sigh)
     * Both need to be kept consistent
     * Checks if specified main class exists and has a main method, unlike the C checker
     */
    public Map<String, String> getEntryPoints(grader.basics.project.Project project, String aSpecifiedMainClass) throws NotRunnableException {
    	return getEntryPoints(project, new String[] {aSpecifiedMainClass});
 //        if (project.getClassesManager().isEmpty())
//            throw new NotRunnableException();
////        ProjectWrapper projectWrapper = (ProjectWrapper) project;
//		Map<String, String> entryPoints = new HashMap();
//
////        framework.project.ClassesManager manager = project.getClassesManager().get();
//        
////        String aCandidate = StaticConfigurationUtils.getEntryPoint();
//        String aCandidate = aSpecifiedMainClass;
//        if (aCandidate != null) {
////        	if (isEntryPoint(aCandidate, manager))  {
//            if (isEntryPoint(aCandidate, project))  {
//
//        		entryPoints.put(BasicProcessRunner.MAIN_ENTRY_POINT, aCandidate);
//        		return entryPoints;
//        	}
//        }
////		if (isEntryPoint(aCandidate, manager)) {
//		if (isEntryPoint(aCandidate, project)) {
//
//			entryPoints.put(BasicProcessRunner.MAIN_ENTRY_POINT, aCandidate);
//			return entryPoints;
//		}
//        grader.basics.project.ClassesManager manager = project.getClassesManager().get();
//
//        for (grader.basics.project.ClassDescription description : manager.getClassDescriptions()) {
//            try {
//                description.getJavaClass().getMethod("main", String[].class);
//                entryPoints.put(BasicProcessRunner.MAIN_ENTRY_POINT, description.getJavaClass().getCanonicalName());
////                projectWrapper.getProject().setEntryPoints(entryPoints);
//                setEntryPoints(project, entryPoints);
//                return entryPoints;
////                return description.getJavaClass().getCanonicalName();
//            } catch (NoSuchMethodException e) {
//            }
//        }
//        throw new NotRunnableException();
    }
    /**
     * This figures out what class is the "entry point", or, what class has main(args)
     * @param project The project to run
     * @return The class canonical name. i.e. "foo.bar.SomeClass"
     * @throws grader.basics.execution.NotRunnableException
     * @see grader.basics.execution.ABasicMainClassFinder which repeats this code (sigh)
     * Both need to be kept consistent
     */
    @Override
    public Map<String, String> getEntryPoints(grader.basics.project.Project project, String[] aSpecifiedMainClasses) throws NotRunnableException {
        if (project.getClassesManager().isEmpty())
            throw new NotRunnableException();
//        ProjectWrapper projectWrapper = (ProjectWrapper) project;
		Map<String, String> entryPoints = new HashMap();

//        framework.project.ClassesManager manager = project.getClassesManager().get();
        
//        String aCandidate = StaticConfigurationUtils.getEntryPoint();
        for (String aCandidate:aSpecifiedMainClasses) {
            if (isEntryPoint(aCandidate, project))  {

        		entryPoints.put(BasicProcessRunner.MAIN_ENTRY_POINT, aCandidate);
        		return entryPoints;
        	}
        }
////		if (isEntryPoint(aCandidate, manager)) {
//		if (isEntryPoint(aCandidate, project)) {
//
//			entryPoints.put(BasicProcessRunner.MAIN_ENTRY_POINT, aCandidate);
//			return entryPoints;
//		}
        
        grader.basics.project.ClassesManager manager = project.getClassesManager().get();
        /*
         * we are basically returnin the first one that matches
         */
        for (grader.basics.project.ClassDescription description : manager.getClassDescriptions()) {
            try {
                description.getJavaClass().getMethod("main", String[].class);
                entryPoints.put(BasicProcessRunner.MAIN_ENTRY_POINT, description.getJavaClass().getCanonicalName());
//                projectWrapper.getProject().setEntryPoints(entryPoints);
                setEntryPoints(project, entryPoints);
                return entryPoints;
//                return description.getJavaClass().getCanonicalName();
            } catch (NoSuchMethodException e) {
            }
        }
        throw new NotRunnableException();
    }
    protected List<String> defaultCommand;
	@Override
	public List<String> getDefaultCommand() {
		if (defaultCommand == null) {
//			return BasicStaticConfigurationUtils.getBasicCommand();
			return BasicStaticConfigurationUtils.DEFAULT_JAVA_BASIC_COMMAND;

		} else {
			return defaultCommand;
		}
	}
    // Wwhy do we need this?
	@Override
	public void setDefaultCommand(List<String> aCommand) {
		defaultCommand = aCommand;
	}
    
//    public Class nonPackagedMainClass ( ProxyClassLoader aProxyClassLoader, Project aProject) {
//    	try {
//			return  aProxyClassLoader.loadClass(getEntryPoints(aProxyClassLoader, aProject).get(0));
//		} catch (ClassNotFoundException e1) {
//			
//			e1.printStackTrace();
//			return null;
//		} catch (NotRunnableException e1) {
//			// TODO Auto-generated catch block
//			e1.printStackTrace();
//			return null;
//		}
//    }
//    
//
//    public Class mainClass(RootCodeFolder aRootCodeFolder, ProxyClassLoader aProxyClassLoader, String expectedName, Project aProject) {
//        
//    	
//    	String binaryFolderName = aRootCodeFolder.getBinaryProjectFolderName();
//        String mainFolderName = binaryFolderName + "/" + DEFAULT_MAIN_PACKAGE_NAME;
//        List<FileProxy> mainBinaryChildren = aRootCodeFolder.getRootFolder().getChildrenOf(
//                mainFolderName);
//        if (mainBinaryChildren.size() != 1) {
//        	return  nonPackagedMainClass(aProxyClassLoader, aProject);
//        }
//
//        else if (mainBinaryChildren.size() == 1) {
//            String mainClassAbsoluteFileName = mainBinaryChildren.get(0).getMixedCaseAbsoluteName();
//            String classFileName = Common.absoluteNameToLocalName(mainClassAbsoluteFileName);
//            int dotIndex = classFileName.indexOf('.');
//            String className = classFileName.substring(0, dotIndex);
//
//            String mainClassFileName = DEFAULT_MAIN_PACKAGE_NAME + "." + className;
//            try {
//                return aProxyClassLoader.loadClass(mainClassFileName);
//            } catch (ClassNotFoundException e) {
//            	// not sure of this makes sense
//            	return  nonPackagedMainClass(aProxyClassLoader, aProject);
////                try {
////					return  aProxyClassLoader.loadClass(getEntryPoint(aProject));
////				} catch (ClassNotFoundException e1) {
////					
////					e1.printStackTrace();
////					return null;
////				} catch (NotRunnableException e1) {
////					// TODO Auto-generated catch block
////					e1.printStackTrace();
////					return null;
////				}
//            }
//        }
//
//        return null;
//    }

}
]]></snapshot>
  </Command>
  <Command __id="2138" _type="ShellCommand" date="Sat Aug 24 10:57:41 EDT 2019" timestamp="82984921" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2139" _type="ShellCommand" date="Sat Aug 24 10:57:44 EDT 2019" timestamp="82987923" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2140" _type="EclipseCommand" commandID="org.eclipse.search.ui.openFileSearchPage" date="Sat Aug 24 10:57:44 EDT 2019" timestamp="82987953" />
  <Command __id="2141" _type="ShellCommand" date="Sat Aug 24 10:57:44 EDT 2019" timestamp="82988074" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2142" _type="ShellCommand" date="Sat Aug 24 10:58:50 EDT 2019" timestamp="83053931" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2143" _type="MoveCaretCommand" caretOffset="643" date="Sat Aug 24 11:01:53 EDT 2019" docOffset="810" timestamp="83237076" />
  <Command __id="2158" _type="FileOpenCommand" date="Sat Aug 24 11:04:51 EDT 2019" docASTNodeCount="102" docActiveCodeLength="705" docExpressionCount="78" docLength="1087" projectName="DemoCourseLocalBasicChecks" timestamp="83414296">
    <filePath><![CDATA[D:\dewan_backup\Java\DemoCourseLocalBasicChecks\src\gradingTools\compXYZ\assignment1\testcases\autoproxyreference\AnAutoPointProxy.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.compXYZ.assignment1.testcases.autoproxyreference;


//import org.junit.Test;
import grader.basics.project.BasicProjectIntrospection;
import gradingTools.compXYZ.assignment1.testcases.directreference.ADirectPointProxy;
import gradingTools.compXYZ.assignment1.testcases.multi.MultiPoint;
import gradingTools.compXYZ.assignment1.testcases.multi.MultiPointProxy;
//import gradingTools.testables.comp999junit.assignment1.wrongangle.ACartesianPoint;
//import gradingTools.testables.comp999junit.assignment1.wrongangle.Point;
import util.annotations.MaxValue;

@MaxValue(6)
//@Explanation("Radius and Angle Correctly Computed")
//@Group(CartesianPointSuite.ANGLE_TESTS)
public class AnAutoPointProxy extends ADirectPointProxy implements MultiPointProxy{	
	@Override
	protected MultiPoint instantiatePoint(int theX, int theY) {
		return (MultiPoint) BasicProjectIntrospection.createInstance(MultiPoint.class, new Object[] { theX, theY});

//		return (Point) ProjectIntrospection.createInstance(ACartesianPoint.class, new Object[] { theX, theY});
	}
}
]]></snapshot>
  </Command>
  <Command __id="2159" _type="SelectTextCommand" caretOffset="156" date="Sat Aug 24 11:04:51 EDT 2019" end="156" start="131" timestamp="83414432" />
  <Command __id="2160" _type="MoveCaretCommand" caretOffset="131" date="Sat Aug 24 11:04:53 EDT 2019" docOffset="131" timestamp="83416371" />
  <Command __id="2161" _type="FileOpenCommand" date="Sat Aug 24 11:04:54 EDT 2019" docASTNodeCount="8719" docActiveCodeLength="58772" docExpressionCount="5267" docLength="79387" projectName="GraderBasics" timestamp="83417576">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\project\BasicProjectIntrospection.java]]></filePath>
  </Command>
  <Command __id="2162" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 11:04:54 EDT 2019" timestamp="83417657" />
  <Command __id="2163" _type="SelectTextCommand" caretOffset="138" date="Sat Aug 24 11:04:54 EDT 2019" end="138" start="113" timestamp="83417723" />
  <Command __id="2164" _type="ShellCommand" date="Sat Aug 24 11:05:00 EDT 2019" timestamp="83423811" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2165" _type="ShellCommand" date="Sat Aug 24 11:05:16 EDT 2019" timestamp="83439796" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2166" _type="MoveCaretCommand" caretOffset="142" date="Sat Aug 24 11:05:16 EDT 2019" docOffset="1388" timestamp="83439922" />
  <Command __id="2167" _type="ShellCommand" date="Sat Aug 24 11:05:17 EDT 2019" timestamp="83441055" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2168" _type="ShellCommand" date="Sat Aug 24 11:05:23 EDT 2019" timestamp="83446906" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2169" _type="ShellCommand" date="Sat Aug 24 11:05:30 EDT 2019" timestamp="83453451" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2170" _type="ShellCommand" date="Sat Aug 24 11:05:49 EDT 2019" timestamp="83472233" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2171" _type="MoveCaretCommand" caretOffset="73306" date="Sat Aug 24 11:06:12 EDT 2019" docOffset="74552" timestamp="83495283" />
  <Command __id="2172" _type="MoveCaretCommand" caretOffset="72088" date="Sat Aug 24 11:06:36 EDT 2019" docOffset="73334" timestamp="83519589" />
  <Command __id="2276" _type="RunCommand" date="Sat Aug 24 11:10:41 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="83764905" type="Debug" />
  <Command __id="2277" _type="RunCommand" date="Sat Aug 24 11:10:41 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="83764907" type="Debug" />
  <Command __id="2278" _type="RunCommand" date="Sat Aug 24 11:10:41 EDT 2019" kind="HitBreakPoint" projectName="DemoCourseLocalBasicChecks" timestamp="83764907" type="Run" />
  <Command __id="2279" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.DebugLast" date="Sat Aug 24 11:10:43 EDT 2019" timestamp="83766174" />
  <Command __id="2280" _type="RunCommand" date="Sat Aug 24 11:10:43 EDT 2019" kind="HitBreakPoint" projectName="DemoCourseLocalBasicChecks" timestamp="83766364" type="Run" />
  <Command __id="2281" _type="RunCommand" date="Sat Aug 24 11:10:43 EDT 2019" kind="HitBreakPoint" projectName="DemoCourseLocalBasicChecks" timestamp="83766364" type="Run" />
  <Command __id="2282" _type="RunCommand" date="Sat Aug 24 11:10:43 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="83766571" type="Run" />
  <Command __id="2283" _type="RunCommand" date="Sat Aug 24 11:10:43 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83766655" type="Run" />
  <Command __id="2284" _type="RunCommand" date="Sat Aug 24 11:10:43 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="83766783" type="Run" />
  <Command __id="2285" _type="EHExceptionCommand" date="Sat Aug 24 11:10:43 EDT 2019" timestamp="83766870" type="Exception">
    <outputString><![CDATA[I***Tracer: showInfo = true
]]></outputString>
  </Command>
  <Command __id="2286" _type="EHExceptionCommand" date="Sat Aug 24 11:10:44 EDT 2019" timestamp="83767178" type="Exception">
    <outputString><![CDATA[Buffer traced nessages =true
]]></outputString>
  </Command>
  <Command __id="2287" _type="RunCommand" date="Sat Aug 24 11:10:44 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="83767548" type="Run" />
  <Command __id="2288" _type="RunCommand" date="Sat Aug 24 11:10:44 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="83767549" type="Run" />
  <Command __id="2289" _type="RunCommand" date="Sat Aug 24 11:10:44 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="83767551" type="Run" />
  <Command __id="2290" _type="RunCommand" date="Sat Aug 24 11:10:44 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="83767552" type="Run" />
  <Command __id="2291" _type="EHExceptionCommand" date="Sat Aug 24 11:10:44 EDT 2019" timestamp="83767949" type="Exception">
    <outputString><![CDATA[ObjectEditor(Version 22, built on Thu Dec 06 16:26:09 EST 2018). Copyright Prasun Dewan, 2012, All rights reserved. US Patent Appl. No.: 12/532,327
]]></outputString>
  </Command>
  <Command __id="2292" _type="ShellCommand" date="Sat Aug 24 11:10:45 EDT 2019" timestamp="83768785" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2293" _type="EHExceptionCommand" date="Sat Aug 24 11:10:49 EDT 2019" timestamp="83773000" type="Exception">
    <outputString><![CDATA[W*** Received notification(s) for unknown (possibly invisible or unrecognized atomic-shape) property: TestRunStarted of object: PointAngleSuite[13.0 pts](grader.basics.junit.AGradableJUnitSuite@d1f74b8). Ignoring notification.
]]></outputString>
  </Command>
  <Command __id="2294" _type="ShellCommand" date="Sat Aug 24 11:10:49 EDT 2019" timestamp="83773018" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2295" _type="RunCommand" date="Sat Aug 24 11:10:50 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="83773098" type="Run" />
  <Command __id="2297" _type="MoveCaretCommand" caretOffset="71847" date="Sat Aug 24 11:10:51 EDT 2019" docOffset="73093" timestamp="83774763" />
  <Command __id="2298" _type="RunCommand" date="Sat Aug 24 11:10:52 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83775212" type="Run" />
  <Command __id="2299" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 11:10:53 EDT 2019" timestamp="83776104" />
  <Command __id="2300" _type="RunCommand" date="Sat Aug 24 11:10:53 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83776108" type="Run" />
  <Command __id="2325" _type="RunCommand" date="Sat Aug 24 11:11:49 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83832456" type="Run" />
  <Command __id="2326" _type="PredictionCommand" date="Sat Aug 24 11:11:49 EDT 2019" prediction_type="MakingProgress" timestamp="83832460" />
  <Command __id="2327" _type="RunCommand" date="Sat Aug 24 11:13:11 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83914810" type="Run" />
  <Command __id="2328" _type="RunCommand" date="Sat Aug 24 11:13:13 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83916113" type="Run" />
  <Command __id="2329" _type="RunCommand" date="Sat Aug 24 11:13:13 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83916127" type="Run" />
  <Command __id="2330" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 11:13:37 EDT 2019" timestamp="83940638" />
  <Command __id="2331" _type="RunCommand" date="Sat Aug 24 11:13:37 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83940641" type="Run" />
  <Command __id="2332" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 11:13:38 EDT 2019" timestamp="83941246" />
  <Command __id="2333" _type="RunCommand" date="Sat Aug 24 11:13:38 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83941254" type="Run" />
  <Command __id="2335" _type="MoveCaretCommand" caretOffset="63709" date="Sat Aug 24 11:13:39 EDT 2019" docOffset="63845" timestamp="83942268" />
  <Command __id="2336" _type="RunCommand" date="Sat Aug 24 11:13:41 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83944199" type="Run" />
  <Command __id="2338" _type="MoveCaretCommand" caretOffset="31623" date="Sat Aug 24 11:13:41 EDT 2019" docOffset="32869" timestamp="83944620" />
  <Command __id="2339" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 11:13:42 EDT 2019" timestamp="83945541" />
  <Command __id="2340" _type="RunCommand" date="Sat Aug 24 11:13:42 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83945548" type="Run" />
  <Command __id="2341" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 11:13:46 EDT 2019" timestamp="83949241" />
  <Command __id="2342" _type="RunCommand" date="Sat Aug 24 11:13:46 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83949249" type="Run" />
  <Command __id="2343" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sat Aug 24 11:14:35 EDT 2019" timestamp="83998540" />
  <Command __id="2344" _type="RunCommand" date="Sat Aug 24 11:14:35 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="83998547" type="Run" />
  <Command __id="2345" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sat Aug 24 11:14:37 EDT 2019" timestamp="84000541" />
  <Command __id="2346" _type="RunCommand" date="Sat Aug 24 11:14:37 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84000548" type="Run" />
  <Command __id="2347" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 11:14:47 EDT 2019" timestamp="84010483" />
  <Command __id="2348" _type="RunCommand" date="Sat Aug 24 11:14:47 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84010493" type="Run" />
  <Command __id="2349" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 11:14:48 EDT 2019" timestamp="84011159" />
  <Command __id="2350" _type="RunCommand" date="Sat Aug 24 11:14:48 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84011169" type="Run" />
  <Command __id="2351" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 11:14:51 EDT 2019" timestamp="84014199" />
  <Command __id="2352" _type="RunCommand" date="Sat Aug 24 11:14:51 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84014213" type="Run" />
  <Command __id="2353" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 11:14:52 EDT 2019" timestamp="84015861" />
  <Command __id="2354" _type="RunCommand" date="Sat Aug 24 11:14:52 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84015865" type="Run" />
  <Command __id="2355" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 11:15:13 EDT 2019" timestamp="84036613" />
  <Command __id="2356" _type="RunCommand" date="Sat Aug 24 11:15:13 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84036616" type="Run" />
  <Command __id="2357" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 11:15:32 EDT 2019" timestamp="84055947" />
  <Command __id="2358" _type="RunCommand" date="Sat Aug 24 11:15:32 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84055950" type="Run" />
  <Command __id="2359" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 11:15:33 EDT 2019" timestamp="84056678" />
  <Command __id="2360" _type="RunCommand" date="Sat Aug 24 11:15:33 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84056682" type="Run" />
  <Command __id="2361" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sat Aug 24 11:15:35 EDT 2019" timestamp="84058579" />
  <Command __id="2362" _type="RunCommand" date="Sat Aug 24 11:15:35 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84058583" type="Run" />
  <Command __id="2363" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 11:15:36 EDT 2019" timestamp="84059755" />
  <Command __id="2364" _type="RunCommand" date="Sat Aug 24 11:15:36 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84059767" type="Run" />
  <Command __id="2365" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sat Aug 24 11:15:42 EDT 2019" timestamp="84065869" />
  <Command __id="2366" _type="RunCommand" date="Sat Aug 24 11:15:42 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84065876" type="Run" />
  <Command __id="2367" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 11:15:44 EDT 2019" timestamp="84067595" />
  <Command __id="2368" _type="RunCommand" date="Sat Aug 24 11:15:44 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84067613" type="Run" />
  <Command __id="2369" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 11:15:46 EDT 2019" timestamp="84069363" />
  <Command __id="2370" _type="RunCommand" date="Sat Aug 24 11:15:46 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84069375" type="Run" />
  <Command __id="2371" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 11:15:47 EDT 2019" timestamp="84070349" />
  <Command __id="2372" _type="RunCommand" date="Sat Aug 24 11:15:47 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84070358" type="Run" />
  <Command __id="2373" _type="RunCommand" date="Sat Aug 24 11:15:49 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84072646" type="Run" />
  <Command __id="2374" _type="MoveCaretCommand" caretOffset="32305" date="Sat Aug 24 11:15:55 EDT 2019" docOffset="33551" timestamp="84079061" />
  <Command __id="2399" _type="RunCommand" date="Sat Aug 24 11:16:56 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84139111" type="Run" />
  <Command __id="2400" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 11:16:57 EDT 2019" timestamp="84140262" />
  <Command __id="2401" _type="RunCommand" date="Sat Aug 24 11:16:57 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84140270" type="Run" />
  <Command __id="2402" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 11:16:58 EDT 2019" timestamp="84141119" />
  <Command __id="2403" _type="RunCommand" date="Sat Aug 24 11:16:58 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84141127" type="Run" />
  <Command __id="2404" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 11:16:58 EDT 2019" timestamp="84141590" />
  <Command __id="2405" _type="RunCommand" date="Sat Aug 24 11:16:58 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84141597" type="Run" />
  <Command __id="2406" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 11:23:33 EDT 2019" timestamp="84536904" />
  <Command __id="2407" _type="RunCommand" date="Sat Aug 24 11:23:33 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84536917" type="Run" />
  <Command __id="2408" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 11:23:34 EDT 2019" timestamp="84537489" />
  <Command __id="2409" _type="RunCommand" date="Sat Aug 24 11:23:34 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84537499" type="Run" />
  <Command __id="2410" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 11:23:34 EDT 2019" timestamp="84538070" />
  <Command __id="2411" _type="RunCommand" date="Sat Aug 24 11:23:34 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="84538075" type="Run" />
  <Command __id="2412" _type="MoveCaretCommand" caretOffset="15657" date="Sat Aug 24 11:24:45 EDT 2019" docOffset="16903" timestamp="84608463" />
  <Command __id="2414" _type="InsertStringCommand" date="Sat Aug 24 11:24:47 EDT 2019" repeat="3" timestamp="84610169" timestamp2="84610973">
    <data><![CDATA[?**]]></data>
  </Command>
  <Command __id="2420" _type="InsertStringCommand" date="Sat Aug 24 11:24:48 EDT 2019" timestamp="84611444" timestamp2="84611444">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2422" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 11:24:48 EDT 2019" repeat="6" timestamp="84612004" timestamp2="84613031" />
  <Command __id="2434" _type="InsertStringCommand" date="Sat Aug 24 11:24:50 EDT 2019" repeat="3" timestamp="84613697" timestamp2="84614413">
    <data><![CDATA[?**]]></data>
  </Command>
  <Command __id="2440" _type="InsertStringCommand" date="Sat Aug 24 11:24:51 EDT 2019" timestamp="84614850" timestamp2="84614850">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2442" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 11:24:52 EDT 2019" repeat="6" timestamp="84615275" timestamp2="84616460" />
  <Command __id="2454" _type="InsertStringCommand" date="Sat Aug 24 11:24:53 EDT 2019" repeat="3" timestamp="84617030" timestamp2="84618166">
    <data><![CDATA[/**]]></data>
  </Command>
  <Command __id="2461" _type="InsertStringCommand" date="Sat Aug 24 11:24:55 EDT 2019" timestamp="84618815" timestamp2="84618815">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2462" _type="SelectTextCommand" caretOffset="15738" date="Sat Aug 24 11:24:59 EDT 2019" end="15738" start="15665" timestamp="84622713" />
  <Command __id="2464" _type="InsertStringCommand" date="Sat Aug 24 11:25:00 EDT 2019" repeat="45" timestamp="84623374" timestamp2="84631000">
    <data><![CDATA[It returns the first class, which is probbaly]]></data>
  </Command>
  <Command __id="3207" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 11:37:53 EDT 2019" timestamp="85396674" />
  <Command __id="3208" _type="MoveCaretCommand" caretOffset="1453" date="Sat Aug 24 11:37:57 EDT 2019" docOffset="1562" timestamp="85400461" />
  <Command __id="3209" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.DebugLast" date="Sat Aug 24 11:38:10 EDT 2019" timestamp="85413316" />
  <Command __id="3210" _type="EclipseCommand" commandID="" date="Sat Aug 24 11:38:10 EDT 2019" repeat="2" timestamp="85413318" timestamp2="85413336" />
  <Command __id="3212" _type="RunCommand" date="Sat Aug 24 11:38:10 EDT 2019" kind="HitBreakPoint" projectName="DemoCourseLocalBasicChecks" timestamp="85413471" type="Run" />
  <Command __id="3213" _type="RunCommand" date="Sat Aug 24 11:38:10 EDT 2019" kind="HitBreakPoint" projectName="DemoCourseLocalBasicChecks" timestamp="85413471" type="Run" />
  <Command __id="3214" _type="RunCommand" date="Sat Aug 24 11:38:10 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="85413821" type="Run" />
  <Command __id="3215" _type="RunCommand" date="Sat Aug 24 11:38:10 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="85413922" type="Run" />
  <Command __id="3216" _type="RunCommand" date="Sat Aug 24 11:38:10 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="85414045" type="Run" />
  <Command __id="3217" _type="EHExceptionCommand" date="Sat Aug 24 11:38:11 EDT 2019" timestamp="85414187" type="Exception">
    <outputString><![CDATA[I***Tracer: showInfo = true
]]></outputString>
  </Command>
  <Command __id="3218" _type="EHExceptionCommand" date="Sat Aug 24 11:38:11 EDT 2019" timestamp="85414464" type="Exception">
    <outputString><![CDATA[Buffer traced nessages =true
]]></outputString>
  </Command>
  <Command __id="3219" _type="RunCommand" date="Sat Aug 24 11:38:11 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="85414863" type="Run" />
  <Command __id="3220" _type="RunCommand" date="Sat Aug 24 11:38:11 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="85414865" type="Run" />
  <Command __id="3221" _type="RunCommand" date="Sat Aug 24 11:38:11 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="85414871" type="Run" />
  <Command __id="3222" _type="RunCommand" date="Sat Aug 24 11:38:11 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="85414872" type="Run" />
  <Command __id="3223" _type="EHExceptionCommand" date="Sat Aug 24 11:38:12 EDT 2019" timestamp="85415319" type="Exception">
    <outputString><![CDATA[ObjectEditor(Version 22, built on Thu Dec 06 16:26:09 EST 2018). Copyright Prasun Dewan, 2012, All rights reserved. US Patent Appl. No.: 12/532,327
]]></outputString>
  </Command>
  <Command __id="3224" _type="ShellCommand" date="Sat Aug 24 11:38:13 EDT 2019" timestamp="85416252" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3225" _type="EHExceptionCommand" date="Sat Aug 24 11:38:18 EDT 2019" timestamp="85421712" type="Exception">
    <outputString><![CDATA[W*** Received notification(s) for unknown (possibly invisible or unrecognized atomic-shape) property: TestRunStarted of object: PointAngleSuite[13.0 pts](grader.basics.junit.AGradableJUnitSuite@d1f74b8). Ignoring notification.
]]></outputString>
  </Command>
  <Command __id="3226" _type="ShellCommand" date="Sat Aug 24 11:38:18 EDT 2019" timestamp="85421903" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3227" _type="RunCommand" date="Sat Aug 24 11:38:18 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="85422039" type="Run" />
  <Command __id="3229" _type="MoveCaretCommand" caretOffset="71679" date="Sat Aug 24 11:38:19 EDT 2019" docOffset="72925" timestamp="85422519" />
  <Command __id="3230" _type="MoveCaretCommand" caretOffset="71837" date="Sat Aug 24 11:38:20 EDT 2019" docOffset="73083" timestamp="85423446" />
  <Command __id="3231" _type="BreakPointCommand" date="Sat Aug 24 11:38:23 EDT 2019" lineNumber="2300" timestamp="85426288" type="BreakPointRemoved" />
  <Command __id="3232" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sat Aug 24 11:38:23 EDT 2019" timestamp="85426315" />
  <DocumentChange __id="4171" _type="Insert" date="Sat Aug 24 12:02:27 EDT 2019" docASTNodeCount="191" docActiveCodeLength="1034" docExpressionCount="119" docLength="1034" length="11" offset="436" repeat="8" timestamp="86870978" timestamp2="86873199">
    <text><![CDATA[
		StringU]]></text>
  </DocumentChange>
  <Command __id="4172" _type="InsertStringCommand" date="Sat Aug 24 12:02:27 EDT 2019" timestamp="86870989" timestamp2="86870989">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4174" _type="InsertStringCommand" date="Sat Aug 24 12:02:28 EDT 2019" repeat="7" timestamp="86871385" timestamp2="86873210">
    <data><![CDATA[StringU]]></data>
  </Command>
  <Command __id="4187" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 12:02:30 EDT 2019" start_end="START" timestamp="86873718" />
  <Command __id="4188" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sat Aug 24 12:02:30 EDT 2019" timestamp="86873857" />
  <Command __id="4189" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 12:02:45 EDT 2019" start_end="END" timestamp="86888528" />
  <Command __id="4190" _type="ShellCommand" date="Sat Aug 24 12:02:48 EDT 2019" timestamp="86891083" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4191" _type="ShellCommand" date="Sat Aug 24 12:03:18 EDT 2019" timestamp="86921364" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4192" _type="FileOpenCommand" date="Sat Aug 24 12:03:58 EDT 2019" docASTNodeCount="313" docActiveCodeLength="2387" docExpressionCount="210" docLength="2540" projectName="GraderBasics" timestamp="86961271">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\TestImplementationAPI.java]]></filePath>
    <snapshot><![CDATA[package grader.basics;

import java.io.File;
import java.util.Map;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.BasicProcessRunner;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.BasicRunningProject;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.Runner;
import grader.basics.execution.RunningProject;
import trace.grader.basics.GraderBasicsTraceUtility;
import util.pipe.InputGenerator;
import util.trace.Tracer;
import grader.basics.project.Project;

public class TestImplementationAPI {
	public static RunningProject createRunningProject(File aWorkingDirectory, InputGenerator anOutputBasedInputGenerator, String[] command, int timeout, String[] inputs,
			String[] args) throws NotRunnableException {
		 String input = (inputs == null || inputs.length == 0)?null:BasicProjectExecution.toInputString(inputs);
		 Runner processRunner = new BasicProcessRunner(aWorkingDirectory);
		 RunningProject aRunningProject =  
				 
					 new BasicRunningProject(null, anOutputBasedInputGenerator, input);

//				 BasicProcessRunner.createRunningProject(null, anOutputBasedInputGenerator, input);
//	     return processRunner.run(null, command, "", args, 3000);
	    processRunner.run(aRunningProject, anOutputBasedInputGenerator, command, input, args, timeout, "main", true);
	    return aRunningProject;
	}
	public static RunningProject createRunningProject(File aWorkingDirectory, InputGenerator anOutputBasedInputGenerator, String[] command, String... inputs) throws NotRunnableException {
		 return createRunningProject(aWorkingDirectory, anOutputBasedInputGenerator, command, getProcessTimeout(), inputs, null);
	}
	public static void setGraderProcessTimeout(int aTimeout) {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderProcessTimeOut(aTimeout);
	}
	public static int getProcessTimeout() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getProcessTimeOut();
	}
	public static Map<String, String> getEntryPoints(Project project, String aSpecifiedMainClass) {
		return BasicLanguageDependencyManager.getMainClassFinder().getEntryPoints(project, aSpecifiedMainClass);	
	}
	public static String getMainEntryPoint(Project project, String aSpecifiedMainClass) {
		return BasicProcessRunner.getMainEntryPoint(project, aSpecifiedMainClass);
	}
	
	
}
]]></snapshot>
  </Command>
  <Command __id="4193" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 12:03:58 EDT 2019" docOffset="0" timestamp="86961439" />
  <Command __id="4194" _type="MoveCaretCommand" caretOffset="46" date="Sat Aug 24 12:04:02 EDT 2019" docOffset="46" timestamp="86965395" />
  <Command __id="4195" _type="MoveCaretCommand" caretOffset="651" date="Sat Aug 24 12:04:07 EDT 2019" docOffset="651" timestamp="86970988" />
  <DocumentChange __id="4196" _type="Insert" date="Sat Aug 24 12:04:08 EDT 2019" docASTNodeCount="313" docActiveCodeLength="2396" docExpressionCount="210" docLength="2549" length="9" offset="651" repeat="8" timestamp="86971507" timestamp2="86974378">
    <text><![CDATA[
imporyt]]></text>
  </DocumentChange>
  <Command __id="4197" _type="InsertStringCommand" date="Sat Aug 24 12:04:08 EDT 2019" timestamp="86971516" timestamp2="86971516">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4199" _type="InsertStringCommand" date="Sat Aug 24 12:04:09 EDT 2019" repeat="7" timestamp="86972232" timestamp2="86974389">
    <data><![CDATA[imporyt]]></data>
  </Command>
  <DocumentChange __id="4212" _type="Delete" date="Sat Aug 24 12:04:12 EDT 2019" docASTNodeCount="313" docActiveCodeLength="2394" docExpressionCount="210" docLength="2547" endLine="17" length="2" offset="658" repeat="2" startLine="17" timestamp="86975182" timestamp2="86975284">
    <text><![CDATA[yt]]></text>
  </DocumentChange>
  <Command __id="4213" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 12:04:12 EDT 2019" repeat="2" timestamp="86975185" timestamp2="86975291" />
  <DocumentChange __id="4216" _type="Insert" date="Sat Aug 24 12:04:12 EDT 2019" docASTNodeCount="323" docActiveCodeLength="2432" docExpressionCount="219" docLength="2585" length="38" offset="658" repeat="4" timestamp="86975511" timestamp2="86977822">
    <text><![CDATA[t org.apache.commons.lang.StringUtils;]]></text>
  </DocumentChange>
  <Command __id="4217" _type="InsertStringCommand" date="Sat Aug 24 12:04:12 EDT 2019" repeat="2" timestamp="86975527" timestamp2="86975902">
    <data><![CDATA[t ]]></data>
  </Command>
  <Command __id="4221" _type="PasteCommand" date="Sat Aug 24 12:04:13 EDT 2019" timestamp="86976608" />
  <Command __id="4223" _type="InsertStringCommand" date="Sat Aug 24 12:04:14 EDT 2019" timestamp="86977833" timestamp2="86977833">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="4224" _type="MoveCaretCommand" caretOffset="693" date="Sat Aug 24 12:04:19 EDT 2019" docOffset="693" timestamp="86982159" />
  <Command __id="4225" _type="SelectTextCommand" caretOffset="695" date="Sat Aug 24 12:04:19 EDT 2019" end="695" start="684" timestamp="86982353" />
  <Command __id="4226" _type="SelectTextCommand" caretOffset="698" date="Sat Aug 24 12:04:19 EDT 2019" end="698" start="653" timestamp="86982573" />
  <DocumentChange __id="4227" _type="Delete" date="Sat Aug 24 12:04:20 EDT 2019" docASTNodeCount="313" docActiveCodeLength="2387" docExpressionCount="210" docLength="2540" endLine="18" length="45" offset="653" startLine="17" timestamp="86983717">
    <text><![CDATA[import org.apache.commons.lang.StringUtils;
]]></text>
  </DocumentChange>
  <Command __id="4228" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sat Aug 24 12:04:20 EDT 2019" timestamp="86983746" />
  <Command __id="4229" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 12:04:22 EDT 2019" timestamp="86985247" />
  <Command __id="4230" _type="MoveCaretCommand" caretOffset="515" date="Sat Aug 24 12:11:42 EDT 2019" docOffset="515" timestamp="87425096" />
  <Command __id="4275" _type="FileOpenCommand" date="Sat Aug 24 12:26:19 EDT 2019" docASTNodeCount="281" docActiveCodeLength="1746" docExpressionCount="174" docLength="2032" projectName="comp110-grader" timestamp="88303043">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\requirements\interpreter\checkers\ADiffChecker.java]]></filePath>
    <snapshot><![CDATA[package grader.requirements.interpreter.checkers;

import grader.basics.util.DirectoryUtils;

import java.io.File;
import java.io.IOException;

import util.misc.Common;

public class ADiffChecker implements InterpretedChecker{
	protected String diffTool;
	
	String TEMP_DIR = "tmp";
	
	public ADiffChecker() {
		File dir = new File(TEMP_DIR);
		if (!dir.exists()) {
			dir.mkdirs();
		}
		
	}

//	@Override
//	public boolean isExpandFiles() {
//		return false;
//	}
	public int getNumArgs() {
		return 3;
	}	
	public File maybeCreateFile(String aFileName) {
		File aFile = new File(aFileName);
		if (!aFile.exists()) {
			try {
				aFile.createNewFile();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return aFile;
	}
	@Override
	public InterpretedCheckerResult check(String[] anArgs) {
		try {
			String anOptions = anArgs[0];
			String anArg1Text = anArgs[1];
			String anArg2Text = anArgs[2];
			String anArg1FileName =  TEMP_DIR + "/" + "diffFile1.txt";
			String anArg2FileName = TEMP_DIR + "/" + "diffFile2.txt";
			String aResultFileName = TEMP_DIR + "/" + "diffresult.txt";
			File anArg1File = maybeCreateFile(anArg1FileName);
			File anArg2File = maybeCreateFile(anArg2FileName);
			maybeCreateFile(aResultFileName);
			Common.writeText(anArg1File, anArg1Text);
			Common.writeText(anArg2File, anArg2Text);
//			DirectoryUtils.diff("-i -w -b",  anArg1File,
//					anArg2File, aResultFileName);
			DirectoryUtils.diff(anArgs[0],  anArg1File,
					anArg2File, aResultFileName);
			StringBuffer aDiffResult = Common.toText(aResultFileName);
//			if (aDiffResult.length() > 0)
//			aDiffResult.insert(0, "Model output diff actual output:\n");
			String aNotes = aDiffResult.toString();
			boolean aResult = aNotes.isEmpty();
			return new ACheckerResult(aNotes, aResult);

		} catch (Exception e) {
			e.printStackTrace();
			return new ACheckerResult(e.getMessage(), false);
		}

	}


	

}
]]></snapshot>
  </Command>
  <Command __id="4340" _type="FileOpenCommand" date="Sat Aug 24 13:02:52 EDT 2019" docASTNodeCount="951" docActiveCodeLength="6576" docExpressionCount="545" docLength="6607" projectName="comp110-grader" timestamp="90495738">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\requirements\interpreter\specification\ACSVRequirementsSpecification.java]]></filePath>
    <snapshot><![CDATA[package grader.requirements.interpreter.specification;

import framework.grading.FrameworkProjectRequirements;
import grader.file.FileProxy;
import grader.sakai.project.SakaiProjectDatabase;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;

import au.com.bytecode.opencsv.CSVReader;
//import bus.uigen.Message;

public class ACSVRequirementsSpecification implements CSVRequirementsSpecification {
	public static final String TYPE_NAME = "Type";
	public static final int TYPE_COLUMN = 0;
	public static final int DESCRIPTION_COLUMN = TYPE_COLUMN+1;
	public static final int MAX_SCORE_COLUMN = DESCRIPTION_COLUMN + 1;
	public static final  int TIMEOUT_COLUMN = MAX_SCORE_COLUMN + 1;
	public static final  int INPUT_COLUMN = TIMEOUT_COLUMN + 1;
	public static final  int MODEL_OUTPUT_COLUMN = INPUT_COLUMN + 1;
	public static final int EXTRA_CREDIT_COLUMN = MODEL_OUTPUT_COLUMN + 1;
	public static final  int CHECKER_COLUMN = EXTRA_CREDIT_COLUMN  + 1;
	public static final  int START_CHECKER_ARGUMENTS_COLUMN = CHECKER_COLUMN + 1;
	
	protected int headerRow = 0;
	protected int numRequirements;
	FileProxy specificationSpreadsheet; // w
	
	List<String[]>  table;
	protected boolean valid;
	protected FrameworkProjectRequirements projectRequirements;
  


	public ACSVRequirementsSpecification(FileProxy aSpecificationSpreadsheet) {
		specificationSpreadsheet = aSpecificationSpreadsheet;	
		init();
	}
	
	public ACSVRequirementsSpecification(SakaiProjectDatabase aSakaiProjectDatabase) {
		specificationSpreadsheet = aSakaiProjectDatabase.getAssignmentDataFolder().getRequirementsSpreadsheetFile();
		init();
	}
	
	protected void init() {
		maybeCreateTable();
		headerRow = getHeaderRowNum(table);
		valid = headerRow >= 0;
		makeRequirements();
		

	}
	
	protected void makeRequirements() {
		if (isValid()) {
			numRequirements = table.size() - (headerRow + 1);
			
		}
		
	}
	
	protected void maybeCreateTable() {
		if (table != null)
			return;
		createTable();
		
	}
	
	protected void createTable() {
		
		try {
			InputStream input = specificationSpreadsheet.getInputStream();
			CSVReader csvReader 	=	new CSVReader(new InputStreamReader(input));
		     table = csvReader.readAll();
			csvReader.close();
			input.close();
			
		   
	    
	    
		} catch (Exception e) {
			e.printStackTrace();
		
			
		}
		
	}
	
	
	
	public int getHeaderRowNum(List<String[]> aSheet) {
		 for (int rowNum = 0; rowNum < aSheet.size(); rowNum ++) {
			 String[] aRow = aSheet.get(rowNum);
			 if (aRow[TYPE_COLUMN].equalsIgnoreCase(TYPE_NAME))
				 return rowNum;
		 }
		 return -1;
		
	}
	
	
	
	
	
	public FileProxy getSpecificationSpreadsheet() {
		return specificationSpreadsheet;
	}

	public String getFileName() {
		return specificationSpreadsheet.getMixedCaseAbsoluteName();
	}

	public boolean isValid() {
		return valid;
	}

	public void setValid(boolean newValue) {
		this.valid = newValue;
	}

	public List<String[]> getTable() {
		return table;
	}
	@Override
	public int getNumberOfRequirements() {
		return numRequirements;
	}
	@Override
	public String getArg(int aRequirementNum, int anArgNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		int aColumnNum = START_CHECKER_ARGUMENTS_COLUMN + anArgNum;
		return table.get(aRowNum)[aColumnNum];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have arg " + anArgNum);
			return null;
		}
	}
	public String getType(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[TYPE_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have type ");
			return null;
		}
	}
	
	public String getDescription(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[DESCRIPTION_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have description ");
			return null;
		}
	}
	@Override
	public Double getMaxScore(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return Double.parseDouble(table.get(aRowNum)[MAX_SCORE_COLUMN]);
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have max score");
			return null;
		}
	}
	
	@Override
	public Integer getTimeOut(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		String aTimeOut = table.get(aRowNum)[TIMEOUT_COLUMN];
		if (aTimeOut == null || aTimeOut.isEmpty())
			return null;
		return Integer.parseInt(aTimeOut);
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have timeout");
			return null;
		}
	}
	@Override
	public boolean isExtraCredit(int aRequirementNum) {
		try {
			int aRowNum = headerRow + 1 + aRequirementNum;
			String aSpec = table.get(aRowNum)[EXTRA_CREDIT_COLUMN].replaceAll("\\s+", "");
			return !aSpec.isEmpty();
			
			} catch (Exception e) {
				System.out.println("Requirement " + aRequirementNum + " does not have extra credit");
				return false;
			}
	}
	
	
	@Override
	public boolean isManual(int aRequirementNum) {
		try {
			int aRowNum = headerRow + 1 + aRequirementNum;
			String aSpec = table.get(aRowNum)[CHECKER_COLUMN].replaceAll("\\s+", "");
			return aSpec.isEmpty();
			
			} catch (Exception e) {
				System.out.println("Requirement " + aRequirementNum + " does not have checker column");
				return false;
			}
	}

	
	public String getInput(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[INPUT_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have max score ");
			return null;
		}
	}
	public String getModelOutput(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[MODEL_OUTPUT_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have model output");
			return null;
		}
	}
	public String getChecker(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[CHECKER_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have a function");
			return null;
		}
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="4341" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 13:02:52 EDT 2019" docOffset="0" timestamp="90495879" />
  <Command __id="4342" _type="ShellCommand" date="Sat Aug 24 13:03:25 EDT 2019" timestamp="90528660" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4343" _type="ShellCommand" date="Sat Aug 24 13:03:35 EDT 2019" timestamp="90539060" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4344" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 13:03:35 EDT 2019" timestamp="90539074" />
  <Command __id="4345" _type="ShellCommand" date="Sat Aug 24 13:03:42 EDT 2019" timestamp="90545161" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4346" _type="ShellCommand" date="Sat Aug 24 13:03:50 EDT 2019" timestamp="90553152" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4347" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 13:03:50 EDT 2019" timestamp="90553169" />
  <Command __id="4348" _type="FileOpenCommand" date="Sat Aug 24 13:03:54 EDT 2019" docASTNodeCount="283" docActiveCodeLength="1771" docExpressionCount="176" docLength="2057" projectName="GraderBasics" timestamp="90557509">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\requirements\interpreter\checkers\AnExternalDiffChecker.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.requirements.interpreter.checkers;

import grader.basics.util.DirectoryUtils;

import java.io.File;
import java.io.IOException;

import util.misc.Common;

public class AnExternalDiffChecker implements InterpretedChecker{
	protected String diffTool;
	
	String TEMP_DIR = "tmp";
	
	public AnExternalDiffChecker() {
		File dir = new File(TEMP_DIR);
		if (!dir.exists()) {
			dir.mkdirs();
		}
		
	}

//	@Override
//	public boolean isExpandFiles() {
//		return false;
//	}
	public int getNumArgs() {
		return 3;
	}	
	public File maybeCreateFile(String aFileName) {
		File aFile = new File(aFileName);
		if (!aFile.exists()) {
			try {
				aFile.createNewFile();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return aFile;
	}
	@Override
	public InterpretedCheckerResult check(String[] anArgs) {
		try {
			String anOptions = anArgs[0];
			String anArg1Text = anArgs[1];
			String anArg2Text = anArgs[2];
			String anArg1FileName =  TEMP_DIR + "/" + "diffFile1.txt";
			String anArg2FileName = TEMP_DIR + "/" + "diffFile2.txt";
			String aResultFileName = TEMP_DIR + "/" + "diffresult.txt";
			File anArg1File = maybeCreateFile(anArg1FileName);
			File anArg2File = maybeCreateFile(anArg2FileName);
			maybeCreateFile(aResultFileName);
			Common.writeText(anArg1File, anArg1Text);
			Common.writeText(anArg2File, anArg2Text);
//			DirectoryUtils.diff("-i -w -b",  anArg1File,
//					anArg2File, aResultFileName);
			DirectoryUtils.diff(anArgs[0],  anArg1File,
					anArg2File, aResultFileName);
			StringBuffer aDiffResult = Common.toText(aResultFileName);
//			if (aDiffResult.length() > 0)
//			aDiffResult.insert(0, "Model output diff actual output:\n");
			String aNotes = aDiffResult.toString();
			boolean aResult = aNotes.isEmpty();
			return new ACheckerResult(aNotes, aResult);

		} catch (Exception e) {
			e.printStackTrace();
			return new ACheckerResult(e.getMessage(), false);
		}

	}


	

}
]]></snapshot>
  </Command>
  <Command __id="4349" _type="MoveCaretCommand" caretOffset="1481" date="Sat Aug 24 13:03:54 EDT 2019" docOffset="1562" timestamp="90557640" />
  <Command __id="4350" _type="FileOpenCommand" date="Sat Aug 24 13:04:05 EDT 2019" docASTNodeCount="121" docActiveCodeLength="876" docExpressionCount="73" docLength="1030" projectName="GraderBasics" timestamp="90568389">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\requirements\interpreter\checkers\AMatchChecker.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.requirements.interpreter.checkers;


public class AMatchChecker implements InterpretedChecker{
	
	public int getNumArgs() {
		return 2;
	}	
	
	@Override
	public InterpretedCheckerResult check(String[] anArgs) {
		try {
			
			boolean aResult = anArgs[0].matches(anArgs[1]);
			String aNotes = "";
//			if (!aResult) {
//				aNotes =  "Not matched regular expression: " + anArgs[1];
//			} else 
//				aNotes =  "Matched regular expression: " + anArgs[1];
					
			return new ACheckerResult(aNotes, aResult);

		} catch (Exception e) {
			e.printStackTrace();
			return new ACheckerResult(e.getMessage(), false);
		}

	}

	public static void main (String[] args) {
		String s = "Please input an integer\nPlease input a decimal\nThe int addition:3\nThe double addition:3.500000\nThe int multiplication:2\nThe double multiplication:2.500000\n";
		s = " \n true ";
		System.out.println(s.matches("[\\s\\S]*true.*"));

		System.out.println(s.matches(".*Please.*"));
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="4351" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 13:04:05 EDT 2019" docOffset="0" timestamp="90568530" />
  <Command __id="4352" _type="ShellCommand" date="Sat Aug 24 13:04:48 EDT 2019" timestamp="90611788" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4353" _type="ShellCommand" date="Sat Aug 24 13:04:54 EDT 2019" timestamp="90617783" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4354" _type="ShellCommand" date="Sat Aug 24 13:35:24 EDT 2019" timestamp="92448066" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4355" _type="ShellCommand" date="Sat Aug 24 13:42:08 EDT 2019" timestamp="92852003" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4356" _type="ShellCommand" date="Sat Aug 24 13:43:20 EDT 2019" timestamp="92924077" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4357" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:43:49 EDT 2019" start_end="END" timestamp="92952859" />
  <Command __id="4358" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sat Aug 24 13:43:49 EDT 2019" start_end="END" timestamp="92952859" />
  <Command __id="4359" _type="ShellCommand" date="Sat Aug 24 13:43:49 EDT 2019" timestamp="92952979" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4360" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 13:43:49 EDT 2019" timestamp="92952996" />
  <Command __id="4361" _type="ShellCommand" date="Sat Aug 24 13:44:08 EDT 2019" timestamp="92971964" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4362" _type="ShellCommand" date="Sat Aug 24 13:44:59 EDT 2019" timestamp="93022767" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4363" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 13:44:59 EDT 2019" timestamp="93022787" />
  <Command __id="4364" _type="MoveCaretCommand" caretOffset="141" date="Sat Aug 24 13:48:50 EDT 2019" docOffset="141" timestamp="93253798" />
  <Command __id="4365" _type="MoveCaretCommand" caretOffset="174" date="Sat Aug 24 13:49:15 EDT 2019" docOffset="174" timestamp="93278695" />
  <Command __id="4366" _type="ShellCommand" date="Sat Aug 24 13:49:21 EDT 2019" timestamp="93284769" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4367" _type="ShellCommand" date="Sat Aug 24 13:50:36 EDT 2019" timestamp="93359588" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4368" _type="FileOpenCommand" date="Sat Aug 24 13:50:36 EDT 2019" docASTNodeCount="12" docActiveCodeLength="86" docExpressionCount="8" docLength="86" projectName="GraderBasics" timestamp="93359935">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\gradingTools\file\checkers\interpreter\TestDiffPatch.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.file.checkers.interpreter;

public class TestDiffPatch {

}
]]></snapshot>
  </Command>
  <Command __id="4369" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 13:50:37 EDT 2019" docOffset="0" timestamp="93360214" />
  <Command __id="4370" _type="MoveCaretCommand" caretOffset="49" date="Sat Aug 24 13:50:39 EDT 2019" docOffset="49" timestamp="93362371" />
  <Command __id="4371" _type="ShellCommand" date="Sat Aug 24 13:50:43 EDT 2019" timestamp="93366774" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4372" _type="ShellCommand" date="Sat Aug 24 13:51:17 EDT 2019" timestamp="93400975" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4373" _type="ShellCommand" date="Sat Aug 24 13:51:18 EDT 2019" timestamp="93401103" type="ECLIPSE_MINIMIZED" />
  <Command __id="4374" _type="ShellCommand" date="Sat Aug 24 13:51:18 EDT 2019" timestamp="93401116" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4375" _type="ShellCommand" date="Sat Aug 24 13:51:53 EDT 2019" timestamp="93436133" type="ECLIPSE_MAXIMIZED" />
  <Command __id="4376" _type="ShellCommand" date="Sat Aug 24 13:51:53 EDT 2019" timestamp="93436219" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="4377" _type="Insert" date="Sat Aug 24 13:51:55 EDT 2019" docASTNodeCount="12" docActiveCodeLength="90" docExpressionCount="8" docLength="90" length="4" offset="49" repeat="4" timestamp="93438524" timestamp2="93439313">
    <text><![CDATA[impo]]></text>
  </DocumentChange>
  <Command __id="4378" _type="InsertStringCommand" date="Sat Aug 24 13:51:55 EDT 2019" repeat="4" timestamp="93438525" timestamp2="93439314">
    <data><![CDATA[impo]]></data>
  </Command>
  <DocumentChange __id="4385" _type="Delete" date="Sat Aug 24 13:51:56 EDT 2019" docASTNodeCount="12" docActiveCodeLength="86" docExpressionCount="8" docLength="86" endLine="1" length="4" offset="49" repeat="4" startLine="1" timestamp="93439850" timestamp2="93440319">
    <text><![CDATA[impo]]></text>
  </DocumentChange>
  <Command __id="4386" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 13:51:56 EDT 2019" repeat="4" timestamp="93439851" timestamp2="93440321" />
  <Command __id="4393" _type="MoveCaretCommand" caretOffset="81" date="Sat Aug 24 13:51:58 EDT 2019" docOffset="81" timestamp="93441587" />
  <DocumentChange __id="4394" _type="Insert" date="Sat Aug 24 13:51:59 EDT 2019" docASTNodeCount="12" docActiveCodeLength="92" docExpressionCount="8" docLength="92" length="6" offset="81" repeat="6" timestamp="93442273" timestamp2="93444252">
    <text><![CDATA[	diff_]]></text>
  </DocumentChange>
  <Command __id="4395" _type="InsertStringCommand" date="Sat Aug 24 13:51:59 EDT 2019" repeat="6" timestamp="93442279" timestamp2="93444256">
    <data><![CDATA[	diff_]]></data>
  </Command>
  <Command __id="4406" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:52:01 EDT 2019" start_end="START" timestamp="93444654" />
  <Command __id="4407" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sat Aug 24 13:52:01 EDT 2019" timestamp="93444830" />
  <Command __id="4408" _type="ShellCommand" date="Sat Aug 24 13:52:03 EDT 2019" timestamp="93446630" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4409" _type="ShellCommand" date="Sat Aug 24 13:52:03 EDT 2019" timestamp="93446894" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4410" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:52:03 EDT 2019" start_end="END" timestamp="93446912" />
  <DocumentChange __id="4411" _type="Replace" date="Sat Aug 24 13:52:03 EDT 2019" docASTNodeCount="12" docActiveCodeLength="103" docExpressionCount="8" docLength="103" endLine="3" insertionLength="16" int_docASTNodeCount="12" int_docActiveCodeLength="87" int_docExpressionCount="8" int_docLength="87" length="5" offset="82" startLine="3" timestamp="93446914">
    <deletedText><![CDATA[diff_]]></deletedText>
    <insertedText><![CDATA[diff_match_patch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4412" _type="Delete" date="Sat Aug 24 13:52:03 EDT 2019" docASTNodeCount="12" docActiveCodeLength="99" docExpressionCount="8" docLength="99" endLine="2" length="4" offset="47" startLine="0" timestamp="93446916">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="4413" _type="Insert" date="Sat Aug 24 13:52:03 EDT 2019" docASTNodeCount="22" docActiveCodeLength="158" docExpressionCount="17" docLength="158" length="59" offset="47" repeat="3" timestamp="93446921" timestamp2="93446927">
    <text><![CDATA[

import name.fraser.neil.plaintext.diff_match_patch;

]]></text>
  </DocumentChange>
  <DocumentChange __id="4416" _type="Insert" date="Sat Aug 24 13:52:06 EDT 2019" docASTNodeCount="27" docActiveCodeLength="165" docExpressionCount="19" docLength="165" length="7" offset="153" repeat="7" timestamp="93449401" timestamp2="93451701">
    <text><![CDATA[ aDiffM]]></text>
  </DocumentChange>
  <Command __id="4417" _type="InsertStringCommand" date="Sat Aug 24 13:52:06 EDT 2019" repeat="7" timestamp="93449402" timestamp2="93451703">
    <data><![CDATA[ aDiffM]]></data>
  </Command>
  <Command __id="4430" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:52:09 EDT 2019" start_end="START" timestamp="93452174" />
  <DocumentChange __id="4431" _type="Replace" date="Sat Aug 24 13:52:09 EDT 2019" docASTNodeCount="27" docActiveCodeLength="176" docExpressionCount="19" docLength="176" endLine="5" insertionLength="17" int_docASTNodeCount="22" int_docActiveCodeLength="159" int_docExpressionCount="17" int_docLength="159" length="6" offset="154" startLine="5" timestamp="93452186">
    <deletedText><![CDATA[aDiffM]]></deletedText>
    <insertedText><![CDATA[aDiff_match_patch]]></insertedText>
  </DocumentChange>
  <Command __id="4432" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:52:09 EDT 2019" start_end="END" timestamp="93452189" />
  <Command __id="4433" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sat Aug 24 13:52:09 EDT 2019" timestamp="93452192" />
  <DocumentChange __id="4434" _type="Insert" date="Sat Aug 24 13:52:11 EDT 2019" docASTNodeCount="27" docActiveCodeLength="178" docExpressionCount="19" docLength="178" length="2" offset="171" repeat="2" timestamp="93454802" timestamp2="93455331">
    <text><![CDATA[ =]]></text>
  </DocumentChange>
  <Command __id="4435" _type="InsertStringCommand" date="Sat Aug 24 13:52:11 EDT 2019" repeat="2" timestamp="93454803" timestamp2="93455333">
    <data><![CDATA[ =]]></data>
  </Command>
  <DocumentChange __id="4438" _type="Delete" date="Sat Aug 24 13:52:12 EDT 2019" docASTNodeCount="27" docActiveCodeLength="176" docExpressionCount="19" docLength="176" endLine="5" length="2" offset="171" repeat="2" startLine="5" timestamp="93455942" timestamp2="93456099">
    <text><![CDATA[ =]]></text>
  </DocumentChange>
  <Command __id="4439" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 13:52:12 EDT 2019" repeat="2" timestamp="93455943" timestamp2="93456100" />
  <Command __id="4447" _type="FileOpenCommand" date="Sat Aug 24 13:52:18 EDT 2019" projectName="null" timestamp="93462035">
    <filePath><![CDATA[null]]></filePath>
  </Command>
  <Command __id="4448" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 13:52:19 EDT 2019" timestamp="93462081" />
  <Command __id="4449" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 13:52:19 EDT 2019" docOffset="0" timestamp="93462221" />
  <Command __id="4450" _type="ShellCommand" date="Sat Aug 24 13:52:27 EDT 2019" timestamp="93470754" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4451" _type="ShellCommand" date="Sat Aug 24 13:52:32 EDT 2019" timestamp="93475939" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4452" _type="FileOpenCommand" date="Sat Aug 24 13:52:34 EDT 2019" docASTNodeCount="27" docActiveCodeLength="177" docExpressionCount="19" docLength="177" projectName="GraderBasics" timestamp="93477831">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\gradingTools\file\checkers\interpreter\TestDiffPatch.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.file.checkers.interpreter;

import name.fraser.neil.plaintext.diff_match_patch;

public class TestDiffPatch {
	diff_match_patch aDiff_match_patch;
}
]]></snapshot>
  </Command>
  <Command __id="4453" _type="MoveCaretCommand" caretOffset="137" date="Sat Aug 24 13:52:34 EDT 2019" docOffset="137" timestamp="93477932" />
  <Command __id="4454" _type="MoveCaretCommand" caretOffset="172" date="Sat Aug 24 13:52:39 EDT 2019" docOffset="172" timestamp="93482587" />
  <DocumentChange __id="4455" _type="Insert" date="Sat Aug 24 13:52:40 EDT 2019" docASTNodeCount="38" docActiveCodeLength="229" docExpressionCount="22" docLength="229" length="52" offset="172" repeat="41" timestamp="93483278" timestamp2="93494638">
    <text><![CDATA[
	public static void main (String[] args) {
		
	}]]></text>
  </DocumentChange>
  <Command __id="4456" _type="InsertStringCommand" date="Sat Aug 24 13:52:40 EDT 2019" timestamp="93483280" timestamp2="93483280">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4458" _type="InsertStringCommand" date="Sat Aug 24 13:52:41 EDT 2019" repeat="38" timestamp="93484134" timestamp2="93491928">
    <data><![CDATA[public static void main (String[] args]]></data>
  </Command>
  <Command __id="4532" _type="MoveCaretCommand" caretOffset="214" date="Sat Aug 24 13:52:50 EDT 2019" docOffset="214" timestamp="93493556" />
  <Command __id="4534" _type="InsertStringCommand" date="Sat Aug 24 13:52:50 EDT 2019" repeat="2" timestamp="93493788" timestamp2="93494288">
    <data><![CDATA[ {]]></data>
  </Command>
  <Command __id="4538" _type="InsertStringCommand" date="Sat Aug 24 13:52:51 EDT 2019" timestamp="93494639" timestamp2="93494639">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4539" _type="MoveCaretCommand" caretOffset="149" date="Sat Aug 24 13:53:18 EDT 2019" docOffset="149" timestamp="93522073" />
  <Command __id="4540" _type="SelectTextCommand" caretOffset="153" date="Sat Aug 24 13:53:19 EDT 2019" end="153" start="137" timestamp="93522288" />
  <Command __id="4541" _type="CopyCommand" date="Sat Aug 24 13:53:20 EDT 2019" timestamp="93523128" />
  <Command __id="4542" _type="MoveCaretCommand" caretOffset="224" date="Sat Aug 24 13:53:21 EDT 2019" docOffset="224" timestamp="93524374" />
  <Command __id="4543" _type="MoveCaretCommand" caretOffset="220" date="Sat Aug 24 13:53:22 EDT 2019" docOffset="220" timestamp="93525541" />
  <DocumentChange __id="4544" _type="Replace" date="Sat Aug 24 13:53:23 EDT 2019" docASTNodeCount="40" docActiveCodeLength="245" docExpressionCount="23" docLength="245" endLine="7" insertionLength="18" int_docASTNodeCount="38" int_docActiveCodeLength="227" int_docExpressionCount="22" int_docLength="227" length="2" offset="218" startLine="7" timestamp="93526108">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		diff_match_patch]]></insertedText>
  </DocumentChange>
  <Command __id="4545" _type="PasteCommand" date="Sat Aug 24 13:53:23 EDT 2019" timestamp="93526117" />
  <DocumentChange __id="4546" _type="Insert" date="Sat Aug 24 13:53:23 EDT 2019" docASTNodeCount="40" docActiveCodeLength="246" docExpressionCount="23" docLength="246" length="1" offset="236" timestamp="93526797">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4547" _type="InsertStringCommand" date="Sat Aug 24 13:53:23 EDT 2019" timestamp="93526803" timestamp2="93526803">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4548" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 13:53:23 EDT 2019" start_end="START" timestamp="93526807" />
  <Command __id="4549" _type="ShellCommand" date="Sat Aug 24 13:53:28 EDT 2019" timestamp="93531408" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4550" _type="ShellCommand" date="Sat Aug 24 13:53:28 EDT 2019" timestamp="93531655" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4551" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:53:28 EDT 2019" start_end="END" timestamp="93531673" />
  <DocumentChange __id="4552" _type="Insert" date="Sat Aug 24 13:53:28 EDT 2019" docASTNodeCount="42" docActiveCodeLength="250" docExpressionCount="25" docLength="250" length="4" offset="237" timestamp="93531674">
    <text><![CDATA[Diff]]></text>
  </DocumentChange>
  <Command __id="4553" _type="MoveCaretCommand" caretOffset="241" date="Sat Aug 24 13:53:28 EDT 2019" docOffset="241" timestamp="93531771" />
  <Command __id="4554" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:53:29 EDT 2019" start_end="START" timestamp="93532791" />
  <Command __id="4555" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:53:29 EDT 2019" start_end="END" timestamp="93532836" />
  <Command __id="4556" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sat Aug 24 13:53:29 EDT 2019" timestamp="93532838" />
  <DocumentChange __id="4557" _type="Delete" date="Sat Aug 24 13:53:31 EDT 2019" docASTNodeCount="42" docActiveCodeLength="249" docExpressionCount="25" docLength="249" endLine="7" length="1" offset="240" startLine="7" timestamp="93534502">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="4558" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 13:53:31 EDT 2019" timestamp="93534507" />
  <DocumentChange __id="4559" _type="Insert" date="Sat Aug 24 13:53:32 EDT 2019" docASTNodeCount="42" docActiveCodeLength="251" docExpressionCount="25" docLength="251" length="2" offset="240" repeat="2" timestamp="93535516" timestamp2="93536025">
    <text><![CDATA[f ]]></text>
  </DocumentChange>
  <Command __id="4560" _type="InsertStringCommand" date="Sat Aug 24 13:53:32 EDT 2019" repeat="2" timestamp="93535526" timestamp2="93536029">
    <data><![CDATA[f ]]></data>
  </Command>
  <DocumentChange __id="4563" _type="Delete" date="Sat Aug 24 13:53:33 EDT 2019" docASTNodeCount="42" docActiveCodeLength="250" docExpressionCount="25" docLength="250" endLine="7" length="1" offset="241" startLine="7" timestamp="93536622">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4564" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 13:53:33 EDT 2019" timestamp="93536624" />
  <DocumentChange __id="4565" _type="Insert" date="Sat Aug 24 13:53:34 EDT 2019" docASTNodeCount="42" docActiveCodeLength="266" docExpressionCount="25" docLength="266" length="16" offset="241" timestamp="93538012">
    <text><![CDATA[diff_match_patch]]></text>
  </DocumentChange>
  <Command __id="4566" _type="PasteCommand" date="Sat Aug 24 13:53:34 EDT 2019" timestamp="93538016" />
  <DocumentChange __id="4567" _type="Delete" date="Sat Aug 24 13:53:37 EDT 2019" docASTNodeCount="42" docActiveCodeLength="250" docExpressionCount="25" docLength="250" endLine="7" length="16" offset="241" repeat="16" startLine="7" timestamp="93540235" timestamp2="93543129">
    <text><![CDATA[diff_match_patch]]></text>
  </DocumentChange>
  <Command __id="4568" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 13:53:37 EDT 2019" repeat="16" timestamp="93540237" timestamp2="93543130" />
  <Command __id="4599" _type="MoveCaretCommand" caretOffset="163" date="Sat Aug 24 13:53:44 EDT 2019" docOffset="163" timestamp="93547552" />
  <Command __id="4600" _type="SelectTextCommand" caretOffset="171" date="Sat Aug 24 13:53:44 EDT 2019" end="171" start="154" timestamp="93547807" />
  <Command __id="4601" _type="CopyCommand" date="Sat Aug 24 13:53:45 EDT 2019" timestamp="93548363" />
  <Command __id="4602" _type="SelectTextCommand" caretOffset="220" date="Sat Aug 24 13:53:47 EDT 2019" end="241" start="220" timestamp="93550979" />
  <DocumentChange __id="4603" _type="Replace" date="Sat Aug 24 13:53:48 EDT 2019" docASTNodeCount="40" docActiveCodeLength="246" docExpressionCount="23" docLength="246" endLine="7" insertionLength="19" int_docASTNodeCount="38" int_docActiveCodeLength="227" int_docExpressionCount="22" int_docLength="227" length="23" offset="218" startLine="7" timestamp="93551358">
    <deletedText><![CDATA[		diff_match_patch.Diff]]></deletedText>
    <insertedText><![CDATA[		aDiff_match_patch]]></insertedText>
  </DocumentChange>
  <Command __id="4604" _type="PasteCommand" date="Sat Aug 24 13:53:48 EDT 2019" timestamp="93551369" />
  <DocumentChange __id="4605" _type="Insert" date="Sat Aug 24 13:53:49 EDT 2019" docASTNodeCount="40" docActiveCodeLength="247" docExpressionCount="23" docLength="247" length="1" offset="237" timestamp="93552144">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4606" _type="InsertStringCommand" date="Sat Aug 24 13:53:49 EDT 2019" timestamp="93552147" timestamp2="93552147">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4607" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 13:53:49 EDT 2019" start_end="START" timestamp="93552149" />
  <Command __id="4608" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:53:49 EDT 2019" start_end="END" timestamp="93552154" />
  <DocumentChange __id="4609" _type="Delete" date="Sat Aug 24 13:53:50 EDT 2019" docASTNodeCount="40" docActiveCodeLength="246" docExpressionCount="23" docLength="246" endLine="7" length="1" offset="237" startLine="7" timestamp="93554024">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4610" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 13:53:50 EDT 2019" timestamp="93554027" />
  <DocumentChange __id="4611" _type="Insert" date="Sat Aug 24 13:53:51 EDT 2019" docASTNodeCount="40" docActiveCodeLength="247" docExpressionCount="23" docLength="247" length="1" offset="237" timestamp="93554947">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4612" _type="InsertStringCommand" date="Sat Aug 24 13:53:51 EDT 2019" timestamp="93554950" timestamp2="93554950">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4613" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 13:53:51 EDT 2019" start_end="START" timestamp="93554952" />
  <Command __id="4614" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:53:51 EDT 2019" start_end="END" timestamp="93554961" />
  <Command __id="4615" _type="SelectTextCommand" caretOffset="222" date="Sat Aug 24 13:53:56 EDT 2019" end="238" start="222" timestamp="93559103" />
  <Command __id="4616" _type="MoveCaretCommand" caretOffset="143" date="Sat Aug 24 13:53:56 EDT 2019" docOffset="143" timestamp="93559740" />
  <Command __id="4617" _type="SelectTextCommand" caretOffset="153" date="Sat Aug 24 13:53:56 EDT 2019" end="153" start="137" timestamp="93559974" />
  <Command __id="4618" _type="CopyCommand" date="Sat Aug 24 13:53:57 EDT 2019" timestamp="93560625" />
  <Command __id="4619" _type="SelectTextCommand" caretOffset="220" date="Sat Aug 24 13:54:00 EDT 2019" end="238" start="220" timestamp="93563525" />
  <DocumentChange __id="4620" _type="Replace" date="Sat Aug 24 13:54:00 EDT 2019" docASTNodeCount="40" docActiveCodeLength="245" docExpressionCount="23" docLength="245" endLine="7" insertionLength="18" int_docASTNodeCount="38" int_docActiveCodeLength="227" int_docExpressionCount="22" int_docLength="227" length="20" offset="218" startLine="7" timestamp="93563915">
    <deletedText><![CDATA[		aDiff_match_patch.]]></deletedText>
    <insertedText><![CDATA[		diff_match_patch]]></insertedText>
  </DocumentChange>
  <Command __id="4621" _type="PasteCommand" date="Sat Aug 24 13:54:00 EDT 2019" timestamp="93563922" />
  <DocumentChange __id="4622" _type="Insert" date="Sat Aug 24 13:54:01 EDT 2019" docASTNodeCount="40" docActiveCodeLength="246" docExpressionCount="23" docLength="246" length="1" offset="236" timestamp="93564734">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4623" _type="InsertStringCommand" date="Sat Aug 24 13:54:01 EDT 2019" timestamp="93564740" timestamp2="93564740">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4624" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 13:54:01 EDT 2019" start_end="START" timestamp="93564744" />
  <Command __id="4625" _type="ShellCommand" date="Sat Aug 24 13:54:12 EDT 2019" timestamp="93575544" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4626" _type="ShellCommand" date="Sat Aug 24 13:54:12 EDT 2019" timestamp="93575783" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4627" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:54:12 EDT 2019" start_end="END" timestamp="93575801" />
  <DocumentChange __id="4628" _type="Insert" date="Sat Aug 24 13:54:12 EDT 2019" docASTNodeCount="42" docActiveCodeLength="250" docExpressionCount="25" docLength="250" length="4" offset="237" timestamp="93575802">
    <text><![CDATA[Diff]]></text>
  </DocumentChange>
  <Command __id="4629" _type="MoveCaretCommand" caretOffset="241" date="Sat Aug 24 13:54:12 EDT 2019" docOffset="241" timestamp="93575868" />
  <DocumentChange __id="4630" _type="Insert" date="Sat Aug 24 13:54:16 EDT 2019" docASTNodeCount="42" docActiveCodeLength="251" docExpressionCount="25" docLength="251" length="1" offset="241" timestamp="93579265">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="4631" _type="InsertStringCommand" date="Sat Aug 24 13:54:16 EDT 2019" timestamp="93579275" timestamp2="93579275">
    <data><![CDATA[;]]></data>
  </Command>
  <DocumentChange __id="4632" _type="Delete" date="Sat Aug 24 13:54:29 EDT 2019" docASTNodeCount="42" docActiveCodeLength="249" docExpressionCount="25" docLength="249" endLine="7" length="2" offset="240" repeat="2" startLine="7" timestamp="93592102" timestamp2="93592245">
    <text><![CDATA[f;]]></text>
  </DocumentChange>
  <Command __id="4633" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 13:54:29 EDT 2019" repeat="2" timestamp="93592106" timestamp2="93592247" />
  <DocumentChange __id="4636" _type="Insert" date="Sat Aug 24 13:54:30 EDT 2019" docASTNodeCount="45" docActiveCodeLength="262" docExpressionCount="26" docLength="262" length="13" offset="240" repeat="13" timestamp="93593272" timestamp2="93599544">
    <text><![CDATA[f aDiff = new]]></text>
  </DocumentChange>
  <Command __id="4637" _type="InsertStringCommand" date="Sat Aug 24 13:54:30 EDT 2019" repeat="13" timestamp="93593279" timestamp2="93599547">
    <data><![CDATA[f aDiff = new]]></data>
  </Command>
  <DocumentChange __id="4662" _type="Delete" date="Sat Aug 24 13:54:36 EDT 2019" docASTNodeCount="42" docActiveCodeLength="250" docExpressionCount="25" docLength="250" endLine="7" length="12" offset="241" repeat="12" startLine="7" timestamp="93600044" timestamp2="93601868">
    <text><![CDATA[ aDiff = new]]></text>
  </DocumentChange>
  <Command __id="4663" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 13:54:36 EDT 2019" repeat="12" timestamp="93600049" timestamp2="93601871" />
  <DocumentChange __id="4686" _type="Insert" date="Sat Aug 24 13:54:39 EDT 2019" docASTNodeCount="42" docActiveCodeLength="251" docExpressionCount="25" docLength="251" length="1" offset="241" timestamp="93602601">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4687" _type="InsertStringCommand" date="Sat Aug 24 13:54:39 EDT 2019" timestamp="93602603" timestamp2="93602603">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4688" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 13:54:39 EDT 2019" start_end="START" timestamp="93602605" />
  <DocumentChange __id="4689" _type="Delete" date="Sat Aug 24 13:54:40 EDT 2019" docASTNodeCount="42" docActiveCodeLength="250" docExpressionCount="25" docLength="250" endLine="7" length="1" offset="241" startLine="7" timestamp="93604041">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4690" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 13:54:41 EDT 2019" start_end="END" timestamp="93604465" />
  <DocumentChange __id="4691" _type="Replace" date="Sat Aug 24 13:54:41 EDT 2019" docASTNodeCount="42" docActiveCodeLength="251" docExpressionCount="25" docLength="251" endLine="7" insertionLength="5" int_docASTNodeCount="40" int_docActiveCodeLength="246" int_docExpressionCount="23" int_docLength="246" length="4" offset="237" startLine="7" timestamp="93604470">
    <deletedText><![CDATA[Diff]]></deletedText>
    <insertedText><![CDATA[Diff ]]></insertedText>
  </DocumentChange>
  <Command __id="4692" _type="InsertStringCommand" date="Sat Aug 24 13:54:41 EDT 2019" repeat="4" timestamp="93604485" timestamp2="93605331">
    <data><![CDATA[ = a]]></data>
  </Command>
  <DocumentChange __id="4693" _type="Insert" date="Sat Aug 24 13:54:41 EDT 2019" docASTNodeCount="44" docActiveCodeLength="254" docExpressionCount="27" docLength="254" length="3" offset="242" repeat="3" timestamp="93604896" timestamp2="93605329">
    <text><![CDATA[= a]]></text>
  </DocumentChange>
  <Command __id="4699" _type="MoveCaretCommand" caretOffset="233" date="Sat Aug 24 13:54:44 EDT 2019" docOffset="233" timestamp="93607798" />
  <Command __id="4700" _type="SelectTextCommand" caretOffset="236" date="Sat Aug 24 13:54:44 EDT 2019" end="236" start="220" timestamp="93608026" />
  <Command __id="4701" _type="MoveCaretCommand" caretOffset="233" date="Sat Aug 24 13:54:45 EDT 2019" docOffset="233" timestamp="93608525" />
  <Command __id="4702" _type="SelectTextCommand" caretOffset="236" date="Sat Aug 24 13:54:45 EDT 2019" end="236" start="220" timestamp="93608719" />
  <Command __id="4703" _type="SelectTextCommand" caretOffset="247" date="Sat Aug 24 13:54:45 EDT 2019" end="247" start="218" timestamp="93608962" />
  <Command __id="4704" _type="MoveCaretCommand" caretOffset="233" date="Sat Aug 24 13:54:46 EDT 2019" docOffset="233" timestamp="93609501" />
  <Command __id="4705" _type="SelectTextCommand" caretOffset="220" date="Sat Aug 24 13:54:48 EDT 2019" end="241" start="220" timestamp="93611766" />
  <Command __id="4706" _type="CopyCommand" date="Sat Aug 24 13:54:49 EDT 2019" timestamp="93612238" />
  <Command __id="4707" _type="MoveCaretCommand" caretOffset="245" date="Sat Aug 24 13:54:50 EDT 2019" docOffset="245" timestamp="93613597" />
  <DocumentChange __id="4708" _type="Insert" date="Sat Aug 24 13:54:51 EDT 2019" docASTNodeCount="46" docActiveCodeLength="275" docExpressionCount="29" docLength="275" length="21" offset="245" timestamp="93614105">
    <text><![CDATA[diff_match_patch.Diff]]></text>
  </DocumentChange>
  <Command __id="4709" _type="PasteCommand" date="Sat Aug 24 13:54:51 EDT 2019" timestamp="93614111" />
  <Command __id="4710" _type="MoveCaretCommand" caretOffset="245" date="Sat Aug 24 13:54:54 EDT 2019" docOffset="245" timestamp="93617672" />
  <Command __id="4711" _type="MoveCaretCommand" caretOffset="244" date="Sat Aug 24 13:54:55 EDT 2019" docOffset="244" timestamp="93618860" />
  <Command __id="4712" _type="MoveCaretCommand" caretOffset="220" date="Sat Aug 24 13:54:58 EDT 2019" docOffset="220" timestamp="93621934" />
  <Command __id="4713" _type="MoveCaretCommand" caretOffset="245" date="Sat Aug 24 13:55:01 EDT 2019" docOffset="245" timestamp="93624545" />
  <DocumentChange __id="4714" _type="Delete" date="Sat Aug 24 13:55:01 EDT 2019" docASTNodeCount="46" docActiveCodeLength="274" docExpressionCount="29" docLength="274" endLine="7" length="1" offset="244" startLine="7" timestamp="93624919">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <Command __id="4715" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 13:55:01 EDT 2019" timestamp="93624922" />
  <DocumentChange __id="4716" _type="Insert" date="Sat Aug 24 13:55:02 EDT 2019" docASTNodeCount="48" docActiveCodeLength="279" docExpressionCount="30" docLength="279" length="5" offset="244" repeat="5" timestamp="93626018" timestamp2="93627089">
    <text><![CDATA[new (]]></text>
  </DocumentChange>
  <Command __id="4717" _type="InsertStringCommand" date="Sat Aug 24 13:55:02 EDT 2019" repeat="5" timestamp="93626022" timestamp2="93627097">
    <data><![CDATA[new (]]></data>
  </Command>
  <Command __id="4726" _type="MoveCaretCommand" caretOffset="270" date="Sat Aug 24 13:55:05 EDT 2019" docOffset="270" timestamp="93628937" />
  <Command __id="4727" _type="MoveCaretCommand" caretOffset="248" date="Sat Aug 24 13:55:08 EDT 2019" docOffset="248" timestamp="93631398" />
  <Command __id="4728" _type="MoveCaretCommand" caretOffset="249" date="Sat Aug 24 13:55:09 EDT 2019" docOffset="249" timestamp="93632861" />
  <DocumentChange __id="4729" _type="Delete" date="Sat Aug 24 13:55:10 EDT 2019" docASTNodeCount="48" docActiveCodeLength="278" docExpressionCount="30" docLength="278" endLine="7" length="1" offset="248" startLine="7" timestamp="93633236">
    <text><![CDATA[(]]></text>
  </DocumentChange>
  <Command __id="4730" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 13:55:10 EDT 2019" timestamp="93633240" />
  <Command __id="4731" _type="MoveCaretCommand" caretOffset="269" date="Sat Aug 24 13:55:11 EDT 2019" docOffset="269" timestamp="93634963" />
  <DocumentChange __id="4732" _type="Insert" date="Sat Aug 24 13:55:12 EDT 2019" docASTNodeCount="48" docActiveCodeLength="281" docExpressionCount="30" docLength="281" length="3" offset="269" repeat="2" timestamp="93635515" timestamp2="93636310">
    <text><![CDATA[();]]></text>
  </DocumentChange>
  <Command __id="4733" _type="InsertStringCommand" date="Sat Aug 24 13:55:12 EDT 2019" repeat="3" timestamp="93635522" timestamp2="93636313">
    <data><![CDATA[();]]></data>
  </Command>
  <Command __id="4737" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 13:55:15 EDT 2019" timestamp="93638120" />
  <Command __id="4738" _type="MoveCaretCommand" caretOffset="253" date="Sat Aug 24 13:55:16 EDT 2019" docOffset="253" timestamp="93639146" />
  <Command __id="4739" _type="SelectTextCommand" caretOffset="264" date="Sat Aug 24 13:55:16 EDT 2019" end="264" start="248" timestamp="93639360" />
  <Command __id="4740" _type="SelectTextCommand" caretOffset="248" date="Sat Aug 24 13:55:20 EDT 2019" end="269" start="248" timestamp="93643262" />
  <Command __id="4741" _type="CopyCommand" date="Sat Aug 24 13:55:20 EDT 2019" timestamp="93643684" />
  <Command __id="4742" _type="MoveCaretCommand" caretOffset="220" date="Sat Aug 24 13:55:22 EDT 2019" docOffset="220" timestamp="93645479" />
  <DocumentChange __id="4743" _type="Replace" date="Sat Aug 24 13:55:23 EDT 2019" docASTNodeCount="50" docActiveCodeLength="302" docExpressionCount="32" docLength="302" endLine="7" insertionLength="23" int_docASTNodeCount="48" int_docActiveCodeLength="279" int_docExpressionCount="30" int_docLength="279" length="2" offset="218" startLine="7" timestamp="93646114">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		diff_match_patch.Diff]]></insertedText>
  </DocumentChange>
  <Command __id="4744" _type="PasteCommand" date="Sat Aug 24 13:55:23 EDT 2019" timestamp="93646127" />
  <Command __id="4745" _type="PredictionCommand" date="Sat Aug 24 13:55:23 EDT 2019" prediction_type="MakingProgress" timestamp="93646129" />
  <DocumentChange __id="4746" _type="Insert" date="Sat Aug 24 13:55:23 EDT 2019" docASTNodeCount="52" docActiveCodeLength="303" docExpressionCount="31" docLength="303" length="1" offset="241" timestamp="93646512">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="4747" _type="InsertStringCommand" date="Sat Aug 24 13:55:23 EDT 2019" timestamp="93646515" timestamp2="93646515">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="4748" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 13:55:25 EDT 2019" timestamp="93648233" />
  <Command __id="4749" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sat Aug 24 13:55:34 EDT 2019" start_end="START" timestamp="93658065" />
  <Command __id="4750" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.internal.ui.CompilationUnitEditor.ruler.actions/org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction" date="Sat Aug 24 13:55:35 EDT 2019" timestamp="93658098" />
  <Command __id="4751" _type="ShellCommand" date="Sat Aug 24 13:55:37 EDT 2019" timestamp="93660341" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4752" _type="ShellCommand" date="Sat Aug 24 13:55:37 EDT 2019" timestamp="93660589" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4753" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sat Aug 24 13:55:37 EDT 2019" start_end="END" timestamp="93660611" />
  <DocumentChange __id="4754" _type="Insert" date="Sat Aug 24 13:55:37 EDT 2019" docASTNodeCount="54" docActiveCodeLength="313" docExpressionCount="33" docLength="313" length="10" offset="292" repeat="3" timestamp="93660623" timestamp2="93660625">
    <text><![CDATA[null, null]]></text>
  </DocumentChange>
  <Command __id="4757" _type="SelectTextCommand" caretOffset="296" date="Sat Aug 24 13:55:37 EDT 2019" end="296" start="292" timestamp="93660687" />
  <Command __id="4758" _type="ShellCommand" date="Sat Aug 24 13:55:54 EDT 2019" timestamp="93677532" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4759" _type="ShellCommand" date="Sat Aug 24 13:55:58 EDT 2019" timestamp="93681960" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4760" _type="ShellCommand" date="Sat Aug 24 13:56:02 EDT 2019" timestamp="93685998" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4761" _type="ShellCommand" date="Sat Aug 24 14:07:26 EDT 2019" timestamp="94369114" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4762" _type="SelectTextCommand" caretOffset="155" date="Sat Aug 24 14:07:33 EDT 2019" end="171" start="155" timestamp="94376334" />
  <DocumentChange __id="4763" _type="Replace" date="Sat Aug 24 14:07:34 EDT 2019" docASTNodeCount="54" docActiveCodeLength="298" docExpressionCount="33" docLength="298" endLine="5" insertionLength="1" int_docASTNodeCount="54" int_docActiveCodeLength="297" int_docExpressionCount="33" int_docLength="297" length="16" offset="155" startLine="5" timestamp="94377230">
    <deletedText><![CDATA[Diff_match_patch]]></deletedText>
    <insertedText><![CDATA[d]]></insertedText>
  </DocumentChange>
  <Command __id="4764" _type="InsertStringCommand" date="Sat Aug 24 14:07:34 EDT 2019" repeat="6" timestamp="94377236" timestamp2="94378015">
    <data><![CDATA[differ]]></data>
  </Command>
  <DocumentChange __id="4765" _type="Insert" date="Sat Aug 24 14:07:34 EDT 2019" docASTNodeCount="54" docActiveCodeLength="303" docExpressionCount="33" docLength="303" length="5" offset="156" repeat="5" timestamp="94377415" timestamp2="94378011">
    <text><![CDATA[iffer]]></text>
  </DocumentChange>
  <Command __id="4775" _type="MoveCaretCommand" caretOffset="156" date="Sat Aug 24 14:07:37 EDT 2019" docOffset="156" timestamp="94380912" />
  <DocumentChange __id="4776" _type="Delete" date="Sat Aug 24 14:07:38 EDT 2019" docASTNodeCount="54" docActiveCodeLength="301" docExpressionCount="33" docLength="301" endLine="5" length="2" offset="154" repeat="2" startLine="5" timestamp="94381310" timestamp2="94381465">
    <text><![CDATA[ad]]></text>
  </DocumentChange>
  <Command __id="4777" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:07:38 EDT 2019" repeat="2" timestamp="94381315" timestamp2="94381469" />
  <DocumentChange __id="4780" _type="Insert" date="Sat Aug 24 14:07:39 EDT 2019" docASTNodeCount="54" docActiveCodeLength="302" docExpressionCount="33" docLength="302" length="1" offset="154" timestamp="94382749">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="4781" _type="InsertStringCommand" date="Sat Aug 24 14:07:39 EDT 2019" timestamp="94382755" timestamp2="94382755">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="4782" _type="MoveCaretCommand" caretOffset="161" date="Sat Aug 24 14:07:41 EDT 2019" docOffset="161" timestamp="94385065" />
  <Command __id="4783" _type="MoveCaretCommand" caretOffset="160" date="Sat Aug 24 14:07:42 EDT 2019" docOffset="160" timestamp="94385715" />
  <DocumentChange __id="4784" _type="Insert" date="Sat Aug 24 14:07:42 EDT 2019" docASTNodeCount="54" docActiveCodeLength="305" docExpressionCount="33" docLength="305" length="3" offset="160" repeat="3" timestamp="94385939" timestamp2="94386697">
    <text><![CDATA[ = ]]></text>
  </DocumentChange>
  <Command __id="4785" _type="InsertStringCommand" date="Sat Aug 24 14:07:42 EDT 2019" repeat="3" timestamp="94385946" timestamp2="94386704">
    <data><![CDATA[ = ]]></data>
  </Command>
  <Command __id="4790" _type="ShellCommand" date="Sat Aug 24 14:07:48 EDT 2019" timestamp="94391518" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4791" _type="ShellCommand" date="Sat Aug 24 14:08:01 EDT 2019" timestamp="94404762" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="4792" _type="Insert" date="Sat Aug 24 14:08:03 EDT 2019" docASTNodeCount="54" docActiveCodeLength="314" docExpressionCount="33" docLength="314" length="9" offset="163" repeat="9" timestamp="94406671" timestamp2="94409327">
    <text><![CDATA[new diff_]]></text>
  </DocumentChange>
  <Command __id="4793" _type="InsertStringCommand" date="Sat Aug 24 14:08:03 EDT 2019" repeat="9" timestamp="94406674" timestamp2="94409337">
    <data><![CDATA[new diff_]]></data>
  </Command>
  <Command __id="4810" _type="EclipseCommand" commandID="org.eclipse.ui.window.maximizePart" date="Sat Aug 24 14:08:07 EDT 2019" timestamp="94410917" />
  <DocumentChange __id="4811" _type="Insert" date="Sat Aug 24 14:08:28 EDT 2019" docASTNodeCount="54" docActiveCodeLength="317" docExpressionCount="33" docLength="317" length="3" offset="172" repeat="3" timestamp="94431080" timestamp2="94431493">
    <text><![CDATA[mat]]></text>
  </DocumentChange>
  <Command __id="4812" _type="InsertStringCommand" date="Sat Aug 24 14:08:28 EDT 2019" repeat="3" timestamp="94431085" timestamp2="94431500">
    <data><![CDATA[mat]]></data>
  </Command>
  <Command __id="4817" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:08:29 EDT 2019" start_end="START" timestamp="94432244" />
  <Command __id="4818" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sat Aug 24 14:08:29 EDT 2019" timestamp="94432510" />
  <Command __id="4819" _type="ShellCommand" date="Sat Aug 24 14:08:31 EDT 2019" timestamp="94434353" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4820" _type="ShellCommand" date="Sat Aug 24 14:08:31 EDT 2019" timestamp="94434564" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4821" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:08:31 EDT 2019" start_end="END" timestamp="94434581" />
  <DocumentChange __id="4822" _type="Replace" date="Sat Aug 24 14:08:31 EDT 2019" docASTNodeCount="54" docActiveCodeLength="325" docExpressionCount="33" docLength="325" endLine="5" insertionLength="16" int_docASTNodeCount="54" int_docActiveCodeLength="309" int_docExpressionCount="33" int_docLength="309" length="8" offset="167" startLine="5" timestamp="94434583">
    <deletedText><![CDATA[diff_mat]]></deletedText>
    <insertedText><![CDATA[diff_match_patch]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="4823" _type="Insert" date="Sat Aug 24 14:08:31 EDT 2019" docASTNodeCount="57" docActiveCodeLength="327" docExpressionCount="35" docLength="327" length="2" offset="183" timestamp="94434588">
    <text><![CDATA[()]]></text>
  </DocumentChange>
  <Command __id="4824" _type="MoveCaretCommand" caretOffset="185" date="Sat Aug 24 14:08:31 EDT 2019" docOffset="185" timestamp="94434606" />
  <Command __id="4825" _type="SelectTextCommand" caretOffset="318" date="Sat Aug 24 14:09:45 EDT 2019" end="318" start="234" timestamp="94508860" />
  <DocumentChange __id="4826" _type="Replace" date="Sat Aug 24 14:09:46 EDT 2019" docASTNodeCount="43" docActiveCodeLength="244" docExpressionCount="25" docLength="244" endLine="7" insertionLength="1" int_docASTNodeCount="41" int_docActiveCodeLength="243" int_docExpressionCount="24" int_docLength="243" length="84" offset="234" startLine="7" timestamp="94510076">
    <deletedText><![CDATA[diff_match_patch.Diff diff_match_patch.Diff = new diff_match_patch.Diff(null, null);]]></deletedText>
    <insertedText><![CDATA[d]]></insertedText>
  </DocumentChange>
  <Command __id="4827" _type="InsertStringCommand" date="Sat Aug 24 14:09:47 EDT 2019" repeat="7" timestamp="94510086" timestamp2="94511501">
    <data><![CDATA[differ.]]></data>
  </Command>
  <DocumentChange __id="4828" _type="Insert" date="Sat Aug 24 14:09:47 EDT 2019" docASTNodeCount="43" docActiveCodeLength="250" docExpressionCount="25" docLength="250" length="6" offset="235" repeat="6" timestamp="94510189" timestamp2="94511498">
    <text><![CDATA[iffer.]]></text>
  </DocumentChange>
  <Command __id="4840" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 14:09:48 EDT 2019" start_end="START" timestamp="94511504" />
  <Command __id="4841" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:09:48 EDT 2019" start_end="END" timestamp="94511518" />
  <DocumentChange __id="4842" _type="Delete" date="Sat Aug 24 14:09:50 EDT 2019" docASTNodeCount="43" docActiveCodeLength="249" docExpressionCount="25" docLength="249" endLine="7" length="1" offset="240" startLine="7" timestamp="94513278">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4843" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:09:50 EDT 2019" timestamp="94513282" />
  <DocumentChange __id="4844" _type="Insert" date="Sat Aug 24 14:09:51 EDT 2019" docASTNodeCount="43" docActiveCodeLength="250" docExpressionCount="25" docLength="250" length="1" offset="240" timestamp="94514862">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4845" _type="InsertStringCommand" date="Sat Aug 24 14:09:51 EDT 2019" timestamp="94514868" timestamp2="94514868">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4846" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 14:09:51 EDT 2019" start_end="START" timestamp="94514872" />
  <Command __id="4847" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:09:51 EDT 2019" start_end="END" timestamp="94514884" />
  <Command __id="4848" _type="ShellCommand" date="Sat Aug 24 14:09:54 EDT 2019" timestamp="94517374" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4849" _type="ShellCommand" date="Sat Aug 24 14:10:14 EDT 2019" timestamp="94537446" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="4850" _type="Delete" date="Sat Aug 24 14:10:16 EDT 2019" docASTNodeCount="43" docActiveCodeLength="249" docExpressionCount="25" docLength="249" endLine="7" length="1" offset="240" startLine="7" timestamp="94539459">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4851" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:10:16 EDT 2019" timestamp="94539460" />
  <Command __id="4873" _type="FileOpenCommand" date="Sat Aug 24 14:25:36 EDT 2019" docASTNodeCount="9644" docActiveCodeLength="63300" docExpressionCount="6866" docLength="91629" projectName="diff-match-patch" timestamp="95459957">
    <filePath><![CDATA[D:\dewan_backup\Java\diff-match-patch\java\src\name\fraser\neil\plaintext\diff_match_patch.java]]></filePath>
    <snapshot><![CDATA[/*
 * Diff Match and Patch
 * Copyright 2018 The diff-match-patch Authors.
 * https://github.com/google/diff-match-patch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package name.fraser.neil.plaintext;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * Functions for diff, match and patch.
 * Computes the difference between two texts to create a patch.
 * Applies the patch onto another text, allowing for errors.
 *
 * @author fraser@google.com (Neil Fraser)
 */

/**
 * Class containing the diff, match and patch methods.
 * Also contains the behaviour settings.
 */
public class diff_match_patch {

  // Defaults.
  // Set these on your diff_match_patch instance to override the defaults.

  /**
   * Number of seconds to map a diff before giving up (0 for infinity).
   */
  public float Diff_Timeout = 1.0f;
  /**
   * Cost of an empty edit operation in terms of edit characters.
   */
  public short Diff_EditCost = 4;
  /**
   * At what point is no match declared (0.0 = perfection, 1.0 = very loose).
   */
  public float Match_Threshold = 0.5f;
  /**
   * How far to search for a match (0 = exact location, 1000+ = broad match).
   * A match this many characters away from the expected location will add
   * 1.0 to the score (0.0 is a perfect match).
   */
  public int Match_Distance = 1000;
  /**
   * When deleting a large block of text (over ~64 characters), how close do
   * the contents have to be to match the expected contents. (0.0 = perfection,
   * 1.0 = very loose).  Note that Match_Threshold controls how closely the
   * end points of a delete need to match.
   */
  public float Patch_DeleteThreshold = 0.5f;
  /**
   * Chunk size for context length.
   */
  public short Patch_Margin = 4;

  /**
   * The number of bits in an int.
   */
  private short Match_MaxBits = 32;

  /**
   * Internal class for returning results from diff_linesToChars().
   * Other less paranoid languages just use a three-element array.
   */
  protected static class LinesToCharsResult {
    protected String chars1;
    protected String chars2;
    protected List<String> lineArray;

    protected LinesToCharsResult(String chars1, String chars2,
        List<String> lineArray) {
      this.chars1 = chars1;
      this.chars2 = chars2;
      this.lineArray = lineArray;
    }
  }


  //  DIFF FUNCTIONS


  /**
   * The data structure representing a diff is a Linked list of Diff objects:
   * {Diff(Operation.DELETE, "Hello"), Diff(Operation.INSERT, "Goodbye"),
   *  Diff(Operation.EQUAL, " world.")}
   * which means: delete "Hello", add "Goodbye" and keep " world."
   */
  public enum Operation {
    DELETE, INSERT, EQUAL
  }

  /**
   * Find the differences between two texts.
   * Run a faster, slightly less optimal diff.
   * This method allows the 'checklines' of diff_main() to be optional.
   * Most of the time checklines is wanted, so default to true.
   * @param text1 Old string to be diffed.
   * @param text2 New string to be diffed.
   * @return Linked List of Diff objects.
   */
  public LinkedList<Diff> diff_main(String text1, String text2) {
    return diff_main(text1, text2, true);
  }

  /**
   * Find the differences between two texts.
   * @param text1 Old string to be diffed.
   * @param text2 New string to be diffed.
   * @param checklines Speedup flag.  If false, then don't run a
   *     line-level diff first to identify the changed areas.
   *     If true, then run a faster slightly less optimal diff.
   * @return Linked List of Diff objects.
   */
  public LinkedList<Diff> diff_main(String text1, String text2,
                                    boolean checklines) {
    // Set a deadline by which time the diff must be complete.
    long deadline;
    if (Diff_Timeout <= 0) {
      deadline = Long.MAX_VALUE;
    } else {
      deadline = System.currentTimeMillis() + (long) (Diff_Timeout * 1000);
    }
    return diff_main(text1, text2, checklines, deadline);
  }

  /**
   * Find the differences between two texts.  Simplifies the problem by
   * stripping any common prefix or suffix off the texts before diffing.
   * @param text1 Old string to be diffed.
   * @param text2 New string to be diffed.
   * @param checklines Speedup flag.  If false, then don't run a
   *     line-level diff first to identify the changed areas.
   *     If true, then run a faster slightly less optimal diff.
   * @param deadline Time when the diff should be complete by.  Used
   *     internally for recursive calls.  Users should set DiffTimeout instead.
   * @return Linked List of Diff objects.
   */
  private LinkedList<Diff> diff_main(String text1, String text2,
                                     boolean checklines, long deadline) {
    // Check for null inputs.
    if (text1 == null || text2 == null) {
      throw new IllegalArgumentException("Null inputs. (diff_main)");
    }

    // Check for equality (speedup).
    LinkedList<Diff> diffs;
    if (text1.equals(text2)) {
      diffs = new LinkedList<Diff>();
      if (text1.length() != 0) {
        diffs.add(new Diff(Operation.EQUAL, text1));
      }
      return diffs;
    }

    // Trim off common prefix (speedup).
    int commonlength = diff_commonPrefix(text1, text2);
    String commonprefix = text1.substring(0, commonlength);
    text1 = text1.substring(commonlength);
    text2 = text2.substring(commonlength);

    // Trim off common suffix (speedup).
    commonlength = diff_commonSuffix(text1, text2);
    String commonsuffix = text1.substring(text1.length() - commonlength);
    text1 = text1.substring(0, text1.length() - commonlength);
    text2 = text2.substring(0, text2.length() - commonlength);

    // Compute the diff on the middle block.
    diffs = diff_compute(text1, text2, checklines, deadline);

    // Restore the prefix and suffix.
    if (commonprefix.length() != 0) {
      diffs.addFirst(new Diff(Operation.EQUAL, commonprefix));
    }
    if (commonsuffix.length() != 0) {
      diffs.addLast(new Diff(Operation.EQUAL, commonsuffix));
    }

    diff_cleanupMerge(diffs);
    return diffs;
  }

  /**
   * Find the differences between two texts.  Assumes that the texts do not
   * have any common prefix or suffix.
   * @param text1 Old string to be diffed.
   * @param text2 New string to be diffed.
   * @param checklines Speedup flag.  If false, then don't run a
   *     line-level diff first to identify the changed areas.
   *     If true, then run a faster slightly less optimal diff.
   * @param deadline Time when the diff should be complete by.
   * @return Linked List of Diff objects.
   */
  private LinkedList<Diff> diff_compute(String text1, String text2,
                                        boolean checklines, long deadline) {
    LinkedList<Diff> diffs = new LinkedList<Diff>();

    if (text1.length() == 0) {
      // Just add some text (speedup).
      diffs.add(new Diff(Operation.INSERT, text2));
      return diffs;
    }

    if (text2.length() == 0) {
      // Just delete some text (speedup).
      diffs.add(new Diff(Operation.DELETE, text1));
      return diffs;
    }

    String longtext = text1.length() > text2.length() ? text1 : text2;
    String shorttext = text1.length() > text2.length() ? text2 : text1;
    int i = longtext.indexOf(shorttext);
    if (i != -1) {
      // Shorter text is inside the longer text (speedup).
      Operation op = (text1.length() > text2.length()) ?
                     Operation.DELETE : Operation.INSERT;
      diffs.add(new Diff(op, longtext.substring(0, i)));
      diffs.add(new Diff(Operation.EQUAL, shorttext));
      diffs.add(new Diff(op, longtext.substring(i + shorttext.length())));
      return diffs;
    }

    if (shorttext.length() == 1) {
      // Single character string.
      // After the previous speedup, the character can't be an equality.
      diffs.add(new Diff(Operation.DELETE, text1));
      diffs.add(new Diff(Operation.INSERT, text2));
      return diffs;
    }

    // Check to see if the problem can be split in two.
    String[] hm = diff_halfMatch(text1, text2);
    if (hm != null) {
      // A half-match was found, sort out the return data.
      String text1_a = hm[0];
      String text1_b = hm[1];
      String text2_a = hm[2];
      String text2_b = hm[3];
      String mid_common = hm[4];
      // Send both pairs off for separate processing.
      LinkedList<Diff> diffs_a = diff_main(text1_a, text2_a,
                                           checklines, deadline);
      LinkedList<Diff> diffs_b = diff_main(text1_b, text2_b,
                                           checklines, deadline);
      // Merge the results.
      diffs = diffs_a;
      diffs.add(new Diff(Operation.EQUAL, mid_common));
      diffs.addAll(diffs_b);
      return diffs;
    }

    if (checklines && text1.length() > 100 && text2.length() > 100) {
      return diff_lineMode(text1, text2, deadline);
    }

    return diff_bisect(text1, text2, deadline);
  }

  /**
   * Do a quick line-level diff on both strings, then rediff the parts for
   * greater accuracy.
   * This speedup can produce non-minimal diffs.
   * @param text1 Old string to be diffed.
   * @param text2 New string to be diffed.
   * @param deadline Time when the diff should be complete by.
   * @return Linked List of Diff objects.
   */
  private LinkedList<Diff> diff_lineMode(String text1, String text2,
                                         long deadline) {
    // Scan the text on a line-by-line basis first.
    LinesToCharsResult a = diff_linesToChars(text1, text2);
    text1 = a.chars1;
    text2 = a.chars2;
    List<String> linearray = a.lineArray;

    LinkedList<Diff> diffs = diff_main(text1, text2, false, deadline);

    // Convert the diff back to original text.
    diff_charsToLines(diffs, linearray);
    // Eliminate freak matches (e.g. blank lines)
    diff_cleanupSemantic(diffs);

    // Rediff any replacement blocks, this time character-by-character.
    // Add a dummy entry at the end.
    diffs.add(new Diff(Operation.EQUAL, ""));
    int count_delete = 0;
    int count_insert = 0;
    String text_delete = "";
    String text_insert = "";
    ListIterator<Diff> pointer = diffs.listIterator();
    Diff thisDiff = pointer.next();
    while (thisDiff != null) {
      switch (thisDiff.operation) {
      case INSERT:
        count_insert++;
        text_insert += thisDiff.text;
        break;
      case DELETE:
        count_delete++;
        text_delete += thisDiff.text;
        break;
      case EQUAL:
        // Upon reaching an equality, check for prior redundancies.
        if (count_delete >= 1 && count_insert >= 1) {
          // Delete the offending records and add the merged ones.
          pointer.previous();
          for (int j = 0; j < count_delete + count_insert; j++) {
            pointer.previous();
            pointer.remove();
          }
          for (Diff subDiff : diff_main(text_delete, text_insert, false,
              deadline)) {
            pointer.add(subDiff);
          }
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = "";
        text_insert = "";
        break;
      }
      thisDiff = pointer.hasNext() ? pointer.next() : null;
    }
    diffs.removeLast();  // Remove the dummy entry at the end.

    return diffs;
  }

  /**
   * Find the 'middle snake' of a diff, split the problem in two
   * and return the recursively constructed diff.
   * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
   * @param text1 Old string to be diffed.
   * @param text2 New string to be diffed.
   * @param deadline Time at which to bail if not yet complete.
   * @return LinkedList of Diff objects.
   */
  protected LinkedList<Diff> diff_bisect(String text1, String text2,
      long deadline) {
    // Cache the text lengths to prevent multiple calls.
    int text1_length = text1.length();
    int text2_length = text2.length();
    int max_d = (text1_length + text2_length + 1) / 2;
    int v_offset = max_d;
    int v_length = 2 * max_d;
    int[] v1 = new int[v_length];
    int[] v2 = new int[v_length];
    for (int x = 0; x < v_length; x++) {
      v1[x] = -1;
      v2[x] = -1;
    }
    v1[v_offset + 1] = 0;
    v2[v_offset + 1] = 0;
    int delta = text1_length - text2_length;
    // If the total number of characters is odd, then the front path will
    // collide with the reverse path.
    boolean front = (delta % 2 != 0);
    // Offsets for start and end of k loop.
    // Prevents mapping of space beyond the grid.
    int k1start = 0;
    int k1end = 0;
    int k2start = 0;
    int k2end = 0;
    for (int d = 0; d < max_d; d++) {
      // Bail out if deadline is reached.
      if (System.currentTimeMillis() > deadline) {
        break;
      }

      // Walk the front path one step.
      for (int k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
        int k1_offset = v_offset + k1;
        int x1;
        if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {
          x1 = v1[k1_offset + 1];
        } else {
          x1 = v1[k1_offset - 1] + 1;
        }
        int y1 = x1 - k1;
        while (x1 < text1_length && y1 < text2_length
               && text1.charAt(x1) == text2.charAt(y1)) {
          x1++;
          y1++;
        }
        v1[k1_offset] = x1;
        if (x1 > text1_length) {
          // Ran off the right of the graph.
          k1end += 2;
        } else if (y1 > text2_length) {
          // Ran off the bottom of the graph.
          k1start += 2;
        } else if (front) {
          int k2_offset = v_offset + delta - k1;
          if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
            // Mirror x2 onto top-left coordinate system.
            int x2 = text1_length - v2[k2_offset];
            if (x1 >= x2) {
              // Overlap detected.
              return diff_bisectSplit(text1, text2, x1, y1, deadline);
            }
          }
        }
      }

      // Walk the reverse path one step.
      for (int k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
        int k2_offset = v_offset + k2;
        int x2;
        if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {
          x2 = v2[k2_offset + 1];
        } else {
          x2 = v2[k2_offset - 1] + 1;
        }
        int y2 = x2 - k2;
        while (x2 < text1_length && y2 < text2_length
               && text1.charAt(text1_length - x2 - 1)
               == text2.charAt(text2_length - y2 - 1)) {
          x2++;
          y2++;
        }
        v2[k2_offset] = x2;
        if (x2 > text1_length) {
          // Ran off the left of the graph.
          k2end += 2;
        } else if (y2 > text2_length) {
          // Ran off the top of the graph.
          k2start += 2;
        } else if (!front) {
          int k1_offset = v_offset + delta - k2;
          if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
            int x1 = v1[k1_offset];
            int y1 = v_offset + x1 - k1_offset;
            // Mirror x2 onto top-left coordinate system.
            x2 = text1_length - x2;
            if (x1 >= x2) {
              // Overlap detected.
              return diff_bisectSplit(text1, text2, x1, y1, deadline);
            }
          }
        }
      }
    }
    // Diff took too long and hit the deadline or
    // number of diffs equals number of characters, no commonality at all.
    LinkedList<Diff> diffs = new LinkedList<Diff>();
    diffs.add(new Diff(Operation.DELETE, text1));
    diffs.add(new Diff(Operation.INSERT, text2));
    return diffs;
  }

  /**
   * Given the location of the 'middle snake', split the diff in two parts
   * and recurse.
   * @param text1 Old string to be diffed.
   * @param text2 New string to be diffed.
   * @param x Index of split point in text1.
   * @param y Index of split point in text2.
   * @param deadline Time at which to bail if not yet complete.
   * @return LinkedList of Diff objects.
   */
  private LinkedList<Diff> diff_bisectSplit(String text1, String text2,
                                            int x, int y, long deadline) {
    String text1a = text1.substring(0, x);
    String text2a = text2.substring(0, y);
    String text1b = text1.substring(x);
    String text2b = text2.substring(y);

    // Compute both diffs serially.
    LinkedList<Diff> diffs = diff_main(text1a, text2a, false, deadline);
    LinkedList<Diff> diffsb = diff_main(text1b, text2b, false, deadline);

    diffs.addAll(diffsb);
    return diffs;
  }

  /**
   * Split two texts into a list of strings.  Reduce the texts to a string of
   * hashes where each Unicode character represents one line.
   * @param text1 First string.
   * @param text2 Second string.
   * @return An object containing the encoded text1, the encoded text2 and
   *     the List of unique strings.  The zeroth element of the List of
   *     unique strings is intentionally blank.
   */
  protected LinesToCharsResult diff_linesToChars(String text1, String text2) {
    List<String> lineArray = new ArrayList<String>();
    Map<String, Integer> lineHash = new HashMap<String, Integer>();
    // e.g. linearray[4] == "Hello\n"
    // e.g. linehash.get("Hello\n") == 4

    // "\x00" is a valid character, but various debuggers don't like it.
    // So we'll insert a junk entry to avoid generating a null character.
    lineArray.add("");

    // Allocate 2/3rds of the space for text1, the rest for text2.
    String chars1 = diff_linesToCharsMunge(text1, lineArray, lineHash, 40000);
    String chars2 = diff_linesToCharsMunge(text2, lineArray, lineHash, 65535);
    return new LinesToCharsResult(chars1, chars2, lineArray);
  }

  /**
   * Split a text into a list of strings.  Reduce the texts to a string of
   * hashes where each Unicode character represents one line.
   * @param text String to encode.
   * @param lineArray List of unique strings.
   * @param lineHash Map of strings to indices.
   * @param maxLines Maximum length of lineArray.
   * @return Encoded string.
   */
  private String diff_linesToCharsMunge(String text, List<String> lineArray,
      Map<String, Integer> lineHash, int maxLines) {
    int lineStart = 0;
    int lineEnd = -1;
    String line;
    StringBuilder chars = new StringBuilder();
    // Walk the text, pulling out a substring for each line.
    // text.split('\n') would would temporarily double our memory footprint.
    // Modifying text would create many large strings to garbage collect.
    while (lineEnd < text.length() - 1) {
      lineEnd = text.indexOf('\n', lineStart);
      if (lineEnd == -1) {
        lineEnd = text.length() - 1;
      }
      line = text.substring(lineStart, lineEnd + 1);

      if (lineHash.containsKey(line)) {
        chars.append(String.valueOf((char) (int) lineHash.get(line)));
      } else {
        if (lineArray.size() == maxLines) {
          // Bail out at 65535 because
          // String.valueOf((char) 65536).equals(String.valueOf(((char) 0)))
          line = text.substring(lineStart);
          lineEnd = text.length();
        }
        lineArray.add(line);
        lineHash.put(line, lineArray.size() - 1);
        chars.append(String.valueOf((char) (lineArray.size() - 1)));
      }
      lineStart = lineEnd + 1;
    }
    return chars.toString();
  }

  /**
   * Rehydrate the text in a diff from a string of line hashes to real lines of
   * text.
   * @param diffs List of Diff objects.
   * @param lineArray List of unique strings.
   */
  protected void diff_charsToLines(List<Diff> diffs,
                                  List<String> lineArray) {
    StringBuilder text;
    for (Diff diff : diffs) {
      text = new StringBuilder();
      for (int j = 0; j < diff.text.length(); j++) {
        text.append(lineArray.get(diff.text.charAt(j)));
      }
      diff.text = text.toString();
    }
  }

  /**
   * Determine the common prefix of two strings
   * @param text1 First string.
   * @param text2 Second string.
   * @return The number of characters common to the start of each string.
   */
  public int diff_commonPrefix(String text1, String text2) {
    // Performance analysis: https://neil.fraser.name/news/2007/10/09/
    int n = Math.min(text1.length(), text2.length());
    for (int i = 0; i < n; i++) {
      if (text1.charAt(i) != text2.charAt(i)) {
        return i;
      }
    }
    return n;
  }

  /**
   * Determine the common suffix of two strings
   * @param text1 First string.
   * @param text2 Second string.
   * @return The number of characters common to the end of each string.
   */
  public int diff_commonSuffix(String text1, String text2) {
    // Performance analysis: https://neil.fraser.name/news/2007/10/09/
    int text1_length = text1.length();
    int text2_length = text2.length();
    int n = Math.min(text1_length, text2_length);
    for (int i = 1; i <= n; i++) {
      if (text1.charAt(text1_length - i) != text2.charAt(text2_length - i)) {
        return i - 1;
      }
    }
    return n;
  }

  /**
   * Determine if the suffix of one string is the prefix of another.
   * @param text1 First string.
   * @param text2 Second string.
   * @return The number of characters common to the end of the first
   *     string and the start of the second string.
   */
  protected int diff_commonOverlap(String text1, String text2) {
    // Cache the text lengths to prevent multiple calls.
    int text1_length = text1.length();
    int text2_length = text2.length();
    // Eliminate the null case.
    if (text1_length == 0 || text2_length == 0) {
      return 0;
    }
    // Truncate the longer string.
    if (text1_length > text2_length) {
      text1 = text1.substring(text1_length - text2_length);
    } else if (text1_length < text2_length) {
      text2 = text2.substring(0, text1_length);
    }
    int text_length = Math.min(text1_length, text2_length);
    // Quick check for the worst case.
    if (text1.equals(text2)) {
      return text_length;
    }

    // Start by looking for a single character match
    // and increase length until no match is found.
    // Performance analysis: https://neil.fraser.name/news/2010/11/04/
    int best = 0;
    int length = 1;
    while (true) {
      String pattern = text1.substring(text_length - length);
      int found = text2.indexOf(pattern);
      if (found == -1) {
        return best;
      }
      length += found;
      if (found == 0 || text1.substring(text_length - length).equals(
          text2.substring(0, length))) {
        best = length;
        length++;
      }
    }
  }

  /**
   * Do the two texts share a substring which is at least half the length of
   * the longer text?
   * This speedup can produce non-minimal diffs.
   * @param text1 First string.
   * @param text2 Second string.
   * @return Five element String array, containing the prefix of text1, the
   *     suffix of text1, the prefix of text2, the suffix of text2 and the
   *     common middle.  Or null if there was no match.
   */
  protected String[] diff_halfMatch(String text1, String text2) {
    if (Diff_Timeout <= 0) {
      // Don't risk returning a non-optimal diff if we have unlimited time.
      return null;
    }
    String longtext = text1.length() > text2.length() ? text1 : text2;
    String shorttext = text1.length() > text2.length() ? text2 : text1;
    if (longtext.length() < 4 || shorttext.length() * 2 < longtext.length()) {
      return null;  // Pointless.
    }

    // First check if the second quarter is the seed for a half-match.
    String[] hm1 = diff_halfMatchI(longtext, shorttext,
                                   (longtext.length() + 3) / 4);
    // Check again based on the third quarter.
    String[] hm2 = diff_halfMatchI(longtext, shorttext,
                                   (longtext.length() + 1) / 2);
    String[] hm;
    if (hm1 == null && hm2 == null) {
      return null;
    } else if (hm2 == null) {
      hm = hm1;
    } else if (hm1 == null) {
      hm = hm2;
    } else {
      // Both matched.  Select the longest.
      hm = hm1[4].length() > hm2[4].length() ? hm1 : hm2;
    }

    // A half-match was found, sort out the return data.
    if (text1.length() > text2.length()) {
      return hm;
      //return new String[]{hm[0], hm[1], hm[2], hm[3], hm[4]};
    } else {
      return new String[]{hm[2], hm[3], hm[0], hm[1], hm[4]};
    }
  }

  /**
   * Does a substring of shorttext exist within longtext such that the
   * substring is at least half the length of longtext?
   * @param longtext Longer string.
   * @param shorttext Shorter string.
   * @param i Start index of quarter length substring within longtext.
   * @return Five element String array, containing the prefix of longtext, the
   *     suffix of longtext, the prefix of shorttext, the suffix of shorttext
   *     and the common middle.  Or null if there was no match.
   */
  private String[] diff_halfMatchI(String longtext, String shorttext, int i) {
    // Start with a 1/4 length substring at position i as a seed.
    String seed = longtext.substring(i, i + longtext.length() / 4);
    int j = -1;
    String best_common = "";
    String best_longtext_a = "", best_longtext_b = "";
    String best_shorttext_a = "", best_shorttext_b = "";
    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
      int prefixLength = diff_commonPrefix(longtext.substring(i),
                                           shorttext.substring(j));
      int suffixLength = diff_commonSuffix(longtext.substring(0, i),
                                           shorttext.substring(0, j));
      if (best_common.length() < suffixLength + prefixLength) {
        best_common = shorttext.substring(j - suffixLength, j)
            + shorttext.substring(j, j + prefixLength);
        best_longtext_a = longtext.substring(0, i - suffixLength);
        best_longtext_b = longtext.substring(i + prefixLength);
        best_shorttext_a = shorttext.substring(0, j - suffixLength);
        best_shorttext_b = shorttext.substring(j + prefixLength);
      }
    }
    if (best_common.length() * 2 >= longtext.length()) {
      return new String[]{best_longtext_a, best_longtext_b,
                          best_shorttext_a, best_shorttext_b, best_common};
    } else {
      return null;
    }
  }

  /**
   * Reduce the number of edits by eliminating semantically trivial equalities.
   * @param diffs LinkedList of Diff objects.
   */
  public void diff_cleanupSemantic(LinkedList<Diff> diffs) {
    if (diffs.isEmpty()) {
      return;
    }
    boolean changes = false;
    Deque<Diff> equalities = new ArrayDeque<Diff>();  // Double-ended queue of qualities.
    String lastEquality = null; // Always equal to equalities.peek().text
    ListIterator<Diff> pointer = diffs.listIterator();
    // Number of characters that changed prior to the equality.
    int length_insertions1 = 0;
    int length_deletions1 = 0;
    // Number of characters that changed after the equality.
    int length_insertions2 = 0;
    int length_deletions2 = 0;
    Diff thisDiff = pointer.next();
    while (thisDiff != null) {
      if (thisDiff.operation == Operation.EQUAL) {
        // Equality found.
        equalities.push(thisDiff);
        length_insertions1 = length_insertions2;
        length_deletions1 = length_deletions2;
        length_insertions2 = 0;
        length_deletions2 = 0;
        lastEquality = thisDiff.text;
      } else {
        // An insertion or deletion.
        if (thisDiff.operation == Operation.INSERT) {
          length_insertions2 += thisDiff.text.length();
        } else {
          length_deletions2 += thisDiff.text.length();
        }
        // Eliminate an equality that is smaller or equal to the edits on both
        // sides of it.
        if (lastEquality != null && (lastEquality.length()
            <= Math.max(length_insertions1, length_deletions1))
            && (lastEquality.length()
                <= Math.max(length_insertions2, length_deletions2))) {
          //System.out.println("Splitting: '" + lastEquality + "'");
          // Walk back to offending equality.
          while (thisDiff != equalities.peek()) {
            thisDiff = pointer.previous();
          }
          pointer.next();

          // Replace equality with a delete.
          pointer.set(new Diff(Operation.DELETE, lastEquality));
          // Insert a corresponding an insert.
          pointer.add(new Diff(Operation.INSERT, lastEquality));

          equalities.pop();  // Throw away the equality we just deleted.
          if (!equalities.isEmpty()) {
            // Throw away the previous equality (it needs to be reevaluated).
            equalities.pop();
          }
          if (equalities.isEmpty()) {
            // There are no previous equalities, walk back to the start.
            while (pointer.hasPrevious()) {
              pointer.previous();
            }
          } else {
            // There is a safe equality we can fall back to.
            thisDiff = equalities.peek();
            while (thisDiff != pointer.previous()) {
              // Intentionally empty loop.
            }
          }

          length_insertions1 = 0;  // Reset the counters.
          length_insertions2 = 0;
          length_deletions1 = 0;
          length_deletions2 = 0;
          lastEquality = null;
          changes = true;
        }
      }
      thisDiff = pointer.hasNext() ? pointer.next() : null;
    }

    // Normalize the diff.
    if (changes) {
      diff_cleanupMerge(diffs);
    }
    diff_cleanupSemanticLossless(diffs);

    // Find any overlaps between deletions and insertions.
    // e.g: <del>abcxxx</del><ins>xxxdef</ins>
    //   -> <del>abc</del>xxx<ins>def</ins>
    // e.g: <del>xxxabc</del><ins>defxxx</ins>
    //   -> <ins>def</ins>xxx<del>abc</del>
    // Only extract an overlap if it is as big as the edit ahead or behind it.
    pointer = diffs.listIterator();
    Diff prevDiff = null;
    thisDiff = null;
    if (pointer.hasNext()) {
      prevDiff = pointer.next();
      if (pointer.hasNext()) {
        thisDiff = pointer.next();
      }
    }
    while (thisDiff != null) {
      if (prevDiff.operation == Operation.DELETE &&
          thisDiff.operation == Operation.INSERT) {
        String deletion = prevDiff.text;
        String insertion = thisDiff.text;
        int overlap_length1 = this.diff_commonOverlap(deletion, insertion);
        int overlap_length2 = this.diff_commonOverlap(insertion, deletion);
        if (overlap_length1 >= overlap_length2) {
          if (overlap_length1 >= deletion.length() / 2.0 ||
              overlap_length1 >= insertion.length() / 2.0) {
            // Overlap found. Insert an equality and trim the surrounding edits.
            pointer.previous();
            pointer.add(new Diff(Operation.EQUAL,
                                 insertion.substring(0, overlap_length1)));
            prevDiff.text =
                deletion.substring(0, deletion.length() - overlap_length1);
            thisDiff.text = insertion.substring(overlap_length1);
            // pointer.add inserts the element before the cursor, so there is
            // no need to step past the new element.
          }
        } else {
          if (overlap_length2 >= deletion.length() / 2.0 ||
              overlap_length2 >= insertion.length() / 2.0) {
            // Reverse overlap found.
            // Insert an equality and swap and trim the surrounding edits.
            pointer.previous();
            pointer.add(new Diff(Operation.EQUAL,
                                 deletion.substring(0, overlap_length2)));
            prevDiff.operation = Operation.INSERT;
            prevDiff.text =
              insertion.substring(0, insertion.length() - overlap_length2);
            thisDiff.operation = Operation.DELETE;
            thisDiff.text = deletion.substring(overlap_length2);
            // pointer.add inserts the element before the cursor, so there is
            // no need to step past the new element.
          }
        }
        thisDiff = pointer.hasNext() ? pointer.next() : null;
      }
      prevDiff = thisDiff;
      thisDiff = pointer.hasNext() ? pointer.next() : null;
    }
  }

  /**
   * Look for single edits surrounded on both sides by equalities
   * which can be shifted sideways to align the edit to a word boundary.
   * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
   * @param diffs LinkedList of Diff objects.
   */
  public void diff_cleanupSemanticLossless(LinkedList<Diff> diffs) {
    String equality1, edit, equality2;
    String commonString;
    int commonOffset;
    int score, bestScore;
    String bestEquality1, bestEdit, bestEquality2;
    // Create a new iterator at the start.
    ListIterator<Diff> pointer = diffs.listIterator();
    Diff prevDiff = pointer.hasNext() ? pointer.next() : null;
    Diff thisDiff = pointer.hasNext() ? pointer.next() : null;
    Diff nextDiff = pointer.hasNext() ? pointer.next() : null;
    // Intentionally ignore the first and last element (don't need checking).
    while (nextDiff != null) {
      if (prevDiff.operation == Operation.EQUAL &&
          nextDiff.operation == Operation.EQUAL) {
        // This is a single edit surrounded by equalities.
        equality1 = prevDiff.text;
        edit = thisDiff.text;
        equality2 = nextDiff.text;

        // First, shift the edit as far left as possible.
        commonOffset = diff_commonSuffix(equality1, edit);
        if (commonOffset != 0) {
          commonString = edit.substring(edit.length() - commonOffset);
          equality1 = equality1.substring(0, equality1.length() - commonOffset);
          edit = commonString + edit.substring(0, edit.length() - commonOffset);
          equality2 = commonString + equality2;
        }

        // Second, step character by character right, looking for the best fit.
        bestEquality1 = equality1;
        bestEdit = edit;
        bestEquality2 = equality2;
        bestScore = diff_cleanupSemanticScore(equality1, edit)
            + diff_cleanupSemanticScore(edit, equality2);
        while (edit.length() != 0 && equality2.length() != 0
            && edit.charAt(0) == equality2.charAt(0)) {
          equality1 += edit.charAt(0);
          edit = edit.substring(1) + equality2.charAt(0);
          equality2 = equality2.substring(1);
          score = diff_cleanupSemanticScore(equality1, edit)
              + diff_cleanupSemanticScore(edit, equality2);
          // The >= encourages trailing rather than leading whitespace on edits.
          if (score >= bestScore) {
            bestScore = score;
            bestEquality1 = equality1;
            bestEdit = edit;
            bestEquality2 = equality2;
          }
        }

        if (!prevDiff.text.equals(bestEquality1)) {
          // We have an improvement, save it back to the diff.
          if (bestEquality1.length() != 0) {
            prevDiff.text = bestEquality1;
          } else {
            pointer.previous(); // Walk past nextDiff.
            pointer.previous(); // Walk past thisDiff.
            pointer.previous(); // Walk past prevDiff.
            pointer.remove(); // Delete prevDiff.
            pointer.next(); // Walk past thisDiff.
            pointer.next(); // Walk past nextDiff.
          }
          thisDiff.text = bestEdit;
          if (bestEquality2.length() != 0) {
            nextDiff.text = bestEquality2;
          } else {
            pointer.remove(); // Delete nextDiff.
            nextDiff = thisDiff;
            thisDiff = prevDiff;
          }
        }
      }
      prevDiff = thisDiff;
      thisDiff = nextDiff;
      nextDiff = pointer.hasNext() ? pointer.next() : null;
    }
  }

  /**
   * Given two strings, compute a score representing whether the internal
   * boundary falls on logical boundaries.
   * Scores range from 6 (best) to 0 (worst).
   * @param one First string.
   * @param two Second string.
   * @return The score.
   */
  private int diff_cleanupSemanticScore(String one, String two) {
    if (one.length() == 0 || two.length() == 0) {
      // Edges are the best.
      return 6;
    }

    // Each port of this function behaves slightly differently due to
    // subtle differences in each language's definition of things like
    // 'whitespace'.  Since this function's purpose is largely cosmetic,
    // the choice has been made to use each language's native features
    // rather than force total conformity.
    char char1 = one.charAt(one.length() - 1);
    char char2 = two.charAt(0);
    boolean nonAlphaNumeric1 = !Character.isLetterOrDigit(char1);
    boolean nonAlphaNumeric2 = !Character.isLetterOrDigit(char2);
    boolean whitespace1 = nonAlphaNumeric1 && Character.isWhitespace(char1);
    boolean whitespace2 = nonAlphaNumeric2 && Character.isWhitespace(char2);
    boolean lineBreak1 = whitespace1
        && Character.getType(char1) == Character.CONTROL;
    boolean lineBreak2 = whitespace2
        && Character.getType(char2) == Character.CONTROL;
    boolean blankLine1 = lineBreak1 && BLANKLINEEND.matcher(one).find();
    boolean blankLine2 = lineBreak2 && BLANKLINESTART.matcher(two).find();

    if (blankLine1 || blankLine2) {
      // Five points for blank lines.
      return 5;
    } else if (lineBreak1 || lineBreak2) {
      // Four points for line breaks.
      return 4;
    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {
      // Three points for end of sentences.
      return 3;
    } else if (whitespace1 || whitespace2) {
      // Two points for whitespace.
      return 2;
    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {
      // One point for non-alphanumeric.
      return 1;
    }
    return 0;
  }

  // Define some regex patterns for matching boundaries.
  private Pattern BLANKLINEEND
      = Pattern.compile("\\n\\r?\\n\\Z", Pattern.DOTALL);
  private Pattern BLANKLINESTART
      = Pattern.compile("\\A\\r?\\n\\r?\\n", Pattern.DOTALL);

  /**
   * Reduce the number of edits by eliminating operationally trivial equalities.
   * @param diffs LinkedList of Diff objects.
   */
  public void diff_cleanupEfficiency(LinkedList<Diff> diffs) {
    if (diffs.isEmpty()) {
      return;
    }
    boolean changes = false;
    Deque<Diff> equalities = new ArrayDeque<Diff>();  // Double-ended queue of equalities.
    String lastEquality = null; // Always equal to equalities.peek().text
    ListIterator<Diff> pointer = diffs.listIterator();
    // Is there an insertion operation before the last equality.
    boolean pre_ins = false;
    // Is there a deletion operation before the last equality.
    boolean pre_del = false;
    // Is there an insertion operation after the last equality.
    boolean post_ins = false;
    // Is there a deletion operation after the last equality.
    boolean post_del = false;
    Diff thisDiff = pointer.next();
    Diff safeDiff = thisDiff;  // The last Diff that is known to be unsplittable.
    while (thisDiff != null) {
      if (thisDiff.operation == Operation.EQUAL) {
        // Equality found.
        if (thisDiff.text.length() < Diff_EditCost && (post_ins || post_del)) {
          // Candidate found.
          equalities.push(thisDiff);
          pre_ins = post_ins;
          pre_del = post_del;
          lastEquality = thisDiff.text;
        } else {
          // Not a candidate, and can never become one.
          equalities.clear();
          lastEquality = null;
          safeDiff = thisDiff;
        }
        post_ins = post_del = false;
      } else {
        // An insertion or deletion.
        if (thisDiff.operation == Operation.DELETE) {
          post_del = true;
        } else {
          post_ins = true;
        }
        /*
         * Five types to be split:
         * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>
         * <ins>A</ins>X<ins>C</ins><del>D</del>
         * <ins>A</ins><del>B</del>X<ins>C</ins>
         * <ins>A</del>X<ins>C</ins><del>D</del>
         * <ins>A</ins><del>B</del>X<del>C</del>
         */
        if (lastEquality != null
            && ((pre_ins && pre_del && post_ins && post_del)
                || ((lastEquality.length() < Diff_EditCost / 2)
                    && ((pre_ins ? 1 : 0) + (pre_del ? 1 : 0)
                        + (post_ins ? 1 : 0) + (post_del ? 1 : 0)) == 3))) {
          //System.out.println("Splitting: '" + lastEquality + "'");
          // Walk back to offending equality.
          while (thisDiff != equalities.peek()) {
            thisDiff = pointer.previous();
          }
          pointer.next();

          // Replace equality with a delete.
          pointer.set(new Diff(Operation.DELETE, lastEquality));
          // Insert a corresponding an insert.
          pointer.add(thisDiff = new Diff(Operation.INSERT, lastEquality));

          equalities.pop();  // Throw away the equality we just deleted.
          lastEquality = null;
          if (pre_ins && pre_del) {
            // No changes made which could affect previous entry, keep going.
            post_ins = post_del = true;
            equalities.clear();
            safeDiff = thisDiff;
          } else {
            if (!equalities.isEmpty()) {
              // Throw away the previous equality (it needs to be reevaluated).
              equalities.pop();
            }
            if (equalities.isEmpty()) {
              // There are no previous questionable equalities,
              // walk back to the last known safe diff.
              thisDiff = safeDiff;
            } else {
              // There is an equality we can fall back to.
              thisDiff = equalities.peek();
            }
            while (thisDiff != pointer.previous()) {
              // Intentionally empty loop.
            }
            post_ins = post_del = false;
          }

          changes = true;
        }
      }
      thisDiff = pointer.hasNext() ? pointer.next() : null;
    }

    if (changes) {
      diff_cleanupMerge(diffs);
    }
  }

  /**
   * Reorder and merge like edit sections.  Merge equalities.
   * Any edit section can move as long as it doesn't cross an equality.
   * @param diffs LinkedList of Diff objects.
   */
  public void diff_cleanupMerge(LinkedList<Diff> diffs) {
    diffs.add(new Diff(Operation.EQUAL, ""));  // Add a dummy entry at the end.
    ListIterator<Diff> pointer = diffs.listIterator();
    int count_delete = 0;
    int count_insert = 0;
    String text_delete = "";
    String text_insert = "";
    Diff thisDiff = pointer.next();
    Diff prevEqual = null;
    int commonlength;
    while (thisDiff != null) {
      switch (thisDiff.operation) {
      case INSERT:
        count_insert++;
        text_insert += thisDiff.text;
        prevEqual = null;
        break;
      case DELETE:
        count_delete++;
        text_delete += thisDiff.text;
        prevEqual = null;
        break;
      case EQUAL:
        if (count_delete + count_insert > 1) {
          boolean both_types = count_delete != 0 && count_insert != 0;
          // Delete the offending records.
          pointer.previous();  // Reverse direction.
          while (count_delete-- > 0) {
            pointer.previous();
            pointer.remove();
          }
          while (count_insert-- > 0) {
            pointer.previous();
            pointer.remove();
          }
          if (both_types) {
            // Factor out any common prefixies.
            commonlength = diff_commonPrefix(text_insert, text_delete);
            if (commonlength != 0) {
              if (pointer.hasPrevious()) {
                thisDiff = pointer.previous();
                assert thisDiff.operation == Operation.EQUAL
                       : "Previous diff should have been an equality.";
                thisDiff.text += text_insert.substring(0, commonlength);
                pointer.next();
              } else {
                pointer.add(new Diff(Operation.EQUAL,
                    text_insert.substring(0, commonlength)));
              }
              text_insert = text_insert.substring(commonlength);
              text_delete = text_delete.substring(commonlength);
            }
            // Factor out any common suffixies.
            commonlength = diff_commonSuffix(text_insert, text_delete);
            if (commonlength != 0) {
              thisDiff = pointer.next();
              thisDiff.text = text_insert.substring(text_insert.length()
                  - commonlength) + thisDiff.text;
              text_insert = text_insert.substring(0, text_insert.length()
                  - commonlength);
              text_delete = text_delete.substring(0, text_delete.length()
                  - commonlength);
              pointer.previous();
            }
          }
          // Insert the merged records.
          if (text_delete.length() != 0) {
            pointer.add(new Diff(Operation.DELETE, text_delete));
          }
          if (text_insert.length() != 0) {
            pointer.add(new Diff(Operation.INSERT, text_insert));
          }
          // Step forward to the equality.
          thisDiff = pointer.hasNext() ? pointer.next() : null;
        } else if (prevEqual != null) {
          // Merge this equality with the previous one.
          prevEqual.text += thisDiff.text;
          pointer.remove();
          thisDiff = pointer.previous();
          pointer.next();  // Forward direction
        }
        count_insert = 0;
        count_delete = 0;
        text_delete = "";
        text_insert = "";
        prevEqual = thisDiff;
        break;
      }
      thisDiff = pointer.hasNext() ? pointer.next() : null;
    }
    if (diffs.getLast().text.length() == 0) {
      diffs.removeLast();  // Remove the dummy entry at the end.
    }

    /*
     * Second pass: look for single edits surrounded on both sides by equalities
     * which can be shifted sideways to eliminate an equality.
     * e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
     */
    boolean changes = false;
    // Create a new iterator at the start.
    // (As opposed to walking the current one back.)
    pointer = diffs.listIterator();
    Diff prevDiff = pointer.hasNext() ? pointer.next() : null;
    thisDiff = pointer.hasNext() ? pointer.next() : null;
    Diff nextDiff = pointer.hasNext() ? pointer.next() : null;
    // Intentionally ignore the first and last element (don't need checking).
    while (nextDiff != null) {
      if (prevDiff.operation == Operation.EQUAL &&
          nextDiff.operation == Operation.EQUAL) {
        // This is a single edit surrounded by equalities.
        if (thisDiff.text.endsWith(prevDiff.text)) {
          // Shift the edit over the previous equality.
          thisDiff.text = prevDiff.text
              + thisDiff.text.substring(0, thisDiff.text.length()
                                           - prevDiff.text.length());
          nextDiff.text = prevDiff.text + nextDiff.text;
          pointer.previous(); // Walk past nextDiff.
          pointer.previous(); // Walk past thisDiff.
          pointer.previous(); // Walk past prevDiff.
          pointer.remove(); // Delete prevDiff.
          pointer.next(); // Walk past thisDiff.
          thisDiff = pointer.next(); // Walk past nextDiff.
          nextDiff = pointer.hasNext() ? pointer.next() : null;
          changes = true;
        } else if (thisDiff.text.startsWith(nextDiff.text)) {
          // Shift the edit over the next equality.
          prevDiff.text += nextDiff.text;
          thisDiff.text = thisDiff.text.substring(nextDiff.text.length())
              + nextDiff.text;
          pointer.remove(); // Delete nextDiff.
          nextDiff = pointer.hasNext() ? pointer.next() : null;
          changes = true;
        }
      }
      prevDiff = thisDiff;
      thisDiff = nextDiff;
      nextDiff = pointer.hasNext() ? pointer.next() : null;
    }
    // If shifts were made, the diff needs reordering and another shift sweep.
    if (changes) {
      diff_cleanupMerge(diffs);
    }
  }

  /**
   * loc is a location in text1, compute and return the equivalent location in
   * text2.
   * e.g. "The cat" vs "The big cat", 1->1, 5->8
   * @param diffs List of Diff objects.
   * @param loc Location within text1.
   * @return Location within text2.
   */
  public int diff_xIndex(List<Diff> diffs, int loc) {
    int chars1 = 0;
    int chars2 = 0;
    int last_chars1 = 0;
    int last_chars2 = 0;
    Diff lastDiff = null;
    for (Diff aDiff : diffs) {
      if (aDiff.operation != Operation.INSERT) {
        // Equality or deletion.
        chars1 += aDiff.text.length();
      }
      if (aDiff.operation != Operation.DELETE) {
        // Equality or insertion.
        chars2 += aDiff.text.length();
      }
      if (chars1 > loc) {
        // Overshot the location.
        lastDiff = aDiff;
        break;
      }
      last_chars1 = chars1;
      last_chars2 = chars2;
    }
    if (lastDiff != null && lastDiff.operation == Operation.DELETE) {
      // The location was deleted.
      return last_chars2;
    }
    // Add the remaining character length.
    return last_chars2 + (loc - last_chars1);
  }

  /**
   * Convert a Diff list into a pretty HTML report.
   * @param diffs List of Diff objects.
   * @return HTML representation.
   */
  public String diff_prettyHtml(List<Diff> diffs) {
    StringBuilder html = new StringBuilder();
    for (Diff aDiff : diffs) {
      String text = aDiff.text.replace("&", "&amp;").replace("<", "&lt;")
          .replace(">", "&gt;").replace("\n", "&para;<br>");
      switch (aDiff.operation) {
      case INSERT:
        html.append("<ins style=\"background:#e6ffe6;\">").append(text)
            .append("</ins>");
        break;
      case DELETE:
        html.append("<del style=\"background:#ffe6e6;\">").append(text)
            .append("</del>");
        break;
      case EQUAL:
        html.append("<span>").append(text).append("</span>");
        break;
      }
    }
    return html.toString();
  }

  /**
   * Compute and return the source text (all equalities and deletions).
   * @param diffs List of Diff objects.
   * @return Source text.
   */
  public String diff_text1(List<Diff> diffs) {
    StringBuilder text = new StringBuilder();
    for (Diff aDiff : diffs) {
      if (aDiff.operation != Operation.INSERT) {
        text.append(aDiff.text);
      }
    }
    return text.toString();
  }

  /**
   * Compute and return the destination text (all equalities and insertions).
   * @param diffs List of Diff objects.
   * @return Destination text.
   */
  public String diff_text2(List<Diff> diffs) {
    StringBuilder text = new StringBuilder();
    for (Diff aDiff : diffs) {
      if (aDiff.operation != Operation.DELETE) {
        text.append(aDiff.text);
      }
    }
    return text.toString();
  }

  /**
   * Compute the Levenshtein distance; the number of inserted, deleted or
   * substituted characters.
   * @param diffs List of Diff objects.
   * @return Number of changes.
   */
  public int diff_levenshtein(List<Diff> diffs) {
    int levenshtein = 0;
    int insertions = 0;
    int deletions = 0;
    for (Diff aDiff : diffs) {
      switch (aDiff.operation) {
      case INSERT:
        insertions += aDiff.text.length();
        break;
      case DELETE:
        deletions += aDiff.text.length();
        break;
      case EQUAL:
        // A deletion and an insertion is one substitution.
        levenshtein += Math.max(insertions, deletions);
        insertions = 0;
        deletions = 0;
        break;
      }
    }
    levenshtein += Math.max(insertions, deletions);
    return levenshtein;
  }

  /**
   * Crush the diff into an encoded string which describes the operations
   * required to transform text1 into text2.
   * E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
   * Operations are tab-separated.  Inserted text is escaped using %xx notation.
   * @param diffs List of Diff objects.
   * @return Delta text.
   */
  public String diff_toDelta(List<Diff> diffs) {
    StringBuilder text = new StringBuilder();
    for (Diff aDiff : diffs) {
      switch (aDiff.operation) {
      case INSERT:
        try {
          text.append("+").append(URLEncoder.encode(aDiff.text, "UTF-8")
                                            .replace('+', ' ')).append("\t");
        } catch (UnsupportedEncodingException e) {
          // Not likely on modern system.
          throw new Error("This system does not support UTF-8.", e);
        }
        break;
      case DELETE:
        text.append("-").append(aDiff.text.length()).append("\t");
        break;
      case EQUAL:
        text.append("=").append(aDiff.text.length()).append("\t");
        break;
      }
    }
    String delta = text.toString();
    if (delta.length() != 0) {
      // Strip off trailing tab character.
      delta = delta.substring(0, delta.length() - 1);
      delta = unescapeForEncodeUriCompatability(delta);
    }
    return delta;
  }

  /**
   * Given the original text1, and an encoded string which describes the
   * operations required to transform text1 into text2, compute the full diff.
   * @param text1 Source string for the diff.
   * @param delta Delta text.
   * @return Array of Diff objects or null if invalid.
   * @throws IllegalArgumentException If invalid input.
   */
  public LinkedList<Diff> diff_fromDelta(String text1, String delta)
      throws IllegalArgumentException {
    LinkedList<Diff> diffs = new LinkedList<Diff>();
    int pointer = 0;  // Cursor in text1
    String[] tokens = delta.split("\t");
    for (String token : tokens) {
      if (token.length() == 0) {
        // Blank tokens are ok (from a trailing \t).
        continue;
      }
      // Each token begins with a one character parameter which specifies the
      // operation of this token (delete, insert, equality).
      String param = token.substring(1);
      switch (token.charAt(0)) {
      case '+':
        // decode would change all "+" to " "
        param = param.replace("+", "%2B");
        try {
          param = URLDecoder.decode(param, "UTF-8");
        } catch (UnsupportedEncodingException e) {
          // Not likely on modern system.
          throw new Error("This system does not support UTF-8.", e);
        } catch (IllegalArgumentException e) {
          // Malformed URI sequence.
          throw new IllegalArgumentException(
              "Illegal escape in diff_fromDelta: " + param, e);
        }
        diffs.add(new Diff(Operation.INSERT, param));
        break;
      case '-':
        // Fall through.
      case '=':
        int n;
        try {
          n = Integer.parseInt(param);
        } catch (NumberFormatException e) {
          throw new IllegalArgumentException(
              "Invalid number in diff_fromDelta: " + param, e);
        }
        if (n < 0) {
          throw new IllegalArgumentException(
              "Negative number in diff_fromDelta: " + param);
        }
        String text;
        try {
          text = text1.substring(pointer, pointer += n);
        } catch (StringIndexOutOfBoundsException e) {
          throw new IllegalArgumentException("Delta length (" + pointer
              + ") larger than source text length (" + text1.length()
              + ").", e);
        }
        if (token.charAt(0) == '=') {
          diffs.add(new Diff(Operation.EQUAL, text));
        } else {
          diffs.add(new Diff(Operation.DELETE, text));
        }
        break;
      default:
        // Anything else is an error.
        throw new IllegalArgumentException(
            "Invalid diff operation in diff_fromDelta: " + token.charAt(0));
      }
    }
    if (pointer != text1.length()) {
      throw new IllegalArgumentException("Delta length (" + pointer
          + ") smaller than source text length (" + text1.length() + ").");
    }
    return diffs;
  }


  //  MATCH FUNCTIONS


  /**
   * Locate the best instance of 'pattern' in 'text' near 'loc'.
   * Returns -1 if no match found.
   * @param text The text to search.
   * @param pattern The pattern to search for.
   * @param loc The location to search around.
   * @return Best match index or -1.
   */
  public int match_main(String text, String pattern, int loc) {
    // Check for null inputs.
    if (text == null || pattern == null) {
      throw new IllegalArgumentException("Null inputs. (match_main)");
    }

    loc = Math.max(0, Math.min(loc, text.length()));
    if (text.equals(pattern)) {
      // Shortcut (potentially not guaranteed by the algorithm)
      return 0;
    } else if (text.length() == 0) {
      // Nothing to match.
      return -1;
    } else if (loc + pattern.length() <= text.length()
        && text.substring(loc, loc + pattern.length()).equals(pattern)) {
      // Perfect match at the perfect spot!  (Includes case of null pattern)
      return loc;
    } else {
      // Do a fuzzy compare.
      return match_bitap(text, pattern, loc);
    }
  }

  /**
   * Locate the best instance of 'pattern' in 'text' near 'loc' using the
   * Bitap algorithm.  Returns -1 if no match found.
   * @param text The text to search.
   * @param pattern The pattern to search for.
   * @param loc The location to search around.
   * @return Best match index or -1.
   */
  protected int match_bitap(String text, String pattern, int loc) {
    assert (Match_MaxBits == 0 || pattern.length() <= Match_MaxBits)
        : "Pattern too long for this application.";

    // Initialise the alphabet.
    Map<Character, Integer> s = match_alphabet(pattern);

    // Highest score beyond which we give up.
    double score_threshold = Match_Threshold;
    // Is there a nearby exact match? (speedup)
    int best_loc = text.indexOf(pattern, loc);
    if (best_loc != -1) {
      score_threshold = Math.min(match_bitapScore(0, best_loc, loc, pattern),
          score_threshold);
      // What about in the other direction? (speedup)
      best_loc = text.lastIndexOf(pattern, loc + pattern.length());
      if (best_loc != -1) {
        score_threshold = Math.min(match_bitapScore(0, best_loc, loc, pattern),
            score_threshold);
      }
    }

    // Initialise the bit arrays.
    int matchmask = 1 << (pattern.length() - 1);
    best_loc = -1;

    int bin_min, bin_mid;
    int bin_max = pattern.length() + text.length();
    // Empty initialization added to appease Java compiler.
    int[] last_rd = new int[0];
    for (int d = 0; d < pattern.length(); d++) {
      // Scan for the best match; each iteration allows for one more error.
      // Run a binary search to determine how far from 'loc' we can stray at
      // this error level.
      bin_min = 0;
      bin_mid = bin_max;
      while (bin_min < bin_mid) {
        if (match_bitapScore(d, loc + bin_mid, loc, pattern)
            <= score_threshold) {
          bin_min = bin_mid;
        } else {
          bin_max = bin_mid;
        }
        bin_mid = (bin_max - bin_min) / 2 + bin_min;
      }
      // Use the result from this iteration as the maximum for the next.
      bin_max = bin_mid;
      int start = Math.max(1, loc - bin_mid + 1);
      int finish = Math.min(loc + bin_mid, text.length()) + pattern.length();

      int[] rd = new int[finish + 2];
      rd[finish + 1] = (1 << d) - 1;
      for (int j = finish; j >= start; j--) {
        int charMatch;
        if (text.length() <= j - 1 || !s.containsKey(text.charAt(j - 1))) {
          // Out of range.
          charMatch = 0;
        } else {
          charMatch = s.get(text.charAt(j - 1));
        }
        if (d == 0) {
          // First pass: exact match.
          rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;
        } else {
          // Subsequent passes: fuzzy match.
          rd[j] = (((rd[j + 1] << 1) | 1) & charMatch)
              | (((last_rd[j + 1] | last_rd[j]) << 1) | 1) | last_rd[j + 1];
        }
        if ((rd[j] & matchmask) != 0) {
          double score = match_bitapScore(d, j - 1, loc, pattern);
          // This match will almost certainly be better than any existing
          // match.  But check anyway.
          if (score <= score_threshold) {
            // Told you so.
            score_threshold = score;
            best_loc = j - 1;
            if (best_loc > loc) {
              // When passing loc, don't exceed our current distance from loc.
              start = Math.max(1, 2 * loc - best_loc);
            } else {
              // Already passed loc, downhill from here on in.
              break;
            }
          }
        }
      }
      if (match_bitapScore(d + 1, loc, loc, pattern) > score_threshold) {
        // No hope for a (better) match at greater error levels.
        break;
      }
      last_rd = rd;
    }
    return best_loc;
  }

  /**
   * Compute and return the score for a match with e errors and x location.
   * @param e Number of errors in match.
   * @param x Location of match.
   * @param loc Expected location of match.
   * @param pattern Pattern being sought.
   * @return Overall score for match (0.0 = good, 1.0 = bad).
   */
  private double match_bitapScore(int e, int x, int loc, String pattern) {
    float accuracy = (float) e / pattern.length();
    int proximity = Math.abs(loc - x);
    if (Match_Distance == 0) {
      // Dodge divide by zero error.
      return proximity == 0 ? accuracy : 1.0;
    }
    return accuracy + (proximity / (float) Match_Distance);
  }

  /**
   * Initialise the alphabet for the Bitap algorithm.
   * @param pattern The text to encode.
   * @return Hash of character locations.
   */
  protected Map<Character, Integer> match_alphabet(String pattern) {
    Map<Character, Integer> s = new HashMap<Character, Integer>();
    char[] char_pattern = pattern.toCharArray();
    for (char c : char_pattern) {
      s.put(c, 0);
    }
    int i = 0;
    for (char c : char_pattern) {
      s.put(c, s.get(c) | (1 << (pattern.length() - i - 1)));
      i++;
    }
    return s;
  }


  //  PATCH FUNCTIONS


  /**
   * Increase the context until it is unique,
   * but don't let the pattern expand beyond Match_MaxBits.
   * @param patch The patch to grow.
   * @param text Source text.
   */
  protected void patch_addContext(Patch patch, String text) {
    if (text.length() == 0) {
      return;
    }
    String pattern = text.substring(patch.start2, patch.start2 + patch.length1);
    int padding = 0;

    // Look for the first and last matches of pattern in text.  If two different
    // matches are found, increase the pattern length.
    while (text.indexOf(pattern) != text.lastIndexOf(pattern)
        && pattern.length() < Match_MaxBits - Patch_Margin - Patch_Margin) {
      padding += Patch_Margin;
      pattern = text.substring(Math.max(0, patch.start2 - padding),
          Math.min(text.length(), patch.start2 + patch.length1 + padding));
    }
    // Add one chunk for good luck.
    padding += Patch_Margin;

    // Add the prefix.
    String prefix = text.substring(Math.max(0, patch.start2 - padding),
        patch.start2);
    if (prefix.length() != 0) {
      patch.diffs.addFirst(new Diff(Operation.EQUAL, prefix));
    }
    // Add the suffix.
    String suffix = text.substring(patch.start2 + patch.length1,
        Math.min(text.length(), patch.start2 + patch.length1 + padding));
    if (suffix.length() != 0) {
      patch.diffs.addLast(new Diff(Operation.EQUAL, suffix));
    }

    // Roll back the start points.
    patch.start1 -= prefix.length();
    patch.start2 -= prefix.length();
    // Extend the lengths.
    patch.length1 += prefix.length() + suffix.length();
    patch.length2 += prefix.length() + suffix.length();
  }

  /**
   * Compute a list of patches to turn text1 into text2.
   * A set of diffs will be computed.
   * @param text1 Old text.
   * @param text2 New text.
   * @return LinkedList of Patch objects.
   */
  public LinkedList<Patch> patch_make(String text1, String text2) {
    if (text1 == null || text2 == null) {
      throw new IllegalArgumentException("Null inputs. (patch_make)");
    }
    // No diffs provided, compute our own.
    LinkedList<Diff> diffs = diff_main(text1, text2, true);
    if (diffs.size() > 2) {
      diff_cleanupSemantic(diffs);
      diff_cleanupEfficiency(diffs);
    }
    return patch_make(text1, diffs);
  }

  /**
   * Compute a list of patches to turn text1 into text2.
   * text1 will be derived from the provided diffs.
   * @param diffs Array of Diff objects for text1 to text2.
   * @return LinkedList of Patch objects.
   */
  public LinkedList<Patch> patch_make(LinkedList<Diff> diffs) {
    if (diffs == null) {
      throw new IllegalArgumentException("Null inputs. (patch_make)");
    }
    // No origin string provided, compute our own.
    String text1 = diff_text1(diffs);
    return patch_make(text1, diffs);
  }

  /**
   * Compute a list of patches to turn text1 into text2.
   * text2 is ignored, diffs are the delta between text1 and text2.
   * @param text1 Old text
   * @param text2 Ignored.
   * @param diffs Array of Diff objects for text1 to text2.
   * @return LinkedList of Patch objects.
   * @deprecated Prefer patch_make(String text1, LinkedList<Diff> diffs).
   */
  @Deprecated public LinkedList<Patch> patch_make(String text1, String text2,
      LinkedList<Diff> diffs) {
    return patch_make(text1, diffs);
  }

  /**
   * Compute a list of patches to turn text1 into text2.
   * text2 is not provided, diffs are the delta between text1 and text2.
   * @param text1 Old text.
   * @param diffs Array of Diff objects for text1 to text2.
   * @return LinkedList of Patch objects.
   */
  public LinkedList<Patch> patch_make(String text1, LinkedList<Diff> diffs) {
    if (text1 == null || diffs == null) {
      throw new IllegalArgumentException("Null inputs. (patch_make)");
    }

    LinkedList<Patch> patches = new LinkedList<Patch>();
    if (diffs.isEmpty()) {
      return patches;  // Get rid of the null case.
    }
    Patch patch = new Patch();
    int char_count1 = 0;  // Number of characters into the text1 string.
    int char_count2 = 0;  // Number of characters into the text2 string.
    // Start with text1 (prepatch_text) and apply the diffs until we arrive at
    // text2 (postpatch_text). We recreate the patches one by one to determine
    // context info.
    String prepatch_text = text1;
    String postpatch_text = text1;
    for (Diff aDiff : diffs) {
      if (patch.diffs.isEmpty() && aDiff.operation != Operation.EQUAL) {
        // A new patch starts here.
        patch.start1 = char_count1;
        patch.start2 = char_count2;
      }

      switch (aDiff.operation) {
      case INSERT:
        patch.diffs.add(aDiff);
        patch.length2 += aDiff.text.length();
        postpatch_text = postpatch_text.substring(0, char_count2)
            + aDiff.text + postpatch_text.substring(char_count2);
        break;
      case DELETE:
        patch.length1 += aDiff.text.length();
        patch.diffs.add(aDiff);
        postpatch_text = postpatch_text.substring(0, char_count2)
            + postpatch_text.substring(char_count2 + aDiff.text.length());
        break;
      case EQUAL:
        if (aDiff.text.length() <= 2 * Patch_Margin
            && !patch.diffs.isEmpty() && aDiff != diffs.getLast()) {
          // Small equality inside a patch.
          patch.diffs.add(aDiff);
          patch.length1 += aDiff.text.length();
          patch.length2 += aDiff.text.length();
        }

        if (aDiff.text.length() >= 2 * Patch_Margin && !patch.diffs.isEmpty()) {
          // Time for a new patch.
          if (!patch.diffs.isEmpty()) {
            patch_addContext(patch, prepatch_text);
            patches.add(patch);
            patch = new Patch();
            // Unlike Unidiff, our patch lists have a rolling context.
            // https://github.com/google/diff-match-patch/wiki/Unidiff
            // Update prepatch text & pos to reflect the application of the
            // just completed patch.
            prepatch_text = postpatch_text;
            char_count1 = char_count2;
          }
        }
        break;
      }

      // Update the current character count.
      if (aDiff.operation != Operation.INSERT) {
        char_count1 += aDiff.text.length();
      }
      if (aDiff.operation != Operation.DELETE) {
        char_count2 += aDiff.text.length();
      }
    }
    // Pick up the leftover patch if not empty.
    if (!patch.diffs.isEmpty()) {
      patch_addContext(patch, prepatch_text);
      patches.add(patch);
    }

    return patches;
  }

  /**
   * Given an array of patches, return another array that is identical.
   * @param patches Array of Patch objects.
   * @return Array of Patch objects.
   */
  public LinkedList<Patch> patch_deepCopy(LinkedList<Patch> patches) {
    LinkedList<Patch> patchesCopy = new LinkedList<Patch>();
    for (Patch aPatch : patches) {
      Patch patchCopy = new Patch();
      for (Diff aDiff : aPatch.diffs) {
        Diff diffCopy = new Diff(aDiff.operation, aDiff.text);
        patchCopy.diffs.add(diffCopy);
      }
      patchCopy.start1 = aPatch.start1;
      patchCopy.start2 = aPatch.start2;
      patchCopy.length1 = aPatch.length1;
      patchCopy.length2 = aPatch.length2;
      patchesCopy.add(patchCopy);
    }
    return patchesCopy;
  }

  /**
   * Merge a set of patches onto the text.  Return a patched text, as well
   * as an array of true/false values indicating which patches were applied.
   * @param patches Array of Patch objects
   * @param text Old text.
   * @return Two element Object array, containing the new text and an array of
   *      boolean values.
   */
  public Object[] patch_apply(LinkedList<Patch> patches, String text) {
    if (patches.isEmpty()) {
      return new Object[]{text, new boolean[0]};
    }

    // Deep copy the patches so that no changes are made to originals.
    patches = patch_deepCopy(patches);

    String nullPadding = patch_addPadding(patches);
    text = nullPadding + text + nullPadding;
    patch_splitMax(patches);

    int x = 0;
    // delta keeps track of the offset between the expected and actual location
    // of the previous patch.  If there are patches expected at positions 10 and
    // 20, but the first patch was found at 12, delta is 2 and the second patch
    // has an effective expected position of 22.
    int delta = 0;
    boolean[] results = new boolean[patches.size()];
    for (Patch aPatch : patches) {
      int expected_loc = aPatch.start2 + delta;
      String text1 = diff_text1(aPatch.diffs);
      int start_loc;
      int end_loc = -1;
      if (text1.length() > this.Match_MaxBits) {
        // patch_splitMax will only provide an oversized pattern in the case of
        // a monster delete.
        start_loc = match_main(text,
            text1.substring(0, this.Match_MaxBits), expected_loc);
        if (start_loc != -1) {
          end_loc = match_main(text,
              text1.substring(text1.length() - this.Match_MaxBits),
              expected_loc + text1.length() - this.Match_MaxBits);
          if (end_loc == -1 || start_loc >= end_loc) {
            // Can't find valid trailing context.  Drop this patch.
            start_loc = -1;
          }
        }
      } else {
        start_loc = match_main(text, text1, expected_loc);
      }
      if (start_loc == -1) {
        // No match found.  :(
        results[x] = false;
        // Subtract the delta for this failed patch from subsequent patches.
        delta -= aPatch.length2 - aPatch.length1;
      } else {
        // Found a match.  :)
        results[x] = true;
        delta = start_loc - expected_loc;
        String text2;
        if (end_loc == -1) {
          text2 = text.substring(start_loc,
              Math.min(start_loc + text1.length(), text.length()));
        } else {
          text2 = text.substring(start_loc,
              Math.min(end_loc + this.Match_MaxBits, text.length()));
        }
        if (text1.equals(text2)) {
          // Perfect match, just shove the replacement text in.
          text = text.substring(0, start_loc) + diff_text2(aPatch.diffs)
              + text.substring(start_loc + text1.length());
        } else {
          // Imperfect match.  Run a diff to get a framework of equivalent
          // indices.
          LinkedList<Diff> diffs = diff_main(text1, text2, false);
          if (text1.length() > this.Match_MaxBits
              && diff_levenshtein(diffs) / (float) text1.length()
              > this.Patch_DeleteThreshold) {
            // The end points match, but the content is unacceptably bad.
            results[x] = false;
          } else {
            diff_cleanupSemanticLossless(diffs);
            int index1 = 0;
            for (Diff aDiff : aPatch.diffs) {
              if (aDiff.operation != Operation.EQUAL) {
                int index2 = diff_xIndex(diffs, index1);
                if (aDiff.operation == Operation.INSERT) {
                  // Insertion
                  text = text.substring(0, start_loc + index2) + aDiff.text
                      + text.substring(start_loc + index2);
                } else if (aDiff.operation == Operation.DELETE) {
                  // Deletion
                  text = text.substring(0, start_loc + index2)
                      + text.substring(start_loc + diff_xIndex(diffs,
                      index1 + aDiff.text.length()));
                }
              }
              if (aDiff.operation != Operation.DELETE) {
                index1 += aDiff.text.length();
              }
            }
          }
        }
      }
      x++;
    }
    // Strip the padding off.
    text = text.substring(nullPadding.length(), text.length()
        - nullPadding.length());
    return new Object[]{text, results};
  }

  /**
   * Add some padding on text start and end so that edges can match something.
   * Intended to be called only from within patch_apply.
   * @param patches Array of Patch objects.
   * @return The padding string added to each side.
   */
  public String patch_addPadding(LinkedList<Patch> patches) {
    short paddingLength = this.Patch_Margin;
    String nullPadding = "";
    for (short x = 1; x <= paddingLength; x++) {
      nullPadding += String.valueOf((char) x);
    }

    // Bump all the patches forward.
    for (Patch aPatch : patches) {
      aPatch.start1 += paddingLength;
      aPatch.start2 += paddingLength;
    }

    // Add some padding on start of first diff.
    Patch patch = patches.getFirst();
    LinkedList<Diff> diffs = patch.diffs;
    if (diffs.isEmpty() || diffs.getFirst().operation != Operation.EQUAL) {
      // Add nullPadding equality.
      diffs.addFirst(new Diff(Operation.EQUAL, nullPadding));
      patch.start1 -= paddingLength;  // Should be 0.
      patch.start2 -= paddingLength;  // Should be 0.
      patch.length1 += paddingLength;
      patch.length2 += paddingLength;
    } else if (paddingLength > diffs.getFirst().text.length()) {
      // Grow first equality.
      Diff firstDiff = diffs.getFirst();
      int extraLength = paddingLength - firstDiff.text.length();
      firstDiff.text = nullPadding.substring(firstDiff.text.length())
          + firstDiff.text;
      patch.start1 -= extraLength;
      patch.start2 -= extraLength;
      patch.length1 += extraLength;
      patch.length2 += extraLength;
    }

    // Add some padding on end of last diff.
    patch = patches.getLast();
    diffs = patch.diffs;
    if (diffs.isEmpty() || diffs.getLast().operation != Operation.EQUAL) {
      // Add nullPadding equality.
      diffs.addLast(new Diff(Operation.EQUAL, nullPadding));
      patch.length1 += paddingLength;
      patch.length2 += paddingLength;
    } else if (paddingLength > diffs.getLast().text.length()) {
      // Grow last equality.
      Diff lastDiff = diffs.getLast();
      int extraLength = paddingLength - lastDiff.text.length();
      lastDiff.text += nullPadding.substring(0, extraLength);
      patch.length1 += extraLength;
      patch.length2 += extraLength;
    }

    return nullPadding;
  }

  /**
   * Look through the patches and break up any which are longer than the
   * maximum limit of the match algorithm.
   * Intended to be called only from within patch_apply.
   * @param patches LinkedList of Patch objects.
   */
  public void patch_splitMax(LinkedList<Patch> patches) {
    short patch_size = Match_MaxBits;
    String precontext, postcontext;
    Patch patch;
    int start1, start2;
    boolean empty;
    Operation diff_type;
    String diff_text;
    ListIterator<Patch> pointer = patches.listIterator();
    Patch bigpatch = pointer.hasNext() ? pointer.next() : null;
    while (bigpatch != null) {
      if (bigpatch.length1 <= Match_MaxBits) {
        bigpatch = pointer.hasNext() ? pointer.next() : null;
        continue;
      }
      // Remove the big old patch.
      pointer.remove();
      start1 = bigpatch.start1;
      start2 = bigpatch.start2;
      precontext = "";
      while (!bigpatch.diffs.isEmpty()) {
        // Create one of several smaller patches.
        patch = new Patch();
        empty = true;
        patch.start1 = start1 - precontext.length();
        patch.start2 = start2 - precontext.length();
        if (precontext.length() != 0) {
          patch.length1 = patch.length2 = precontext.length();
          patch.diffs.add(new Diff(Operation.EQUAL, precontext));
        }
        while (!bigpatch.diffs.isEmpty()
            && patch.length1 < patch_size - Patch_Margin) {
          diff_type = bigpatch.diffs.getFirst().operation;
          diff_text = bigpatch.diffs.getFirst().text;
          if (diff_type == Operation.INSERT) {
            // Insertions are harmless.
            patch.length2 += diff_text.length();
            start2 += diff_text.length();
            patch.diffs.addLast(bigpatch.diffs.removeFirst());
            empty = false;
          } else if (diff_type == Operation.DELETE && patch.diffs.size() == 1
              && patch.diffs.getFirst().operation == Operation.EQUAL
              && diff_text.length() > 2 * patch_size) {
            // This is a large deletion.  Let it pass in one chunk.
            patch.length1 += diff_text.length();
            start1 += diff_text.length();
            empty = false;
            patch.diffs.add(new Diff(diff_type, diff_text));
            bigpatch.diffs.removeFirst();
          } else {
            // Deletion or equality.  Only take as much as we can stomach.
            diff_text = diff_text.substring(0, Math.min(diff_text.length(),
                patch_size - patch.length1 - Patch_Margin));
            patch.length1 += diff_text.length();
            start1 += diff_text.length();
            if (diff_type == Operation.EQUAL) {
              patch.length2 += diff_text.length();
              start2 += diff_text.length();
            } else {
              empty = false;
            }
            patch.diffs.add(new Diff(diff_type, diff_text));
            if (diff_text.equals(bigpatch.diffs.getFirst().text)) {
              bigpatch.diffs.removeFirst();
            } else {
              bigpatch.diffs.getFirst().text = bigpatch.diffs.getFirst().text
                  .substring(diff_text.length());
            }
          }
        }
        // Compute the head context for the next patch.
        precontext = diff_text2(patch.diffs);
        precontext = precontext.substring(Math.max(0, precontext.length()
            - Patch_Margin));
        // Append the end context for this patch.
        if (diff_text1(bigpatch.diffs).length() > Patch_Margin) {
          postcontext = diff_text1(bigpatch.diffs).substring(0, Patch_Margin);
        } else {
          postcontext = diff_text1(bigpatch.diffs);
        }
        if (postcontext.length() != 0) {
          patch.length1 += postcontext.length();
          patch.length2 += postcontext.length();
          if (!patch.diffs.isEmpty()
              && patch.diffs.getLast().operation == Operation.EQUAL) {
            patch.diffs.getLast().text += postcontext;
          } else {
            patch.diffs.add(new Diff(Operation.EQUAL, postcontext));
          }
        }
        if (!empty) {
          pointer.add(patch);
        }
      }
      bigpatch = pointer.hasNext() ? pointer.next() : null;
    }
  }

  /**
   * Take a list of patches and return a textual representation.
   * @param patches List of Patch objects.
   * @return Text representation of patches.
   */
  public String patch_toText(List<Patch> patches) {
    StringBuilder text = new StringBuilder();
    for (Patch aPatch : patches) {
      text.append(aPatch);
    }
    return text.toString();
  }

  /**
   * Parse a textual representation of patches and return a List of Patch
   * objects.
   * @param textline Text representation of patches.
   * @return List of Patch objects.
   * @throws IllegalArgumentException If invalid input.
   */
  public List<Patch> patch_fromText(String textline)
      throws IllegalArgumentException {
    List<Patch> patches = new LinkedList<Patch>();
    if (textline.length() == 0) {
      return patches;
    }
    List<String> textList = Arrays.asList(textline.split("\n"));
    LinkedList<String> text = new LinkedList<String>(textList);
    Patch patch;
    Pattern patchHeader
        = Pattern.compile("^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$");
    Matcher m;
    char sign;
    String line;
    while (!text.isEmpty()) {
      m = patchHeader.matcher(text.getFirst());
      if (!m.matches()) {
        throw new IllegalArgumentException(
            "Invalid patch string: " + text.getFirst());
      }
      patch = new Patch();
      patches.add(patch);
      patch.start1 = Integer.parseInt(m.group(1));
      if (m.group(2).length() == 0) {
        patch.start1--;
        patch.length1 = 1;
      } else if (m.group(2).equals("0")) {
        patch.length1 = 0;
      } else {
        patch.start1--;
        patch.length1 = Integer.parseInt(m.group(2));
      }

      patch.start2 = Integer.parseInt(m.group(3));
      if (m.group(4).length() == 0) {
        patch.start2--;
        patch.length2 = 1;
      } else if (m.group(4).equals("0")) {
        patch.length2 = 0;
      } else {
        patch.start2--;
        patch.length2 = Integer.parseInt(m.group(4));
      }
      text.removeFirst();

      while (!text.isEmpty()) {
        try {
          sign = text.getFirst().charAt(0);
        } catch (IndexOutOfBoundsException e) {
          // Blank line?  Whatever.
          text.removeFirst();
          continue;
        }
        line = text.getFirst().substring(1);
        line = line.replace("+", "%2B");  // decode would change all "+" to " "
        try {
          line = URLDecoder.decode(line, "UTF-8");
        } catch (UnsupportedEncodingException e) {
          // Not likely on modern system.
          throw new Error("This system does not support UTF-8.", e);
        } catch (IllegalArgumentException e) {
          // Malformed URI sequence.
          throw new IllegalArgumentException(
              "Illegal escape in patch_fromText: " + line, e);
        }
        if (sign == '-') {
          // Deletion.
          patch.diffs.add(new Diff(Operation.DELETE, line));
        } else if (sign == '+') {
          // Insertion.
          patch.diffs.add(new Diff(Operation.INSERT, line));
        } else if (sign == ' ') {
          // Minor equality.
          patch.diffs.add(new Diff(Operation.EQUAL, line));
        } else if (sign == '@') {
          // Start of next patch.
          break;
        } else {
          // WTF?
          throw new IllegalArgumentException(
              "Invalid patch mode '" + sign + "' in: " + line);
        }
        text.removeFirst();
      }
    }
    return patches;
  }


  /**
   * Class representing one diff operation.
   */
  public static class Diff {
    /**
     * One of: INSERT, DELETE or EQUAL.
     */
    public Operation operation;
    /**
     * The text associated with this diff operation.
     */
    public String text;

    /**
     * Constructor.  Initializes the diff with the provided values.
     * @param operation One of INSERT, DELETE or EQUAL.
     * @param text The text being applied.
     */
    public Diff(Operation operation, String text) {
      // Construct a diff with the specified operation and text.
      this.operation = operation;
      this.text = text;
    }

    /**
     * Display a human-readable version of this Diff.
     * @return text version.
     */
    public String toString() {
      String prettyText = this.text.replace('\n', '\u00b6');
      return "Diff(" + this.operation + ",\"" + prettyText + "\")";
    }

    /**
     * Create a numeric hash value for a Diff.
     * This function is not used by DMP.
     * @return Hash value.
     */
    @Override
    public int hashCode() {
      final int prime = 31;
      int result = (operation == null) ? 0 : operation.hashCode();
      result += prime * ((text == null) ? 0 : text.hashCode());
      return result;
    }

    /**
     * Is this Diff equivalent to another Diff?
     * @param obj Another Diff to compare against.
     * @return true or false.
     */
    @Override
    public boolean equals(Object obj) {
      if (this == obj) {
        return true;
      }
      if (obj == null) {
        return false;
      }
      if (getClass() != obj.getClass()) {
        return false;
      }
      Diff other = (Diff) obj;
      if (operation != other.operation) {
        return false;
      }
      if (text == null) {
        if (other.text != null) {
          return false;
        }
      } else if (!text.equals(other.text)) {
        return false;
      }
      return true;
    }
  }


  /**
   * Class representing one patch operation.
   */
  public static class Patch {
    public LinkedList<Diff> diffs;
    public int start1;
    public int start2;
    public int length1;
    public int length2;

    /**
     * Constructor.  Initializes with an empty list of diffs.
     */
    public Patch() {
      this.diffs = new LinkedList<Diff>();
    }

    /**
     * Emulate GNU diff's format.
     * Header: @@ -382,8 +481,9 @@
     * Indices are printed as 1-based, not 0-based.
     * @return The GNU diff string.
     */
    public String toString() {
      String coords1, coords2;
      if (this.length1 == 0) {
        coords1 = this.start1 + ",0";
      } else if (this.length1 == 1) {
        coords1 = Integer.toString(this.start1 + 1);
      } else {
        coords1 = (this.start1 + 1) + "," + this.length1;
      }
      if (this.length2 == 0) {
        coords2 = this.start2 + ",0";
      } else if (this.length2 == 1) {
        coords2 = Integer.toString(this.start2 + 1);
      } else {
        coords2 = (this.start2 + 1) + "," + this.length2;
      }
      StringBuilder text = new StringBuilder();
      text.append("@@ -").append(coords1).append(" +").append(coords2)
          .append(" @@\n");
      // Escape the body of the patch with %xx notation.
      for (Diff aDiff : this.diffs) {
        switch (aDiff.operation) {
        case INSERT:
          text.append('+');
          break;
        case DELETE:
          text.append('-');
          break;
        case EQUAL:
          text.append(' ');
          break;
        }
        try {
          text.append(URLEncoder.encode(aDiff.text, "UTF-8").replace('+', ' '))
              .append("\n");
        } catch (UnsupportedEncodingException e) {
          // Not likely on modern system.
          throw new Error("This system does not support UTF-8.", e);
        }
      }
      return unescapeForEncodeUriCompatability(text.toString());
    }
  }

  /**
   * Unescape selected chars for compatability with JavaScript's encodeURI.
   * In speed critical applications this could be dropped since the
   * receiving application will certainly decode these fine.
   * Note that this function is case-sensitive.  Thus "%3f" would not be
   * unescaped.  But this is ok because it is only called with the output of
   * URLEncoder.encode which returns uppercase hex.
   *
   * Example: "%3F" -> "?", "%24" -> "$", etc.
   *
   * @param str The string to escape.
   * @return The escaped string.
   */
  private static String unescapeForEncodeUriCompatability(String str) {
    return str.replace("%21", "!").replace("%7E", "~")
        .replace("%27", "'").replace("%28", "(").replace("%29", ")")
        .replace("%3B", ";").replace("%2F", "/").replace("%3F", "?")
        .replace("%3A", ":").replace("%40", "@").replace("%26", "&")
        .replace("%3D", "=").replace("%2B", "+").replace("%24", "$")
        .replace("%2C", ",").replace("%23", "#");
  }
}
]]></snapshot>
  </Command>
  <Command __id="4874" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 14:25:37 EDT 2019" docOffset="4" timestamp="95460121" />
  <Command __id="4875" _type="ShellCommand" date="Sat Aug 24 14:26:04 EDT 2019" timestamp="95487174" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4876" _type="ShellCommand" date="Sat Aug 24 14:26:12 EDT 2019" timestamp="95495853" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4877" _type="EclipseCommand" commandID="org.eclipse.ui.project.properties" date="Sat Aug 24 14:26:12 EDT 2019" timestamp="95495876" />
  <Command __id="4878" _type="ShellCommand" date="Sat Aug 24 14:26:21 EDT 2019" timestamp="95504740" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4879" _type="ShellCommand" date="Sat Aug 24 14:26:24 EDT 2019" timestamp="95507958" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4880" _type="ShellCommand" date="Sat Aug 24 14:26:24 EDT 2019" timestamp="95508028" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4881" _type="ShellCommand" date="Sat Aug 24 14:26:28 EDT 2019" timestamp="95511139" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4882" _type="FileOpenCommand" date="Sat Aug 24 14:26:47 EDT 2019" docASTNodeCount="43" docActiveCodeLength="250" docExpressionCount="25" docLength="250" projectName="GraderBasics" timestamp="95530466">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\gradingTools\file\checkers\interpreter\TestDiffPatch.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.file.checkers.interpreter;

import name.fraser.neil.plaintext.diff_match_patch;

public class TestDiffPatch {
	diff_match_patch differ = new diff_match_patch();
	public static void main (String[] args) {
		differ.
	}
}
]]></snapshot>
  </Command>
  <Command __id="4883" _type="MoveCaretCommand" caretOffset="167" date="Sat Aug 24 14:26:47 EDT 2019" docOffset="167" timestamp="95530594" />
  <Command __id="4884" _type="ShellCommand" date="Sat Aug 24 14:26:57 EDT 2019" timestamp="95540919" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4885" _type="ShellCommand" date="Sat Aug 24 14:27:34 EDT 2019" timestamp="95577988" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4886" _type="EclipseCommand" commandID="org.eclipse.ui.project.properties" date="Sat Aug 24 14:27:34 EDT 2019" timestamp="95578008" />
  <Command __id="4887" _type="MoveCaretCommand" caretOffset="245" date="Sat Aug 24 14:27:38 EDT 2019" docOffset="245" timestamp="95581131" />
  <Command __id="4888" _type="MoveCaretCommand" caretOffset="241" date="Sat Aug 24 14:27:38 EDT 2019" docOffset="241" timestamp="95582017" />
  <DocumentChange __id="4889" _type="Delete" date="Sat Aug 24 14:27:39 EDT 2019" docASTNodeCount="43" docActiveCodeLength="249" docExpressionCount="25" docLength="249" endLine="7" length="1" offset="240" startLine="7" timestamp="95582539">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4890" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:27:39 EDT 2019" timestamp="95582541" />
  <DocumentChange __id="4891" _type="Insert" date="Sat Aug 24 14:27:40 EDT 2019" docASTNodeCount="43" docActiveCodeLength="250" docExpressionCount="25" docLength="250" length="1" offset="240" timestamp="95583231">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4892" _type="InsertStringCommand" date="Sat Aug 24 14:27:40 EDT 2019" timestamp="95583234" timestamp2="95583234">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4893" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 14:27:40 EDT 2019" start_end="START" timestamp="95583242" />
  <Command __id="4894" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:27:40 EDT 2019" start_end="END" timestamp="95583266" />
  <DocumentChange __id="4895" _type="Delete" date="Sat Aug 24 14:27:43 EDT 2019" docASTNodeCount="43" docActiveCodeLength="249" docExpressionCount="25" docLength="249" endLine="7" length="1" offset="240" startLine="7" timestamp="95586362">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4896" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:27:43 EDT 2019" timestamp="95586364" />
  <DocumentChange __id="4897" _type="Insert" date="Sat Aug 24 14:27:44 EDT 2019" docASTNodeCount="43" docActiveCodeLength="250" docExpressionCount="25" docLength="250" length="1" offset="240" timestamp="95587228">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4898" _type="InsertStringCommand" date="Sat Aug 24 14:27:44 EDT 2019" timestamp="95587233" timestamp2="95587233">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4899" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 14:27:44 EDT 2019" start_end="START" timestamp="95587234" />
  <Command __id="4900" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:27:44 EDT 2019" start_end="END" timestamp="95587241" />
  <Command __id="4901" _type="MoveCaretCommand" caretOffset="137" date="Sat Aug 24 14:27:53 EDT 2019" docOffset="137" timestamp="95596536" />
  <DocumentChange __id="4902" _type="Insert" date="Sat Aug 24 14:27:54 EDT 2019" docASTNodeCount="43" docActiveCodeLength="256" docExpressionCount="25" docLength="256" length="6" offset="137" repeat="6" timestamp="95597283" timestamp2="95598011">
    <text><![CDATA[statoc]]></text>
  </DocumentChange>
  <Command __id="4903" _type="InsertStringCommand" date="Sat Aug 24 14:27:54 EDT 2019" repeat="6" timestamp="95597291" timestamp2="95598016">
    <data><![CDATA[statoc]]></data>
  </Command>
  <DocumentChange __id="4914" _type="Delete" date="Sat Aug 24 14:27:55 EDT 2019" docASTNodeCount="43" docActiveCodeLength="254" docExpressionCount="25" docLength="254" endLine="5" length="2" offset="141" repeat="2" startLine="5" timestamp="95598483" timestamp2="95598617">
    <text><![CDATA[oc]]></text>
  </DocumentChange>
  <Command __id="4915" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:27:55 EDT 2019" repeat="2" timestamp="95598487" timestamp2="95598618" />
  <DocumentChange __id="4918" _type="Insert" date="Sat Aug 24 14:27:55 EDT 2019" docASTNodeCount="44" docActiveCodeLength="257" docExpressionCount="25" docLength="257" length="3" offset="141" repeat="3" timestamp="95599024" timestamp2="95599297">
    <text><![CDATA[ic ]]></text>
  </DocumentChange>
  <Command __id="4919" _type="InsertStringCommand" date="Sat Aug 24 14:27:55 EDT 2019" repeat="3" timestamp="95599028" timestamp2="95599304">
    <data><![CDATA[ic ]]></data>
  </Command>
  <Command __id="4924" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 14:27:56 EDT 2019" timestamp="95600032" />
  <Command __id="4925" _type="MoveCaretCommand" caretOffset="248" date="Sat Aug 24 14:27:58 EDT 2019" docOffset="248" timestamp="95601926" />
  <DocumentChange __id="4926" _type="Delete" date="Sat Aug 24 14:27:59 EDT 2019" docASTNodeCount="44" docActiveCodeLength="256" docExpressionCount="25" docLength="256" endLine="7" length="1" offset="247" startLine="7" timestamp="95602296">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4927" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:27:59 EDT 2019" timestamp="95602305" />
  <DocumentChange __id="4928" _type="Insert" date="Sat Aug 24 14:27:59 EDT 2019" docASTNodeCount="44" docActiveCodeLength="257" docExpressionCount="25" docLength="257" length="1" offset="247" timestamp="95602905">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4929" _type="InsertStringCommand" date="Sat Aug 24 14:27:59 EDT 2019" timestamp="95602911" timestamp2="95602911">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4930" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 14:27:59 EDT 2019" start_end="START" timestamp="95602914" />
  <Command __id="4931" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:28:06 EDT 2019" start_end="END" timestamp="95609678" />
  <Command __id="4932" _type="MoveCaretCommand" caretOffset="257" date="Sat Aug 24 14:28:17 EDT 2019" docOffset="257" timestamp="95620157" />
  <Command __id="4933" _type="ShellCommand" date="Sat Aug 24 14:29:00 EDT 2019" timestamp="95663982" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4934" _type="ShellCommand" date="Sat Aug 24 14:29:07 EDT 2019" timestamp="95670078" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4935" _type="EclipseCommand" commandID="org.eclipse.ui.project.properties" date="Sat Aug 24 14:29:07 EDT 2019" timestamp="95670099" />
  <Command __id="4936" _type="ShellCommand" date="Sat Aug 24 14:29:11 EDT 2019" timestamp="95674686" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4937" _type="ShellCommand" date="Sat Aug 24 14:29:21 EDT 2019" timestamp="95684099" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4938" _type="PasteCommand" date="Sat Aug 24 14:29:27 EDT 2019" timestamp="95690671" />
  <Command __id="4939" _type="ShellCommand" date="Sat Aug 24 14:29:34 EDT 2019" timestamp="95697813" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="4940" _type="ShellCommand" date="Sat Aug 24 14:30:01 EDT 2019" timestamp="95724886" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="4941" _type="EclipseCommand" commandID="org.eclipse.ui.project.properties" date="Sat Aug 24 14:30:01 EDT 2019" timestamp="95724913" />
  <Command __id="4942" _type="MoveCaretCommand" caretOffset="248" date="Sat Aug 24 14:30:05 EDT 2019" docOffset="248" timestamp="95728276" />
  <DocumentChange __id="4943" _type="Delete" date="Sat Aug 24 14:30:05 EDT 2019" docASTNodeCount="44" docActiveCodeLength="256" docExpressionCount="25" docLength="256" endLine="7" length="1" offset="247" startLine="7" timestamp="95728818">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4944" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:30:05 EDT 2019" timestamp="95728822" />
  <Command __id="4945" _type="PredictionCommand" date="Sat Aug 24 14:30:05 EDT 2019" prediction_type="MakingProgress" timestamp="95728831" />
  <DocumentChange __id="4946" _type="Insert" date="Sat Aug 24 14:30:06 EDT 2019" docASTNodeCount="44" docActiveCodeLength="257" docExpressionCount="25" docLength="257" length="1" offset="247" timestamp="95729463">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="4947" _type="InsertStringCommand" date="Sat Aug 24 14:30:06 EDT 2019" timestamp="95729465" timestamp2="95729465">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="4948" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 14:30:06 EDT 2019" start_end="START" timestamp="95729466" />
  <Command __id="4949" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:30:14 EDT 2019" start_end="END" timestamp="95737171" />
  <Command __id="4950" _type="SelectTextCommand" caretOffset="247" date="Sat Aug 24 14:30:14 EDT 2019" end="248" start="247" timestamp="95737833" />
  <Command __id="4951" _type="MoveCaretCommand" caretOffset="193" date="Sat Aug 24 14:30:15 EDT 2019" docOffset="193" timestamp="95738917" />
  <DocumentChange __id="4952" _type="Insert" date="Sat Aug 24 14:30:16 EDT 2019" docASTNodeCount="46" docActiveCodeLength="277" docExpressionCount="25" docLength="277" length="20" offset="193" repeat="18" timestamp="95739416" timestamp2="95743107">
    <text><![CDATA[
	public static fna]]></text>
  </DocumentChange>
  <Command __id="4953" _type="InsertStringCommand" date="Sat Aug 24 14:30:16 EDT 2019" timestamp="95739421" timestamp2="95739421">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="4955" _type="InsertStringCommand" date="Sat Aug 24 14:30:16 EDT 2019" repeat="17" timestamp="95740072" timestamp2="95743112">
    <data><![CDATA[public static fna]]></data>
  </Command>
  <DocumentChange __id="4988" _type="Delete" date="Sat Aug 24 14:30:20 EDT 2019" docASTNodeCount="46" docActiveCodeLength="275" docExpressionCount="25" docLength="275" endLine="6" length="2" offset="211" repeat="2" startLine="6" timestamp="95743340" timestamp2="95743468">
    <text><![CDATA[na]]></text>
  </DocumentChange>
  <Command __id="4989" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:30:20 EDT 2019" repeat="2" timestamp="95743343" timestamp2="95743469" />
  <DocumentChange __id="4992" _type="Insert" date="Sat Aug 24 14:30:20 EDT 2019" docASTNodeCount="47" docActiveCodeLength="280" docExpressionCount="25" docLength="280" length="5" offset="211" repeat="5" timestamp="95743797" timestamp2="95744526">
    <text><![CDATA[inal ]]></text>
  </DocumentChange>
  <Command __id="4993" _type="InsertStringCommand" date="Sat Aug 24 14:30:20 EDT 2019" repeat="5" timestamp="95743800" timestamp2="95744528">
    <data><![CDATA[inal ]]></data>
  </Command>
  <DocumentChange __id="5002" _type="Insert" date="Sat Aug 24 14:30:29 EDT 2019" docASTNodeCount="47" docActiveCodeLength="308" docExpressionCount="25" docLength="308" length="28" offset="216" repeat="25" timestamp="95752251" timestamp2="95761469">
    <text><![CDATA[STRING_1 = "hello world";
	]]></text>
  </DocumentChange>
  <Command __id="5003" _type="InsertStringCommand" date="Sat Aug 24 14:30:29 EDT 2019" repeat="25" timestamp="95752258" timestamp2="95760609">
    <data><![CDATA[STRING_1 = "hello world	;]]></data>
  </Command>
  <Command __id="5052" _type="InsertStringCommand" date="Sat Aug 24 14:30:38 EDT 2019" timestamp="95761472" timestamp2="95761472">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5053" _type="MoveCaretCommand" caretOffset="215" date="Sat Aug 24 14:30:40 EDT 2019" docOffset="215" timestamp="95763960" />
  <DocumentChange __id="5054" _type="Insert" date="Sat Aug 24 14:30:41 EDT 2019" docASTNodeCount="53" docActiveCodeLength="315" docExpressionCount="28" docLength="315" length="7" offset="215" repeat="7" timestamp="95764225" timestamp2="95765629">
    <text><![CDATA[ String]]></text>
  </DocumentChange>
  <Command __id="5055" _type="InsertStringCommand" date="Sat Aug 24 14:30:41 EDT 2019" repeat="7" timestamp="95764232" timestamp2="95765631">
    <data><![CDATA[ String]]></data>
  </Command>
  <Command __id="5068" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 14:30:43 EDT 2019" timestamp="95766314" />
  <Command __id="5069" _type="MoveCaretCommand" caretOffset="218" date="Sat Aug 24 14:30:44 EDT 2019" docOffset="218" timestamp="95767568" />
  <Command __id="5070" _type="SelectTextCommand" caretOffset="222" date="Sat Aug 24 14:30:44 EDT 2019" end="222" start="216" timestamp="95767754" />
  <Command __id="5071" _type="SelectTextCommand" caretOffset="250" date="Sat Aug 24 14:30:44 EDT 2019" end="250" start="195" timestamp="95767995" />
  <Command __id="5072" _type="CopyCommand" date="Sat Aug 24 14:30:45 EDT 2019" timestamp="95768637" />
  <Command __id="5073" _type="MoveCaretCommand" caretOffset="202" date="Sat Aug 24 14:30:46 EDT 2019" docOffset="202" timestamp="95769815" />
  <Command __id="5074" _type="MoveCaretCommand" caretOffset="251" date="Sat Aug 24 14:30:47 EDT 2019" docOffset="251" timestamp="95770427" />
  <DocumentChange __id="5075" _type="Replace" date="Sat Aug 24 14:30:47 EDT 2019" docASTNodeCount="62" docActiveCodeLength="369" docExpressionCount="31" docLength="369" endLine="7" insertionLength="55" int_docASTNodeCount="53" int_docActiveCodeLength="314" int_docExpressionCount="28" int_docLength="314" length="1" offset="250" startLine="7" timestamp="95770999">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public static final String STRING_1 = "hello world";
]]></insertedText>
  </DocumentChange>
  <Command __id="5076" _type="PasteCommand" date="Sat Aug 24 14:30:47 EDT 2019" timestamp="95771013" />
  <Command __id="5077" _type="MoveCaretCommand" caretOffset="286" date="Sat Aug 24 14:30:50 EDT 2019" docOffset="286" timestamp="95773260" />
  <DocumentChange __id="5078" _type="Delete" date="Sat Aug 24 14:30:50 EDT 2019" docASTNodeCount="62" docActiveCodeLength="368" docExpressionCount="31" docLength="368" endLine="7" length="1" offset="285" startLine="7" timestamp="95773677">
    <text><![CDATA[1]]></text>
  </DocumentChange>
  <Command __id="5079" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:30:50 EDT 2019" timestamp="95773679" />
  <DocumentChange __id="5080" _type="Insert" date="Sat Aug 24 14:30:50 EDT 2019" docASTNodeCount="62" docActiveCodeLength="369" docExpressionCount="31" docLength="369" length="1" offset="285" timestamp="95774067">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <Command __id="5081" _type="InsertStringCommand" date="Sat Aug 24 14:30:50 EDT 2019" timestamp="95774072" timestamp2="95774072">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="5082" _type="MoveCaretCommand" caretOffset="294" date="Sat Aug 24 14:30:52 EDT 2019" docOffset="294" timestamp="95775153" />
  <Command __id="5083" _type="SelectTextCommand" caretOffset="295" date="Sat Aug 24 14:30:52 EDT 2019" end="295" start="290" timestamp="95775389" />
  <DocumentChange __id="5084" _type="Replace" date="Sat Aug 24 14:30:52 EDT 2019" docASTNodeCount="62" docActiveCodeLength="365" docExpressionCount="31" docLength="365" endLine="7" insertionLength="1" int_docASTNodeCount="62" int_docActiveCodeLength="364" int_docExpressionCount="31" int_docLength="364" length="5" offset="290" startLine="7" timestamp="95775944">
    <deletedText><![CDATA[hello]]></deletedText>
    <insertedText><![CDATA[f]]></insertedText>
  </DocumentChange>
  <Command __id="5085" _type="InsertStringCommand" date="Sat Aug 24 14:30:52 EDT 2019" timestamp="95775949" timestamp2="95775949">
    <data><![CDATA[f]]></data>
  </Command>
  <DocumentChange __id="5086" _type="Delete" date="Sat Aug 24 14:30:53 EDT 2019" docASTNodeCount="62" docActiveCodeLength="364" docExpressionCount="31" docLength="364" endLine="7" length="1" offset="290" startLine="7" timestamp="95776500">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="5087" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:30:53 EDT 2019" timestamp="95776505" />
  <DocumentChange __id="5088" _type="Insert" date="Sat Aug 24 14:30:54 EDT 2019" docASTNodeCount="62" docActiveCodeLength="368" docExpressionCount="31" docLength="368" length="4" offset="290" repeat="4" timestamp="95777124" timestamp2="95777913">
    <text><![CDATA[goof]]></text>
  </DocumentChange>
  <Command __id="5089" _type="InsertStringCommand" date="Sat Aug 24 14:30:54 EDT 2019" repeat="4" timestamp="95777127" timestamp2="95777915">
    <data><![CDATA[goof]]></data>
  </Command>
  <DocumentChange __id="5096" _type="Delete" date="Sat Aug 24 14:30:55 EDT 2019" docASTNodeCount="62" docActiveCodeLength="367" docExpressionCount="31" docLength="367" endLine="7" length="1" offset="293" startLine="7" timestamp="95778476">
    <text><![CDATA[f]]></text>
  </DocumentChange>
  <Command __id="5097" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:30:55 EDT 2019" timestamp="95778477" />
  <DocumentChange __id="5098" _type="Insert" date="Sat Aug 24 14:30:55 EDT 2019" docASTNodeCount="62" docActiveCodeLength="371" docExpressionCount="31" docLength="371" length="4" offset="293" repeat="4" timestamp="95778740" timestamp2="95779327">
    <text><![CDATA[dbye]]></text>
  </DocumentChange>
  <Command __id="5099" _type="InsertStringCommand" date="Sat Aug 24 14:30:55 EDT 2019" repeat="4" timestamp="95778745" timestamp2="95779333">
    <data><![CDATA[dbye]]></data>
  </Command>
  <Command __id="5106" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 14:30:57 EDT 2019" timestamp="95780265" />
  <Command __id="5107" _type="MoveCaretCommand" caretOffset="355" date="Sat Aug 24 14:31:01 EDT 2019" docOffset="355" timestamp="95784516" />
  <Command __id="5108" _type="ShellCommand" date="Sat Aug 24 14:31:11 EDT 2019" timestamp="95794233" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5109" _type="ShellCommand" date="Sat Aug 24 14:31:55 EDT 2019" timestamp="95839000" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5110" _type="ShellCommand" date="Sat Aug 24 14:31:59 EDT 2019" timestamp="95842805" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5111" _type="ShellCommand" date="Sat Aug 24 14:32:00 EDT 2019" timestamp="95843263" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5112" _type="SelectTextCommand" caretOffset="361" date="Sat Aug 24 14:32:04 EDT 2019" end="362" start="361" timestamp="95847128" />
  <Command __id="5113" _type="SelectTextCommand" caretOffset="355" date="Sat Aug 24 14:32:09 EDT 2019" end="362" start="355" timestamp="95852139" />
  <DocumentChange __id="5114" _type="Replace" date="Sat Aug 24 14:32:09 EDT 2019" docASTNodeCount="75" docActiveCodeLength="453" docExpressionCount="40" docLength="453" endLine="10" insertionLength="91" int_docASTNodeCount="60" int_docActiveCodeLength="362" int_docExpressionCount="30" int_docLength="362" length="9" offset="353" startLine="10" timestamp="95852614">
    <deletedText><![CDATA[		differ.]]></deletedText>
    <insertedText><![CDATA[		LinkedList<diff_match_patch.Diff> diff = dmp.diff_main("Hello World.", "Goodbye World.");]]></insertedText>
  </DocumentChange>
  <Command __id="5115" _type="PasteCommand" date="Sat Aug 24 14:32:09 EDT 2019" timestamp="95852634" />
  <Command __id="5116" _type="MoveCaretCommand" caretOffset="164" date="Sat Aug 24 14:32:13 EDT 2019" docOffset="164" timestamp="95856100" />
  <Command __id="5117" _type="SelectTextCommand" caretOffset="167" date="Sat Aug 24 14:32:13 EDT 2019" end="167" start="161" timestamp="95856374" />
  <Command __id="5118" _type="CopyCommand" date="Sat Aug 24 14:32:13 EDT 2019" timestamp="95856916" />
  <Command __id="5119" _type="MoveCaretCommand" caretOffset="397" date="Sat Aug 24 14:32:15 EDT 2019" docOffset="397" timestamp="95858303" />
  <Command __id="5120" _type="SelectTextCommand" caretOffset="399" date="Sat Aug 24 14:32:15 EDT 2019" end="399" start="396" timestamp="95858551" />
  <DocumentChange __id="5121" _type="Replace" date="Sat Aug 24 14:32:16 EDT 2019" docASTNodeCount="75" docActiveCodeLength="456" docExpressionCount="40" docLength="456" endLine="10" insertionLength="6" int_docASTNodeCount="74" int_docActiveCodeLength="450" int_docExpressionCount="39" int_docLength="450" length="3" offset="396" startLine="10" timestamp="95859253">
    <deletedText><![CDATA[dmp]]></deletedText>
    <insertedText><![CDATA[differ]]></insertedText>
  </DocumentChange>
  <Command __id="5122" _type="PasteCommand" date="Sat Aug 24 14:32:16 EDT 2019" timestamp="95859266" />
  <Command __id="5123" _type="MoveCaretCommand" caretOffset="427" date="Sat Aug 24 14:32:19 EDT 2019" docOffset="427" timestamp="95862595" />
  <DocumentChange __id="5124" _type="Delete" date="Sat Aug 24 14:32:19 EDT 2019" docASTNodeCount="74" docActiveCodeLength="442" docExpressionCount="39" docLength="442" endLine="10" length="14" offset="413" repeat="14" startLine="10" timestamp="95863005" timestamp2="95865250">
    <text><![CDATA["Hello World."]]></text>
  </DocumentChange>
  <Command __id="5125" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:32:19 EDT 2019" repeat="14" timestamp="95863013" timestamp2="95865252" />
  <DocumentChange __id="5152" _type="Insert" date="Sat Aug 24 14:32:22 EDT 2019" docASTNodeCount="75" docActiveCodeLength="450" docExpressionCount="40" docLength="450" length="8" offset="413" repeat="8" timestamp="95865712" timestamp2="95868212">
    <text><![CDATA[STRING_1]]></text>
  </DocumentChange>
  <Command __id="5153" _type="InsertStringCommand" date="Sat Aug 24 14:32:22 EDT 2019" repeat="8" timestamp="95865725" timestamp2="95868216">
    <data><![CDATA[STRING_1]]></data>
  </Command>
  <Command __id="5168" _type="MoveCaretCommand" caretOffset="439" date="Sat Aug 24 14:32:28 EDT 2019" docOffset="439" timestamp="95871645" />
  <DocumentChange __id="5169" _type="Delete" date="Sat Aug 24 14:32:29 EDT 2019" docASTNodeCount="75" docActiveCodeLength="434" docExpressionCount="40" docLength="434" endLine="10" length="16" offset="423" repeat="16" startLine="10" timestamp="95872342" timestamp2="95874707">
    <text><![CDATA["Goodbye World."]]></text>
  </DocumentChange>
  <Command __id="5170" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:32:29 EDT 2019" repeat="16" timestamp="95872361" timestamp2="95874714" />
  <DocumentChange __id="5201" _type="Insert" date="Sat Aug 24 14:32:32 EDT 2019" docASTNodeCount="75" docActiveCodeLength="442" docExpressionCount="40" docLength="442" length="8" offset="423" repeat="8" timestamp="95875612" timestamp2="95878262">
    <text><![CDATA[STRING_2]]></text>
  </DocumentChange>
  <Command __id="5202" _type="InsertStringCommand" date="Sat Aug 24 14:32:32 EDT 2019" repeat="8" timestamp="95875615" timestamp2="95878264">
    <data><![CDATA[STRING_2]]></data>
  </Command>
  <Command __id="5217" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sat Aug 24 14:32:39 EDT 2019" start_end="START" timestamp="95882776" />
  <Command __id="5218" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.internal.ui.CompilationUnitEditor.ruler.actions/org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction" date="Sat Aug 24 14:32:39 EDT 2019" timestamp="95882860" />
  <Command __id="5219" _type="ShellCommand" date="Sat Aug 24 14:32:41 EDT 2019" timestamp="95884168" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5220" _type="ShellCommand" date="Sat Aug 24 14:32:41 EDT 2019" timestamp="95884396" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5221" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sat Aug 24 14:32:41 EDT 2019" start_end="END" timestamp="95884416" />
  <DocumentChange __id="5222" _type="Insert" date="Sat Aug 24 14:32:41 EDT 2019" docASTNodeCount="81" docActiveCodeLength="474" docExpressionCount="45" docLength="474" length="32" offset="51" repeat="2" timestamp="95884419" timestamp2="95884419">
    <text><![CDATA[import java.util.LinkedList;

]]></text>
  </DocumentChange>
  <Command __id="5224" _type="SelectTextCommand" caretOffset="397" date="Sat Aug 24 14:32:41 EDT 2019" end="397" start="387" timestamp="95884490" />
  <Command __id="5225" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 14:32:42 EDT 2019" timestamp="95885358" />
  <Command __id="5226" _type="MoveCaretCommand" caretOffset="465" date="Sat Aug 24 14:33:25 EDT 2019" docOffset="465" timestamp="95928615" />
  <Command __id="5227" _type="ShellCommand" date="Sat Aug 24 14:33:27 EDT 2019" timestamp="95930234" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5228" _type="ShellCommand" date="Sat Aug 24 14:33:40 EDT 2019" timestamp="95943352" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="5229" _type="Insert" date="Sat Aug 24 14:33:42 EDT 2019" docASTNodeCount="81" docActiveCodeLength="478" docExpressionCount="45" docLength="478" length="4" offset="465" timestamp="95945649">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="5230" _type="InsertStringCommand" date="Sat Aug 24 14:33:42 EDT 2019" timestamp="95945653" timestamp2="95945653">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5231" _type="Replace" date="Sat Aug 24 14:33:43 EDT 2019" docASTNodeCount="93" docActiveCodeLength="548" docExpressionCount="55" docLength="606" endLine="13" insertionLength="130" int_docASTNodeCount="81" int_docActiveCodeLength="476" int_docExpressionCount="45" int_docLength="476" length="2" offset="467" startLine="13" timestamp="95946450">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		dmp.diff_cleanupSemantic(diff);
	    // Result: [(-1, "Hello"), (1, "Goodbye"), (0, " World.")]
	    System.out.println(diff);]]></insertedText>
  </DocumentChange>
  <Command __id="5232" _type="PasteCommand" date="Sat Aug 24 14:33:43 EDT 2019" timestamp="95946463" />
  <Command __id="5233" _type="MoveCaretCommand" caretOffset="423" date="Sat Aug 24 14:33:45 EDT 2019" docOffset="423" timestamp="95948652" />
  <Command __id="5234" _type="SelectTextCommand" caretOffset="425" date="Sat Aug 24 14:33:45 EDT 2019" end="425" start="421" timestamp="95948909" />
  <Command __id="5235" _type="CopyCommand" date="Sat Aug 24 14:33:46 EDT 2019" timestamp="95949578" />
  <Command __id="5236" _type="MoveCaretCommand" caretOffset="472" date="Sat Aug 24 14:33:47 EDT 2019" docOffset="472" timestamp="95951057" />
  <Command __id="5237" _type="SelectTextCommand" caretOffset="472" date="Sat Aug 24 14:33:48 EDT 2019" end="472" start="469" timestamp="95951300" />
  <DocumentChange __id="5238" _type="Replace" date="Sat Aug 24 14:33:48 EDT 2019" docASTNodeCount="93" docActiveCodeLength="549" docExpressionCount="55" docLength="607" endLine="13" insertionLength="6" int_docASTNodeCount="92" int_docActiveCodeLength="543" int_docExpressionCount="54" int_docLength="601" length="5" offset="467" startLine="13" timestamp="95951994">
    <deletedText><![CDATA[		dmp]]></deletedText>
    <insertedText><![CDATA[		diff]]></insertedText>
  </DocumentChange>
  <Command __id="5239" _type="PasteCommand" date="Sat Aug 24 14:33:48 EDT 2019" timestamp="95952001" />
  <DocumentChange __id="5240" _type="Insert" date="Sat Aug 24 14:34:00 EDT 2019" docASTNodeCount="93" docActiveCodeLength="551" docExpressionCount="55" docLength="609" length="2" offset="473" repeat="2" timestamp="95963407" timestamp2="95963611">
    <text><![CDATA[er]]></text>
  </DocumentChange>
  <Command __id="5241" _type="InsertStringCommand" date="Sat Aug 24 14:34:00 EDT 2019" repeat="2" timestamp="95963411" timestamp2="95963615">
    <data><![CDATA[er]]></data>
  </Command>
  <Command __id="5244" _type="MoveCaretCommand" caretOffset="593" date="Sat Aug 24 14:34:10 EDT 2019" docOffset="593" timestamp="95973244" />
  <Command __id="5245" _type="SelectTextCommand" caretOffset="598" date="Sat Aug 24 14:34:10 EDT 2019" end="598" start="594" timestamp="95973431" />
  <Command __id="5246" _type="SelectTextCommand" caretOffset="602" date="Sat Aug 24 14:34:10 EDT 2019" end="602" start="570" timestamp="95973672" />
  <Command __id="5247" _type="CopyCommand" date="Sat Aug 24 14:34:11 EDT 2019" timestamp="95974256" />
  <Command __id="5248" _type="MoveCaretCommand" caretOffset="465" date="Sat Aug 24 14:34:13 EDT 2019" docOffset="465" timestamp="95976430" />
  <DocumentChange __id="5249" _type="Insert" date="Sat Aug 24 14:34:13 EDT 2019" docASTNodeCount="93" docActiveCodeLength="555" docExpressionCount="55" docLength="613" length="4" offset="465" timestamp="95976872">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="5250" _type="InsertStringCommand" date="Sat Aug 24 14:34:13 EDT 2019" timestamp="95976882" timestamp2="95976882">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5251" _type="Replace" date="Sat Aug 24 14:34:14 EDT 2019" docASTNodeCount="100" docActiveCodeLength="585" docExpressionCount="61" docLength="643" endLine="13" insertionLength="32" int_docASTNodeCount="93" int_docActiveCodeLength="553" int_docExpressionCount="55" int_docLength="611" length="2" offset="467" startLine="13" timestamp="95977613">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[	    System.out.println(diff);
]]></insertedText>
  </DocumentChange>
  <Command __id="5252" _type="PasteCommand" date="Sat Aug 24 14:34:14 EDT 2019" timestamp="95977620" />
  <Command __id="5253" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 14:34:15 EDT 2019" timestamp="95978676" />
  <Command __id="5254" _type="MoveCaretCommand" caretOffset="634" date="Sat Aug 24 14:34:18 EDT 2019" docOffset="634" timestamp="95982062" />
  <DocumentChange __id="5255" _type="Insert" date="Sat Aug 24 14:34:19 EDT 2019" docASTNodeCount="104" docActiveCodeLength="600" docExpressionCount="64" docLength="658" length="15" offset="634" repeat="9" timestamp="95982672" timestamp2="95986057">
    <text><![CDATA[
	    differ.p]]></text>
  </DocumentChange>
  <Command __id="5256" _type="InsertStringCommand" date="Sat Aug 24 14:34:19 EDT 2019" timestamp="95982678" timestamp2="95982678">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5258" _type="InsertStringCommand" date="Sat Aug 24 14:34:20 EDT 2019" repeat="7" timestamp="95983533" timestamp2="95985022">
    <data><![CDATA[differ.]]></data>
  </Command>
  <Command __id="5271" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 14:34:21 EDT 2019" start_end="START" timestamp="95985023" />
  <Command __id="5273" _type="ShellCommand" date="Sat Aug 24 14:34:40 EDT 2019" timestamp="96003174" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5274" _type="ShellCommand" date="Sat Aug 24 14:34:40 EDT 2019" timestamp="96003406" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5275" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:34:40 EDT 2019" start_end="END" timestamp="96003423" />
  <DocumentChange __id="5276" _type="Replace" date="Sat Aug 24 14:34:40 EDT 2019" docASTNodeCount="106" docActiveCodeLength="621" docExpressionCount="66" docLength="679" endLine="18" insertionLength="22" int_docASTNodeCount="102" int_docActiveCodeLength="599" int_docExpressionCount="62" int_docLength="657" length="1" offset="648" startLine="18" timestamp="96003437">
    <deletedText><![CDATA[p]]></deletedText>
    <insertedText><![CDATA[patch_make(arg0, arg1)]]></insertedText>
  </DocumentChange>
  <Command __id="5277" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:34:41 EDT 2019" start_end="END" timestamp="96004898" />
  <Command __id="5278" _type="PredictionCommand" date="Sat Aug 24 14:34:41 EDT 2019" prediction_type="MakingProgress" timestamp="96004899" />
  <Command __id="5279" _type="SelectTextCommand" caretOffset="663" date="Sat Aug 24 14:34:42 EDT 2019" end="663" start="659" timestamp="96005137" />
  <DocumentChange __id="5280" _type="Replace" date="Sat Aug 24 14:34:45 EDT 2019" docASTNodeCount="106" docActiveCodeLength="618" docExpressionCount="66" docLength="676" endLine="18" insertionLength="1" int_docASTNodeCount="105" int_docActiveCodeLength="617" int_docExpressionCount="65" int_docLength="675" length="4" offset="659" startLine="18" timestamp="96008743">
    <deletedText><![CDATA[arg0]]></deletedText>
    <insertedText><![CDATA[S]]></insertedText>
  </DocumentChange>
  <Command __id="5281" _type="InsertStringCommand" date="Sat Aug 24 14:34:45 EDT 2019" repeat="8" timestamp="96008752" timestamp2="96011836">
    <data><![CDATA[STRING_1]]></data>
  </Command>
  <DocumentChange __id="5282" _type="Insert" date="Sat Aug 24 14:34:45 EDT 2019" docASTNodeCount="106" docActiveCodeLength="625" docExpressionCount="66" docLength="683" length="7" offset="660" repeat="7" timestamp="96009008" timestamp2="96011830">
    <text><![CDATA[TRING_1]]></text>
  </DocumentChange>
  <Command __id="5296" _type="MoveCaretCommand" caretOffset="492" date="Sat Aug 24 14:34:51 EDT 2019" docOffset="492" timestamp="96014914" />
  <Command __id="5297" _type="SelectTextCommand" caretOffset="495" date="Sat Aug 24 14:34:52 EDT 2019" end="495" start="491" timestamp="96015168" />
  <Command __id="5298" _type="CopyCommand" date="Sat Aug 24 14:34:52 EDT 2019" timestamp="96015824" />
  <Command __id="5299" _type="MoveCaretCommand" caretOffset="670" date="Sat Aug 24 14:34:54 EDT 2019" docOffset="670" timestamp="96017161" />
  <Command __id="5300" _type="SelectTextCommand" caretOffset="673" date="Sat Aug 24 14:34:54 EDT 2019" end="673" start="669" timestamp="96017394" />
  <DocumentChange __id="5301" _type="Replace" date="Sat Aug 24 14:34:54 EDT 2019" docASTNodeCount="106" docActiveCodeLength="625" docExpressionCount="66" docLength="683" endLine="18" insertionLength="4" int_docASTNodeCount="105" int_docActiveCodeLength="621" int_docExpressionCount="65" int_docLength="679" length="4" offset="669" startLine="18" timestamp="96017873">
    <deletedText><![CDATA[arg1]]></deletedText>
    <insertedText><![CDATA[diff]]></insertedText>
  </DocumentChange>
  <Command __id="5302" _type="PasteCommand" date="Sat Aug 24 14:34:54 EDT 2019" timestamp="96017887" />
  <Command __id="5303" _type="ShellCommand" date="Sat Aug 24 14:34:54 EDT 2019" timestamp="96018032" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5304" _type="ShellCommand" date="Sat Aug 24 14:34:56 EDT 2019" timestamp="96020016" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5305" _type="MoveCaretCommand" caretOffset="674" date="Sat Aug 24 14:34:57 EDT 2019" docOffset="674" timestamp="96020882" />
  <DocumentChange __id="5306" _type="Insert" date="Sat Aug 24 14:34:58 EDT 2019" docASTNodeCount="106" docActiveCodeLength="626" docExpressionCount="66" docLength="684" length="1" offset="674" timestamp="96021499">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="5307" _type="InsertStringCommand" date="Sat Aug 24 14:34:58 EDT 2019" timestamp="96021510" timestamp2="96021510">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5308" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 14:34:59 EDT 2019" timestamp="96023035" />
  <Command __id="5309" _type="ShellCommand" date="Sat Aug 24 14:35:13 EDT 2019" timestamp="96036373" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5310" _type="ShellCommand" date="Sat Aug 24 14:36:22 EDT 2019" timestamp="96105803" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5311" _type="MoveCaretCommand" caretOffset="641" date="Sat Aug 24 14:36:27 EDT 2019" docOffset="641" timestamp="96110458" />
  <DocumentChange __id="5312" _type="Insert" date="Sat Aug 24 14:36:35 EDT 2019" docASTNodeCount="100" docActiveCodeLength="655" docExpressionCount="61" docLength="713" length="29" offset="641" repeat="28" timestamp="96118688" timestamp2="96129716">
    <text><![CDATA[LinkedList<diff_match_patch.>]]></text>
  </DocumentChange>
  <Command __id="5313" _type="InsertStringCommand" date="Sat Aug 24 14:36:35 EDT 2019" repeat="28" timestamp="96118693" timestamp2="96129719">
    <data><![CDATA[LinkedList<diff_match_patch.]]></data>
  </Command>
  <Command __id="5368" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 14:36:46 EDT 2019" start_end="START" timestamp="96129721" />
  <Command __id="5369" _type="ShellCommand" date="Sat Aug 24 14:36:49 EDT 2019" timestamp="96132235" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5370" _type="ShellCommand" date="Sat Aug 24 14:36:49 EDT 2019" timestamp="96132470" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5371" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:36:49 EDT 2019" start_end="END" timestamp="96132487" />
  <DocumentChange __id="5372" _type="Insert" date="Sat Aug 24 14:36:49 EDT 2019" docASTNodeCount="115" docActiveCodeLength="671" docExpressionCount="71" docLength="729" length="16" offset="669" repeat="12" timestamp="96132490" timestamp2="96137447">
    <text><![CDATA[Patch patched = ]]></text>
  </DocumentChange>
  <Command __id="5374" _type="InsertStringCommand" date="Sat Aug 24 14:36:51 EDT 2019" repeat="11" timestamp="96134441" timestamp2="96137448">
    <data><![CDATA[ patched = ]]></data>
  </Command>
  <Command __id="5395" _type="MoveCaretCommand" caretOffset="682" date="Sat Aug 24 14:36:58 EDT 2019" docOffset="682" timestamp="96141162" />
  <DocumentChange __id="5396" _type="Delete" date="Sat Aug 24 14:36:58 EDT 2019" docASTNodeCount="115" docActiveCodeLength="670" docExpressionCount="71" docLength="728" endLine="18" length="1" offset="681" startLine="18" timestamp="96141503">
    <text><![CDATA[d]]></text>
  </DocumentChange>
  <Command __id="5397" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:36:58 EDT 2019" timestamp="96141513" />
  <DocumentChange __id="5398" _type="Insert" date="Sat Aug 24 14:36:58 EDT 2019" docASTNodeCount="115" docActiveCodeLength="671" docExpressionCount="71" docLength="729" length="1" offset="681" timestamp="96141790">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <Command __id="5399" _type="InsertStringCommand" date="Sat Aug 24 14:36:58 EDT 2019" timestamp="96141798" timestamp2="96141798">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="5400" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 14:36:59 EDT 2019" timestamp="96142564" />
  <Command __id="5401" _type="MoveCaretCommand" caretOffset="674" date="Sat Aug 24 14:37:04 EDT 2019" docOffset="674" timestamp="96147152" />
  <DocumentChange __id="5402" _type="Insert" date="Sat Aug 24 14:37:05 EDT 2019" docASTNodeCount="115" docActiveCodeLength="672" docExpressionCount="71" docLength="730" length="1" offset="674" timestamp="96148128">
    <text><![CDATA[?]]></text>
  </DocumentChange>
  <Command __id="5403" _type="InsertStringCommand" date="Sat Aug 24 14:37:05 EDT 2019" timestamp="96148130" timestamp2="96148130">
    <data><![CDATA[?]]></data>
  </Command>
  <DocumentChange __id="5404" _type="Delete" date="Sat Aug 24 14:37:05 EDT 2019" docASTNodeCount="115" docActiveCodeLength="671" docExpressionCount="71" docLength="729" endLine="18" length="1" offset="674" startLine="18" timestamp="96148759">
    <text><![CDATA[?]]></text>
  </DocumentChange>
  <Command __id="5405" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:37:05 EDT 2019" timestamp="96148765" />
  <DocumentChange __id="5406" _type="Insert" date="Sat Aug 24 14:37:07 EDT 2019" docASTNodeCount="115" docActiveCodeLength="672" docExpressionCount="71" docLength="730" length="1" offset="674" timestamp="96150910">
    <text><![CDATA[>]]></text>
  </DocumentChange>
  <Command __id="5407" _type="InsertStringCommand" date="Sat Aug 24 14:37:07 EDT 2019" timestamp="96150913" timestamp2="96150913">
    <data><![CDATA[>]]></data>
  </Command>
  <Command __id="5408" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 14:37:08 EDT 2019" timestamp="96151466" />
  <Command __id="5409" _type="MoveCaretCommand" caretOffset="721" date="Sat Aug 24 14:37:12 EDT 2019" docOffset="721" timestamp="96155153" />
  <DocumentChange __id="5410" _type="Insert" date="Sat Aug 24 14:37:12 EDT 2019" docASTNodeCount="115" docActiveCodeLength="679" docExpressionCount="71" docLength="737" length="7" offset="721" timestamp="96155903">
    <text><![CDATA[
	    ]]></text>
  </DocumentChange>
  <Command __id="5411" _type="InsertStringCommand" date="Sat Aug 24 14:37:12 EDT 2019" timestamp="96155910" timestamp2="96155910">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5412" _type="MoveCaretCommand" caretOffset="687" date="Sat Aug 24 14:37:17 EDT 2019" docOffset="687" timestamp="96160300" />
  <DocumentChange __id="5413" _type="Delete" date="Sat Aug 24 14:37:17 EDT 2019" docASTNodeCount="115" docActiveCodeLength="678" docExpressionCount="71" docLength="736" endLine="18" length="1" offset="686" startLine="18" timestamp="96161060">
    <text><![CDATA[>]]></text>
  </DocumentChange>
  <Command __id="5414" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:37:17 EDT 2019" timestamp="96161066" />
  <Command __id="5415" _type="MoveCaretCommand" caretOffset="727" date="Sat Aug 24 14:37:20 EDT 2019" docOffset="727" timestamp="96163914" />
  <DocumentChange __id="5416" _type="Insert" date="Sat Aug 24 14:37:21 EDT 2019" docASTNodeCount="117" docActiveCodeLength="685" docExpressionCount="72" docLength="743" length="7" offset="727" repeat="7" timestamp="96164757" timestamp2="96166315">
    <text><![CDATA[differ.]]></text>
  </DocumentChange>
  <Command __id="5417" _type="InsertStringCommand" date="Sat Aug 24 14:37:21 EDT 2019" repeat="7" timestamp="96164765" timestamp2="96166317">
    <data><![CDATA[differ.]]></data>
  </Command>
  <Command __id="5430" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 14:37:23 EDT 2019" start_end="START" timestamp="96166327" />
  <DocumentChange __id="5431" _type="Insert" date="Sat Aug 24 14:37:25 EDT 2019" docASTNodeCount="119" docActiveCodeLength="688" docExpressionCount="74" docLength="746" length="3" offset="734" repeat="3" timestamp="96168337" timestamp2="96169931">
    <text><![CDATA[app]]></text>
  </DocumentChange>
  <Command __id="5434" _type="ShellCommand" date="Sat Aug 24 14:37:28 EDT 2019" timestamp="96171884" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5435" _type="ShellCommand" date="Sat Aug 24 14:37:29 EDT 2019" timestamp="96172141" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5436" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:37:29 EDT 2019" start_end="END" timestamp="96172158" />
  <DocumentChange __id="5437" _type="Replace" date="Sat Aug 24 14:37:29 EDT 2019" docASTNodeCount="121" docActiveCodeLength="708" docExpressionCount="76" docLength="766" endLine="19" insertionLength="23" int_docASTNodeCount="117" int_docActiveCodeLength="685" int_docExpressionCount="72" int_docLength="743" length="3" offset="734" startLine="19" timestamp="96172160">
    <deletedText><![CDATA[app]]></deletedText>
    <insertedText><![CDATA[patch_apply(arg0, arg1)]]></insertedText>
  </DocumentChange>
  <Command __id="5438" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:37:30 EDT 2019" start_end="END" timestamp="96173848" />
  <Command __id="5439" _type="SelectTextCommand" caretOffset="750" date="Sat Aug 24 14:37:30 EDT 2019" end="750" start="746" timestamp="96174072" />
  <DocumentChange __id="5440" _type="Replace" date="Sat Aug 24 14:37:32 EDT 2019" docASTNodeCount="121" docActiveCodeLength="705" docExpressionCount="76" docLength="763" endLine="19" insertionLength="1" int_docASTNodeCount="120" int_docActiveCodeLength="704" int_docExpressionCount="75" int_docLength="762" length="4" offset="746" startLine="19" timestamp="96175998">
    <deletedText><![CDATA[arg0]]></deletedText>
    <insertedText><![CDATA[S]]></insertedText>
  </DocumentChange>
  <Command __id="5441" _type="InsertStringCommand" date="Sat Aug 24 14:37:32 EDT 2019" repeat="8" timestamp="96176003" timestamp2="96178535">
    <data><![CDATA[STRING_1]]></data>
  </Command>
  <DocumentChange __id="5442" _type="Insert" date="Sat Aug 24 14:37:33 EDT 2019" docASTNodeCount="121" docActiveCodeLength="712" docExpressionCount="76" docLength="770" length="7" offset="747" repeat="7" timestamp="96176230" timestamp2="96178529">
    <text><![CDATA[TRING_1]]></text>
  </DocumentChange>
  <Command __id="5456" _type="MoveCaretCommand" caretOffset="757" date="Sat Aug 24 14:37:37 EDT 2019" docOffset="757" timestamp="96180256" />
  <Command __id="5457" _type="SelectTextCommand" caretOffset="760" date="Sat Aug 24 14:37:37 EDT 2019" end="760" start="756" timestamp="96180504" />
  <Command __id="5458" _type="ShellCommand" date="Sat Aug 24 14:37:51 EDT 2019" timestamp="96194858" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5459" _type="ShellCommand" date="Sat Aug 24 14:37:54 EDT 2019" timestamp="96197649" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5460" _type="MoveCaretCommand" caretOffset="758" date="Sat Aug 24 14:37:56 EDT 2019" docOffset="758" timestamp="96199448" />
  <Command __id="5461" _type="MoveCaretCommand" caretOffset="678" date="Sat Aug 24 14:37:58 EDT 2019" docOffset="678" timestamp="96201975" />
  <Command __id="5462" _type="SelectTextCommand" caretOffset="683" date="Sat Aug 24 14:37:59 EDT 2019" end="683" start="676" timestamp="96202251" />
  <Command __id="5463" _type="CopyCommand" date="Sat Aug 24 14:38:00 EDT 2019" timestamp="96203300" />
  <Command __id="5464" _type="MoveCaretCommand" caretOffset="757" date="Sat Aug 24 14:38:01 EDT 2019" docOffset="757" timestamp="96204310" />
  <Command __id="5465" _type="SelectTextCommand" caretOffset="760" date="Sat Aug 24 14:38:01 EDT 2019" end="760" start="756" timestamp="96204539" />
  <DocumentChange __id="5466" _type="Replace" date="Sat Aug 24 14:38:01 EDT 2019" docASTNodeCount="121" docActiveCodeLength="715" docExpressionCount="76" docLength="773" endLine="19" insertionLength="7" int_docASTNodeCount="120" int_docActiveCodeLength="708" int_docExpressionCount="75" int_docLength="766" length="4" offset="756" startLine="19" timestamp="96205000">
    <deletedText><![CDATA[arg1]]></deletedText>
    <insertedText><![CDATA[patches]]></insertedText>
  </DocumentChange>
  <Command __id="5467" _type="PasteCommand" date="Sat Aug 24 14:38:01 EDT 2019" timestamp="96205012" />
  <Command __id="5468" _type="MoveCaretCommand" caretOffset="764" date="Sat Aug 24 14:38:03 EDT 2019" docOffset="764" timestamp="96206349" />
  <DocumentChange __id="5469" _type="Insert" date="Sat Aug 24 14:38:03 EDT 2019" docASTNodeCount="121" docActiveCodeLength="716" docExpressionCount="76" docLength="774" length="1" offset="764" timestamp="96206993">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="5470" _type="InsertStringCommand" date="Sat Aug 24 14:38:03 EDT 2019" timestamp="96207006" timestamp2="96207006">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5471" _type="MoveCaretCommand" caretOffset="755" date="Sat Aug 24 14:38:14 EDT 2019" docOffset="755" timestamp="96217724" />
  <Command __id="5472" _type="MoveCaretCommand" caretOffset="756" date="Sat Aug 24 14:38:15 EDT 2019" docOffset="756" timestamp="96218345" />
  <DocumentChange __id="5473" _type="Delete" date="Sat Aug 24 14:38:15 EDT 2019" docASTNodeCount="120" docActiveCodeLength="706" docExpressionCount="75" docLength="764" endLine="19" length="10" offset="746" repeat="10" startLine="19" timestamp="96218886" timestamp2="96220408">
    <text><![CDATA[STRING_1, ]]></text>
  </DocumentChange>
  <Command __id="5474" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:38:15 EDT 2019" repeat="10" timestamp="96218888" timestamp2="96220414" />
  <Command __id="5493" _type="MoveCaretCommand" caretOffset="753" date="Sat Aug 24 14:38:18 EDT 2019" docOffset="753" timestamp="96221989" />
  <DocumentChange __id="5494" _type="Insert" date="Sat Aug 24 14:38:19 EDT 2019" docASTNodeCount="121" docActiveCodeLength="716" docExpressionCount="76" docLength="774" length="10" offset="753" repeat="10" timestamp="96222731" timestamp2="96226611">
    <text><![CDATA[, STRING_1]]></text>
  </DocumentChange>
  <Command __id="5495" _type="InsertStringCommand" date="Sat Aug 24 14:38:19 EDT 2019" repeat="10" timestamp="96222734" timestamp2="96226614">
    <data><![CDATA[, STRING_1]]></data>
  </Command>
  <Command __id="5514" _type="MoveCaretCommand" caretOffset="726" date="Sat Aug 24 14:38:26 EDT 2019" docOffset="726" timestamp="96229338" />
  <Command __id="5515" _type="ShellCommand" date="Sat Aug 24 14:38:37 EDT 2019" timestamp="96240568" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5516" _type="ShellCommand" date="Sat Aug 24 14:38:43 EDT 2019" timestamp="96246879" type="ECLIPSE_GAINED_FOCUS" />
  <DocumentChange __id="5517" _type="Insert" date="Sat Aug 24 14:38:51 EDT 2019" docASTNodeCount="126" docActiveCodeLength="734" docExpressionCount="78" docLength="792" length="18" offset="726" repeat="18" timestamp="96254750" timestamp2="96259426">
    <text><![CDATA[Object[] aRetVal =]]></text>
  </DocumentChange>
  <Command __id="5518" _type="InsertStringCommand" date="Sat Aug 24 14:38:51 EDT 2019" repeat="18" timestamp="96254759" timestamp2="96259434">
    <data><![CDATA[Object[] aRetVal =]]></data>
  </Command>
  <Command __id="5553" _type="MoveCaretCommand" caretOffset="783" date="Sat Aug 24 14:38:58 EDT 2019" docOffset="783" timestamp="96261986" />
  <DocumentChange __id="5554" _type="Insert" date="Sat Aug 24 14:38:59 EDT 2019" docASTNodeCount="126" docActiveCodeLength="740" docExpressionCount="78" docLength="798" length="6" offset="783" timestamp="96262437">
    <text><![CDATA[
	   ]]></text>
  </DocumentChange>
  <Command __id="5555" _type="InsertStringCommand" date="Sat Aug 24 14:38:59 EDT 2019" timestamp="96262446" timestamp2="96262446">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5556" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 14:39:00 EDT 2019" timestamp="96263223" />
  <Command __id="5557" _type="MoveCaretCommand" caretOffset="783" date="Sat Aug 24 14:39:01 EDT 2019" docOffset="783" timestamp="96264501" />
  <DocumentChange __id="5558" _type="Insert" date="Sat Aug 24 14:39:03 EDT 2019" docASTNodeCount="126" docActiveCodeLength="746" docExpressionCount="78" docLength="804" length="6" offset="783" timestamp="96266285">
    <text><![CDATA[
	   ]]></text>
  </DocumentChange>
  <Command __id="5559" _type="InsertStringCommand" date="Sat Aug 24 14:39:03 EDT 2019" timestamp="96266290" timestamp2="96266290">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="5560" _type="Insert" date="Sat Aug 24 14:39:13 EDT 2019" docASTNodeCount="128" docActiveCodeLength="750" docExpressionCount="79" docLength="808" length="4" offset="789" repeat="4" timestamp="96276440" timestamp2="96277843">
    <text><![CDATA[Sttr]]></text>
  </DocumentChange>
  <Command __id="5561" _type="InsertStringCommand" date="Sat Aug 24 14:39:13 EDT 2019" repeat="4" timestamp="96276449" timestamp2="96277852">
    <data><![CDATA[Sttr]]></data>
  </Command>
  <DocumentChange __id="5568" _type="Delete" date="Sat Aug 24 14:39:15 EDT 2019" docASTNodeCount="126" docActiveCodeLength="746" docExpressionCount="78" docLength="804" endLine="20" length="4" offset="789" repeat="4" startLine="20" timestamp="96278486" timestamp2="96279132">
    <text><![CDATA[Sttr]]></text>
  </DocumentChange>
  <Command __id="5569" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 14:39:15 EDT 2019" repeat="4" timestamp="96278490" timestamp2="96279136" />
  <DocumentChange __id="5576" _type="Insert" date="Sat Aug 24 14:39:16 EDT 2019" docASTNodeCount="130" docActiveCodeLength="756" docExpressionCount="81" docLength="814" length="10" offset="789" repeat="10" timestamp="96279752" timestamp2="96281599">
    <text><![CDATA[System.out]]></text>
  </DocumentChange>
  <Command __id="5577" _type="InsertStringCommand" date="Sat Aug 24 14:39:16 EDT 2019" repeat="7" timestamp="96279761" timestamp2="96280968">
    <data><![CDATA[System.]]></data>
  </Command>
  <Command __id="5590" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 14:39:17 EDT 2019" start_end="START" timestamp="96280971" />
  <Command __id="5594" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:39:19 EDT 2019" start_end="END" timestamp="96282134" />
  <DocumentChange __id="5595" _type="Replace" date="Sat Aug 24 14:39:19 EDT 2019" docASTNodeCount="130" docActiveCodeLength="757" docExpressionCount="81" docLength="815" endLine="20" insertionLength="4" int_docASTNodeCount="128" int_docActiveCodeLength="753" int_docExpressionCount="79" int_docLength="811" length="3" offset="796" startLine="20" timestamp="96282136">
    <deletedText><![CDATA[out]]></deletedText>
    <insertedText><![CDATA[out.]]></insertedText>
  </DocumentChange>
  <Command __id="5596" _type="InsertStringCommand" date="Sat Aug 24 14:39:19 EDT 2019" timestamp="96282142" timestamp2="96282142">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="5597" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 14:39:19 EDT 2019" start_end="START" timestamp="96282148" />
  <DocumentChange __id="5598" _type="Insert" date="Sat Aug 24 14:39:19 EDT 2019" docASTNodeCount="137" docActiveCodeLength="785" docExpressionCount="88" docLength="843" length="28" offset="800" repeat="25" timestamp="96282395" timestamp2="96294233">
    <text><![CDATA[println("Out:" + aRetVal[0])]]></text>
  </DocumentChange>
  <Command __id="5607" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 14:39:22 EDT 2019" start_end="END" timestamp="96286011" />
  <Command __id="5609" _type="InsertStringCommand" date="Sat Aug 24 14:39:23 EDT 2019" repeat="17" timestamp="96286666" timestamp2="96294242">
    <data><![CDATA[Out:" + aRetVal[0]]></data>
  </Command>
  <Command __id="5641" _type="MoveCaretCommand" caretOffset="828" date="Sat Aug 24 14:39:32 EDT 2019" docOffset="828" timestamp="96296068" />
  <Command __id="5643" _type="InsertStringCommand" date="Sat Aug 24 14:39:33 EDT 2019" timestamp="96296609" timestamp2="96296609">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="5644" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 14:39:33 EDT 2019" timestamp="96297068" />
  <Command __id="5645" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sat Aug 24 14:39:39 EDT 2019" timestamp="96302939" />
  <Command __id="5646" _type="BreakPointCommand" date="Sat Aug 24 14:39:39 EDT 2019" lineNumber="20" timestamp="96302942" type="BreakPointAdded" />
  <Command __id="5647" _type="MoveCaretCommand" caretOffset="640" date="Sat Aug 24 14:39:42 EDT 2019" docOffset="640" timestamp="96306005" />
  <Command __id="5648" _type="ShellCommand" date="Sat Aug 24 14:39:47 EDT 2019" timestamp="96310475" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5649" _type="ShellCommand" date="Sat Aug 24 14:39:47 EDT 2019" timestamp="96310496" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5650" _type="ShellCommand" date="Sat Aug 24 14:39:54 EDT 2019" timestamp="96317880" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5651" _type="ShellCommand" date="Sat Aug 24 14:39:55 EDT 2019" timestamp="96318259" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5652" _type="EclipseCommand" commandID="org.eclipse.jdt.debug.ui.localJavaShortcut.debug" date="Sat Aug 24 14:39:55 EDT 2019" timestamp="96318295" />
  <Command __id="5653" _type="EclipseCommand" commandID="" date="Sat Aug 24 14:39:55 EDT 2019" repeat="2" timestamp="96318412" timestamp2="96319851" />
  <Command __id="5655" _type="RunCommand" date="Sat Aug 24 14:39:56 EDT 2019" kind="HitBreakPoint" projectName="GraderBasics" timestamp="96319947" type="Run" />
  <Command __id="5656" _type="RunCommand" date="Sat Aug 24 14:39:56 EDT 2019" kind="HitBreakPoint" projectName="GraderBasics" timestamp="96319947" type="Run" />
  <Command __id="5657" _type="RunCommand" date="Sat Aug 24 14:39:57 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="96320252" type="Run" />
  <Command __id="5658" _type="RunCommand" date="Sat Aug 24 14:39:57 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="96320406" type="Run" />
  <Command __id="5659" _type="RunCommand" date="Sat Aug 24 14:39:57 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="96320876" type="Run" />
  <Command __id="5660" _type="EHExceptionCommand" date="Sat Aug 24 14:39:58 EDT 2019" timestamp="96321375" type="Exception">
    <outputString><![CDATA[[Diff(DELETE,"hell"), Diff(INSERT,"g"), Diff(EQUAL,"o"), Diff(INSERT,"odbye"), Diff(EQUAL," world")]
[Diff(DELETE,"hello"), Diff(INSERT,"goodbye"), Diff(EQUAL," world")]
]]></outputString>
  </Command>
  <Command __id="5661" _type="RunCommand" date="Sat Aug 24 14:39:58 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="96321410" type="Run" />
  <Command __id="5662" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sat Aug 24 14:40:02 EDT 2019" timestamp="96325494" />
  <Command __id="5663" _type="RunCommand" date="Sat Aug 24 14:40:02 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="96325502" type="Run" />
  <Command __id="5664" _type="RunCommand" date="Sat Aug 24 14:40:05 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="96328754" type="Run" />
  <Command __id="5665" _type="ShellCommand" date="Sat Aug 24 14:40:49 EDT 2019" timestamp="96372465" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5666" _type="ShellCommand" date="Sat Aug 24 14:45:57 EDT 2019" timestamp="96680785" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5667" _type="ShellCommand" date="Sat Aug 24 14:54:32 EDT 2019" timestamp="97195412" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="5642" _type="Insert" date="Sat Aug 24 14:39:33 EDT 2019" docASTNodeCount="137" docActiveCodeLength="786" docExpressionCount="88" docLength="844" length="1" offset="828" timestamp="96296599">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="5686" _type="FileOpenCommand" date="Sat Aug 24 15:01:46 EDT 2019" docASTNodeCount="48" docActiveCodeLength="465" docExpressionCount="28" docLength="657" projectName="comp110-grader" timestamp="97629594">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\demoAndTest\interpretedSpec\c\ACMixedArithmeticInterpretedSpecGraderCorrectStateGenerator.java]]></filePath>
    <snapshot><![CDATA[package demoAndTest.interpretedSpec.c;

import demoAndTest.GraderDemoerAndTester;
/*
 * This is a test not of the student programs but of the grader on Java non distributed programs
 */
public class ACMixedArithmeticInterpretedSpecGraderCorrectStateGenerator {
	public static void main (String[] anArgs) {
		GraderDemoerAndTester demoerAndTester = new ACMixedArithmeticInterpretedSpecGraderDemoerAndTester(anArgs);

		demoerAndTester.setAutoProceed(true);
		demoerAndTester.setGeneratingCorrectDir(true);
//		Tracer.showInfo(true);
//		Tracer.setKeywordPrintStatus(DirectoryUtils.class, true);
		demoerAndTester.demoAndTest();

		
	}

}
]]></snapshot>
  </Command>
  <Command __id="5689" _type="FileOpenCommand" date="Sat Aug 24 15:02:01 EDT 2019" docASTNodeCount="137" docActiveCodeLength="1258" docExpressionCount="69" docLength="1636" projectName="comp110-grader" timestamp="97644845">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\demoAndTest\interpretedSpec\c\ACMixedArithmeticInterpretedSpecGraderDemoerAndTester.java]]></filePath>
    <snapshot><![CDATA[package demoAndTest.interpretedSpec.c;

import util.trace.Tracer;
import demoAndTest.GraderDemoerAndTester;
import demoAndTest.multiparadigm.C.ACMixedArithmeticGraderDemoerAndTester;
//import bus.uigen.pipe.DemoerAndTester;
/*
 * 

 */
public class ACMixedArithmeticInterpretedSpecGraderDemoerAndTester extends ACMixedArithmeticGraderDemoerAndTester {
	
	//	 String[] args ;
	public static final  String INTERP_TEST_DIR = "Test Data/Test CInterp";
	public static final  String INTERP_CORRECT_DIR = "Test Data/Correct CInterp";
//	public final String COURSE_NO = "Comp411";
	public static final String INTERP_COURSE_NO = "Comp411Interp";



	public ACMixedArithmeticInterpretedSpecGraderDemoerAndTester(String[] anArgs) {
		super(anArgs);
	}
	@Override
	protected String testDir() {
		return INTERP_TEST_DIR;
	}
	@Override
	protected String correctDir() {
		return INTERP_CORRECT_DIR;
	}
	@Override
	protected String courseNo() {
		return INTERP_COURSE_NO;
	}
	protected int clearMessagesItem() {
		return 4;
	}
	
	
	

	public static  void main (String[] anArgs) {
//		ObjectEditor.setDefaultAttribute(AttributeNames.SHOW_SYSTEM_MENUS, false);
//		Tracer.showInfo(true);
//		Tracer.setKeywordPrintStatus(DirectoryUtils.class, true);
		GraderDemoerAndTester aDemoerAndTester = new ACMixedArithmeticInterpretedSpecGraderDemoerAndTester(anArgs);
//		args = anArgs;
		Tracer.info(ACMixedArithmeticInterpretedSpecGraderDemoerAndTester.class, "test");
		aDemoerAndTester.demoAndTest();
		
//		aDemoerAndTester.demoAndTest();
//
//		startFirstSession();
//
//		doSteps();

	}

	

}
]]></snapshot>
  </Command>
  <Command __id="5694" _type="FileOpenCommand" date="Sat Aug 24 15:03:22 EDT 2019" docASTNodeCount="130" docActiveCodeLength="1232" docExpressionCount="67" docLength="1610" projectName="comp110-grader" timestamp="97725489">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\demoAndTest\interpretedSpec\java\AJavaMixedArithmeticInterpretedInputGraderDemoerAndTester.java]]></filePath>
    <snapshot><![CDATA[package demoAndTest.interpretedSpec.java;

import util.trace.Tracer;
import demoAndTest.GraderDemoerAndTester;
import demoAndTest.multiparadigm.java.AJavaMixedArithmeticGraderDemoerAndTester;
//import bus.uigen.pipe.DemoerAndTester;
/*
 * 

 */
public class AJavaMixedArithmeticInterpretedInputGraderDemoerAndTester extends AJavaMixedArithmeticGraderDemoerAndTester {
	
	//	 String[] args ;
	public static final  String INTERP_TEST_DIR = "Test Data/Test 110Interp";
	public static final  String INTERP_CORRECT_DIR = "Test Data/Correct 110Interp";
//	public final String COURSE_NO = "Comp411";
	public static final String INTERP_COURSE_NO = "Comp110Interp";



	public AJavaMixedArithmeticInterpretedInputGraderDemoerAndTester(String[] anArgs) {
		super(anArgs);
	}
	@Override
	protected String testDir() {
		return INTERP_TEST_DIR;
	}
	@Override
	protected String correctDir() {
		return INTERP_CORRECT_DIR;
	}
	@Override
	protected String courseNo() {
		return INTERP_COURSE_NO;
	}
	
	

	public static  void main (String[] anArgs) {
//		ObjectEditor.setDefaultAttribute(AttributeNames.SHOW_SYSTEM_MENUS, false);
//		Tracer.showInfo(true);
//		Tracer.setKeywordPrintStatus(DirectoryUtils.class, true);
		GraderDemoerAndTester aDemoerAndTester = new AJavaMixedArithmeticInterpretedInputGraderDemoerAndTester(anArgs);
//		args = anArgs;
		Tracer.info(AJavaMixedArithmeticInterpretedInputGraderDemoerAndTester.class, "test");
		aDemoerAndTester.demoAndTest();
		
//		aDemoerAndTester.demoAndTest();
//
//		startFirstSession();
//
//		doSteps();

	}

	

}
]]></snapshot>
  </Command>
  <Command __id="5696" _type="FileOpenCommand" date="Sat Aug 24 15:03:37 EDT 2019" docASTNodeCount="75" docActiveCodeLength="615" docExpressionCount="50" docLength="720" projectName="comp110-grader" timestamp="97740482">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\demoAndTest\interpretedSpec\java\AJavaMixedArithmeticIntrepretedInputGraderTester.java]]></filePath>
    <snapshot><![CDATA[package demoAndTest.interpretedSpec.java;

import grader.basics.util.DirectoryUtils;
import util.trace.Tracer;
import demoAndTest.GraderDemoerAndTester;
/*
 * This is a test not of the student programs but of the grader on Java non distributed programs
 */
public class AJavaMixedArithmeticIntrepretedInputGraderTester {
	public static void main (String[] anArgs) {
		GraderDemoerAndTester demoerAndTester = new AJavaMixedArithmeticInterpretedInputGraderDemoerAndTester(anArgs);

		demoerAndTester.setAutoProceed(true);
		demoerAndTester.setGeneratingCorrectDir(false);
		Tracer.showInfo(true);
		Tracer.setKeywordPrintStatus(DirectoryUtils.class, true);
		demoerAndTester.demoAndTest();

		
	}

}
]]></snapshot>
  </Command>
  <Command __id="5716" _type="FileOpenCommand" date="Sat Aug 24 15:04:26 EDT 2019" docASTNodeCount="2232" docActiveCodeLength="22650" docExpressionCount="1459" docLength="27659" projectName="comp110-grader" timestamp="97789507">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\demoAndTest\basic\AJavaPalindromeBasedGraderDemoerAndTester.java]]></filePath>
    <snapshot><![CDATA[package demoAndTest.basic;

import grader.assignment.GradingFeature;
import grader.basics.util.DirectoryUtils;
import grader.navigation.NavigationKind;
import grader.navigation.filter.GradingStatus;
import grader.project.source.ATACommentsExtractor;
import grader.steppers.ComplexProjectStepper;
import grader.steppers.OverviewProjectStepper;
import gradingTools.Driver;

import java.io.File;
import java.util.Arrays;
import java.util.List;

import util.misc.ThreadSupport;
import bus.uigen.OEFrame;
import bus.uigen.ObjectEditor;
import bus.uigen.attributes.AttributeNames;
import demoAndTest.ADemoAndTestingClearanceManager;
import demoAndTest.DemoAndTestingClearanceManager;
import demoAndTest.GraderDemoerAndTester;
/*
 * This is different from Driver in that it has a particular assignment hardwired.
 * This is assignment 3 from Jacob's 110. It would have been better to do Assignment 1
 * for all of the demo cases (C, Java, distriuted) in retrospect.
 * The file and test directories are also hardwired
 * Problem is that these entries are 
 * How to override them, unless from configuration file
 */
public class AJavaPalindromeBasedGraderDemoerAndTester implements  GraderDemoerAndTester{
	 String[] args ;
	public static final  String TEST_DIR = "Test Data/Test 110 F13 Assignments";
	public static final  String CORRECT_DIR = "Test Data/Correct 110 F13 Results";
	public static final String COURSE_NO = "Comp110";
	public static final int AUTO_PAUSE_SECONDS = 2; // seconds
	public static final int MEDIUM_PAUSE_SECONDS = 5;
	public static final int LONG_PAUSE_SECONDS = 30;
	
	protected String directory;
	
	protected boolean  generatingCorrectDir = false;
	
	protected boolean autoProceed = false;
//	 boolean  generatingCorrectDir = true;

	
	

	 protected DemoAndTestingClearanceManager clearanceManager = new ADemoAndTestingClearanceManager();
//	 boolean autoProceed;
//	 long autoProceedPauseTime = 4000;
	 
	public AJavaPalindromeBasedGraderDemoerAndTester(String[] anArgs) {
		args = anArgs;
		clearanceManager.setAutoPauseTime(getAutoPauseSeconds());
	}
	protected int getAutoPauseSeconds() {
		return AUTO_PAUSE_SECONDS;
	}
	
	protected int getMediumPauseSeconds() {
		return MEDIUM_PAUSE_SECONDS;
	}
	
	protected int getLongAutoPauseSeconds() {
		return LONG_PAUSE_SECONDS;
	}
	/* (non-Javadoc)
	 * @see gradingTools.GraderDemoerAndTester#isAutoProceed()
	 */
	@Override
	public  boolean isAutoProceed() {
		return autoProceed;
	}
	protected String testDir() {
		return TEST_DIR;
	}
	
	protected String correctDir() {
		return CORRECT_DIR;
	}
	
	protected String assignmentNo() {
		return "Assignment3";
	}
	
	protected String courseNo() {
		return COURSE_NO;
	}

	/* (non-Javadoc)
	 * @see gradingTools.GraderDemoerAndTester#setAutoProceed(boolean)
	 */
	@Override
	public  void setAutoProceed(boolean autoProceed) {
		this.autoProceed = autoProceed;
	}
	/* (non-Javadoc)
	 * @see gradingTools.GraderDemoerAndTester#isGeneratingCorrectDir()
	 */
	@Override
	public  boolean isGeneratingCorrectDir() {
		return generatingCorrectDir;
	}

	/* (non-Javadoc)
	 * @see gradingTools.GraderDemoerAndTester#setGeneratingCorrectDir(boolean)
	 */
	@Override
	public  void setGeneratingCorrectDir(boolean generatingCorrectDir) {
		this.generatingCorrectDir = generatingCorrectDir;
	}
	
	/* (non-Javadoc)
	 * @see gradingTools.GraderDemoerAndTester#demoAndTest()
	 */
	@Override
	public void demoAndTest() {
		ObjectEditor.setDefaultAttribute(AttributeNames.SHOW_SYSTEM_MENUS, false);
		startFirstSession();
		doSteps();
	}
	

	public static  void main (String[] anArgs) {
//		ObjectEditor.setDefaultAttribute(AttributeNames.SHOW_SYSTEM_MENUS, false);
		GraderDemoerAndTester demoerAndTester = new AJavaPalindromeBasedGraderDemoerAndTester(anArgs);
//		Tracer.showInfo(true);
//		Tracer.setKeywordPrintStatus(DirectoryUtils.class, true);
//		args = anArgs;
//		Tracer.info(this, "test");
//		Thread mainThread = new Thread(new Tester());
//		mainThread.start();
//		OEFrame clearanceFrame = ObjectEditor.edit(clearanceManager);
//		clearanceFrame.setSize(420, 260);
//		clearanceFrame.setLocation(0, 0);
		demoerAndTester.demoAndTest();
//		demoerAndTester.startFirstSession();
//
//		demoerAndTester.doSteps();
//		waitForUserOrSleep();
//		Driver.getSettingsModel().begin();
	}
	
	 final int CLEARANCE_WIDTH = 420;
	 final int CLEARANCE_HEIGHT = 260;

	
	/* (non-Javadoc)
	 * @see gradingTools.GraderDemoerAndTester#startFirstSession()
	 */
	@Override
	public void startFirstSession() {
//		Thread mainThread = new Thread(new APalindromeBasedDemoerAndTester());
		Thread mainThread = new Thread(this);

		mainThread.start();
		OEFrame clearanceFrame = ObjectEditor.edit(clearanceManager);
		clearanceFrame.setSize(CLEARANCE_WIDTH, CLEARANCE_HEIGHT);
		clearanceFrame.setLocation(0, 0);
	}
	
	/* (non-Javadoc)
	 * @see gradingTools.GraderDemoerAndTester#startSecondSession()
	 */
	@Override
	public void startSecondSession() {
//		Thread mainThread = new Thread(new APalindromeBasedDemoerAndTester());
		Thread mainThread = new Thread(this);

		mainThread.start();
	}
	
	 void initializeDirectoryAndAutoProceed() {
		if (generatingCorrectDir)
			directory = CORRECT_DIR;
		else
			directory = TEST_DIR;
		clearanceManager.setAutoProceed(autoProceed);
	}
	
	public  void doSteps() {
		initializeDirectoryAndAutoProceed();
//		if (generatingCorrectDir)
//			directory = CORRECT_DIR;
//		else
//			directory = TEST_DIR;
//		clearanceManager.setAutoProceed(autoProceed);
		waitForStepper1();
		initializeAndChangeProblem();
		doBegin1();
		waitForNavigator1();
		changeOverallNotes();
		doNext1();
		doSelect6();
		changeManualScore6();
		changeManualNotes6();
		doValidate5_pass1();
		doValidate34_pass1();
//		explainSourceAndcommentOnCode();
		showSourceChecks();
		showSource();
		commentOnCode();
//		changeOverallScore();
//		changeOverallNotes2();
		showFeedback();
		showMain();
		doNext2();
		doValidate34_pass1();

//		openSource();
		showProblemHistory();
		showStudentHistory();
		showMain();
		syncSource();
//		cleanUpOnyen();
		quit1();
//		System.exit(0);
		secondSession();
		waitForStepper2();
		changeToNotFullyGraded();
		doBegin1();
		waitForNavigator2();
		doValidate5_pass2();
//		changeOverallNotes3();
		if (!generatingCorrectDir) {
                    checkWithCorrectResults();
                }
		quit2();
		
	}
	public  void waitForStepper1() {
		clearanceManager.setStepDescription("Wait until the setter UI comes up and then press proceed to start or advance to next step. \n\nIf auto perform step is set, then press proceed to perform subsequent steps; otherwise use the UI to perform the next described step. \n\nYou can change this checkbox.");
		waitForUserOrSleep();
	}
	
	public  void waitForStepper2() {
		clearanceManager.setStepDescription("As in the first round, wait until the setter UI comes up before proceeding.");
		waitForUserOrSleep();
	}
	
	public  void waitForNavigator1() {
		clearanceManager.setStepDescription("Look at the console for output of autograded steps and missing submission folders. \n\nNow wait until the navigator UI comes up and then press proceed to go to first navigation step.");
		waitForUserOrLongSleep();
	}
	
	public  void waitForNavigator2() {
		clearanceManager.setStepDescription("Now wait until the navigator UI comes up and then press proceed to go to first navigation step in the second round. There should be no autograding this time.");
		waitForUserOrMediumSleep();
	}
	
	public void cleanUpOnyen() {
		clearanceManager.setStepDescription("Now proceed to clean up acorrect so that it is regraded");
		if (clearanceManager.isAutoPerformStep()) {
			Driver.getSettingsModel().cleanSlate("acorrect");

		
		}
		

	}
	
	public  void initializeAndChangeProblem() {
            while(Driver.getSettingsModel() == null) {
                ThreadSupport.sleep(100);
            }
                
		Driver.getSettingsModel().getModuleProblemSelector().getModule().setValue(courseNo());

		Driver.getSettingsModel().getModuleProblemSelector().getProblem().setValue("Assignment1");
//		Driver.getSettingsModel().getFileBrowsing().getDownloadFolder().setText("Test Data/Test 110 F13 Assignments/Assignment1");
		Driver.getSettingsModel().getFileBrowsing().getDownloadFolder().setText(directory + "/Assignment1");


		Driver.getSettingsModel().getNavigationSetter().getNavigationFilterSetter().setParameter(GradingStatus.ALL);

		clearanceManager.setStepDescription("Next steps are "
				+ "automatically change problem to Assignment1"
				+ ", set the download folder" 
				+ ", set the onyens"
				+ ", set navigation filter parameter to ALL"
				+ " and cleanup any previous grading results for this assignment.");
		waitForUserOrSleep();
		if (clearanceManager.isAutoPerformStep()) {
		Driver.getSettingsModel().getNavigationSetter().setNavigationKind(NavigationKind.HYBRID);
		Driver.getSettingsModel().getNavigationSetter().getNavigationFilterSetter().setParameter(GradingStatus.ALL);


//		Driver.getSettingsModel().getModuleProblemSelector().getProblem().setValue("Assignment3");
		Driver.getSettingsModel().getModuleProblemSelector().getProblem().setValue(assignmentNo());

		Driver.getSettingsModel().getOnyens().setDisplayedEndingOnyen("nosub");
		Driver.getSettingsModel().getOnyens().setDisplayedStartingOnyen("acorrect");

		Driver.getSettingsModel().cleanSlateAll();
		}

	}
	public  void changeToNotFullyGraded() {
		clearanceManager.setStepDescription("Next step is to automatically change navigation filter from ALL to NOT_FULLY_GRADED so that we go to the next student who needs attentin.");
		waitForUserOrSleep();
		if (clearanceManager.isAutoPerformStep()) {
			Driver.getSettingsModel().getNavigationSetter().getNavigationFilterSetter().setParameter(GradingStatus.NOT_FULLY_GRADED);

		
		}

	}
	public  void doBegin1() {
		clearanceManager.setStepDescription("Next step is to begin navigation. \n\nThe settings window will remain on the screen while the auto grading phase is being performed and then the navigator window will appear.");
		waitForUserOrSleep();
		if (clearanceManager.isAutoPerformStep())
		Driver.getSettingsModel().begin();
//		ThreadSupport.sleep(4000);
	}
	
	public  void doBegin2() {
		clearanceManager.setStepDescription("Next step is to begin  the second round of navigation. ");
		waitForUserOrSleep();
		if (clearanceManager.isAutoPerformStep())
		Driver.getSettingsModel().begin();
//		ThreadSupport.sleep(4000);
	}
	
	public  void changeOverallNotes() {
		clearanceManager.setStepDescription("Next step is to change the overall notes to congratulate the student. \n\nIts color should change to indicate the comment presence.");
//		Driver.getDatabase().getProjectStepper().setOverallNotes("");
		waitForUserOrSleep();
		if (clearanceManager.isAutoPerformStep())
		Driver.getDatabase().getProjectStepper().setOverallNotes("All correct!");
	}
	public  void doNext1() {
		clearanceManager.setStepDescription("Next step is to navigate to next student. \n\nWait until the UI is refreshed before proceeding. \n\nThere should be four pink items (3, 4, 8 and 9) for non-full points indicating attention.");
		waitForUserOrSleep();
		if (clearanceManager.isAutoPerformStep())
		Driver.getDatabase().getProjectStepper().next();
	}
	public  void doNext2() {
		clearanceManager.setStepDescription("Next step is to navigate to next student. \n\nAgain wait until the UI is refreshed before proceeding. ");
		waitForUserOrSleep();
		if (clearanceManager.isAutoPerformStep())
		Driver.getDatabase().getProjectStepper().next();
	}
	public  void doSelect6() {
		List<GradingFeature> gradingFeatures = Driver.getDatabase().getGradingFeatures();
		GradingFeature gradingFeature = gradingFeatures.get(8);
//		GradingFeature prevGradingFeature = gradingFeatures.get(5);
//		gradingFeature.setManualNotes("");
//		prevGradingFeature.setManualNotes("");	
//		Driver.getDatabase().getProjectStepper().setOverallNotes("");
		clearanceManager.setStepDescription("Next step is check the select box in item 9 to select it.\n\nThe auto notes box should show the reason for point deduction for the selected item. \n\nThe transcript box should show the output for this feature. \n\nThe manual notes will show the previous manual notes for this item, which should be empty.");
		waitForUserOrSleep();
//		List<GradingFeature> gradingFeatures = Driver.getDatabase().getGradingFeatures();
//		GradingFeature gradingFeature = gradingFeatures.get(6);
		if (clearanceManager.isAutoPerformStep())
		gradingFeature.setSelected(true);
	}
	public  void changeManualScore6() {
		clearanceManager.setStepDescription("Next step is to manually override the auto computed score. \n\nThe item should remain pink to indicate no reason has been given for change.");
		waitForUserOrSleep();
		List<GradingFeature> gradingFeatures = Driver.getDatabase().getGradingFeatures();
		GradingFeature gradingFeature = gradingFeatures.get(8);
		if (clearanceManager.isAutoPerformStep())
		gradingFeature.setScore(gradingFeature.getScore() * 1.1);
	}
	public  void changeManualNotes6() {
		clearanceManager.setStepDescription("Next step is to add manual notes for selected item. \n\nThe manual notes and item should become green to indicate presence of non empty comment."); 
		waitForUserOrSleep();
//		List<GradingFeature> gradingFeatures = Driver.getDatabase().getGradingFeatures();
//		GradingFeature gradingFeature = gradingFeatures.get(6);
		if (clearanceManager.isAutoPerformStep())
		Driver.getDatabase().getProjectStepper().setManualNotes("The transcript  shows that indicated output syntax was misunderstood. Gave partial credit.");
//		gradingFeature.setManualNotes("The source code shows that indicated output syntax was misunderstood. Gave partial credit.");
	}
	public  void doValidate5_pass1() {
		clearanceManager.setStepDescription("Next step is to check the validate box in item 8 to indicate that the automantically computed non full score is correct. \n\nThe item  color should change. \n\nIn addition, the item should get selected. \n\nThe auto notes box should indicate the reason for deduction. The manual notes box should contain notes indicating validation and change color to show presence of notes for selected item."); 
		waitForUserOrSleep();
		List<GradingFeature> gradingFeatures = Driver.getDatabase().getGradingFeatures();
		GradingFeature gradingFeature = gradingFeatures.get(7);
		if (clearanceManager.isAutoPerformStep())

		gradingFeature.setValidate(true);
	}
	public  void doValidate34_pass1() {
		clearanceManager.setStepDescription("Next step is to valdiate 3 and 4"); 
		waitForUserOrSleep();
		List<GradingFeature> gradingFeatures = Driver.getDatabase().getGradingFeatures();
		GradingFeature gradingFeature7 = gradingFeatures.get(7);
		GradingFeature gradingFeature2 = gradingFeatures.get(2);
		GradingFeature gradingFetaure3 = gradingFeatures.get(3);

		if (clearanceManager.isAutoPerformStep()) {

		gradingFeature7.setValidate(true);
		gradingFeature2.setValidate(true);
		gradingFetaure3.setValidate(true);
		}
	}
	public  void doValidate5_pass2() {
		clearanceManager.setStepDescription("Next steps is to validate the pink items.");
		waitForUserOrSleep();
		List<GradingFeature> gradingFeatures = Driver.getDatabase().getGradingFeatures();
		GradingFeature gradingFeature5 = gradingFeatures.get(5);
		GradingFeature gradingFeature2 = gradingFeatures.get(2);
		GradingFeature gradingFetaure3 = gradingFeatures.get(3);
//		if (clearanceManager.isAutoPerformStep())
//
//		gradingFeature.setValidate(true);
		

		if (clearanceManager.isAutoPerformStep()) {

		gradingFeature5.setValidate(true);
		gradingFeature2.setValidate(true);
		gradingFetaure3.setValidate(true);
		}
	}
	
	
	
	public boolean navigatorReady() {
		ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
		if (projectStepper == null) return false;
		OEFrame stepperFrame = (OEFrame) projectStepper.getFrame();
		if (stepperFrame == null) return false;
		return true;
	}
	public  void showSource() {
		clearanceManager.setStepDescription("Next step is to go the source tab to view all of the source code, which may be non distriuted Java or C, or distributed Java, depending on which directory this program is bound to.");
		waitForUserOrSleep();		
		if (clearanceManager.isAutoPerformStep()) {
			ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
			OEFrame stepperFrame = (OEFrame) projectStepper.getFrame();
			if (stepperFrame == null) {
				System.err.println("Oops, proceed occurred before auto grading completed");
			}
			stepperFrame.focus(projectStepper, "source");			
		}
	}
	
	public  void showSourceChecks() {
		clearanceManager.setStepDescription("Next step is to go the source checks tab to view source code analysis.");
		waitForUserOrSleep();		
		if (clearanceManager.isAutoPerformStep()) {
			ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
			OEFrame stepperFrame = (OEFrame) projectStepper.getFrame();
			if (stepperFrame == null) {
				System.err.println("Oops, proceed occurred before auto grading completed");
			}
			stepperFrame.focus(projectStepper, "sourceChecks");			
		}
	}
	
	public  void showMain() {
		clearanceManager.setStepDescription("Next step is to go the main tab.");
		waitForUserOrSleep();		
		if (clearanceManager.isAutoPerformStep()) {
			ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
			OEFrame stepperFrame = (OEFrame) projectStepper.getFrame();
			stepperFrame.focus(projectStepper, "mainprojectstepper");					
		}
	}
	public  void showProblemHistory() {
		clearanceManager.setStepDescription("Next step is to go the problem history tab to see past source comments.");
		waitForUserOrSleep();		
		if (clearanceManager.isAutoPerformStep()) {
			ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
			OEFrame stepperFrame = (OEFrame) projectStepper.getFrame();
			stepperFrame.focus(projectStepper, "problemHistory");			
		}
	}
	public  void showStudentHistory() {
		clearanceManager.setStepDescription("Next step is to go the source history tab to see past student performance.");
		waitForUserOrSleep();		
		if (clearanceManager.isAutoPerformStep()) {
			ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
			OEFrame stepperFrame = (OEFrame) projectStepper.getFrame();
			stepperFrame.focus(projectStepper, "studentHistory");			
		}
	}
	public  void openSource() {
		clearanceManager.setStepDescription("Next step is to open source in registered editor.");
		waitForUserOrSleep();		
		if (clearanceManager.isAutoPerformStep()) {
			ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
//			OEFrame stepperFrame = (OEFrame) projectStepper.getFrame();
//			stepperFrame.focus(projectStepper, "source");	
			projectStepper.openSource();
		}
	}
	public  void syncSource() {
		clearanceManager.setStepDescription("Next step is to sync changes in external editor.");
		waitForUserOrSleep();		
		if (clearanceManager.isAutoPerformStep()) {
			ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
//			OEFrame stepperFrame = (OEFrame) projectStepper.getFrame();
//			stepperFrame.focus(projectStepper, "source");	
			projectStepper.sync();
		}
	}
	public  void commentOnCode() {
		clearanceManager.setStepDescription("Next step is to insert a comment at the start in the code congratulating the student on good style and giving him extra points. TA Comments can occur anywhere and are preceded by:" + ATACommentsExtractor.TA_STRING);
		waitForUserOrSleep();
		
		if (clearanceManager.isAutoPerformStep()) {
			ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
			
			String oldSource =  projectStepper.getSource();
			String newSource = "//TA:Excellent style +5\n" + oldSource;
			projectStepper.setSource(newSource);
			
//			String oldSource =  ((OverviewProjectStepper) Driver.getDatabase().getProjectStepper()).getSource();
//			String newSource = "//Excellent style\n" + oldSource;
//			((ComplexProjectStepper) Driver.getDatabase().getProjectStepper()).setSource(newSource);
		}

	}
	
	public  void showFeedback() {
		clearanceManager.setStepDescription("Next step is to go to the feedback tab and confirm that the manual and auto grading information about this student is in the feedback.\n\n");
		waitForUserOrSleep();		
		if (clearanceManager.isAutoPerformStep()) {
			ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
			OEFrame stepperFrame = (OEFrame) projectStepper.getFrame();
			stepperFrame.focus(projectStepper, "feedback");			
		}
	}
	
	public  void explainSourceAndcommentOnCode() {
		clearanceManager.setStepDescription("Go to feedback tab and confirm that changes you made are in the feedback.\n\n" +
										"Go to source tab to see all of the source code.\n\n" +
										"Next step is to insert a comment at the start in the code congratulating the student on good style.");
		waitForUserOrSleep();
		
		if (clearanceManager.isAutoPerformStep()) {
			ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
			OEFrame stepperFrame = (OEFrame) projectStepper.getFrame();
			stepperFrame.focus(projectStepper, "feedback");
			String oldSource =  projectStepper.getSource();
			String newSource = "//Excellent style\n" + oldSource;
			projectStepper.setSource(newSource);
			
//			String oldSource =  ((OverviewProjectStepper) Driver.getDatabase().getProjectStepper()).getSource();
//			String newSource = "//Excellent style\n" + oldSource;
//			((ComplexProjectStepper) Driver.getDatabase().getProjectStepper()).setSource(newSource);
		}

	}
	public  void changeOverallScore() {
		clearanceManager.setStepDescription("Next step is to manually increase the overall score for good style as no grading feature was created for it. ");
		waitForUserOrSleep();
		
		if (clearanceManager.isAutoPerformStep()) {
			ComplexProjectStepper projectStepper = (ComplexProjectStepper)Driver.getDatabase().getProjectStepper();
			OEFrame stepperFrame = (OEFrame) projectStepper.getFrame();
//			stepperFrame.focus(projectStepper, "mainprojectstepper");
//			ThreadSupport.sleep(clearanceManager.getAutoPauseTime()*1000);
			
			double oldScore = Driver.getDatabase().getProjectStepper().getScore();
			 Driver.getDatabase().getProjectStepper().setScore(oldScore + 5);
		}

	}
	
	public  void changeOverallNotes2() {
		clearanceManager.setStepDescription("Next step is to change the overall notes to explain the reason for increase. ");
//		Driver.getDatabase().getProjectStepper().setOverallNotes("");
		waitForUserOrSleep();
		if (clearanceManager.isAutoPerformStep()) {
		Driver.getDatabase().getProjectStepper().setOverallNotes(Driver.getDatabase().getProjectStepper().getOverallNotes() + "\nExtra credit for style.");
		}
	}
	public  void quit1() {
		clearanceManager.setStepDescription("Next step is to quit the first grader session.");
		Driver.getDatabase().getProjectStepper().setExitOnQuit(false);

		waitForUserOrSleep();
		if (clearanceManager.isAutoPerformStep()) {
//			cleanUpOnyen();

			
			((OverviewProjectStepper) Driver.getDatabase().getProjectStepper()).quit();
		}
//		System.exit(0);
	}
	public  void quit2() {
		clearanceManager.setStepDescription("Next step is to quit the second grader session and also this test/demo session, cleaning generated files.");
		Driver.getDatabase().getProjectStepper().setExitOnQuit(false);

		waitForUserOrSleep();
		if (clearanceManager.isAutoPerformStep()) {
		

			((OverviewProjectStepper) Driver.getDatabase().getProjectStepper()).quit();
			if (!generatingCorrectDir)
			Driver.getSettingsModel().cleanSlateAll();

		}
		System.exit(0);
	}
	
	/* (non-Javadoc)
	 * @see gradingTools.GraderDemoerAndTester#secondSession()
	 */
	@Override
	public  void secondSession() {
		clearanceManager.setStepDescription("Next step is to start new session. \n\nThis time we will not clean previous slate; continuing from saved data about the first session.");
		waitForUserOrSleep();
		startSecondSession();
		
	}
	public  void changeOverallNotes3() {
		clearanceManager.setStepDescription("Next step is to change the overall notes to further congratulate the student");
		
		waitForUserOrSleep();
		if (clearanceManager.isAutoPerformStep()) {
		Driver.getDatabase().getProjectStepper().setOverallNotes(Driver.getDatabase().getProjectStepper().getOverallNotes() + "\nExcellent - best performace!");
		}
	}
	
	public  void checkWithCorrectResults() {
//		String assignmentName = Common.absoluteNameToLocalName(directory);
//		File correctDir = new File ("Test Data/Correct 110 F13 Results/Assignment3");
		File correctDir = new File (correctDir() + "/" + assignmentNo());

//		File testDir = new File ("Test Data/Test 110 F13 Assignments/Assignment3");
		File testDir = new File (testDir() + "/" + assignmentNo());

		String[] ignoreSuffixesArray = {".zip", ".ini", ".json", "Submission attachment(s)"};
//		String[] ignoreSuffixesArray = {".zip", ".ini", ".json"};

		List<String> ignoreSuffixesList = Arrays.asList(ignoreSuffixesArray);
		System.out.println(DirectoryUtils.compare (correctDir, testDir, ignoreSuffixesList));
	}
	
//	public  boolean isAutoProceed() {
//		return autoProceed;
//	}
//
//	public  void setAutoProceed(boolean autoProceed) {
//		Tester.autoProceed = autoProceed;
//	}
//
//	public  long getAutoProceedPauseTime() {
//		return autoProceedPauseTime;
//	}
//
//	public  void setAutoProceedPauseTime(long autoProceedPauseTime) {
//		Tester.autoProceedPauseTime = autoProceedPauseTime;
//	}

	protected void waitForUserOrSleep() {
		if (clearanceManager.isAutoProceed())
			ThreadSupport.sleep(clearanceManager.getAutoPauseTime()*1000);
		else
			clearanceManager.waitForClearance();
	}
	
	protected void waitForUserOrLongSleep() {
		if (clearanceManager.isAutoProceed()) {
			ThreadSupport.sleep(clearanceManager.getAutoPauseTime()*1000*getLongAutoPauseSeconds());
			
		} else
			clearanceManager.waitForClearance();
		if (! navigatorReady()) {
			System.out.println("Premature proceed to navigator, redoing the wait.");
			waitForUserOrLongSleep();
		}
	}
	
	protected void waitForUserOrMediumSleep() {
		if (clearanceManager.isAutoProceed())
			ThreadSupport.sleep(clearanceManager.getAutoPauseTime()*1000*getMediumPauseSeconds());
		else
			clearanceManager.waitForClearance();
	}

	@Override
	public void run() {
		Driver.drive(args, 0,  CLEARANCE_HEIGHT);
		OEFrame frame = (OEFrame) Driver.getDatabase().getProjectStepper().getFrame();
//		frame.setLocation(0, CLEARANCE_HEIGHT-100);
		frame.setLocation(CLEARANCE_WIDTH, 0);

//		Driver.getSettingsFrame().setLocation(C);
	}

}
]]></snapshot>
  </Command>
  <Command __id="5731" _type="FileOpenCommand" date="Sat Aug 24 15:05:23 EDT 2019" docASTNodeCount="2232" docActiveCodeLength="22650" docExpressionCount="1459" docLength="27659" projectName="comp110-grader" timestamp="97846089">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\demoAndTest\basic\AJavaPalindromeBasedGraderDemoerAndTester.java]]></filePath>
  </Command>
  <Command __id="5771" _type="FileOpenCommand" date="Sat Aug 24 15:06:58 EDT 2019" docASTNodeCount="75" docActiveCodeLength="604" docExpressionCount="50" docLength="709" projectName="comp110-grader" timestamp="97942060">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\demoAndTest\interpretedSpec\c\ACMixedArithmeticIntrepretedSpecGraderTester.java]]></filePath>
    <snapshot><![CDATA[package demoAndTest.interpretedSpec.c;

import grader.basics.util.DirectoryUtils;
import util.trace.Tracer;
import demoAndTest.GraderDemoerAndTester;
/*
 * This is a test not of the student programs but of the grader on Java non distributed programs
 */
public class ACMixedArithmeticIntrepretedSpecGraderTester {
	public static void main (String[] anArgs) {
		GraderDemoerAndTester demoerAndTester = new ACMixedArithmeticInterpretedSpecGraderDemoerAndTester(anArgs);

		demoerAndTester.setAutoProceed(true);
		demoerAndTester.setGeneratingCorrectDir(false);
		Tracer.showInfo(true);
		Tracer.setKeywordPrintStatus(DirectoryUtils.class, true);
		demoerAndTester.demoAndTest();

		
	}

}
]]></snapshot>
  </Command>
  <Command __id="5773" _type="FileOpenCommand" date="Sat Aug 24 15:07:14 EDT 2019" docASTNodeCount="137" docActiveCodeLength="1258" docExpressionCount="69" docLength="1636" projectName="comp110-grader" timestamp="97957755">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\demoAndTest\interpretedSpec\c\ACMixedArithmeticInterpretedSpecGraderDemoerAndTester.java]]></filePath>
  </Command>
  <Command __id="5775" _type="FileOpenCommand" date="Sat Aug 24 15:08:55 EDT 2019" docASTNodeCount="951" docActiveCodeLength="6576" docExpressionCount="545" docLength="6607" projectName="comp110-grader" timestamp="98058739">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\requirements\interpreter\specification\ACSVRequirementsSpecification.java]]></filePath>
  </Command>
  <Command __id="5779" _type="FileOpenCommand" date="Sat Aug 24 15:09:12 EDT 2019" docASTNodeCount="4995" docActiveCodeLength="41979" docExpressionCount="3085" docLength="56540" projectName="comp110-grader" timestamp="98075838">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\sakai\project\ASakaiProjectDatabase.java]]></filePath>
    <snapshot><![CDATA[package grader.sakai.project;


import framework.grading.ProjectRequirements;
import framework.grading.testing.Checkable;
import framework.grading.testing.Feature;
import framework.grading.testing.Restriction;
import framework.logging.loggers.FeedbackTextSummaryLogger;
import grader.assignment.AGradingFeature;
import grader.assignment.AGradingFeatureList;
import grader.assignment.AnAssignmenDataFolder;
import grader.assignment.AssignmentDataFolder;
import grader.assignment.GradingFeature;
import grader.assignment.GradingFeatureList;
import grader.auto_notes.ANotesGenerator;
import grader.auto_notes.NotesGenerator;
import grader.basics.execution.MainClassFinder;
import grader.basics.settings.BasicGradingEnvironment;
import grader.basics.trace.ProjectFolderNotFound;
import grader.colorers.Colorer;
import grader.colorers.GradingFeatureColorerSelector;
import grader.colorers.MultiplierColorerSelector;
import grader.colorers.NotesColorerSelector;
import grader.colorers.OverallScoreColorerSelector;
import grader.documents.AWordDocumentDisplayer;
import grader.documents.DocumentDisplayer;
import grader.documents.DocumentDisplayerRegistry;
import grader.execution.AReflectionBasedProjectRunner;
import grader.feedback.APrintingAutoFeedbackManager;
import grader.feedback.APrintingManualFeedbackManager;
import grader.feedback.AScoreFeedbackFileWriter;
import grader.feedback.AnAllTextSourceDisplayer;
import grader.feedback.AutoFeedback;
import grader.feedback.ManualFeedback;
import grader.feedback.ScoreFeedback;
import grader.feedback.SourceDisplayer;
import grader.file.RootFolderProxy;
import grader.language.LanguageDependencyManager;
import grader.navigation.AProjectNavigator;
import grader.navigation.NavigationListManager;
import grader.navigation.NavigationListManagerFactory;
import grader.navigation.ProjectNavigator;
import grader.navigation.automatic.AnAutomaticProjectNavigator;
import grader.navigation.automatic.AutomaticProjectNavigator;
import grader.navigation.filter.ADispatchingFilter;
import grader.navigation.filter.BasicNavigationFilter;
import grader.navigation.hybrid.AHybridProjectNavigator;
import grader.navigation.hybrid.HybridProjectNavigator;
import grader.navigation.manual.AManualProjectNavigator;
import grader.navigation.manual.ManualProjectNavigator;
import grader.navigation.sorter.FileNameSorterSelector;
import grader.photos.APhotoReader;
import grader.photos.PhotoReader;
import grader.project.flexible.AFlexibleProject;
import grader.project.source.ClassesTextManager;
import grader.requirements.interpreter.specification.ACSVRequirementsSpecification;
import grader.requirements.interpreter.specification.CSVRequirementsSpecification;
import grader.sakai.ASakaiBulkAssignmentFolder;
import grader.sakai.ASakaiStudentCodingAssignmentsDatabase;
import grader.sakai.BulkAssignmentFolder;
import grader.sakai.GenericStudentAssignmentDatabase;
import grader.sakai.StudentCodingAssignment;
import grader.settings.GraderSettingsModel;
import grader.settings.GraderSettingsModelSelector;
import grader.settings.folders.OnyenRangeModel;
import grader.spreadsheet.FeatureGradeRecorder;
import grader.spreadsheet.FeatureGradeRecorderSelector;
import grader.spreadsheet.FinalGradeRecorder;
import grader.steppers.AComplexProjectStepper;
import grader.steppers.AGradedProjectNavigator;
import grader.steppers.OverviewProjectStepper;
import grader.trace.assignment_data.AssignmentDataFolderCreated;
import grader.trace.assignment_data.AssignmentDataFolderLoaded;
import grader.trace.settings.InvalidOnyenRangeException;
import grader.trace.settings.MissingOnyenException;
import grader.trace.steppers.ProjectIORedirected;
import grader.trace.steppers.ProjectStepperDisplayed;
import grader.trace.steppers.ProjectWindowsDisposed;
import grader.trace.steppers.ProjectWindowsRecorded;

import java.awt.Component;
import java.awt.Frame;
import java.awt.GraphicsEnvironment;
import java.awt.Window;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javax.swing.Icon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import util.misc.AClearanceManager;
import util.misc.ClearanceManager;
import util.misc.Common;
import util.models.Hashcodetable;
import util.trace.Tracer;
import wrappers.grader.checkers.FeatureCheckerWrapper;
import bus.uigen.OEFrame;
import bus.uigen.uiFrame;
import bus.uigen.uiFrameList;
import bus.uigen.widgets.VirtualComponent;
import bus.uigen.widgets.VirtualFrame;

public class ASakaiProjectDatabase implements SakaiProjectDatabase {
	static SakaiProjectDatabase currentSakaiProjectDatabase;

	// public static final String DEFAULT_ASSIGNMENT_DATA_FOLDER =
	// "C:/Users/dewan/Downloads/GraderData";
	public static final String DEFAULT_SCORE_FILE_NAME = "scores.txt";
	boolean assignmentRoot;
	Map<String, SakaiProject> onyenToProject = new HashMap();
	String bulkAssignmentsFolderName;
	BulkAssignmentFolder bulkFolder;
	// String assignmentsDataFolderName = DEFAULT_ASSIGNMENT_DATA_FOLDER;
	String assignmentsDataFolderName;
	ClearanceManager clearanceManager;
	ProjectNavigator projectNavigator;
	ManualProjectNavigator manualProjectNavigator;
	AutomaticProjectNavigator automaticProjectNavigator;
	HybridProjectNavigator hybridProjectNavigator;

//
	AssignmentDataFolder assignmentDataFolder;
	// String outputFileName;
	FinalGradeRecorder gradeRecorder;
	FinalGradeRecorder totalScoreRecorder;
	protected FeatureGradeRecorder featureGradeRecorder;
	protected CSVRequirementsSpecification csvRequirementsSpecification;
	GradingFeatureList gradingFeatures = new AGradingFeatureList();

	String sourceFileNameSuffix = ClassesTextManager.DEFAULT_SOURCES_FILE_SUFFIX;
	String sourceFileNamePrefix = ClassesTextManager.DEFAULT_SOURCES_FILE_SUFFIX;

	String outputSuffix = AFlexibleProject.DEFAULT_TRANSCRIPT_FILE_SUFFIX;
//
	ScoreFeedback scoreFeedback;
	AutoFeedback autoFeedback;
	ManualFeedback manualFeedback;
	SourceDisplayer sourceDisplayer;
	MainClassFinder mainClassFinder;

	String startStudentID, endStudentID;
	ProjectStepper projectStepper;
	PhotoReader photoReader;
	Hashcodetable<GradingFeature, Checkable> featureToCheckable = new Hashcodetable<>();
	protected ProjectRequirements projectRequirements;
	Colorer<GradingFeature> gradingFeatureColorer;
	Colorer<Double> scoreColorer, multiplierColorer;
	Colorer<String> overallNotesColorer;
	GraderSettingsModel graderSettings;
	BasicNavigationFilter navigationFilter;
	NotesGenerator notesGenerator;
	Comparator<String> fileNameSorter;
	String graderDirectory;
	protected OnyenRangeModel onyens;

	public ASakaiProjectDatabase(String aBulkAssignmentsFolderName,
			String anAssignmentsDataFolderName, String aStartStudentID,
			String anEndStudentID, boolean anAssignmentRoot) {

		startStudentID = aStartStudentID;
		endStudentID = anEndStudentID;
		init(aBulkAssignmentsFolderName, anAssignmentsDataFolderName,
				anAssignmentRoot);

	}
	
	

	public ASakaiProjectDatabase(String aBulkAssignmentsFolderName,
			String anAssignmentsDataFolderName, boolean anAssignmentRoot) {
		init(aBulkAssignmentsFolderName, anAssignmentsDataFolderName,
				anAssignmentRoot);
		

	}

	public void init(String aBulkAssignmentsFolderName,
			String anAssignmentsDataFolderName, boolean anAssigmentRoot) {
		setCurrentSakaiProjectDatabase(this);
		graderDirectory = AReflectionBasedProjectRunner.getCurrentDirectory();
		assignmentRoot = anAssigmentRoot;
		sourceFileNameSuffix = sourceSuffix();
		outputSuffix = outputSuffix();
		bulkAssignmentsFolderName = aBulkAssignmentsFolderName;
		assignmentsDataFolderName = anAssignmentsDataFolderName;
		fileNameSorter = createFileNameSorter();
		maybeMakeProjects();
		
		featureGradeRecorder = createFeatureGradeRecorder();
		gradeRecorder = createFinalGradeRecorder();

		// totalScoreRecorder = createTotalScoreRecorder();
		totalScoreRecorder = createTotalScoreRecorder();
		autoFeedback = createAutoFeedback();
		manualFeedback = createManualFeedback();
		scoreFeedback = createScoreFeedback();
		sourceDisplayer = createSourceDisplayer();
		mainClassFinder = createMainClassFinder();
		projectStepperDisplayer = createProjectStepperDisplayer();
		navigationListCreator = createNavigationListCreator();

		photoReader = createPhotoReader();
		gradingFeatureColorer = createGradingFeatureColorer();
		scoreColorer = createScoreColorer();
		multiplierColorer = createMultiplierColorer();
		overallNotesColorer = createOverallNotesColorer();
		notesGenerator = createNotesGenerator();
		clearanceManager = createClearanceManager();
		projectNavigator = createProjectNavigator();
		manualProjectNavigator = createManualProjectNavigator();
		automaticProjectNavigator = createAutomaticProjectNavigator();
		hybridProjectNavigator = createHybridProjectNavigator();

		// maybeMakeProjects();
		
		initInputFiles();
		onyens = GraderSettingsModelSelector.getGraderSettingsModel().getOnyens();
		onyens.addPropertyChangeListener(this);

	}

	private AutomaticProjectNavigator createAutomaticProjectNavigator() {
		return new AnAutomaticProjectNavigator(this);
	}

	private HybridProjectNavigator createHybridProjectNavigator() {
		return new AHybridProjectNavigator(this);
	}

	private ManualProjectNavigator createManualProjectNavigator() {
		return new AManualProjectNavigator(this);
	}

	private ProjectNavigator createProjectNavigator() {
		return new AProjectNavigator(this);
	}

	Comparator<String> createFileNameSorter() {
//		return new AnAlphabeticFileNameSorter();
		return FileNameSorterSelector.getSorter();
	}

	public static SakaiProjectDatabase getCurrentSakaiProjectDatabase() {
		return currentSakaiProjectDatabase;
	}

	public static void setCurrentSakaiProjectDatabase(
			SakaiProjectDatabase currentSakaiProjectDatabase) {
		ASakaiProjectDatabase.currentSakaiProjectDatabase = currentSakaiProjectDatabase;
	}

	public AutoFeedback getAutoFeedback() {
		return autoFeedback;
	}

	public ManualFeedback getManualFeedback() {
		return manualFeedback;
	}

	public ScoreFeedback getScoreFeedback() {
		return scoreFeedback;
	}


	public void setScoreFeedback(ScoreFeedback newVal) {
		scoreFeedback = newVal;
	}

	public SourceDisplayer getSourceDisplayer() {
		return sourceDisplayer;
	}

	protected AutoFeedback createAutoFeedback() {
		// return new AnAutoFeedbackManager();
		return new APrintingAutoFeedbackManager();
	}

	protected ManualFeedback createManualFeedback() {
		// return new AManualFeedbackManager();
		return new APrintingManualFeedbackManager();
	}

	protected ScoreFeedback createScoreFeedback() {
		return new AScoreFeedbackFileWriter();
	}

	protected SourceDisplayer createSourceDisplayer() {
		return new AnAllTextSourceDisplayer();
	}


	protected PhotoReader createPhotoReader() {
		return new APhotoReader(this);
	}

	protected Colorer<GradingFeature> createGradingFeatureColorer() {
//		return new AGradingFeatureColorer(this);
		return GradingFeatureColorerSelector.createColorer(this);
	}

	protected Colorer<Double> createScoreColorer() {
//		return new AScoreColorer(this, 100);
		return OverallScoreColorerSelector.createColorer(this);
		
	}

	protected Colorer<Double> createMultiplierColorer() {
//		return new AScoreColorer(this, 1.0);
		return MultiplierColorerSelector.createColorer(this);

	}

	protected Colorer<String> createOverallNotesColorer() {
//		return new ANotesColorer(this);
		return NotesColorerSelector.createColorer(this);
	}

	protected FinalGradeRecorder createFinalGradeRecorder() {
		// return FinalGradeRecorderSelector.createFinalGradeRecorder(this);
		return featureGradeRecorder;

	}

	protected FeatureGradeRecorder createFeatureGradeRecorder() {
		return FeatureGradeRecorderSelector.createFeatureGradeRecorder(this);
	}
	// This will return conglomerate recorder
	protected FinalGradeRecorder createTotalScoreRecorder() {
		return featureGradeRecorder;

		// return TotalScoreRecorderSelector.createFinalGradeRecorder(this);
	}

	public FinalGradeRecorder getTotalScoreRecorder() {
		return totalScoreRecorder;
	}

	public void setTotalScoreRecorder(FinalGradeRecorder newVal) {
		totalScoreRecorder = newVal;
	}

	public String sourceSuffix() {
		return ClassesTextManager.DEFAULT_SOURCES_FILE_SUFFIX;
	}

	public String outputSuffix() {

		return AFlexibleProject.DEFAULT_TRANSCRIPT_FILE_SUFFIX;
	}

	public GradingFeatureList getGradingFeatures() {
		return gradingFeatures;
	}


	protected MainClassFinder createMainClassFinder() {
//		return new AMainClassFinder();
//		return JavaMainClassFinderSelector.getMainClassFinder();
        return LanguageDependencyManager.getMainClassFinder();

	}

	public void addGradingFeatures(List<GradingFeature> aGradingFeatures) {
		for (GradingFeature aGradingFeature : aGradingFeatures) {
			aGradingFeature.setInputFiles(inputFiles);
			gradingFeatures.add(aGradingFeature);
			aGradingFeature.setProjectDatabase(this);

			if (aGradingFeature.isAutoGradable()
					&& aGradingFeature.getFeatureChecker().isOverridable()) {
				GradingFeature manualFeature = new AGradingFeature("Override"
						+ aGradingFeature.getFeatureName(),
						aGradingFeature.getMax(),
						aGradingFeature.isExtraCredit());
				manualFeature.setProjectDatabase(this);
				gradingFeatures.add(manualFeature);
				aGradingFeature.setLinkedFeature(manualFeature);
				manualFeature.setLinkedFeature(aGradingFeature);


			}
		}
		// gradingFeatures.addAll(aGradingFeatures);

	}

	public BulkAssignmentFolder getBulkAssignmentFolder() {
		return bulkFolder;
	}
	@Override
	public AssignmentDataFolder getAssignmentDataFolder() {
		return assignmentDataFolder;
	}

	public Set<String> getOnyens() {
		return onyenToProject.keySet();
	}

	public Collection<SakaiProject> getProjects() {
		return onyenToProject.values();
	}

	@Override
	public FinalGradeRecorder getGradeRecorder() {
		return gradeRecorder;
	}

	@Override
	public FeatureGradeRecorder getFeatureGradeRecorder() {
		return featureGradeRecorder;
	}


	// I changed this to protected so extending classes can call it. -- Josh
	protected SakaiProject makeProject(StudentCodingAssignment anAssignment) {
		RootFolderProxy projectFolder = anAssignment.getProjectFolder();
		

		if (projectFolder == null) {
			FeedbackTextSummaryLogger.logNoSubmission(anAssignment);
			Tracer.error(ProjectFolderNotFound.newCase(anAssignment.getOnyen(), anAssignment.getStudentName(), this).getMessage()); // we will not throw this exception
			if (AGradedProjectNavigator.doNotVisitNullProjects)
			return null;
		}
		// List<OEFrame> oldList = new ArrayList( uiFrameList.getList());


		if (!anAssignment.isSubmitted() && AGradedProjectNavigator.doNotVisitNullProjects) {
			System.out.println("Assignment not submitted:"
					+ anAssignment.getOnyen() + " "
					+ anAssignment.getStudentName());

			return null;
		}


		
		SakaiProject aProject;
		try {
			aProject = new ASakaiProject(anAssignment, sourceFileNameSuffix,
					outputSuffix);
			return aProject;
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	// Project lastProject;
	public SakaiProject runProject(String anOnyen) {
		SakaiProject aProject = getOrCreateProject(anOnyen);
		// if (aProject != null) {
		//
		// String[] strings = {};
		//
		// outputFileName = //aProject.getOutputFileName();
		// aProject.getOutputFolder() + "/" + AProject.DEFAULT_OUTPUT_FILE_NAME;
		// System.out.println("Trying to run:" + anOnyen + " " +
		// aProject.getStudentAssignment().getStudentName());
		// String assignmentName =
		// this.getBulkAssignmentFolder().getAssignmentName().replaceAll("\\s","");
		// Thread thread = aProject.run("main." + assignmentName, strings, null,
		// outputFileName);
		//
		// resetRunningProject(aProject);
		// // return aProject;
		// }
		runProject(anOnyen, aProject);
		return aProject;
	}

	public void setRunParameters(SakaiProject aProject) {

	}

	String assignmentName, mixedCaseAssignmentName;

	protected String getAssignmentName() {
		if (assignmentName == null)
			assignmentName = this.getBulkAssignmentFolder().getAssignmentName()
					.replaceAll("\\s", "");
		return assignmentName;
	}


	protected String getMixedCaseAssignmentName() {
		if (mixedCaseAssignmentName == null)
			mixedCaseAssignmentName = this.getBulkAssignmentFolder()
					.getMixedCaseAssignmentName().replaceAll("\\s", "");
		return mixedCaseAssignmentName;
	}

	public String getOutputFileName(SakaiProject aProject, String anInputFile) {
		String inQualifier = "";
		if (anInputFile != null) {
			inQualifier = Common.toFilePrefix(Common
					.absoluteNameToLocalName(anInputFile)) + "_";
		}
		String outputFileName = // aProject.getOutputFileName();
		aProject.getOutputFolder() + "/" + inQualifier
				+ getDefaultOutputFileName();
		return outputFileName;

	}

	public String getDefaultOutputFileName() {

		return AFlexibleProject.DEFAULT_TRANSCRIPT_FILE_PREFIX + outputSuffix;
	}

	public String[] getOutputFileNames(SakaiProject aProject,
			String[] anInputFiles) {
		String[] anOutputFiles = new String[anInputFiles.length];
		for (int i = 0; i < anInputFiles.length; i++) {
			anOutputFiles[i] = getOutputFileName(aProject, anInputFiles[i]);
		}
		return anOutputFiles;
		/*
		 * String inQualifier = ""; if (anInputFile != null) inQualifier =
		 * anInputFile + "_"; outputFileName = //aProject.getOutputFileName();
		 * aProject.getOutputFolder() + "/" + inQualifier +
		 * AProject.DEFAULT_OUTPUT_FILE_NAME; return outputFileName;
		 */

	}

	public String getClassName() {
		return "main." + getMixedCaseAssignmentName();
	}

	protected String[][] getArgs(String[] anInputFiles) {
		String[][] args = new String[anInputFiles.length][];
		for (int i = 0; i < anInputFiles.length; i++) {
			args[i] = getArgs(anInputFiles[i]);
		}
		return args;
	}

	protected String[] getArgs(String inputFile) {
		return new String[] {};
	}

	String[] outputFiles;
	String outputFileName;
	String[] inputFiles;
	String[][] args;

	public String[] getInputFiles() {
		return inputFiles;
	}


	protected void initInputFiles() {
		Set<String> inputFilesSet = assignmentDataFolder.getInputFiles();
		inputFiles = new String[inputFilesSet.size()];
		int nextFileIndex = 0;
		for (String inputFile : inputFilesSet) {
			inputFiles[nextFileIndex] = inputFile;
			nextFileIndex++;

		}
	}

	@Override
	public SakaiProject runProject(String anOnyen, SakaiProject aProject) {
		// SakaiProject aProject = getProject(anOnyen);
		if (aProject != null) {

			// String[] strings = {};

			// outputFileName = //aProject.getOutputFileName();
			// aProject.getOutputFolder() + "/" +
			// AProject.DEFAULT_OUTPUT_FILE_NAME;

			// System.out.println("Trying to run:" + anOnyen + " "
			// + aProject.getStudentAssignment().getStudentName());
			System.out.println("Trying to run:" + anOnyen);
			// String assignmentName =
			// this.getBulkAssignmentFolder().getAssignmentName().replaceAll("\\s","");
			String assignmentName = getMixedCaseAssignmentName();

			String mainClassName = getClassName();
			Set<String> inputFilesSet = assignmentDataFolder.getInputFiles();
			// inputFiles = new String[inputFilesSet.size()];
			// int nextFileIndex = 0;
			// for (String inputFile : inputFilesSet) {
			// inputFiles[nextFileIndex] = inputFile;
			// nextFileIndex++;
			//
			// }
			outputFiles = getOutputFileNames(aProject, inputFiles);
			outputFileName = aProject.getOutputFileName();

			String[][] strings = getArgs(inputFiles);

			aProject.setRunParameters(mainClassName, strings, inputFiles,
					outputFiles, mainClassFinder);
			Thread thread = aProject.runProject();

			//
			// if (inputFiles.size() > 0) {
			// for (String inputFile:inputFiles) {
			// if (!aProject.canBeRun()) break;
			// aProject.setRunParameters (mainClassName, strings, inputFile,
			// outputFileName);
			//
			// // Thread thread = aProject.run("main." + assignmentName,
			// strings, null, outputFileName);
			// // Thread thread = aProject.run(mainClassName, strings, null,
			// outputFileName);
			// Thread thread = aProject.runProject();
			// System.out.println("returned from run");
			//
			// }
			// } else {
			//
			// aProject.setRunParameters (mainClassName, strings, null,
			// outputFileName);
			//
			//
			// // Thread thread = aProject.run("main." + assignmentName,
			// strings, null, outputFileName);
			// // Thread thread = aProject.run(mainClassName, strings, null,
			// outputFileName);
			// Thread thread = aProject.runProject();
			// }


			// resetRunningProject(aProject);
			// return aProject;
		}
		return aProject;
	}


	@Override
	public void resetRunningProject(SakaiProject aProject) {
		for (GradingFeature gradingFeature : gradingFeatures) {
			gradingFeature.setProject(aProject);
			gradingFeature.setOutputFiles(outputFiles);
		}
	}


	uiFrame frame;

	public ProjectStepper createAndDisplayProjectStepper() {
		// if (projectStepper != null) {
		// ProjectStepper aProjectStepper = createProjectStepper();
		// aProjectStepper.setProjectDatabase(this);
		// projectStepper = aProjectStepper;
		// }
		// OEFrame oeFrame = ObjectEditor.edit(clearanceManager);
		// oeFrame.setLocation(800, 500);
		// oeFrame.setSize(400, 400);
		ProjectStepper projectStepper = getOrCreateProjectStepper();
		displayProjectStepper(projectStepper);
		// projectStepper.setOEFrame(frame);
		return projectStepper;
	}

	public ProjectStepper getProjectStepper() {

		return projectStepper;
	}

	public void setProjectStepper(ProjectStepper projectStepper) {
		this.projectStepper = projectStepper;
	}

	ProjectStepperDisplayer projectStepperDisplayer;

	public ProjectStepperDisplayer getProjectStepperDisplayer() {
		return projectStepperDisplayer;
	}

	public void setProjectStepperDisplayer(
			ProjectStepperDisplayer projectStepperDisplayer) {
		this.projectStepperDisplayer = projectStepperDisplayer;
	}

	protected ProjectStepperDisplayer createProjectStepperDisplayer() {

//		return new AnOEProjectStepperDisplayer();
		return ProjectStepperDisplayerSelector.getProjectStepperDisplayer();
	}

	public Object displayProjectStepper(ProjectStepper aProjectStepper) {
		// return projectStepperDisplayer.display(aProjectStepper);
		Object retVal = projectStepperDisplayer.display(aProjectStepper);
		// if (retVal instanceof uiFrame) {
		projectStepper.setFrame(retVal);
		// }
		ProjectStepperDisplayed.newCase(this, (OverviewProjectStepper) aProjectStepper, this);
//		recordWindows(); // make sure this frame is not disposed on next, set Frame is recording windows, why record again? Also setFrame will do auto run
		// ProjectWindowsRecorded.newCase(this, (OverviewProjectStepper)
		// projectStepper, projectStepper.getProject(), this);

		// frame = (uiFrame) displayProjectStepper(projectStepper);
		// projectStepper.setOEFrame(retVal);
		return retVal;

		// OEFrame oeFrame = ObjectEditor.edit(aProjectStepper);
		// oeFrame.setLocation(700, 500);
		// oeFrame.setSize(500, 700);
		// return oeFrame;
	}
	@Override
	public ProjectStepper getOrCreateProjectStepper() {
		if (projectStepper == null) {
//			projectStepper = new AComplexProjectStepper();
			projectStepper = ProjectStepperFactory.createProjectStepper();


			// projectStepper = new AMainProjectStepper();

			// projectStepper = new AnOverviewProjectStepper();
			// projectStepper = new ABasicProjectStepper();

			// projectStepper = new AProjectStepper();
			projectStepper.setProjectDatabase(this);
		}

		return projectStepper;
//
	}

	public void runProjectInteractively(String anOnyen) {
		runProjectInteractively(anOnyen, createAndDisplayProjectStepper());

	}


	NavigationListManager navigationListCreator;


	public NavigationListManager getNavigationListCreator() {
		return navigationListCreator;
	}


	public void setNavigationListCreator(
			NavigationListManager navigationListCreator) {

		this.navigationListCreator = navigationListCreator;
	}

	NavigationListManager createNavigationListCreator() {

//		return new AnUnsortedNavigationListCreator();
		return NavigationListCreatorSelector.getNavigationListCreator();
	}

	public List<String> getOnyenNavigationList(
			SakaiProjectDatabase aSakaiProjectDatabase) {
		// Set<String> onyens = new HashSet(aSakaiProjectDatabase.getOnyens());
		// return new ArrayList(aSakaiProjectDatabase.getOnyens());
		return getNavigationListCreator().getOnyenNavigationList(
				aSakaiProjectDatabase);

	}

	public List<String> getOnyenNavigationList() {
		// Set<String> onyens = new HashSet(aSakaiProjectDatabase.getOnyens());
		return getOnyenNavigationList(this);


	}

	public void runProjectsInteractively() {
		ProjectStepper aProjectStepper = createAndDisplayProjectStepper();
		maybeMakeProjects();

		// aProjectStepper.setProjectDatabase(this);
		// Set<String> onyens = new HashSet(onyenToProject.keySet());
		// aProjectStepper.setHasMoreSteps(true);
		List<String> onyens = getOnyenNavigationList(this);
		if (onyens.size() == 0) {
			if (!GraphicsEnvironment.isHeadless())
			JOptionPane.showMessageDialog(null,
					"No onyens matching specification found");
			Tracer.error("No onyens matching specification found");
		}


		for (String anOnyen : onyens) {
			runProjectInteractively(anOnyen, aProjectStepper);
		}
		aProjectStepper.setHasMoreSteps(false);

	}


	public static void setVisible(Object aFrame, boolean newVal) {
		if (aFrame instanceof Component) {
			((Component) aFrame).setVisible(newVal);
		} else if (aFrame instanceof VirtualComponent) {
			((VirtualComponent) aFrame).setVisible(newVal);
		} else if (aFrame instanceof OEFrame) {
			((OEFrame) aFrame).getFrame().setVisible(newVal);
		}
	}

	public static void dispose(Object aFrame) {
		if (aFrame instanceof Frame) {
			((Frame) aFrame).dispose();
		} else if (aFrame instanceof VirtualFrame) {
			((VirtualFrame) aFrame).dispose();
		} else if (aFrame instanceof JFrame) {
			((JFrame) aFrame).dispose();

		} else if (aFrame instanceof OEFrame) {
			((OEFrame) aFrame).getFrame().dispose();
			;
		}
	}

	public boolean nonBlockingRunProjectsInteractively()
			throws InvalidOnyenRangeException {
		try {
			return nonBlockingRunProjectsInteractively("");
		} catch (MissingOnyenException e) {
			// unreachable code
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public boolean nonBlockingRunProjectsInteractively(String aGoToOnyen)
			throws MissingOnyenException, InvalidOnyenRangeException {
		maybeMakeProjects();
		ProjectStepper aProjectStepper = createAndDisplayProjectStepper();
		Object frame = aProjectStepper.getFrame();
		// setVisible(frame, false);

		// ProjectStepper aProjectStepper = getOrCreateProjectStepper();

		aProjectStepper.configureNavigationList();
		boolean retVal = false;
		try {
			retVal = aProjectStepper.runProjectsInteractively(aGoToOnyen);
		} catch (MissingOnyenException e) {
			dispose(frame);
			throw e;
			// return false;// or could throw the exception to caller, header
			// allows this to happen
		}
		if (!retVal) {
			dispose(frame);
		}
		return retVal;
		// aProjectStepper.setProjectDatabase(this);
		// Set<String> onyens = new HashSet(onyenToProject.keySet());
		// aProjectStepper.setHasMoreSteps(true);
		// List<String> onyens = getOnyenNavigationList(this);
		//
		// for (String anOnyen : onyens) {
		// runProjectInteractively(anOnyen, aProjectStepper);
		// }
		// aProjectStepper.setHasMoreSteps(false);

	}

	@Override
	public boolean startProjectStepper(String aGoToOnyen)
			throws MissingOnyenException, InvalidOnyenRangeException {
		maybeMakeProjects();
		ProjectStepper aProjectStepper = getOrCreateProjectStepper();
		// Object frame = aProjectStepper.getFrame();
		// setVisible(frame, false);

		// ProjectStepper aProjectStepper = getOrCreateProjectStepper();

		aProjectStepper.configureNavigationList();
		boolean retVal = false;
		try {
			retVal = aProjectStepper.runProjectsInteractively(aGoToOnyen);
		} catch (MissingOnyenException e) {
			// dispose(frame);
			throw e;
			// return false;// or could throw the exception to caller, header
			// allows this to happen
		}
		// if (!retVal ) {
		// dispose(frame);
		// }
		return retVal;
		// aProjectStepper.setProjectDatabase(this);
		// Set<String> onyens = new HashSet(onyenToProject.keySet());
		// aProjectStepper.setHasMoreSteps(true);
		// List<String> onyens = getOnyenNavigationList(this);
		//
		// for (String anOnyen : onyens) {
		// runProjectInteractively(anOnyen, aProjectStepper);
		// }
		// aProjectStepper.setHasMoreSteps(false);

	}

	@Override
	public void startProjectStepper() {
		maybeMakeProjects();
		ProjectStepper aProjectStepper = createAndDisplayProjectStepper();
		aProjectStepper.configureNavigationList();
	}

	// String navigationFilter = "";
	//
	// public String getNavigationFilter() {
	// return navigationFilter;
	// }
	//
	// public void setNavigationFilter(String navigationFilter) {
	// this.navigationFilter = navigationFilter;
	// }


	PrintStream origOut;
	InputStream origIn;

	// SakaiProject nextProject;
	// String onyen;
	// ProjectStepper projectStepper;

	List<OEFrame> oldList;
	Window[] oldWindows;
	@Override
	public void restoreGraderDirectory() {
		AReflectionBasedProjectRunner.setCurrentDirectory(graderDirectory);
	}

	public void recordWindows() {
		oldList = new ArrayList(uiFrameList.getList());
		oldWindows = Window.getWindows();
		ProjectWindowsRecorded.newCase(this,
				(OverviewProjectStepper) projectStepper,
				projectStepper.getProject(), this);

	}
	protected static ThreadPoolExecutor executor;
	public static void maybeCreateThreadPoolExecutor() {
		if (executor == null) {
			executor = 
					  (ThreadPoolExecutor) Executors.newFixedThreadPool(1);
		}
		
	}
	public static ThreadPoolExecutor executor() {
		maybeCreateThreadPoolExecutor();
		return executor;
	}
	public static int DISPOSE_TIMEOUT = 4000;
	@Override
	public  void clearWindows() {
		if (oldWindows != null && oldList != null) {// somebody went before me,
													// get rid of their windows
		// System.out.println("dispoing old windows");
			List<uiFrame> newList = new ArrayList(uiFrameList.getList());

			for (uiFrame frame : newList) {

				if (oldList.contains(frame))
					continue;
				frame.dispose(); // will this work
			}

			Window[] newWindows = Window.getWindows();

			for (Window frame : newWindows) {

				if (Common.containsReference(oldWindows, frame)) {
					continue;
				}
				Future aFuture =
			     executor().submit(() -> {
					frame.setVisible(false);
					frame.dispose(); // this hangs
				    return null;
				});
				try {
					Object aRetVal = aFuture.get(DISPOSE_TIMEOUT, TimeUnit.MILLISECONDS);
				} catch (TimeoutException | InterruptedException | ExecutionException e) {
					System.err.println("Cannot dispose: " + frame);
					System.err.println("Exiting, Please restart grader, Eclipse and/or OS");

//					System.err.println("Exiting, Please remove from grading, onyen:" + getProjectStepper().getOnyen());

//					e.printStackTrace();
//					System.exit(-1);
					
				}
//				frame.setVisible(false);
//				frame.dispose(); // this hangs
			}
		}

		ProjectWindowsDisposed.newCase(this,
				(OverviewProjectStepper) projectStepper,
				projectStepper.getProject(), this);

	}


	public void initIO() {
		origOut = System.out;
		origIn = System.in;
	}



	public void runProjectInteractively(String anOnyen,
			ProjectStepper aProjectStepper) {
		SakaiProject aProject = getOrCreateProject(anOnyen);


		// origOut = System.out;
		// origIn = System.in;
		initIO();

		// if (aProjectStepper.isAutoRun()) {
		// runProject(anOnyen, aProject);
		// }

		recordWindows();
		// ProjectWindowsRecorded.newCase(this, (OverviewProjectStepper)
		// projectStepper, projectStepper.getProject(), this);

		if (aProjectStepper.isAutoRun()) {
			runProject(anOnyen, aProject);
		}

		aProjectStepper.setProject(anOnyen);


		aProjectStepper.waitForClearance();

		resetIO();
		clearWindows();


	}


	public void resetIO() {
		if (System.in != origIn) {

			System.setIn(origIn);
		}

		if (System.out != origOut) {
			System.out.close();
			System.setOut(origOut);
		}

		ProjectIORedirected.newCase(this,
				(OverviewProjectStepper) projectStepper,
				projectStepper.getProject(), this);


	}

	protected DocumentDisplayer wordSourceCodeDisplayer = new AWordDocumentDisplayer();;

	public void displayOutput() {
		resetIO();

		if (outputFiles == null || outputFiles.length == 0) {

			DocumentDisplayerRegistry.display(outputFileName);
			return;
		}
		for (String anOutputFileName : outputFiles) {

			System.out.println("Displaying output from:" + anOutputFileName);
			DocumentDisplayerRegistry.display(anOutputFileName);
			// String windowsName= Common.toWindowsFileName(outputFileName);

			// Common.toCanonicalFileName(aFileName);

			// wordSourceCodeDisplayer.displayFile(windowsName);
			// wordSourceCodeDisplayer.displayAllSources();
		}

	}

	boolean projectsMade;

	public SakaiProject getOrCreateProject(String aName) {
		SakaiProject project = onyenToProject.get(aName);
		if (project == null) {
			StudentCodingAssignment aStudentAssignment = getStudentAssignment(aName);

			if (aStudentAssignment == null || aStudentAssignment.getSubmissionFolder() == null) {
//				Tracer.error("No project for student:" + aName);

				return null;
			}
			project = makeProject(aStudentAssignment);
			if (project != null /*&& !project.isNoProjectFolder()*/) {
				onyenToProject.put(aStudentAssignment.getOnyen(), project);
			}
		}
		return project;
	}

	public StudentCodingAssignment getStudentAssignment(String anOnyen) {
		GenericStudentAssignmentDatabase<StudentCodingAssignment> aStudentAssignmentDatabase = getStudentAssignmentDatabase();
		return aStudentAssignmentDatabase.getStudentAssignmentFromOnyen(anOnyen);
//		Collection<StudentCodingAssignment> studentAssignments = aStudentAssignmentDatabase
//				.getStudentAssignments();
//		for (StudentCodingAssignment anAssignment : studentAssignments) {
//			if (anAssignment.getOnyen().equals(anOnyen))
//				return anAssignment;
//
//		}
//		return null;

	}


	/**
	 * replacing it with Josh's better version below that called
	 * getBulkAssignmentFolder()
	 */
	// @Override
	// public GenericStudentAssignmentDatabase<StudentCodingAssignment>
	// getStudentAssignmentDatabase() {
	// if (studentAssignmentDatabase == null) {
	// studentAssignmentDatabase = new ASakaiStudentCodingAssignmentsDatabase(
	// bulkFolder);
	//
	// }
	// return studentAssignmentDatabase;
	//
	// }

	@Override
	public GenericStudentAssignmentDatabase<StudentCodingAssignment> getStudentAssignmentDatabase() {
		if (studentAssignmentDatabase == null)
			studentAssignmentDatabase = new ASakaiStudentCodingAssignmentsDatabase(
					getBulkAssignmentFolder());
		return studentAssignmentDatabase;
	}

	GenericStudentAssignmentDatabase<StudentCodingAssignment> studentAssignmentDatabase;

	// duplicated fiunctinality in ProjectDatabaseWrapper
	 File maybeCreateFolder(String aName) {
		File theDir = new File(aName);

		// if the directory does not exist, create it
		if (!theDir.exists()) {
			// boolean result = theDir.mkdir();
			theDir.mkdirs();
			AssignmentDataFolderCreated.newCase(theDir.getName(), this);

		} else {
			AssignmentDataFolderLoaded.newCase(theDir.getName(), this);
		}
		return theDir;
	}

	// duplicated functinality in ProjectDatabaseWrapper

	public static File maybeCreateFile(String aFileName) {
		File theFile = new File(aFileName);

		// if the file does not exist, create it
		if (!theFile.exists()) {
			try {
				boolean result = theFile.createNewFile();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		return theFile;
	}

	// duplicated functinality in ProjectDatabaseWrapper

	void maybeWriteStudentIDs(File file) {
		if (startStudentID == null && endStudentID == null)
			return;
		StringBuffer stringBuffer = new StringBuffer();
		Set<String> allStudentFolderNames = bulkFolder.getStudentFolderNames();
		boolean first = true;
		for (String studentFolderName : allStudentFolderNames) {
			String studentID = ASakaiBulkAssignmentFolder
					.extractOnyen(studentFolderName);
			if (startStudentID.compareToIgnoreCase(studentID) <= 0
					&& endStudentID.compareToIgnoreCase(studentID) >= 0) {
				if (!first) {
					stringBuffer.append("\n");
				}
				stringBuffer.append(studentID);
				first = !first;
			}

		}
		try {
			Common.writeText(file, stringBuffer.toString());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	// void initAssignmentDataAndFolder() {
	// bulkFolder = new ASakaiBulkAssignmentFolder(bulkAssignmentsFolderName,
	// assignmentRoot);
	// }

	@Override
	public void clear() {
		System.out.println("Clearing project database");
		bulkFolder.clear();
		assignmentDataFolder.clear();
		GenericStudentAssignmentDatabase<StudentCodingAssignment> aStudentAssignmentDatabase = getStudentAssignmentDatabase();

		Collection<StudentCodingAssignment> studentAssignments = aStudentAssignmentDatabase
				.getStudentAssignments();
		for (StudentCodingAssignment anAssignment : studentAssignments) {
			RootFolderProxy projectFolder = anAssignment.getProjectFolder();
			

//			if (assignmentDataFolder != null
//					&& !assignmentDataFolder.getStudentIDs().contains(
//							anAssignment.getOnyen()))
//				continue;
//			if (anAssignment.getStudentFolder() == null
//					|| anAssignment.getSubmissionFolder() == null)
//				continue; // assume a message has already been given

			SakaiProject project = onyenToProject.get(anAssignment.getOnyen());
			if (project != null) {
				project.clear();
			}
			if (projectFolder != null) {
				projectFolder.clear();
			}
			
			
		}
		
	}
	/*
	 * this does more than initialize projects
	 */
	public void maybeMakeProjects() {
		if (projectsMade)
			return;
		projectsMade = true;

		bulkFolder = new ASakaiBulkAssignmentFolder(bulkAssignmentsFolderName,
				assignmentRoot, fileNameSorter);
		String assignmentName = bulkFolder.getAssignmentName();
		if (assignmentsDataFolderName == null)
			assignmentsDataFolderName = BasicGradingEnvironment.get()
					.getDefaultAssignmentsDataFolderName();
		// if (assignmentsDataFolderName.startsWith("null"))
		// assignmentsDataFolderName = null;
		if (assignmentsDataFolderName != null) { // we may be creating the
													// database without folder
													// name
			String specificAssignmentDataFolderName = assignmentsDataFolderName
					+ "/" + assignmentName;
			maybeCreateFolder(specificAssignmentDataFolderName);
			File idFile = maybeCreateFile(specificAssignmentDataFolderName
					+ "/" + AnAssignmenDataFolder.ID_FILE_NAME);

			maybeWriteStudentIDs(idFile);

			assignmentDataFolder = new AnAssignmenDataFolder(
					specificAssignmentDataFolderName,
					bulkFolder.getSpreadsheet());

			if (!assignmentDataFolder.exists()) {
				System.out.println("Expecting assignment data folder:"
						+ specificAssignmentDataFolderName);
			} else if (assignmentDataFolder.getRequirementsSpreadsheetFile() != null) {
				
				csvRequirementsSpecification = new ACSVRequirementsSpecification(assignmentDataFolder.getRequirementsSpreadsheetFile());
			}
			

		}
		addStudentProjects();

//		// GenericStudentAssignmentDatabase<StudentCodingAssignment>
//		// studentAssignmentDatabase = new
//		// ASakaiStudentCodingAssignmentsDatabase(bulkFolder);
//		GenericStudentAssignmentDatabase<StudentCodingAssignment> aStudentAssignmentDatabase = getStudentAssignmentDatabase();
//
//		// studentAssignmentDatabase = new
//		// ASakaiStudentCodingAssignmentsDatabase(bulkFolder);
//
//		System.out.println("Student ids from assignment database:" + aStudentAssignmentDatabase.getStudentIds());
//		Collection<StudentCodingAssignment> studentAssignments = aStudentAssignmentDatabase
//				.getStudentAssignments();
//		
//		for (StudentCodingAssignment anAssignment : studentAssignments) {
//			if (onyenToProject.get(anAssignment.getOnyen()) != null) {
//				continue;
//			}
//			RootFolderProxy projectFolder = anAssignment.getProjectFolder();
//
//			if (assignmentDataFolder != null
//					&& !assignmentDataFolder.getStudentIDs().contains(
//							anAssignment.getOnyen()))
//				continue;
//			if (anAssignment.getStudentFolder() == null
//					|| anAssignment.getSubmissionFolder() == null)
//				continue; // assume a message has already been given
//
//			SakaiProject project = makeProject(anAssignment);
//			if (project != null /* && !project.isNoProjectFolder() */) {
//				onyenToProject.put(anAssignment.getOnyen(), project);
//			}
//		}
	}
	Set<String> currentOnyentSet;

	@Override
	public void addStudentProjects() {
		List<String> aRawOnyens = NavigationListManagerFactory.getNavigationListManager().getRawOnyenNavigationList();
   	 Set<String> aRawOnyenSet = new HashSet(aRawOnyens);
   	 if (currentOnyentSet != null  && currentOnyentSet.containsAll(aRawOnyenSet)) {
   		 return;
   	 }
   	 
   		 
   			 
		// GenericStudentAssignmentDatabase<StudentCodingAssignment>
				// studentAssignmentDatabase = new
				// ASakaiStudentCodingAssignmentsDatabase(bulkFolder);
				GenericStudentAssignmentDatabase<StudentCodingAssignment> aStudentAssignmentDatabase = getStudentAssignmentDatabase();

				// studentAssignmentDatabase = new
				// ASakaiStudentCodingAssignmentsDatabase(bulkFolder);
//		if (currentOnyentSet != null) {
//			writeOnyens(); // the database checks this ile
//			aStudentAssignmentDatabase.createStudentAssignments();
//		}
		System.out.println("Student ids from assignment database:" + aStudentAssignmentDatabase.getStudentIds());
		Collection<StudentCodingAssignment> studentAssignments = aStudentAssignmentDatabase
				.getStudentAssignments();
		
		for (StudentCodingAssignment anAssignment : studentAssignments) {
			if (onyenToProject.get(anAssignment.getOnyen()) != null) {
				continue;
			}
			RootFolderProxy projectFolder = anAssignment.getProjectFolder();

			if (assignmentDataFolder != null
					&& !assignmentDataFolder.getStudentIDs().contains(
							anAssignment.getOnyen()))
				continue;
			if (anAssignment.getStudentFolder() == null
					|| anAssignment.getSubmissionFolder() == null)
				continue; // assume a message has already been given

			SakaiProject project = makeProject(anAssignment);
			if (project != null /* && !project.isNoProjectFolder() */) {
				onyenToProject.put(anAssignment.getOnyen(), project);
			}
		}
		currentOnyentSet = aRawOnyenSet;
	}
	@Override
	public void removeProject(String anOnyen) {
		onyenToProject.remove(anOnyen);
	}
//	public void oldMaybeMakeProjects() {
//		if (projectsMade)
//			return;
//		projectsMade = true;
//		if (bulkFolder == null)
//
//		bulkFolder = new ASakaiBulkAssignmentFolder(bulkAssignmentsFolderName,
//				assignmentRoot, fileNameSorter);
//		String assignmentName = bulkFolder.getAssignmentName();
//		if (assignmentsDataFolderName == null)
//			assignmentsDataFolderName = BasicGradingEnvironment.get()
//					.getDefaultAssignmentsDataFolderName();
//		// if (assignmentsDataFolderName.startsWith("null"))
//		// assignmentsDataFolderName = null;
//		if (assignmentsDataFolderName != null) { // we may be creating the
//													// database without folder
//													// name
//			String specificAssignmentDataFolderName = assignmentsDataFolderName
//					+ "/" + assignmentName;
//			maybeCreateFolder(specificAssignmentDataFolderName);
//			File idFile = maybeCreateFile(specificAssignmentDataFolderName
//					+ "/" + AnAssignmenDataFolder.ID_FILE_NAME);
//
//			maybeWriteStudentIDs(idFile);
//
//			assignmentDataFolder = new AnAssignmenDataFolder(
//					specificAssignmentDataFolderName,
//					bulkFolder.getSpreadsheet());
//
//			if (!assignmentDataFolder.exists()) {
//				System.out.println("Expecting assignment data folder:"
//						+ specificAssignmentDataFolderName);
//			} else if (assignmentDataFolder.getRequirementsSpreadsheetFile() != null) {
//				
//				csvRequirementsSpecification = new ACSVRequirementsSpecification(assignmentDataFolder.getRequirementsSpreadsheetFile());
//			}
//			
//
//		}
//
//		// GenericStudentAssignmentDatabase<StudentCodingAssignment>
//		// studentAssignmentDatabase = new
//		// ASakaiStudentCodingAssignmentsDatabase(bulkFolder);
//		GenericStudentAssignmentDatabase<StudentCodingAssignment> aStudentAssignmentDatabase = getStudentAssignmentDatabase();
//
//		// studentAssignmentDatabase = new
//		// ASakaiStudentCodingAssignmentsDatabase(bulkFolder);
//
//		System.out.println("Student ids from assignment database:" + aStudentAssignmentDatabase.getStudentIds());
//		Collection<StudentCodingAssignment> studentAssignments = aStudentAssignmentDatabase
//				.getStudentAssignments();
//		
//		for (StudentCodingAssignment anAssignment : studentAssignments) {
//			if (onyenToProject.get(anAssignment.getOnyen()) != null) {
//				continue;
//			}
//			RootFolderProxy projectFolder = anAssignment.getProjectFolder();
//
//			if (assignmentDataFolder != null
//					&& !assignmentDataFolder.getStudentIDs().contains(
//							anAssignment.getOnyen()))
//				continue;
//			if (anAssignment.getStudentFolder() == null
//					|| anAssignment.getSubmissionFolder() == null)
//				continue; // assume a message has already been given
//
//			SakaiProject project = makeProject(anAssignment);
//			if (project != null /* && !project.isNoProjectFolder() */) {
//				onyenToProject.put(anAssignment.getOnyen(), project);
//			}
//		}
//	}

	public void setGradeRecorder(FinalGradeRecorder gradeRecorder) {
		this.gradeRecorder = gradeRecorder;
	}

	public void setFeatureGradeRecorder(
			FeatureGradeRecorder featureGradeRecorder) {
		this.featureGradeRecorder = featureGradeRecorder;
	}

	public static void main(String[] args) {
		SakaiProjectDatabase projectDatabase = new ASakaiProjectDatabase(
				ASakaiBulkAssignmentFolder.DEFAULT_BULK_DOWNLOAD_FOLDER,

				"C:/Users/dewan/Downloads/GraderData", false);
		// projectDatabase.runProjectInteractively("mkcolema");
		// projectDatabase.runProjectsInteractively();
		try {
			projectDatabase.nonBlockingRunProjectsInteractively();
		} catch (InvalidOnyenRangeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	// Added by Josh
	public void setManualFeedback(ManualFeedback manualFeedback) {
		this.manualFeedback = manualFeedback;
	}

	// Added by Josh
	public void setAutoFeedback(AutoFeedback autoFeedback) {
		this.autoFeedback = autoFeedback;
	}

	// Added by Josh
	public void setBulkFolder(BulkAssignmentFolder bulkFolder) {
		this.bulkFolder = bulkFolder;
	}

	// Added by Josh
	public void setAssignmentDataFolder(
			AssignmentDataFolder assignmentDataFolder) {
		this.assignmentDataFolder = assignmentDataFolder;
	}

	public void saveProject(String onyen, SakaiProject project) {
		onyenToProject.put(onyen, project);
	}

	@Override
	public Checkable getRequirement(GradingFeature aGradingFeature) {
		return featureToCheckable.get(aGradingFeature);
	}

	/**
	 * This generates grading features based on the project requirements
	 * 
	 * @param requirements
	 *            The FrameworkProjectRequirements to add to the project
	 *            database
	 */
	@Override
	public void setProjectRequirements(ProjectRequirements requirements) {
		projectRequirements = requirements;
		List<GradingFeature> gradingFeatures = new ArrayList<GradingFeature>();
		if (requirements != null) {
			// Add the features
			for (Feature feature : requirements.getFeatures()) {
				GradingFeature gradingFeature = new AGradingFeature(
						feature.isManual(),
						feature.getName(), feature.getPoints(),
						new FeatureCheckerWrapper(feature),
						feature.isExtraCredit());
				gradingFeatures.add(gradingFeature);
				gradingFeature.setFeature(feature);
				feature.setGradingFeature(gradingFeature);
				featureToCheckable.put(gradingFeature, feature);
			}

			// Add the restrictions
			for (Restriction restriction : requirements.getRestrictions()) {
				GradingFeature gradingFeature = new AGradingFeature(
						restriction.getName(), restriction.getPoints(),
						new FeatureCheckerWrapper(restriction));
				gradingFeatures.add(gradingFeature);
				gradingFeature.setFeature(restriction);
				restriction.setGradingFeature(gradingFeature);
				featureToCheckable.put(gradingFeature, restriction);
			}
		}

		addGradingFeatures(gradingFeatures);
	}

	@Override
	public ProjectRequirements getProjectRequirements() {
		return projectRequirements;
	}

	@Override
	public PhotoReader getPhotoReader() {
		return photoReader;
	}

	@Override
	public void setPhotoReader(PhotoReader pictureReader) {
		this.photoReader = pictureReader;
	}

	@Override
	public String getAssignmentsDataFolderName() {
		return assignmentsDataFolderName;
	}

	@Override
	public void setAssignmentsDataFolderName(String assignmentsDataFolderName) {
		this.assignmentsDataFolderName = assignmentsDataFolderName;
	}

	@Override
	public Colorer<GradingFeature> getGradingFeatureColorer() {
		return gradingFeatureColorer;
	}

	@Override
	public void setGradingFeatureColorer(
			Colorer<GradingFeature> gradingFeatureColorComputer) {
		this.gradingFeatureColorer = gradingFeatureColorComputer;
	}

	@Override
	public Icon getStudentPhoto(String anOnyen, SakaiProject aProject) { // so
																			// we
																			// do
																			// not
																			// lookup
																			// the
																			// project
		Icon retVal = aProject.getStudentPhoto();
		if (retVal == null) {
			retVal = getPhotoReader().getIcon(anOnyen);
			aProject.setStudentPhoto(retVal);
		}
		return retVal;
	}

	public Colorer<Double> getScoreColorer() {
		return scoreColorer;
	}

	public void setScoreColorer(Colorer<Double> scoreColorer) {
		this.scoreColorer = scoreColorer;
	}

	public Colorer<Double> getMultiplierColorer() {
		return multiplierColorer;
	}

	public void setMultiplierColorer(Colorer<Double> multiplierColorer) {
		this.multiplierColorer = multiplierColorer;
	}

	public Colorer<String> getOverallNotesColorer() {
		return overallNotesColorer;
	}

	public void setOverallNotesColorer(Colorer<String> overallNotesColorer) {
		this.overallNotesColorer = overallNotesColorer;
	}

	@Override
	public GraderSettingsModel getGraderSettings() {
		return graderSettings;
	}

	@Override
	public void setGraderSettings(GraderSettingsModel graderSettings) {
		this.graderSettings = graderSettings;
		if (graderSettings != null) {
			BasicNavigationFilter dispatcher = new ADispatchingFilter(
					graderSettings.getNavigationSetter()
							.getNavigationFilterSetter());
			setNavigationFilter(dispatcher);
			// maybeReinit();

		}
	}

	// void maybeReinit() {
	// String aBulkAssignmentsFolderName =
	// graderSettings.getFileBrowsing().getDownloadFolder().getText(); // update
	// in case user changed the name
	// if (bulkAssignmentsFolderName.equals(aBulkAssignmentsFolderName)) return;
	// init(aBulkAssignmentsFolderName, assignmentsDataFolderName,
	// assignmentRoot);
	// }
	@Override
	public BasicNavigationFilter getNavigationFilter() {
		return navigationFilter;
	}

	@Override
	public void setNavigationFilter(BasicNavigationFilter navigationFilter) {
		this.navigationFilter = navigationFilter;

	}

	protected NotesGenerator createNotesGenerator() {
		return new ANotesGenerator(this);
	}

	protected ClearanceManager createClearanceManager() {
		return new AClearanceManager();
	}

	@Override
	public NotesGenerator getNotesGenerator() {
		return notesGenerator;
	}

	@Override
	public void setNotesGenerator(NotesGenerator notesGenerator) {
		this.notesGenerator = notesGenerator;
	}

	@Override
	public String getSourceFileNameSuffix() {
		return sourceFileNameSuffix;
	}

	@Override
	public void setSourceFileNameSuffix(String sourceSuffix) {
		this.sourceFileNameSuffix = sourceSuffix;
	}

	@Override
	public ClearanceManager getClearanceManager() {
		return clearanceManager;
	}

	@Override
	public void setClearanceManager(ClearanceManager clearanceManager) {
		this.clearanceManager = clearanceManager;
	}

	@Override
	public AutomaticProjectNavigator getAutomaticProjectNavigator() {
		return automaticProjectNavigator;
	}

	@Override
	public void setAutomaticProjectNavigator(
			AutomaticProjectNavigator automaticProjectNavigator) {
		this.automaticProjectNavigator = automaticProjectNavigator;
	}

	@Override
	public HybridProjectNavigator getHybridProjectNavigator() {
		return hybridProjectNavigator;
	}

	@Override
	public void setHybridProjectNavigator(
			HybridProjectNavigator hybridProjectNavigator) {
		this.hybridProjectNavigator = hybridProjectNavigator;
	}

	public ManualProjectNavigator getManualProjectNavigator() {
		return manualProjectNavigator;
	}

	public void setManualProjectNavigator(
			ManualProjectNavigator manualProjectNavigator) {
		this.manualProjectNavigator = manualProjectNavigator;
	}

	public ProjectNavigator getProjectNavigator() {
		return projectNavigator;
	}

	public void setProjectNavigator(ProjectNavigator projectNavigator) {
		this.projectNavigator = projectNavigator;
	}

	public String getSourceFileNamePrefix() {
		return sourceFileNamePrefix;
	}

	public void setSourceFileNamePrefix(String sourceFileNamePrefix) {
		this.sourceFileNamePrefix = sourceFileNamePrefix;
	}

	@Override
	public Comparator<String> getFileNameSorter() {
		return fileNameSorter;
	}

	@Override
	public void setFileNameSorter(Comparator<String> fileNameSorter) {
		this.fileNameSorter = fileNameSorter;
	}
	@Override
	public CSVRequirementsSpecification getCSVRequirementsSpecification() {
		return csvRequirementsSpecification;
	}
	@Override
	public void setCSVRequirementsSpecification(CSVRequirementsSpecification newValue) {
		 csvRequirementsSpecification = newValue;
	}



	@Override
	public void propertyChange(PropertyChangeEvent evt) {
		if (evt.getSource() == onyens) {
//			addStudentProjects();
			if (currentOnyentSet != null) {
//				writeOnyens(); // the database checks this ile
				GenericStudentAssignmentDatabase<StudentCodingAssignment> aStudentAssignmentDatabase = getStudentAssignmentDatabase();
				aStudentAssignmentDatabase.createStudentAssignments();
				writeOnyens(); // will call the navigator which will create the project
				
			}
		}		
	}
	/*
	 * To be overridden
	 */
	 protected void writeOnyens() {
		 
	 }
}
]]></snapshot>
  </Command>
  <Command __id="5785" _type="FileOpenCommand" date="Sat Aug 24 15:11:57 EDT 2019" docASTNodeCount="1485" docActiveCodeLength="13170" docExpressionCount="928" docLength="18430" projectName="comp110-grader" timestamp="98241038">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\assignment\AnAssignmenDataFolder.java]]></filePath>
    <snapshot><![CDATA[package grader.assignment;

import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
import grader.basics.settings.BasicGradingEnvironment;
import grader.config.AConfigurationManager;
import grader.config.ExecutionSpecificationSelector;
import grader.config.StaticConfigurationUtils;
import grader.file.FileProxy;
import grader.file.FileProxyUtils;
import grader.file.filesystem.AFileSystemFileProxy;
import grader.file.filesystem.AFileSystemRootFolderProxy;
import grader.language.LanguageDependencyManager;
import grader.sakai.project.ASakaiProjectDatabase;
import grader.settings.AGraderSettingsManager;
import grader.settings.GraderSettingsManager;
import grader.settings.GraderSettingsManagerSelector;
import grader.trace.assignment_data.FeatureGradeFileCleared;
import grader.trace.assignment_data.FeatureGradeFileCreatedFromFinalGradeFile;
import grader.trace.assignment_data.FeatureGradeFileLoaded;
import grader.trace.assignment_data.FeatureGradeFileRestored;
import grader.trace.assignment_data.InputFileFound;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import util.misc.Common;
import util.trace.Tracer;

public class AnAssignmenDataFolder extends AFileSystemRootFolderProxy implements AssignmentDataFolder {
	public static final String DEFAULT_CONFIGURATION_FILE = "checks.xml";

	public static final String DEFAULT_REQUIREMENTS_SPREADHEET_NAME = "Requirements.csv";
    public static final String ID_FILE_NAME = "onyens.txt";
    public static final String DEFAULT_LOG_FILE_NAME = "log.txt";
    public static final String DEFAULT_SKIPPED_FILE_NAME = "skipped_onyens.txt";
    public static final String DEFAULT_GRADED_ID_FILE_NAME = "graded_onyens.txt";

    public static final String DEFAULT_INPUT_FOLDER_NAME = "input";
    public static final String DEFAULT_FEATURE_GRADE_FILE_NAME = "FeatureGrades.csv";
    public static final String DEFAULT_BACKUP_FEATURE_GRADE_FILE_NAME = "BackupFeatureGrades.csv";
    String idFileName = ID_FILE_NAME;
    String gradedIdFileName;
    String skippedIdFileName;
    String logFileName;
    String inputFolderName = DEFAULT_INPUT_FOLDER_NAME;
    String featureGradeFileName = DEFAULT_FEATURE_GRADE_FILE_NAME;
    String backupFeatureGradeFileName = DEFAULT_BACKUP_FEATURE_GRADE_FILE_NAME;
    String requirementsSpreadsheetFileName = DEFAULT_REQUIREMENTS_SPREADHEET_NAME;
    
    File originalFeatureGradeFile, backupFeatureGradeFile;
    String checkStyleConfigurationFileName;

  



	String idText;
    Set<String> inputFiles;
    List<String> studentIDs;
    FileProxy finalGradeFile, featureGradeFile;
    FileProxy requirementsSpreadsheetFile;


    public AnAssignmenDataFolder(String aRootFolderName, FileProxy aFinalGradeFile) {
        super(aRootFolderName);
        String userName = BasicGradingEnvironment.get().getUserName();
        if (userName != null && !userName.isEmpty())
        	featureGradeFileName =  userName + "_" + featureGradeFileName;
        finalGradeFile = aFinalGradeFile;
        if (rootFolder != null)
            initGraderData();
    }
    @Override
    public void clearLogFile() {
    	try {
			Common.writeText(getLogFileName(), "");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    public static List<File> getMatchingFiles(File aFolder, String aRegex) {
    	List<File> aRetVal = new ArrayList();
    	File[] aFiles = aFolder.listFiles();
    	for (File aFile:aFiles) {
//    		System.out.println ("Examining file:" + aFile.getName());
    		if (aFile.getName().matches(aRegex)) {
//        		System.out.println ("Returning file:" + aFile.getName());

    			aRetVal.add(aFile);
    		}
    	}
    	return aRetVal;
    }
    public static File getMatchingFile(File aFolder, String aRegex) {
    	List<File> aRetVal = getMatchingFiles(aFolder, aRegex);
    	if (aRetVal.size() == 1)
    		return aRetVal.get(0);
    	return null;
    }
    
    void maybeLoadCheckStyleFile() {
    	if (!ExecutionSpecificationSelector.getExecutionSpecification().isCheckStyle()) {
    		if (LanguageDependencyManager.JAVA_LANGUAGE.equals(ExecutionSpecificationSelector.getExecutionSpecification().getLanguage()))
    				Tracer.warning("Checkstyle not enabled");
    		return;
    	}
        checkStyleConfigurationFileName = rootFolder.getAbsolutePath() + "/"  + StaticConfigurationUtils.getCheckStyleFile();
//        File aFoundFile =  getMatchingFile(rootFolder, ".*check.*xml");

        File aFile = new File(checkStyleConfigurationFileName);
        if (!aFile.exists()) {
//        	System.out.println("Searching for checkstyle file");
        	File aFoundFile = getMatchingFile(rootFolder, ".*check.*xml");
        	if (aFoundFile != null) {
        		aFile = aFoundFile;
        		checkStyleConfigurationFileName = aFoundFile.getAbsolutePath();
        		System.out.println ("Found check style file:" + checkStyleConfigurationFileName);
        		
        	}
        }
        if (!aFile.exists()) {
        	GraderSettingsManager graderSettingsManager = GraderSettingsManagerSelector
    				.getGraderSettingsManager();
    		String aModule = graderSettingsManager.getModule();
    		String aProblem = graderSettingsManager.getNormalizedProblem(aModule);
    		// "Comp401f17"
    		int aCourseIndex = "Comp".length();
    		int aSemesterIndex = aCourseIndex + "401".length();
    		
    		
    		String aCourseNumber = aModule.substring(aCourseIndex, aSemesterIndex);
    		String aSemester = aModule.substring(aSemesterIndex);
    		String aProblemNumber = aProblem.replace("Assignment", "a");
    		String aFileName = String.join("_", "unc_checks", aCourseNumber, aSemester, 
    				aProblemNumber) + ".xml";
    		aFile = new File("config" + "/checkstyle/" + aModule  + "/" + aFileName);
    		
    		
    		
    		
        }
        if (!aFile.exists()) {
        	System.err.println("Could not find checkstyle file:" + checkStyleConfigurationFileName);
        	checkStyleConfigurationFileName = AConfigurationManager.CONFIG_DIR + "/"  + DEFAULT_CONFIGURATION_FILE;
        	Tracer.warning("Using default checkstyle file:" + checkStyleConfigurationFileName );
        } else {
        	System.out.println("Using check style file:" + aFile.getAbsolutePath());
        	setCheckStyleConfigurationFileName(aFile.getAbsolutePath());
        }
    }

    void initGraderData() {

        FileProxy inputFolder = this.getFileEntryFromLocalName(inputFolderName);
        if (inputFolder != null)
            inputFiles = inputFolder.getChildrenNames();
        else
        	inputFiles = new HashSet<>();
        for (String inputFile:inputFiles) {
        	InputFileFound.newCase(inputFile, this);
        }
        FileProxy idFileProxy = getFileEntryFromLocalName(idFileName);
        featureGradeFile = getFileEntryFromLocalName(featureGradeFileName);
        gradedIdFileName = rootFolder.getAbsolutePath() + "/" + DEFAULT_GRADED_ID_FILE_NAME;
        skippedIdFileName = rootFolder.getAbsolutePath() + "/" + DEFAULT_SKIPPED_FILE_NAME;
        logFileName = rootFolder.getAbsolutePath() + "/" + DEFAULT_LOG_FILE_NAME;
        maybeLoadCheckStyleFile();
////        checkStyleConfigurationFileName = rootFolder.getAbsolutePath() + "/"  + DEFAULT_CONFIGURATION_FILE;
//        checkStyleConfigurationFileName = rootFolder.getAbsolutePath() + "/"  + StaticConfigurationUtils.getCheckStyleFile();
////        File aFoundFile =  getMatchingFile(rootFolder, ".*check.*xml");
//
//        File aFile = new File(checkStyleConfigurationFileName);
//        if (!aFile.exists()) {
////        	System.out.println("Searching for checkstyle file");
//        	File aFoundFile = getMatchingFile(rootFolder, ".*check.*xml");
//        	if (aFoundFile != null) {
//        		aFile = aFoundFile;
//        		checkStyleConfigurationFileName = aFoundFile.getAbsolutePath();
//        		System.out.println ("Found check style file:" + checkStyleConfigurationFileName);
//        		
//        	}
//        }
//        if (!aFile.exists()) {
//        	GraderSettingsManager graderSettingsManager = GraderSettingsManagerSelector
//    				.getGraderSettingsManager();
//    		String aModule = graderSettingsManager.getModule();
//    		String aProblem = graderSettingsManager.getNormalizedProblem(aModule);
//    		// "Comp401f17"
//    		int aCourseIndex = "Comp".length();
//    		int aSemesterIndex = aCourseIndex + "401".length();
//    		
//    		
//    		String aCourseNumber = aModule.substring(aCourseIndex, aSemesterIndex);
//    		String aSemester = aModule.substring(aSemesterIndex);
//    		String aProblemNumber = aProblem.replace("Assignment", "a");
//    		String aFileName = String.join("_", "unc_checks", aCourseNumber, aSemester, 
//    				aProblemNumber) + ".xml";
//    		aFile = new File("config" + "/checkstyle/" + aModule  + "/" + aFileName);
//    		
//    		
//    		
//    		
//        }
//        if (!aFile.exists()) {
//        	System.err.println("Could not find checkstyle file:" + checkStyleConfigurationFileName);
//        	checkStyleConfigurationFileName = AConfigurationManager.CONFIG_DIR + "/"  + DEFAULT_CONFIGURATION_FILE;
//        	Tracer.warning("Using default checkstyle file:" + checkStyleConfigurationFileName );
//        } else {
//        	System.out.println("Using check style file:" + aFile.getAbsolutePath());
//        	setCheckStyleConfigurationFileName(aFile.getAbsolutePath());
//        }
        
        clearLogFile();
        requirementsSpreadsheetFile = getFileEntryFromLocalName(requirementsSpreadsheetFileName);
        initFeatureGradeFiles();
//        if (finalGradeFile != null && (featureGradeFile == null || !featureGradeFile.exists())) {
//            String fullFeatureGradeFileName = rootFolder.getAbsolutePath() + "/" + featureGradeFileName;
//            File featureFile = new File(fullFeatureGradeFileName);
//            File aFinalGradeFile = new File(finalGradeFile.getAbsoluteName());
//
//            try {
//                Files.copy(aFinalGradeFile.toPath(), featureFile.toPath(), REPLACE_EXISTING);
//                featureGradeFile = new AFileSystemFileProxy(this, new File(fullFeatureGradeFileName), this.getAbsoluteName());
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//
//        }
        studentIDs = FileProxyUtils.toList(idFileProxy);

    }
     void initFeatureGradeFiles() {
         String fullFeatureGradeFileName = rootFolder.getAbsolutePath() + "/" + featureGradeFileName;
         backupFeatureGradeFile = new File(rootFolder.getAbsolutePath() + "/" + backupFeatureGradeFileName);
         originalFeatureGradeFile = new File(fullFeatureGradeFileName);

    	if (finalGradeFile != null && (featureGradeFile == null || !featureGradeFile.exists())) {
//            String fullFeatureGradeFileName = rootFolder.getAbsolutePath() + "/" + featureGradeFileName;
//             originalFeatureGradeFile = new File(fullFeatureGradeFileName);
             
            //File aFinalGradeFile = new File(finalGradeFile.getAbsoluteName());
            File aFinalGradeFile = new File(finalGradeFile.getMixedCaseAbsoluteName());
            
            try {
                //System.out.println("(*) " + aFinalGradeFile.toPath() + ", " + originalFeatureGradeFile.toPath());
                //System.out.println("(*) " + Common.toText(aFinalGradeFile));
                Files.copy(aFinalGradeFile.toPath(), originalFeatureGradeFile.toPath(), REPLACE_EXISTING);
                FeatureGradeFileCreatedFromFinalGradeFile.newCase(originalFeatureGradeFile.getName(), aFinalGradeFile.getName(), this);            
                //featureGradeFile = new AFileSystemFileProxy(this, new File(fullFeatureGradeFileName), this.getAbsoluteName());
                featureGradeFile = new AFileSystemFileProxy(this, new File(fullFeatureGradeFileName), this.getMixedCaseAbsoluteName());
            } catch (IOException e) {
                e.printStackTrace();
            }

        } else if (featureGradeFile.exists()) {
        	//FeatureGradeFileLoaded.newCase(featureGradeFile.getAbsoluteName(), this);
            FeatureGradeFileLoaded.newCase(featureGradeFile.getMixedCaseAbsoluteName(), this);
        } 
//        else {
//        	FinalGradeFileNotFound.newCase(aFileName, aFinder);
//        }
    	
//        backupFeatureGradeFile = new File(rootFolder.getAbsolutePath() + "/" + backupFeatureGradeFileName);
//        originalFeatureGradeFile = new File(fullFeatureGradeFileName);

    	
    }

    public Set<String> getInputFiles() {
        return inputFiles;
    }

    public List<String> getStudentIDs() {
        return studentIDs;
    }

    @Override
    public FileProxy getFeatureGradeFile() {
        return featureGradeFile;
    }

    public String getIdFileName() {
        return idFileName;
    }

//    public void setIdFileName(String idFileName) {
//        this.idFileName = idFileName;
//    }

    public String getGradedIdFileName() {
        return gradedIdFileName;
    }

    public void setGradedIdFileName(String gradedIdFileName) {
        this.gradedIdFileName = gradedIdFileName;
    }

    public String getSkippedIdFileName() {
        return skippedIdFileName;
    }

    public void setSkippedIdFileName(String skippedIdFileName) {
        this.skippedIdFileName = skippedIdFileName;
    }

    public String getLogFileName() {
        return logFileName;
    }

    public void setLogFileName(String logFileName) {
        this.logFileName = logFileName;
    }

    public String getInputFolderName() {
        return inputFolderName;
    }

    public void setInputFolderName(String inputFolderName) {
        this.inputFolderName = inputFolderName;
    }

    public String getFeatureGradeFileName() {
        return featureGradeFileName;
    }

    public void setFeatureGradeFileName(String featureGradeFileName) {
        this.featureGradeFileName = featureGradeFileName;
    }

    public String getIdText() {
        return idText;
    }

    public void setIdText(String idText) {
        this.idText = idText;
    }

    public FileProxy getFinalGradeFile() {
        return finalGradeFile;
    }

    public void setFinalGradeFile(FileProxy finalGradeFile) {
        this.finalGradeFile = finalGradeFile;
    }

    public void setInputFiles(Set<String> inputFiles) {
        this.inputFiles = inputFiles;
    }

    public void setStudentIDs(List<String> studentIDs) {
        this.studentIDs = studentIDs;
    }

    public void setFeatureGradeFile(FileProxy featureGradeFile) {
        this.featureGradeFile = featureGradeFile;
    }


    @Override
	public String getBackupFeatureGradeFileName() {
		return backupFeatureGradeFileName;
	}


    @Override
	public void setBackupFeatureGradeFileName(String backupFeatureGradeFileName) {
		this.backupFeatureGradeFileName = backupFeatureGradeFileName;
	}
    // throw exception instead?
    public boolean removeBackupFeatureGradeFile() {
//    	String fullBackupName = getAbsoluteName() + "/" + backupFeatureGradeFileName;
//    	File backup = new File(fullBackupName);
    	if (!backupFeatureGradeFile.exists()) return true;    	
    	return backupFeatureGradeFile.delete();
    }
    @Override
    public boolean removeFeatureGradeFile() {
    	boolean retVal = removeBackupFeatureGradeFile();
    	if (!retVal) return false;
//    	String fullFeatureName = getAbsoluteName() + "/" + featureGradeFileName;
//    	File original = new File (fullFeatureName);
//    	String fullBackupName = getAbsoluteName() + "/" + backupFeatureGradeFileName;
//    	File backup = new File(fullBackupName);    	
    	originalFeatureGradeFile.renameTo(backupFeatureGradeFile);
    	FeatureGradeFileCleared.newCase(originalFeatureGradeFile.getName(), this);
//    	initFeatureGradeFiles();
    	return true;   	
    	
    }
    @Override
    public boolean restoreFeatureGradeFile() {
    	if (!backupExists())
    		return false;
    	boolean retVal;
    	retVal = originalFeatureGradeFile.delete();
    	if (!retVal)
    		return false;
    	 retVal =  backupFeatureGradeFile.renameTo(originalFeatureGradeFile);
    	if (!retVal) 
    		return false;
    	initFeatureGradeFiles();
    	FeatureGradeFileRestored.newCase(originalFeatureGradeFile.getName(), this);
    	return true;
    	
    	
    }
    @Override
    public boolean backupExists() {
//    	String fullBackupName = getAbsoluteName() + "/" + backupFeatureGradeFileName;
//    	File backup = new File(fullBackupName);
    	return backupFeatureGradeFile.exists();
    	
    }
//    public boolean restoreFeatureGradeFile() {
//    	if (!backupExists)
//    		return;
//    	String fullBackupName = getAbsoluteName() + "/" + backupFeatureGradeFileName;
//    	File backup = new File(fullBackupName); 
//    	if (!retVal) return false;
//    	String fullFeatureName = getAbsoluteName() + "/" + featureGradeFileName;
//    	File original = new File (fullFeatureName);
//    	   	
//    	original.renameTo(backup);
//    	return true;   	
//    	
//    }



	public String getRequirementsSpreadsheetFileName() {
		return requirementsSpreadsheetFileName;
	}



	public void setRequirementsSpreadsheetFileName(
			String requirementsSpreadsheetFileName) {
		this.requirementsSpreadsheetFileName = requirementsSpreadsheetFileName;
	}



	public FileProxy getRequirementsSpreadsheetFile() {
		return requirementsSpreadsheetFile;
	}



	public void setRequirementsSpreadsheetFile(FileProxy requirementsSpreadsheetFile) {
		this.requirementsSpreadsheetFile = requirementsSpreadsheetFile;
	}
	@Override
	  public String getCheckStyleConfigurationFileName() {
			return checkStyleConfigurationFileName;
		}
	@Override
		public void setCheckStyleConfigurationFileName(
				String checkStyleConfigurationFileName) {
			this.checkStyleConfigurationFileName = checkStyleConfigurationFileName;
		}


}
]]></snapshot>
  </Command>
  <Command __id="5798" _type="FileOpenCommand" date="Sat Aug 24 15:13:50 EDT 2019" docASTNodeCount="1" docActiveCodeLength="755" docExpressionCount="0" docLength="755" projectName="comp110-grader" timestamp="98353777">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\config\Requirements.csv]]></filePath>
    <snapshot><![CDATA[Type,Description,MaxScore,Timeout,Input,Model Output,Extra Credit?,Checker,Argument1, Argument2, Argument3
DueDate,"02/4/2014 23:55:59",1,,,,,,,,
DueDate,"02/5/2014 23:55:59",0.5,,,,,,,,
Feature,Has a main,5,,,,,match,$Source,[\\s\\S]*int\\s+main\\s*\\(\\s*\\)[\\s\\S]*
Feature,Adds and multiplies the numbers,30,1,inputs/Input1.txt,correctoutput.txt,,diff,"-i -w -b",$ModelOutput,$ActualOutput
Feature,Adds and multiplies the numbers exact match,5,1,"1\\n2.5\\n",correctoutput.txt,yes,diff,,$ModelOutput,$ActualOutput
Feature,Prompts for input,10,,,,,match,$ActualOutput,"[\\s\\S]*int[\\s\\S]*decimal[\\s\\S]*"
Feature,Clear messages,20,,,,yes,,,,
Restriction,No commented Java println,5,,,,,match,$Source,(?![\\s\\S]*System.out.println[\\s\\S]*)]]></snapshot>
  </Command>
  <Command __id="5801" _type="FileOpenCommand" date="Sat Aug 24 15:18:42 EDT 2019" docASTNodeCount="1" docActiveCodeLength="755" docExpressionCount="0" docLength="755" projectName="comp110-grader" timestamp="98645779">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\config\Requirements.csv]]></filePath>
  </Command>
  <Command __id="5802" _type="FileOpenCommand" date="Sat Aug 24 15:18:43 EDT 2019" docASTNodeCount="1485" docActiveCodeLength="13170" docExpressionCount="928" docLength="18430" projectName="comp110-grader" timestamp="98646531">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\assignment\AnAssignmenDataFolder.java]]></filePath>
  </Command>
  <Command __id="5816" _type="FileOpenCommand" date="Sat Aug 24 15:20:43 EDT 2019" docASTNodeCount="775" docActiveCodeLength="5668" docExpressionCount="470" docLength="7928" projectName="comp110-grader" timestamp="98766921">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\file\AnAbstractRootFolderProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

import grader.trace.file.load.RootFolderProxyLoaded;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import util.misc.Common;

public abstract class AnAbstractRootFolderProxy extends AnAbstractProxy implements RootFolderProxy {
    protected Map<String, FileProxy> nameToFileProxy = new HashMap();
    protected List<FileProxy> entries = new ArrayList();
    
    protected  String subFolderName; // only children of this folder will be viisted and put in nameToFileProxy;
    protected String[] lazilyFetchSubFoldersOf; //  descendents of this folder will not be visited immediately and put in nameToFileProxy;
    protected String[] ignoreFiles; //  descendents of this folder will not be visited immediately and put in nameToFileProxy;

    protected  String subFolderNameLowerCase;
    
    
    public AnAbstractRootFolderProxy(String aSubFolderName) {
    	subFolderName = aSubFolderName;
    	if (subFolderName != null)
    		subFolderNameLowerCase = subFolderName.toLowerCase();
    	
    }
    public AnAbstractRootFolderProxy(String[] aLazilyFetchSubfoldersOf, String[] anIgnoreFiles) {
    	lazilyFetchSubFoldersOf = aLazilyFetchSubfoldersOf;
    	ignoreFiles = anIgnoreFiles;
//    	if (subFolderName != null)
//    		subFolderNameLowerCase = subFolderName.toLowerCase();
    	
    }
    protected boolean lazilyFetchDescendentsOf(String aFileName) {
    	if (lazilyFetchSubFoldersOf == null) {
    		return false;
    	}
    	for (String anExcludedSubfolder:lazilyFetchSubFoldersOf) {
    		if (aFileName.equals(anExcludedSubfolder)) {
    			return true;
    		}
    	}
    	return false;
    }
    protected boolean ignoreFile(String aFileName) {
    	if (ignoreFiles == null) {
    		return false;
    	}
    	for (String aFile:ignoreFiles) {
    		if (aFileName.equals(aFile)) {
    			return true;
    		}
    	}
    	return false;
    }
    @Override
    public void clear() {
    	super.clear();
    	System.out.println (this + " clearing entries");
    	entries.clear();
    	nameToFileProxy.clear();
    }
    
    protected boolean inTreeOfSubFolder(String anEntryName) {
    	return subFolderNameLowerCase == null || 
    			anEntryName.toLowerCase().contains(subFolderNameLowerCase);
    	
    }

    protected void add(FileProxy aFileProxy) {
    	
//    	System.out.println("Adding entry:" + aFileProxy);
        entries.add(aFileProxy);
        nameToFileProxy.put(aFileProxy.getAbsoluteName().toLowerCase(), aFileProxy);
        nameToFileProxy.put(aFileProxy.getAbsoluteName(), aFileProxy); // added this for Unix systems

    }

    @Override
    public List<FileProxy> getFileEntries() {
        return entries;
    }

    @Override
    public Set<String> getEntryNames() {
        return nameToFileProxy.keySet();
    }

    public List<FileProxy> getChildrenOf(String aParentName) {
        String myName = aParentName.toLowerCase();
        int parentDepth = Common.numMiddleOccurences(myName, '/');

        List<FileProxy> retVal = new ArrayList();
        for (FileProxy entry : entries) {
            String childName = entry.getAbsoluteName();
            if (!childName.startsWith(myName)) continue;
            int childDepth = Common.numMiddleOccurences(childName, '/');

            if (childDepth == parentDepth + 1) {
                retVal.add(entry);
            }
        }
        System.out.println("Children of " + aParentName + " =" + retVal);
        return retVal;

    }

    @Override
    public Set<String> getDescendentEntryNames(FileProxy aParent) {
        String parentName = aParent.getAbsoluteName();
        Set<String> allChildren = getEntryNames();
        Set<String> retVal = new HashSet();
        for (String name : allChildren) {
            if (name.startsWith(parentName) && !name.equals(parentName))
                retVal.add(name);
//            if (name.endsWith("src") || name.endsWith("src/") || name.contains("acorrect")) {
//            System.out.println("Name:" + name);
//            }
        }
        return retVal;
    }

    public FileProxy getFileEntryFromLocalName(String name) {
        return getFileEntry(getAbsoluteName() + "/" + name);
    }

    public boolean isDirectory() {
        return true;
    }

    protected void initChildrenRootData() {
        for (FileProxy entry : entries) {
        	initChildrenRootData(entry);
//            entry.initRootData();
//            String entryName = entry.getLocalName();
//            if (entryName == null) continue;
//            int index1 = entryName.indexOf('/');
//            int index2 = entryName.indexOf('\\');// use file separator
//            int index3 = entryName.indexOf(File.separator);
//            if (index1 == -1 && index2 == -1 && index3 == -1)
//                childrenNames.add(entry.getAbsoluteName());
        }
        RootFolderProxyLoaded.newCase(getAbsoluteName(), this);
    }
    @Override
    public void initChildrenRootData(FileProxy anEntry) {
    	anEntry.initRootData();
        String entryName = anEntry.getLocalName();
        if (entryName == null) return;
        int index1 = entryName.indexOf('/');
        int index2 = entryName.indexOf('\\');// use file separator
        int index3 = entryName.indexOf(File.separator);
        if (index1 == -1 && index2 == -1 && index3 == -1)
            childrenNames.add(anEntry.getAbsoluteName());
    }
    boolean debug;


    public FileProxy getFileEntryFromArg(String aName) {
    	if (aName == null) {
    		System.out.println("Null file entry returning null proxy");
    		return null;
    	}
//    	String aCanonicalName = aName.toLowerCase(); // sometimes this gives an exception
    	String aCanonicalName = aName;

//        return nameToFileProxy.get(name.toLowerCase());
    	FileProxy retVal = nameToFileProxy.get(aCanonicalName);
    	return retVal;
//    	if (retVal == null && debug) {
//    		Set<String> keys = nameToFileProxy.keySet();
//    		for (String key:keys) {
//    			System.out.println("comparing" + key + " and\n" + aCanonicalName);
//    			if (key.equals(aCanonicalName)) return nameToFileProxy.get(key);
//    		}
//    	}
//    	return retVal;
    }
    public FileProxy getFileEntry(String aName) {
    	FileProxy retVal = getFileEntryFromArg(aName);
    	if (retVal != null) 
    	
    		return retVal;
    	if (aName == null) {
    		System.err.println ("Null aName!!");
    		return null;
    	}
    	String aCanonicalName = aName.toLowerCase();
    	retVal = getFileEntryFromArg(aCanonicalName);
    	
//        return nameToFileProxy.get(name.toLowerCase());
    	if (retVal == null && debug) {
    		Set<String> keys = nameToFileProxy.keySet();
    		for (String key:keys) {
    			System.out.println("comparing" + key + " and\n" + aCanonicalName);
    			if (key.equals(aCanonicalName)) return nameToFileProxy.get(key);
    		}
    	}
    	return retVal;
    }
    
//    public FileProxy getFileEntry(String aName) {
//    	if (aName == null) {
//    		System.out.println("Null file entry returning null proxy");
//    		return null;
//    	}
//    	String aCanonicalName = aName.toLowerCase(); // sometimes this gives an exception
////        return nameToFileProxy.get(name.toLowerCase());
//    	FileProxy retVal = nameToFileProxy.get(aCanonicalName);
//    	if (retVal == null && debug) {
//    		Set<String> keys = nameToFileProxy.keySet();
//    		for (String key:keys) {
//    			System.out.println("comparing" + key + " and\n" + aCanonicalName);
//    			if (key.equals(aCanonicalName)) return nameToFileProxy.get(key);
//    		}
//    	}
//    	return retVal;
//    }

}
]]></snapshot>
  </Command>
  <Command __id="5820" _type="FileOpenCommand" date="Sat Aug 24 15:20:56 EDT 2019" docASTNodeCount="129" docActiveCodeLength="820" docExpressionCount="63" docLength="910" projectName="comp110-grader" timestamp="98779136">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\file\RootFolderProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

import java.io.File;
import java.util.List;
import java.util.Set;

public interface RootFolderProxy {
    String getAbsoluteName();

    String getLocalName();

    public String getMixedCaseAbsoluteName();

    public String getMixedCaseLocalName();

    List<FileProxy> getFileEntries();

    FileProxy getFileEntry(String name);

    Set<String> getEntryNames();

    public Set<String> getChildrenNames();

    Set<String> getDescendentEntryNames(FileProxy aParent);

    boolean isDirectory();

    public FileProxy getFileEntryFromLocalName(String name);

    boolean exists();

    public List<FileProxy> getChildrenOf(String aParentName);

	void clear();

	void initChildrenRootData(FileProxy anEntry);

	void initEntries(File aFolder);

//	boolean isDescendentsInitialized();
//	void setDescendentsInitialized(boolean newValue);



}
]]></snapshot>
  </Command>
  <Command __id="5823" _type="FileOpenCommand" date="Sat Aug 24 15:20:58 EDT 2019" docASTNodeCount="775" docActiveCodeLength="5668" docExpressionCount="470" docLength="7928" projectName="comp110-grader" timestamp="98781948">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\file\AnAbstractRootFolderProxy.java]]></filePath>
  </Command>
  <Command __id="5826" _type="FileOpenCommand" date="Sat Aug 24 15:21:02 EDT 2019" docASTNodeCount="1485" docActiveCodeLength="13170" docExpressionCount="928" docLength="18430" projectName="comp110-grader" timestamp="98786040">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\assignment\AnAssignmenDataFolder.java]]></filePath>
  </Command>
  <Command __id="5833" _type="FileOpenCommand" date="Sat Aug 24 15:55:01 EDT 2019" docASTNodeCount="951" docActiveCodeLength="6576" docExpressionCount="545" docLength="6607" projectName="comp110-grader" timestamp="100824411">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\requirements\interpreter\specification\ACSVRequirementsSpecification.java]]></filePath>
  </Command>
  <DocumentChange __id="5847" _type="Insert" date="Sat Aug 24 15:58:21 EDT 2019" docASTNodeCount="945" docActiveCodeLength="6516" docExpressionCount="543" docLength="6609" length="2" offset="1254" timestamp="101025013">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5853" _type="Insert" date="Sat Aug 24 15:58:31 EDT 2019" docASTNodeCount="959" docActiveCodeLength="6598" docExpressionCount="555" docLength="6691" length="82" offset="329" repeat="4" timestamp="101034453" timestamp2="101034457">
    <text><![CDATA[
import grader.file.FileProxy;
import grader.sakai.project.SakaiProjectDatabase;]]></text>
  </DocumentChange>
  <DocumentChange __id="5857" _type="Delete" date="Sat Aug 24 15:58:31 EDT 2019" docASTNodeCount="939" docActiveCodeLength="6458" docExpressionCount="538" docLength="6551" endLine="6" length="140" offset="58" repeat="6" startLine="2" timestamp="101034459" timestamp2="101034466">
    <text><![CDATA[import framework.grading.FrameworkProjectRequirements;
import grader.file.FileProxy;
import grader.sakai.project.SakaiProjectDatabase;

]]></text>
  </DocumentChange>
  <Command __id="5874" _type="FileOpenCommand" date="Sat Aug 24 15:59:59 EDT 2019" projectName="null" timestamp="101122685">
    <filePath><![CDATA[null]]></filePath>
  </Command>
  <Command __id="5870" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Sat Aug 24 15:59:10 EDT 2019" timestamp="101073683" />
  <Command __id="5871" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 15:59:50 EDT 2019" timestamp="101113973" />
  <Command __id="5872" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Sat Aug 24 15:59:55 EDT 2019" timestamp="101118153" />
  <Command __id="5873" _type="MoveCaretCommand" caretOffset="2165" date="Sat Aug 24 15:59:58 EDT 2019" docOffset="2165" timestamp="101121569" />
  <Command __id="5875" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 15:59:59 EDT 2019" timestamp="101122767" />
  <Command __id="5876" _type="SelectTextCommand" caretOffset="889" date="Sat Aug 24 15:59:59 EDT 2019" end="889" start="880" timestamp="101122846" />
  <Command __id="5877" _type="ShellCommand" date="Sat Aug 24 16:01:28 EDT 2019" timestamp="101211901" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5878" _type="ShellCommand" date="Sat Aug 24 16:02:04 EDT 2019" timestamp="101247451" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5880" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:02:04 EDT 2019" docOffset="0" timestamp="101248051" />
  <Command __id="5882" _type="SelectTextCommand" caretOffset="889" date="Sat Aug 24 16:02:09 EDT 2019" end="889" start="880" timestamp="101252585" />
  <Command __id="5883" _type="SelectTextCommand" caretOffset="9135" date="Sat Aug 24 16:02:23 EDT 2019" end="9135" start="37" timestamp="101266629" />
  <Command __id="5884" _type="CopyCommand" date="Sat Aug 24 16:02:24 EDT 2019" timestamp="101267284" />
  <Command __id="5886" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:02:26 EDT 2019" docOffset="0" timestamp="101269432" />
  <Command __id="5887" _type="SelectTextCommand" caretOffset="60" date="Sat Aug 24 16:02:30 EDT 2019" end="60" start="31" timestamp="101274059" />
  <Command __id="5889" _type="PasteCommand" date="Sat Aug 24 16:02:31 EDT 2019" timestamp="101274542" />
  <Command __id="5891" _type="InsertStringCommand" date="Sat Aug 24 16:02:33 EDT 2019" timestamp="101276727" timestamp2="101276727">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5893" _type="InsertStringCommand" date="Sat Aug 24 16:02:34 EDT 2019" timestamp="101277684" timestamp2="101277684">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="5895" _type="UndoCommand" date="Sat Aug 24 16:02:43 EDT 2019" repeat="3" timestamp="101286252" timestamp2="101288115" />
  <Command __id="5901" _type="SelectTextCommand" caretOffset="9135" date="Sat Aug 24 16:02:47 EDT 2019" end="9135" start="37" timestamp="101290609" />
  <Command __id="5902" _type="MoveCaretCommand" caretOffset="8944" date="Sat Aug 24 16:02:48 EDT 2019" docOffset="9496" timestamp="101291451" />
  <Command __id="5903" _type="SelectTextCommand" caretOffset="9696" date="Sat Aug 24 16:03:03 EDT 2019" end="9696" start="34" timestamp="101307018" />
  <Command __id="5904" _type="CopyCommand" date="Sat Aug 24 16:03:04 EDT 2019" timestamp="101307523" />
  <Command __id="5906" _type="SelectTextCommand" caretOffset="60" date="Sat Aug 24 16:03:06 EDT 2019" end="60" start="31" timestamp="101309624" />
  <Command __id="5907" _type="MoveCaretCommand" caretOffset="32" date="Sat Aug 24 16:03:08 EDT 2019" docOffset="32" timestamp="101311276" />
  <Command __id="5908" _type="SelectTextCommand" caretOffset="60" date="Sat Aug 24 16:03:09 EDT 2019" end="60" start="31" timestamp="101312806" />
  <Command __id="5910" _type="PasteCommand" date="Sat Aug 24 16:03:10 EDT 2019" timestamp="101313408" />
  <Command __id="5912" _type="UndoCommand" date="Sat Aug 24 16:03:25 EDT 2019" timestamp="101328428" />
  <Command __id="5914" _type="SelectTextCommand" caretOffset="9696" date="Sat Aug 24 16:03:28 EDT 2019" end="9696" start="34" timestamp="101331861" />
  <Command __id="5915" _type="MoveCaretCommand" caretOffset="9496" date="Sat Aug 24 16:03:29 EDT 2019" docOffset="9496" timestamp="101332680" />
  <Command __id="5916" _type="MoveCaretCommand" caretOffset="1481" date="Sat Aug 24 16:03:47 EDT 2019" docOffset="1481" timestamp="101350424" />
  <Command __id="5918" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 16:03:48 EDT 2019" timestamp="101351558" />
  <Command __id="5919" _type="SelectTextCommand" caretOffset="377" date="Sat Aug 24 16:03:48 EDT 2019" end="377" start="368" timestamp="101351635" />
  <Command __id="5920" _type="ShellCommand" date="Sat Aug 24 16:04:02 EDT 2019" timestamp="101365270" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5921" _type="ShellCommand" date="Sat Aug 24 16:04:06 EDT 2019" timestamp="101369988" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5924" _type="MoveCaretCommand" caretOffset="2165" date="Sat Aug 24 16:06:12 EDT 2019" docOffset="2165" timestamp="101495703" />
  <Command __id="5925" _type="SelectTextCommand" caretOffset="2133" date="Sat Aug 24 16:06:19 EDT 2019" end="2205" start="2133" timestamp="101502111" />
  <Command __id="5926" _type="SelectTextCommand" caretOffset="2384" date="Sat Aug 24 16:06:24 EDT 2019" end="2384" start="2023" timestamp="101507432" />
  <Command __id="5927" _type="CopyCommand" date="Sat Aug 24 16:06:25 EDT 2019" timestamp="101508550" />
  <Command __id="5928" _type="MoveCaretCommand" caretOffset="2380" date="Sat Aug 24 16:06:26 EDT 2019" docOffset="2380" timestamp="101509388" />
  <Command __id="5929" _type="MoveCaretCommand" caretOffset="2384" date="Sat Aug 24 16:06:27 EDT 2019" docOffset="2384" timestamp="101510363" />
  <Command __id="5931" _type="InsertStringCommand" date="Sat Aug 24 16:06:27 EDT 2019" timestamp="101510828" timestamp2="101510828">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="5933" _type="PasteCommand" date="Sat Aug 24 16:06:28 EDT 2019" timestamp="101511617" />
  <Command __id="5934" _type="SelectTextCommand" caretOffset="2384" date="Sat Aug 24 16:06:38 EDT 2019" end="2384" start="2023" timestamp="101521547" />
  <Command __id="5942" _type="PredictionCommand" date="Sat Aug 24 16:06:39 EDT 2019" prediction_type="MakingProgress" timestamp="101522222" />
  <Command __id="5955" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sat Aug 24 16:06:39 EDT 2019" timestamp="101522270" />
  <Command __id="5957" _type="ShellCommand" date="Sat Aug 24 16:06:57 EDT 2019" timestamp="101540891" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="5958" _type="ShellCommand" date="Sat Aug 24 16:07:11 EDT 2019" timestamp="101554572" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="5959" _type="ShellCommand" date="Sat Aug 24 16:07:59 EDT 2019" timestamp="101602734" type="ECLIPSE_LOST_FOCUS" />
  <DocumentChange __id="5981" _type="Delete" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="952" docActiveCodeLength="6565" docExpressionCount="543" docLength="6934" endLine="77" length="2" offset="2318" startLine="77" timestamp="101843206">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5982" _type="Delete" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="952" docActiveCodeLength="6570" docExpressionCount="543" docLength="6932" endLine="76" length="2" offset="2309" startLine="76" timestamp="101843211">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5983" _type="Delete" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="952" docActiveCodeLength="6573" docExpressionCount="543" docLength="6930" endLine="75" length="2" offset="2302" startLine="75" timestamp="101843214">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5984" _type="Delete" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="952" docActiveCodeLength="6590" docExpressionCount="543" docLength="6928" endLine="74" length="2" offset="2281" startLine="74" timestamp="101843217">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5985" _type="Delete" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="952" docActiveCodeLength="6611" docExpressionCount="543" docLength="6926" endLine="73" length="2" offset="2256" startLine="73" timestamp="101843220">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5986" _type="Delete" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="952" docActiveCodeLength="6646" docExpressionCount="543" docLength="6924" endLine="72" length="2" offset="2217" startLine="72" timestamp="101843222">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5987" _type="Delete" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="964" docActiveCodeLength="6716" docExpressionCount="550" docLength="6922" endLine="71" length="2" offset="2143" startLine="71" timestamp="101843224">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5988" _type="Delete" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="972" docActiveCodeLength="6781" docExpressionCount="555" docLength="6920" endLine="70" length="2" offset="2074" startLine="70" timestamp="101843226">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5989" _type="Delete" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="988" docActiveCodeLength="6788" docExpressionCount="566" docLength="6918" endLine="69" length="2" offset="2063" startLine="69" timestamp="101843228">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5990" _type="Delete" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="988" docActiveCodeLength="6790" docExpressionCount="566" docLength="6916" endLine="68" length="2" offset="2057" startLine="68" timestamp="101843230">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5991" _type="Delete" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="990" docActiveCodeLength="6821" docExpressionCount="567" docLength="6914" endLine="67" length="2" offset="2022" startLine="67" timestamp="101843231">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="5993" _type="Replace" date="Sat Aug 24 16:12:00 EDT 2019" docASTNodeCount="939" docActiveCodeLength="6461" docExpressionCount="538" docLength="6554" endLine="104" insertionLength="1" int_docASTNodeCount="939" int_docActiveCodeLength="6460" int_docExpressionCount="538" int_docLength="6553" length="361" offset="2386" startLine="86" timestamp="101843815">
    <deletedText><![CDATA[protected void createTable() {
		
		try {
			InputStream input = specificationSpreadsheet.getInputStream();
			CSVReader csvReader 	=	new CSVReader(new InputStreamReader(input));
		     table = csvReader.readAll();
			csvReader.close();
			input.close();
			
		   
	    
	    
		} catch (Exception e) {
			e.printStackTrace();
		
			
		}
		
	}]]></deletedText>
    <insertedText><![CDATA[	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="5995" _type="Delete" date="Sat Aug 24 16:12:01 EDT 2019" docASTNodeCount="939" docActiveCodeLength="6458" docExpressionCount="538" docLength="6551" endLine="86" length="3" offset="2384" startLine="85" timestamp="101844730">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="5997" _type="Insert" date="Sat Aug 24 16:12:02 EDT 2019" docASTNodeCount="959" docActiveCodeLength="6598" docExpressionCount="555" docLength="6691" length="140" offset="58" repeat="6" timestamp="101845647" timestamp2="101845653">
    <text><![CDATA[import framework.grading.FrameworkProjectRequirements;
import grader.file.FileProxy;
import grader.sakai.project.SakaiProjectDatabase;

]]></text>
  </DocumentChange>
  <DocumentChange __id="6003" _type="Delete" date="Sat Aug 24 16:12:02 EDT 2019" docASTNodeCount="945" docActiveCodeLength="6516" docExpressionCount="543" docLength="6609" endLine="12" length="82" offset="329" repeat="4" startLine="10" timestamp="101845654" timestamp2="101845658">
    <text><![CDATA[
import grader.file.FileProxy;
import grader.sakai.project.SakaiProjectDatabase;]]></text>
  </DocumentChange>
  <DocumentChange __id="6008" _type="Delete" date="Sat Aug 24 16:12:06 EDT 2019" docASTNodeCount="951" docActiveCodeLength="6576" docExpressionCount="545" docLength="6607" endLine="31" length="2" offset="1254" startLine="31" timestamp="101849461">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6011" _type="Insert" date="Sat Aug 24 16:12:16 EDT 2019" docASTNodeCount="945" docActiveCodeLength="6516" docExpressionCount="543" docLength="6609" length="2" offset="1254" timestamp="101859132">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="6033" _type="FileOpenCommand" date="Sat Aug 24 16:16:31 EDT 2019" docASTNodeCount="552" docActiveCodeLength="4424" docExpressionCount="334" docLength="4823" projectName="comp110-grader" timestamp="102114313">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\file\AnAbstractFileProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

import grader.util.GraderFileUtils;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import util.misc.Common;

public abstract class AnAbstractFileProxy extends AnAbstractProxy implements FileProxy {
    protected RootFolderProxy rootFolderProxy;
   

	List<FileProxy> fileEntries;
    List<FileProxy> childrenProxies;
    boolean isFolder;
    boolean isDescendentsInitialized;

  
	public AnAbstractFileProxy(RootFolderProxy aRootFolderProxy) {
        rootFolderProxy = aRootFolderProxy;
    }

    @Override
    public boolean isDirectory() {
        return getChildrenNames().size() > 0;
    }

    public FileProxy getParentFolder() {
//        String parentName = Common.getParentFileName(getAbsoluteName());
//        return this.getFileEntry(parentName);
    	return this.getFileEntry(getParentFolderName());
    }
    @Override
    public String getParentFolderName() {
        return Common.getParentFileName(getAbsoluteName());
//        return this.getFileEntry(parentName);
    }
    
    public void clear() {
    	super.clear();
    	if (descendentNames != null)
    	descendentNames.clear();
    	if (fileEntries != null)
    	fileEntries.clear();   	
    }

    public void initRootData() {
        String myName = getAbsoluteName();
        int myDepth = Common.numOccurences(myName, '/');
        descendentNames = rootFolderProxy.getDescendentEntryNames(this);
        isFolder = descendentNames.size() > 0;
        fileEntries = new ArrayList();
        for (String entryName : descendentNames) {
            int childDepth = Common.numOccurences(entryName, '/');

            if (childDepth == myDepth + 1) {
                childrenNames.add(entryName);
            }
            fileEntries.add(rootFolderProxy.getFileEntry(entryName));
        }
    }

    public List<FileProxy> getFileEntries() {
        return fileEntries;
    }

    public FileProxy getFileEntry(String name) {
        return rootFolderProxy.getFileEntry(name);
    }

    public FileProxy getFileEntryFromLocalName(String name) {
        return rootFolderProxy.getFileEntry(getAbsoluteName() + "/" + name);
    }

    public Set<String> getEntryNames() {
        return descendentNames;
    }

    public Set<String> getDescendentEntryNames(FileProxy aParent) {
    	if (aParent == null)
    		return new HashSet();
        return rootFolderProxy.getDescendentEntryNames(aParent);
    }

    @Override
    public List<FileProxy> getChildrenOf(String aParentName) {
        return rootFolderProxy.getChildrenOf(aParentName);
    }
    @Override
   	public String getParentRelativeName() {
            if (getParentFolder() == null) {
       		return getLocalName();
            } else {
                //System.out.println(this.getClass().getName());
       		return GraderFileUtils.toRelativeName(getParentFolder().getLocalName(), getLocalName());
            }
   	}
    @Override
   	public String getParentRelativeMixedCaseName() {
            if (getParentFolder() == null) {
                return getMixedCaseLocalName();
            } else {
                //System.out.println(this.getClass().getName());
                return GraderFileUtils.toRelativeName(getParentFolder().getMixedCaseLocalName(), getMixedCaseLocalName());
            }	
   	}
    @Override
    public List<FileProxy> getChildren() {
    	if (childrenProxies == null) {
    		childrenProxies = getChildrenOf(getAbsoluteName());
    	}
//    	return getChildrenOf(getAbsoluteName());
    	return childrenProxies;

    }
    
    @Override
    public String displayTree() {
    	String retVal = getParentRelativeName();
    	if (!isDirectory()) return retVal;
//    	String localName = getLocalName();
//    	String absoluteName = getAbsoluteName();
    	List<FileProxy> children = getChildren();
    	if (children.size() == 0) return retVal;
    	retVal += "( ";
    	
    	for (int i = 0; i < children.size(); i++) {
    		String childRepresentation = children.get(i).displayTree();
    		if (i == 0)
    			retVal += childRepresentation;
    		else
    			retVal += ", " + childRepresentation;
    	}
    	retVal += ")";

    	return retVal;
    }
    public boolean isDescendentsInitialized() {
  		return isDescendentsInitialized;
  	}

  	public void setDescendentsInitialized(boolean isDescendentsInitialized) {
  		this.isDescendentsInitialized = isDescendentsInitialized;
  	}
  	@Override
  	 public RootFolderProxy getRootFolderProxy() {
 		return rootFolderProxy;
 	}
  	@Override

 	public void setRootFolderProxy(RootFolderProxy rootFolderProxy) {
 		this.rootFolderProxy = rootFolderProxy;
 	}

}
]]></snapshot>
  </Command>
  <Command __id="6035" _type="FileOpenCommand" date="Sat Aug 24 16:16:37 EDT 2019" docASTNodeCount="111" docActiveCodeLength="752" docExpressionCount="54" docLength="831" projectName="comp110-grader" timestamp="102120847">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\file\AnAbstractProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

import java.io.File;
import java.util.HashSet;
import java.util.Set;

public abstract class AnAbstractProxy implements RootFolderProxy{
    Set<String> descendentNames;
    Set<String> childrenNames = new HashSet();

    public Set<String> getChildrenNames() {
        return childrenNames;
    }
    @Override
    public void clear() {
//    	System.out.println (this + " Clearing abstract proxy descendent names");
    	if (descendentNames != null)
    		descendentNames.clear();
    	childrenNames.clear();
    	
    }

    public void initChildrenRootData(FileProxy anEntry) {
    	
    }

	public void initEntries(File aFolder) {
		
	}
	public boolean isDescendentsInitialized() {
		return true;
	}
	public void setDescendentsInitialized(boolean newValue) {
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="6045" _type="FileOpenCommand" date="Sat Aug 24 16:18:52 EDT 2019" docASTNodeCount="552" docActiveCodeLength="4424" docExpressionCount="334" docLength="4823" projectName="GraderBasics" timestamp="102256010">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\AnAbstractFileProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

import grader.util.GraderFileUtils;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import util.misc.Common;

public abstract class AnAbstractFileProxy extends AnAbstractProxy implements FileProxy {
    protected RootFolderProxy rootFolderProxy;
   

	List<FileProxy> fileEntries;
    List<FileProxy> childrenProxies;
    boolean isFolder;
    boolean isDescendentsInitialized;

  
	public AnAbstractFileProxy(RootFolderProxy aRootFolderProxy) {
        rootFolderProxy = aRootFolderProxy;
    }

    @Override
    public boolean isDirectory() {
        return getChildrenNames().size() > 0;
    }

    public FileProxy getParentFolder() {
//        String parentName = Common.getParentFileName(getAbsoluteName());
//        return this.getFileEntry(parentName);
    	return this.getFileEntry(getParentFolderName());
    }
    @Override
    public String getParentFolderName() {
        return Common.getParentFileName(getAbsoluteName());
//        return this.getFileEntry(parentName);
    }
    
    public void clear() {
    	super.clear();
    	if (descendentNames != null)
    	descendentNames.clear();
    	if (fileEntries != null)
    	fileEntries.clear();   	
    }

    public void initRootData() {
        String myName = getAbsoluteName();
        int myDepth = Common.numOccurences(myName, '/');
        descendentNames = rootFolderProxy.getDescendentEntryNames(this);
        isFolder = descendentNames.size() > 0;
        fileEntries = new ArrayList();
        for (String entryName : descendentNames) {
            int childDepth = Common.numOccurences(entryName, '/');

            if (childDepth == myDepth + 1) {
                childrenNames.add(entryName);
            }
            fileEntries.add(rootFolderProxy.getFileEntry(entryName));
        }
    }

    public List<FileProxy> getFileEntries() {
        return fileEntries;
    }

    public FileProxy getFileEntry(String name) {
        return rootFolderProxy.getFileEntry(name);
    }

    public FileProxy getFileEntryFromLocalName(String name) {
        return rootFolderProxy.getFileEntry(getAbsoluteName() + "/" + name);
    }

    public Set<String> getEntryNames() {
        return descendentNames;
    }

    public Set<String> getDescendentEntryNames(FileProxy aParent) {
    	if (aParent == null)
    		return new HashSet();
        return rootFolderProxy.getDescendentEntryNames(aParent);
    }

    @Override
    public List<FileProxy> getChildrenOf(String aParentName) {
        return rootFolderProxy.getChildrenOf(aParentName);
    }
    @Override
   	public String getParentRelativeName() {
            if (getParentFolder() == null) {
       		return getLocalName();
            } else {
                //System.out.println(this.getClass().getName());
       		return GraderFileUtils.toRelativeName(getParentFolder().getLocalName(), getLocalName());
            }
   	}
    @Override
   	public String getParentRelativeMixedCaseName() {
            if (getParentFolder() == null) {
                return getMixedCaseLocalName();
            } else {
                //System.out.println(this.getClass().getName());
                return GraderFileUtils.toRelativeName(getParentFolder().getMixedCaseLocalName(), getMixedCaseLocalName());
            }	
   	}
    @Override
    public List<FileProxy> getChildren() {
    	if (childrenProxies == null) {
    		childrenProxies = getChildrenOf(getAbsoluteName());
    	}
//    	return getChildrenOf(getAbsoluteName());
    	return childrenProxies;

    }
    
    @Override
    public String displayTree() {
    	String retVal = getParentRelativeName();
    	if (!isDirectory()) return retVal;
//    	String localName = getLocalName();
//    	String absoluteName = getAbsoluteName();
    	List<FileProxy> children = getChildren();
    	if (children.size() == 0) return retVal;
    	retVal += "( ";
    	
    	for (int i = 0; i < children.size(); i++) {
    		String childRepresentation = children.get(i).displayTree();
    		if (i == 0)
    			retVal += childRepresentation;
    		else
    			retVal += ", " + childRepresentation;
    	}
    	retVal += ")";

    	return retVal;
    }
    public boolean isDescendentsInitialized() {
  		return isDescendentsInitialized;
  	}

  	public void setDescendentsInitialized(boolean isDescendentsInitialized) {
  		this.isDescendentsInitialized = isDescendentsInitialized;
  	}
  	@Override
  	 public RootFolderProxy getRootFolderProxy() {
 		return rootFolderProxy;
 	}
  	@Override

 	public void setRootFolderProxy(RootFolderProxy rootFolderProxy) {
 		this.rootFolderProxy = rootFolderProxy;
 	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="6052" _type="Insert" date="Sat Aug 24 16:20:53 EDT 2019" docASTNodeCount="554" docActiveCodeLength="4431" docExpressionCount="336" docLength="4830" length="7" offset="38" repeat="7" timestamp="102376375" timestamp2="102378208">
    <text><![CDATA[basics.]]></text>
  </DocumentChange>
  <Command __id="6069" _type="FileOpenCommand" date="Sat Aug 24 16:21:09 EDT 2019" docASTNodeCount="111" docActiveCodeLength="752" docExpressionCount="54" docLength="831" projectName="GraderBasics" timestamp="102392128">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\AnAbstractProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

import java.io.File;
import java.util.HashSet;
import java.util.Set;

public abstract class AnAbstractProxy implements RootFolderProxy{
    Set<String> descendentNames;
    Set<String> childrenNames = new HashSet();

    public Set<String> getChildrenNames() {
        return childrenNames;
    }
    @Override
    public void clear() {
//    	System.out.println (this + " Clearing abstract proxy descendent names");
    	if (descendentNames != null)
    		descendentNames.clear();
    	childrenNames.clear();
    	
    }

    public void initChildrenRootData(FileProxy anEntry) {
    	
    }

	public void initEntries(File aFolder) {
		
	}
	public boolean isDescendentsInitialized() {
		return true;
	}
	public void setDescendentsInitialized(boolean newValue) {
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="6071" _type="FileOpenCommand" date="Sat Aug 24 16:21:10 EDT 2019" docASTNodeCount="775" docActiveCodeLength="5668" docExpressionCount="470" docLength="7928" projectName="GraderBasics" timestamp="102393790">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\AnAbstractRootFolderProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

import grader.trace.file.load.RootFolderProxyLoaded;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import util.misc.Common;

public abstract class AnAbstractRootFolderProxy extends AnAbstractProxy implements RootFolderProxy {
    protected Map<String, FileProxy> nameToFileProxy = new HashMap();
    protected List<FileProxy> entries = new ArrayList();
    
    protected  String subFolderName; // only children of this folder will be viisted and put in nameToFileProxy;
    protected String[] lazilyFetchSubFoldersOf; //  descendents of this folder will not be visited immediately and put in nameToFileProxy;
    protected String[] ignoreFiles; //  descendents of this folder will not be visited immediately and put in nameToFileProxy;

    protected  String subFolderNameLowerCase;
    
    
    public AnAbstractRootFolderProxy(String aSubFolderName) {
    	subFolderName = aSubFolderName;
    	if (subFolderName != null)
    		subFolderNameLowerCase = subFolderName.toLowerCase();
    	
    }
    public AnAbstractRootFolderProxy(String[] aLazilyFetchSubfoldersOf, String[] anIgnoreFiles) {
    	lazilyFetchSubFoldersOf = aLazilyFetchSubfoldersOf;
    	ignoreFiles = anIgnoreFiles;
//    	if (subFolderName != null)
//    		subFolderNameLowerCase = subFolderName.toLowerCase();
    	
    }
    protected boolean lazilyFetchDescendentsOf(String aFileName) {
    	if (lazilyFetchSubFoldersOf == null) {
    		return false;
    	}
    	for (String anExcludedSubfolder:lazilyFetchSubFoldersOf) {
    		if (aFileName.equals(anExcludedSubfolder)) {
    			return true;
    		}
    	}
    	return false;
    }
    protected boolean ignoreFile(String aFileName) {
    	if (ignoreFiles == null) {
    		return false;
    	}
    	for (String aFile:ignoreFiles) {
    		if (aFileName.equals(aFile)) {
    			return true;
    		}
    	}
    	return false;
    }
    @Override
    public void clear() {
    	super.clear();
    	System.out.println (this + " clearing entries");
    	entries.clear();
    	nameToFileProxy.clear();
    }
    
    protected boolean inTreeOfSubFolder(String anEntryName) {
    	return subFolderNameLowerCase == null || 
    			anEntryName.toLowerCase().contains(subFolderNameLowerCase);
    	
    }

    protected void add(FileProxy aFileProxy) {
    	
//    	System.out.println("Adding entry:" + aFileProxy);
        entries.add(aFileProxy);
        nameToFileProxy.put(aFileProxy.getAbsoluteName().toLowerCase(), aFileProxy);
        nameToFileProxy.put(aFileProxy.getAbsoluteName(), aFileProxy); // added this for Unix systems

    }

    @Override
    public List<FileProxy> getFileEntries() {
        return entries;
    }

    @Override
    public Set<String> getEntryNames() {
        return nameToFileProxy.keySet();
    }

    public List<FileProxy> getChildrenOf(String aParentName) {
        String myName = aParentName.toLowerCase();
        int parentDepth = Common.numMiddleOccurences(myName, '/');

        List<FileProxy> retVal = new ArrayList();
        for (FileProxy entry : entries) {
            String childName = entry.getAbsoluteName();
            if (!childName.startsWith(myName)) continue;
            int childDepth = Common.numMiddleOccurences(childName, '/');

            if (childDepth == parentDepth + 1) {
                retVal.add(entry);
            }
        }
        System.out.println("Children of " + aParentName + " =" + retVal);
        return retVal;

    }

    @Override
    public Set<String> getDescendentEntryNames(FileProxy aParent) {
        String parentName = aParent.getAbsoluteName();
        Set<String> allChildren = getEntryNames();
        Set<String> retVal = new HashSet();
        for (String name : allChildren) {
            if (name.startsWith(parentName) && !name.equals(parentName))
                retVal.add(name);
//            if (name.endsWith("src") || name.endsWith("src/") || name.contains("acorrect")) {
//            System.out.println("Name:" + name);
//            }
        }
        return retVal;
    }

    public FileProxy getFileEntryFromLocalName(String name) {
        return getFileEntry(getAbsoluteName() + "/" + name);
    }

    public boolean isDirectory() {
        return true;
    }

    protected void initChildrenRootData() {
        for (FileProxy entry : entries) {
        	initChildrenRootData(entry);
//            entry.initRootData();
//            String entryName = entry.getLocalName();
//            if (entryName == null) continue;
//            int index1 = entryName.indexOf('/');
//            int index2 = entryName.indexOf('\\');// use file separator
//            int index3 = entryName.indexOf(File.separator);
//            if (index1 == -1 && index2 == -1 && index3 == -1)
//                childrenNames.add(entry.getAbsoluteName());
        }
        RootFolderProxyLoaded.newCase(getAbsoluteName(), this);
    }
    @Override
    public void initChildrenRootData(FileProxy anEntry) {
    	anEntry.initRootData();
        String entryName = anEntry.getLocalName();
        if (entryName == null) return;
        int index1 = entryName.indexOf('/');
        int index2 = entryName.indexOf('\\');// use file separator
        int index3 = entryName.indexOf(File.separator);
        if (index1 == -1 && index2 == -1 && index3 == -1)
            childrenNames.add(anEntry.getAbsoluteName());
    }
    boolean debug;


    public FileProxy getFileEntryFromArg(String aName) {
    	if (aName == null) {
    		System.out.println("Null file entry returning null proxy");
    		return null;
    	}
//    	String aCanonicalName = aName.toLowerCase(); // sometimes this gives an exception
    	String aCanonicalName = aName;

//        return nameToFileProxy.get(name.toLowerCase());
    	FileProxy retVal = nameToFileProxy.get(aCanonicalName);
    	return retVal;
//    	if (retVal == null && debug) {
//    		Set<String> keys = nameToFileProxy.keySet();
//    		for (String key:keys) {
//    			System.out.println("comparing" + key + " and\n" + aCanonicalName);
//    			if (key.equals(aCanonicalName)) return nameToFileProxy.get(key);
//    		}
//    	}
//    	return retVal;
    }
    public FileProxy getFileEntry(String aName) {
    	FileProxy retVal = getFileEntryFromArg(aName);
    	if (retVal != null) 
    	
    		return retVal;
    	if (aName == null) {
    		System.err.println ("Null aName!!");
    		return null;
    	}
    	String aCanonicalName = aName.toLowerCase();
    	retVal = getFileEntryFromArg(aCanonicalName);
    	
//        return nameToFileProxy.get(name.toLowerCase());
    	if (retVal == null && debug) {
    		Set<String> keys = nameToFileProxy.keySet();
    		for (String key:keys) {
    			System.out.println("comparing" + key + " and\n" + aCanonicalName);
    			if (key.equals(aCanonicalName)) return nameToFileProxy.get(key);
    		}
    	}
    	return retVal;
    }
    
//    public FileProxy getFileEntry(String aName) {
//    	if (aName == null) {
//    		System.out.println("Null file entry returning null proxy");
//    		return null;
//    	}
//    	String aCanonicalName = aName.toLowerCase(); // sometimes this gives an exception
////        return nameToFileProxy.get(name.toLowerCase());
//    	FileProxy retVal = nameToFileProxy.get(aCanonicalName);
//    	if (retVal == null && debug) {
//    		Set<String> keys = nameToFileProxy.keySet();
//    		for (String key:keys) {
//    			System.out.println("comparing" + key + " and\n" + aCanonicalName);
//    			if (key.equals(aCanonicalName)) return nameToFileProxy.get(key);
//    		}
//    	}
//    	return retVal;
//    }

}
]]></snapshot>
  </Command>
  <Command __id="6074" _type="FileOpenCommand" date="Sat Aug 24 16:21:52 EDT 2019" docASTNodeCount="302" docActiveCodeLength="2255" docExpressionCount="220" docLength="2281" projectName="GraderBasics" timestamp="102435701">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\trace\grader\basics\GraderBasicsTraceUtility.java]]></filePath>
    <snapshot><![CDATA[package trace.grader.basics;

import grader.basics.execution.BasicProjectExecution;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.BasicProjectIntrospection;
import grader.basics.util.DirectoryUtils;
import gradingTools.shared.testcases.MethodExecutionTest;
import gradingTools.shared.testcases.shapes.LocatableTest;
import gradingTools.shared.testcases.shapes.interfaces.TestBoundedShape;
import gradingTools.shared.testcases.shapes.rotate.detached.DetachedRotatingLineFortyFiveDegreeTest;
import gradingTools.shared.testcases.shapes.rotate.fixed.RotatingFixedLineRotateTest;
import gradingTools.shared.testcases.shapes.rotate.moving.MovingRotatingLineFortyFiveDegreeTest;
import gradingTools.shared.testcases.utils.MethodPropertyChecker;
import util.trace.ImplicitKeywordKind;
import util.trace.Tracer;

public class GraderBasicsTraceUtility {
	static boolean turnOn = true;
	static boolean bufferTracedMessages = true;
	@Deprecated
	public static boolean isTurnOn() {
		return turnOn;
	}
	public static void setBufferTracedMessages(boolean newVal) {
		bufferTracedMessages  = newVal;
	}
	
	public static boolean getBufferTracedMessages() {
		return bufferTracedMessages;
	}

	@Deprecated
	public static void setTurnOn(boolean turnOn) {
		GraderBasicsTraceUtility.turnOn = turnOn;
	}
	public static void setTracing() {
		Tracer.setBufferTracedMessages(bufferTracedMessages);

		Tracer.setImplicitPrintKeywordKind(ImplicitKeywordKind.OBJECT_PACKAGE_NAME);	
//		if (isTurnOn()) {
			Tracer.setKeywordPrintStatus(MethodExecutionTest.class, true);
			Tracer.setKeywordPrintStatus(LocatableTest.class, true);
			Tracer.setKeywordPrintStatus(TestBoundedShape.class, true);
			Tracer.setKeywordPrintStatus(DetachedRotatingLineFortyFiveDegreeTest.class, true);
			Tracer.setKeywordPrintStatus(RotatingFixedLineRotateTest.class, true);
			Tracer.setKeywordPrintStatus(MovingRotatingLineFortyFiveDegreeTest.class, true);
			Tracer.setKeywordPrintStatus(MethodPropertyChecker.class, true);
			Tracer.setKeywordPrintStatus(BasicProjectIntrospection.class, true);
			Tracer.setKeywordPrintStatus(BasicProjectExecution.class, true);
			Tracer.setKeywordPrintStatus(DirectoryUtils.class, true);
			Tracer.setKeywordPrintStatus(TestCaseResult.class, true);
//		}

	}

}
]]></snapshot>
  </Command>
  <Command __id="6093" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.move.element" date="Sat Aug 24 16:24:05 EDT 2019" timestamp="102568890" />
  <Command __id="6094" _type="PredictionCommand" date="Sat Aug 24 16:24:05 EDT 2019" prediction_type="MakingProgress" timestamp="102568901" />
  <Command __id="6095" _type="MoveCaretCommand" caretOffset="464" date="Sat Aug 24 16:24:09 EDT 2019" docOffset="464" timestamp="102572871" />
  <Command __id="6097" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:24:11 EDT 2019" docOffset="0" timestamp="102574947" />
  <Command __id="6099" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:24:13 EDT 2019" docOffset="0" timestamp="102576173" />
  <Command __id="6101" _type="MoveCaretCommand" caretOffset="4882" date="Sat Aug 24 16:24:42 EDT 2019" docOffset="5087" timestamp="102605208" />
  <Command __id="6103" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:24:48 EDT 2019" docOffset="0" timestamp="102611637" />
  <Command __id="6104" _type="ShellCommand" date="Sat Aug 24 16:25:27 EDT 2019" timestamp="102650762" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6105" _type="ShellCommand" date="Sat Aug 24 16:25:56 EDT 2019" timestamp="102679081" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6106" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.move.element" date="Sat Aug 24 16:25:56 EDT 2019" timestamp="102679110" />
  <Command __id="6107" _type="SelectTextCommand" caretOffset="867" date="Sat Aug 24 16:26:20 EDT 2019" end="867" start="862" timestamp="102703150" />
  <Command __id="6108" _type="MoveCaretCommand" caretOffset="230" date="Sat Aug 24 16:26:30 EDT 2019" docOffset="230" timestamp="102713370" />
  <Command __id="6110" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 16:26:31 EDT 2019" timestamp="102714557" />
  <Command __id="6111" _type="SelectTextCommand" caretOffset="58" date="Sat Aug 24 16:26:31 EDT 2019" end="58" start="41" timestamp="102714632" />
  <Command __id="6113" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Sat Aug 24 16:26:36 EDT 2019" timestamp="102719278" />
  <Command __id="6114" _type="MoveCaretCommand" caretOffset="230" date="Sat Aug 24 16:26:36 EDT 2019" docOffset="230" timestamp="102719337" />
  <Command __id="6116" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:27:50 EDT 2019" docOffset="0" timestamp="102793229" />
  <Command __id="6117" _type="MoveCaretCommand" caretOffset="176" date="Sat Aug 24 16:27:55 EDT 2019" docOffset="1914" timestamp="102799051" />
  <Command __id="6118" _type="SelectTextCommand" caretOffset="146" date="Sat Aug 24 16:28:01 EDT 2019" end="253" start="146" timestamp="102804132" />
  <Command __id="6119" _type="CopyCommand" date="Sat Aug 24 16:28:01 EDT 2019" timestamp="102804973" />
  <Command __id="6121" _type="SelectTextCommand" caretOffset="58" date="Sat Aug 24 16:28:04 EDT 2019" end="58" start="41" timestamp="102807386" />
  <Command __id="6122" _type="MoveCaretCommand" caretOffset="181" date="Sat Aug 24 16:28:06 EDT 2019" docOffset="181" timestamp="102810072" />
  <Command __id="6124" _type="InsertStringCommand" date="Sat Aug 24 16:28:07 EDT 2019" timestamp="102810445" timestamp2="102810445">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6125" _type="MoveCaretCommand" caretOffset="181" date="Sat Aug 24 16:28:08 EDT 2019" docOffset="181" timestamp="102811675" />
  <Command __id="6214" _type="InsertStringCommand" date="Sat Aug 24 16:28:53 EDT 2019" timestamp="102856446" timestamp2="102856446">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="6215" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 16:28:53 EDT 2019" start_end="START" timestamp="102856451" />
  <DocumentChange __id="6255" _type="Insert" date="Sat Aug 24 16:29:26 EDT 2019" docASTNodeCount="2394" docActiveCodeLength="20847" docExpressionCount="1396" docLength="25952" length="1" offset="2190" timestamp="102889109">
    <text><![CDATA[2]]></text>
  </DocumentChange>
  <Command __id="6256" _type="InsertStringCommand" date="Sat Aug 24 16:29:26 EDT 2019" timestamp="102889120" timestamp2="102889120">
    <data><![CDATA[2]]></data>
  </Command>
  <Command __id="6257" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 16:29:27 EDT 2019" timestamp="102890153" />
  <Command __id="6258" _type="MoveCaretCommand" caretOffset="460" date="Sat Aug 24 16:29:32 EDT 2019" docOffset="2237" timestamp="102895190" />
  <Command __id="6259" _type="FileOpenCommand" date="Sat Aug 24 16:29:33 EDT 2019" docASTNodeCount="45" docActiveCodeLength="293" docExpressionCount="18" docLength="293" projectName="GraderBasics" timestamp="102896638">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\RootFolderCreator.java]]></filePath>
  </Command>
  <Command __id="6260" _type="SelectTextCommand" caretOffset="58" date="Sat Aug 24 16:29:33 EDT 2019" end="58" start="41" timestamp="102896741" />
  <Command __id="6261" _type="FileOpenCommand" date="Sat Aug 24 16:29:34 EDT 2019" docASTNodeCount="100" docActiveCodeLength="867" docExpressionCount="69" docLength="867" projectName="GraderBasics" timestamp="102897920">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\ARootFolderCreator.java]]></filePath>
  </Command>
  <Command __id="6262" _type="MoveCaretCommand" caretOffset="230" date="Sat Aug 24 16:29:34 EDT 2019" docOffset="230" timestamp="102898012" />
  <Command __id="6263" _type="MoveCaretCommand" caretOffset="441" date="Sat Aug 24 16:29:37 EDT 2019" docOffset="441" timestamp="102900791" />
  <Command __id="6264" _type="MoveCaretCommand" caretOffset="440" date="Sat Aug 24 16:29:38 EDT 2019" docOffset="440" timestamp="102901814" />
  <Command __id="6265" _type="MoveCaretCommand" caretOffset="441" date="Sat Aug 24 16:29:39 EDT 2019" docOffset="441" timestamp="102902491" />
  <DocumentChange __id="6266" _type="Delete" date="Sat Aug 24 16:29:40 EDT 2019" docASTNodeCount="98" docActiveCodeLength="860" docExpressionCount="67" docLength="860" endLine="8" length="7" offset="434" repeat="7" startLine="8" timestamp="102903132" timestamp2="102904085">
    <text><![CDATA[roject.]]></text>
  </DocumentChange>
  <Command __id="6267" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 16:29:40 EDT 2019" repeat="7" timestamp="102903143" timestamp2="102904091" />
  <DocumentChange __id="6280" _type="Insert" date="Sat Aug 24 16:29:41 EDT 2019" docASTNodeCount="100" docActiveCodeLength="867" docExpressionCount="69" docLength="867" length="7" offset="434" timestamp="102905022">
    <text><![CDATA[roject.]]></text>
  </DocumentChange>
  <Command __id="6281" _type="UndoCommand" date="Sat Aug 24 16:29:41 EDT 2019" timestamp="102905029" />
  <Command __id="6282" _type="SelectTextCommand" caretOffset="453" date="Sat Aug 24 16:29:43 EDT 2019" end="453" start="441" timestamp="102906549" />
  <Command __id="6283" _type="SelectTextCommand" caretOffset="508" date="Sat Aug 24 16:29:43 EDT 2019" end="508" start="374" timestamp="102906779" />
  <Command __id="6284" _type="CopyCommand" date="Sat Aug 24 16:29:44 EDT 2019" timestamp="102907550" />
  <Command __id="6285" _type="MoveCaretCommand" caretOffset="516" date="Sat Aug 24 16:29:45 EDT 2019" docOffset="516" timestamp="102908999" />
  <DocumentChange __id="6286" _type="Replace" date="Sat Aug 24 16:29:46 EDT 2019" docASTNodeCount="117" docActiveCodeLength="993" docExpressionCount="83" docLength="993" endLine="9" insertionLength="134" int_docASTNodeCount="100" int_docActiveCodeLength="859" int_docExpressionCount="69" int_docLength="859" length="8" offset="508" startLine="9" timestamp="102909594">
    <deletedText><![CDATA[        ]]></deletedText>
    <insertedText><![CDATA[        boolean isZipperFolder = aFolder.endsWith(AFlexibleProject.ZIP_SUFFIX_1) || aFolder.endsWith(AFlexibleProject.ZIP_SUFFIX_2);
]]></insertedText>
  </DocumentChange>
  <Command __id="6287" _type="PasteCommand" date="Sat Aug 24 16:29:46 EDT 2019" timestamp="102909615" />
  <Command __id="6288" _type="MoveCaretCommand" caretOffset="382" date="Sat Aug 24 16:29:47 EDT 2019" docOffset="382" timestamp="102910803" />
  <DocumentChange __id="6289" _type="Insert" date="Sat Aug 24 16:29:48 EDT 2019" docASTNodeCount="100" docActiveCodeLength="861" docExpressionCount="69" docLength="995" length="2" offset="374" timestamp="102911476">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="6290" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sat Aug 24 16:29:48 EDT 2019" timestamp="102911501" />
  <Command __id="6291" _type="MoveCaretCommand" caretOffset="577" date="Sat Aug 24 16:29:51 EDT 2019" docOffset="577" timestamp="102914148" />
  <DocumentChange __id="6292" _type="Delete" date="Sat Aug 24 16:29:51 EDT 2019" docASTNodeCount="98" docActiveCodeLength="844" docExpressionCount="67" docLength="978" endLine="9" length="17" offset="560" repeat="17" startLine="9" timestamp="102914657" timestamp2="102916149">
    <text><![CDATA[AFlexibleProject.]]></text>
  </DocumentChange>
  <Command __id="6293" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 16:29:51 EDT 2019" repeat="17" timestamp="102914660" timestamp2="102916159" />
  <Command __id="6326" _type="MoveCaretCommand" caretOffset="611" date="Sat Aug 24 16:29:57 EDT 2019" docOffset="611" timestamp="102920370" />
  <Command __id="6368" _type="FileOpenCommand" date="Sat Aug 24 16:30:20 EDT 2019" docASTNodeCount="184" docActiveCodeLength="1330" docExpressionCount="84" docLength="1330" projectName="comp110-grader" timestamp="102943340">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\project\flexible\FlexibleClassesManager.java]]></filePath>
    <snapshot><![CDATA[package grader.project.flexible;

import java.util.List;
import java.util.Map;
import java.util.Set;

public interface FlexibleClassesManager {

    public Map<String, FlexibleClassDescription> getClassNameToDescription();

    public void setClassNameToDescription(
            Map<String, FlexibleClassDescription> classNameToDescription);

    public List<FlexibleClassDescription> getClassDescriptions();

    public void setClassDescriptions(List<FlexibleClassDescription> classDescriptions);

    public void put(String aClassName, FlexibleClassDescription aClass);

    public void put(String[] aTags, FlexibleClassDescription aClass);

    public Set<FlexibleClassDescription> tagToClassDescriptions(String aTag);

    public Set<FlexibleClassDescription> tagsToClassDescriptions(String[] aTagList);

    public void putTag(String aTag, FlexibleClassDescription aClass);

    public FlexibleClassDescription classNameToClassDescription(String aClassName);

    public String[] getTags(FlexibleClassDescription aClassDescription);

    public void makeClassDescriptions(String aProjectDirectory, boolean aSeparateSrcBin);

	FlexibleClassDescription tagToUniqueClassDescription(String aTag);

	FlexibleClassDescription tagsToUniqueClassDescription(List<String> aTags);
	void clear();

}]]></snapshot>
  </Command>
  <Command __id="6369" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:30:20 EDT 2019" docOffset="0" timestamp="102943493" />
  <Command __id="6370" _type="FileOpenCommand" date="Sat Aug 24 16:30:45 EDT 2019" docASTNodeCount="96" docActiveCodeLength="827" docExpressionCount="65" docLength="961" projectName="GraderBasics" timestamp="102968293">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\ARootFolderCreator.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

import grader.file.filesystem.AFileSystemRootFolderProxy;
import grader.file.zipfile.AZippedRootFolderProxy;
import grader.project.flexible.AFlexibleProject;

public class ARootFolderCreator implements RootFolderCreator {
    public  RootFolderProxy createRootFolder(String aFolder, String[] aLazilyFetchSubFoldersOf, String[] anIgnoreFiles) {
//        boolean isZipperFolder = aFolder.endsWith(AFlexibleProject.ZIP_SUFFIX_1) || aFolder.endsWith(AFlexibleProject.ZIP_SUFFIX_2);
        boolean isZipperFolder = aFolder.endsWith(ZIP_SUFFIX_1) || aFolder.endsWith(ZIP_SUFFIX_2);

        if (isZipperFolder) {
        	System.out.println ("Creating zipped folder:" + aFolder + " with sffx2 " + AFlexibleProject.ZIP_SUFFIX_2);
            return new AZippedRootFolderProxy(aFolder);
        } else {
            return new AFileSystemRootFolderProxy(aFolder, aLazilyFetchSubFoldersOf, anIgnoreFiles );
        }
    }

}
]]></snapshot>
  </Command>
  <Command __id="6371" _type="MoveCaretCommand" caretOffset="594" date="Sat Aug 24 16:30:45 EDT 2019" docOffset="594" timestamp="102968428" />
  <Command __id="6372" _type="MoveCaretCommand" caretOffset="145" date="Sat Aug 24 16:30:49 EDT 2019" docOffset="145" timestamp="102972904" />
  <Command __id="6373" _type="SelectTextCommand" caretOffset="148" date="Sat Aug 24 16:30:50 EDT 2019" end="148" start="142" timestamp="102973125" />
  <Command __id="6374" _type="SelectTextCommand" caretOffset="185" date="Sat Aug 24 16:30:50 EDT 2019" end="185" start="135" timestamp="102973333" />
  <DocumentChange __id="6375" _type="Delete" date="Sat Aug 24 16:30:50 EDT 2019" docASTNodeCount="88" docActiveCodeLength="777" docExpressionCount="58" docLength="911" endLine="5" length="50" offset="135" startLine="4" timestamp="102973980">
    <text><![CDATA[import grader.project.flexible.AFlexibleProject;
]]></text>
  </DocumentChange>
  <Command __id="6376" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sat Aug 24 16:30:50 EDT 2019" timestamp="102974001" />
  <Command __id="6377" _type="MoveCaretCommand" caretOffset="694" date="Sat Aug 24 16:30:58 EDT 2019" docOffset="694" timestamp="102981408" />
  <DocumentChange __id="6378" _type="Delete" date="Sat Aug 24 16:30:59 EDT 2019" docASTNodeCount="86" docActiveCodeLength="760" docExpressionCount="56" docLength="894" endLine="11" length="17" offset="677" repeat="17" startLine="11" timestamp="102982098" timestamp2="102983613">
    <text><![CDATA[AFlexibleProject.]]></text>
  </DocumentChange>
  <Command __id="6379" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 16:30:59 EDT 2019" repeat="17" timestamp="102982101" timestamp2="102983615" />
  <Command __id="6412" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 16:31:01 EDT 2019" timestamp="102984752" />
  <Command __id="6413" _type="FileOpenCommand" date="Sat Aug 24 16:31:04 EDT 2019" docASTNodeCount="775" docActiveCodeLength="5668" docExpressionCount="470" docLength="7928" projectName="GraderBasics" timestamp="102987955">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\AnAbstractRootFolderProxy.java]]></filePath>
  </Command>
  <Command __id="6414" _type="MoveCaretCommand" caretOffset="4882" date="Sat Aug 24 16:31:05 EDT 2019" docOffset="5087" timestamp="102988089" />
  <Command __id="6415" _type="FileOpenCommand" date="Sat Aug 24 16:31:07 EDT 2019" docASTNodeCount="16" docActiveCodeLength="115" docExpressionCount="8" docLength="115" projectName="GraderBasics" timestamp="102990218">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\FileNames.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

public interface FileNames {
    String getAbsoluteName();

    String getName();

}
]]></snapshot>
  </Command>
  <Command __id="6416" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:31:07 EDT 2019" docOffset="0" timestamp="102990360" />
  <Command __id="6417" _type="FileOpenCommand" date="Sat Aug 24 16:31:08 EDT 2019" docASTNodeCount="127" docActiveCodeLength="907" docExpressionCount="68" docLength="950" projectName="GraderBasics" timestamp="102991862">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\FileProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

import java.io.File;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Set;

// unite file system and zip file interface
public interface FileProxy extends RootFolderProxy {
    String getAbsoluteName();

    long getTime();

    long getSize();

    InputStream getInputStream();

    OutputStream getOutputStream();

    Set<String> getEntryNames();

    void initRootData();

    Set<String> getChildrenNames();

    public FileProxy getParentFolder();
    String getParentRelativeName();

	String displayTree();

	List<FileProxy> getChildren();

	String getParentFolderName();

	String getParentRelativeMixedCaseName();

	boolean isDescendentsInitialized();
	void setDescendentsInitialized(boolean newValue);

	RootFolderProxy getRootFolderProxy();

	void setRootFolderProxy(RootFolderProxy rootFolderProxy);

	File getFile();

}
]]></snapshot>
  </Command>
  <Command __id="6418" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:31:08 EDT 2019" docOffset="0" timestamp="102992006" />
  <Command __id="6419" _type="FileOpenCommand" date="Sat Aug 24 16:31:10 EDT 2019" docASTNodeCount="283" docActiveCodeLength="1738" docExpressionCount="165" docLength="1738" projectName="GraderBasics" timestamp="102993695">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\FileProxyUtils.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import util.misc.Common;


public class FileProxyUtils {
    static public String toText(FileProxy f) {
        if (f == null) {
            return null;
        }
        StringBuffer sb = new StringBuffer();
        Scanner dataIn = new Scanner(f.getInputStream());
        boolean first = true;
        while (dataIn.hasNext()) {

            String nextLine = dataIn.nextLine();
            if (!first)
                sb.append("\n");
            Common.append(sb, nextLine);
            first = false;
        }
        return sb.toString();
    }

    static public List<String> toList(File f) {
        if (f == null) {
            return new ArrayList();
        }
        StringBuffer sb = new StringBuffer();
        try {
            return toList(new FileInputStream(f));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return new ArrayList();
    }

    static public List<String> toList(FileProxy f) {
        if (f == null) {
            return new ArrayList();
        }
        StringBuffer sb = new StringBuffer();
        return toList(f.getInputStream());
    }

    static public List<String> toList(InputStream input) {
        List<String> retVal = new ArrayList();

        Scanner dataIn = new Scanner(input);
        boolean first = true;
        while (dataIn.hasNext()) {

            String nextLine = dataIn.nextLine();
            retVal.add(nextLine);
        }
        return retVal;
    }
}
]]></snapshot>
  </Command>
  <Command __id="6420" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:31:10 EDT 2019" docOffset="0" timestamp="102993843" />
  <Command __id="6421" _type="FileOpenCommand" date="Sat Aug 24 16:31:12 EDT 2019" docASTNodeCount="45" docActiveCodeLength="293" docExpressionCount="18" docLength="293" projectName="GraderBasics" timestamp="102995285">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\RootFolderCreator.java]]></filePath>
  </Command>
  <Command __id="6422" _type="SelectTextCommand" caretOffset="58" date="Sat Aug 24 16:31:12 EDT 2019" end="58" start="41" timestamp="102995418" />
  <Command __id="6423" _type="FileOpenCommand" date="Sat Aug 24 16:31:13 EDT 2019" docASTNodeCount="34" docActiveCodeLength="264" docExpressionCount="16" docLength="264" projectName="GraderBasics" timestamp="102996976">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\RootFolderCreatorFactory.java]]></filePath>
    <snapshot><![CDATA[package grader.file;


public class RootFolderCreatorFactory {
	static RootFolderCreator singleton;
	public static RootFolderCreator getSingleton() {
		if (singleton == null) {
			singleton = new ARootFolderCreator();			
		}
		return singleton;
	}

}
]]></snapshot>
  </Command>
  <Command __id="6424" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:31:14 EDT 2019" docOffset="0" timestamp="102997121" />
  <Command __id="6425" _type="FileOpenCommand" date="Sat Aug 24 16:31:15 EDT 2019" docASTNodeCount="129" docActiveCodeLength="820" docExpressionCount="63" docLength="910" projectName="GraderBasics" timestamp="102998709">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\RootFolderProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file;

import java.io.File;
import java.util.List;
import java.util.Set;

public interface RootFolderProxy {
    String getAbsoluteName();

    String getLocalName();

    public String getMixedCaseAbsoluteName();

    public String getMixedCaseLocalName();

    List<FileProxy> getFileEntries();

    FileProxy getFileEntry(String name);

    Set<String> getEntryNames();

    public Set<String> getChildrenNames();

    Set<String> getDescendentEntryNames(FileProxy aParent);

    boolean isDirectory();

    public FileProxy getFileEntryFromLocalName(String name);

    boolean exists();

    public List<FileProxy> getChildrenOf(String aParentName);

	void clear();

	void initChildrenRootData(FileProxy anEntry);

	void initEntries(File aFolder);

//	boolean isDescendentsInitialized();
//	void setDescendentsInitialized(boolean newValue);



}
]]></snapshot>
  </Command>
  <Command __id="6426" _type="SelectTextCommand" caretOffset="110" date="Sat Aug 24 16:31:15 EDT 2019" end="110" start="95" timestamp="102998851" />
  <Command __id="6427" _type="FileOpenCommand" date="Sat Aug 24 16:31:18 EDT 2019" docASTNodeCount="333" docActiveCodeLength="2617" docExpressionCount="199" docLength="3228" projectName="GraderBasics" timestamp="103001182">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\filesystem\AFileSystemFileProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file.filesystem;

import grader.file.AnAbstractFileProxy;
import grader.file.FileProxy;
import grader.file.RootFolderProxy;
import grader.util.GraderFileUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import util.misc.Common;

// file system translated to common interface for zip file and file system
public class AFileSystemFileProxy extends AnAbstractFileProxy implements FileProxy {
    File file;
    

	String localName;
    String absoluteName;
    String mixedCaseLocalName;
    String mixedCaseAbsoluteName;

    public AFileSystemFileProxy(RootFolderProxy aRootFolderProxy, File aFile, String aRootFolderName) {
        super(aRootFolderProxy);
        file = aFile;
        initAbsoluteNames(aFile);
        
//        mixedCaseAbsoluteName = Common.toCanonicalFileName(file.getAbsolutePath());
//        absoluteName = mixedCaseAbsoluteName.toLowerCase();

        //System.out.println(this.getClass().getName());
        mixedCaseLocalName = GraderFileUtils.toRelativeName(aRootFolderName, mixedCaseAbsoluteName);

//        mixedCaseLocalName = GraderFileUtils.toRelativeName(aRootFolderName, getMixedCaseAbsoluteName());
        localName = mixedCaseLocalName.toLowerCase();
    }
    void initAbsoluteNames(File aFile) {
    	mixedCaseAbsoluteName = Common.toCanonicalFileName(file.getAbsolutePath());
        absoluteName = mixedCaseAbsoluteName.toLowerCase();
    }

    public AFileSystemFileProxy(File aFile) {
        super(null);
        file = aFile;
        initAbsoluteNames(aFile);
//        mixedCaseAbsoluteName = Common.toCanonicalFileName(file.getAbsolutePath());
//        absoluteName = mixedCaseAbsoluteName.toLowerCase();

//        absoluteName = Common.toCanonicalFileName(file.getAbsolutePath()).toLowerCase();
    }

    public String toString() {
        return file.toString();
    }

    @Override
    public String getAbsoluteName() {
        return absoluteName;
    }

    @Override
    public String getMixedCaseAbsoluteName() {
        return mixedCaseAbsoluteName;
    }

    @Override
    public String getMixedCaseLocalName() {
        return mixedCaseLocalName;
    }

    @Override
    public long getTime() {
        return file.lastModified();
    }

    @Override
    public long getSize() {
        return file.length();
    }

    @Override
    public InputStream getInputStream() {
        try {
            return new FileInputStream(file);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public OutputStream getOutputStream() {
        try {
            return new FileOutputStream(file);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public String getLocalName() {
        return localName;
    }

    @Override
    public boolean exists() {
        return file.exists();
    }
    @Override
    public File getFile() {
		return file;
	}
	
}
]]></snapshot>
  </Command>
  <Command __id="6428" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:31:18 EDT 2019" docOffset="0" timestamp="103001332" />
  <Command __id="6429" _type="MoveCaretCommand" caretOffset="158" date="Sat Aug 24 16:31:27 EDT 2019" docOffset="158" timestamp="103011070" />
  <DocumentChange __id="6430" _type="Insert" date="Sat Aug 24 16:31:28 EDT 2019" docASTNodeCount="335" docActiveCodeLength="2624" docExpressionCount="201" docLength="3235" length="7" offset="158" repeat="7" timestamp="103011746" timestamp2="103013113">
    <text><![CDATA[basics.]]></text>
  </DocumentChange>
  <Command __id="6431" _type="InsertStringCommand" date="Sat Aug 24 16:31:28 EDT 2019" repeat="7" timestamp="103011749" timestamp2="103013117">
    <data><![CDATA[basics.]]></data>
  </Command>
  <Command __id="6444" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sat Aug 24 16:31:30 EDT 2019" start_end="START" timestamp="103013118" />
  <Command __id="6445" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 16:31:31 EDT 2019" timestamp="103015036" />
  <Command __id="6446" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 16:31:31 EDT 2019" start_end="END" timestamp="103015077" />
  <Command __id="6447" _type="FileOpenCommand" date="Sat Aug 24 16:31:34 EDT 2019" docASTNodeCount="646" docActiveCodeLength="4951" docExpressionCount="422" docLength="8383" projectName="GraderBasics" timestamp="103017897">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\filesystem\AFileSystemRootFolderProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file.filesystem;

import edu.emory.mathcs.backport.java.util.Collections;
import grader.file.AnAbstractRootFolderProxy;
import grader.file.FileProxy;
import grader.file.RootFolderProxy;
import grader.trace.file.load.RootFileSystemFolderLoaded;

import java.io.File;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import util.misc.Common;

public class AFileSystemRootFolderProxy extends AnAbstractRootFolderProxy
        implements RootFolderProxy {
    protected File rootFolder;
    String rootName;
    String localName;

    public AFileSystemRootFolderProxy(String aRootFolderName, String aSubFolderName) {
        super(aSubFolderName);
        init (aRootFolderName);
//        rootFolder = new File(aRootFolderName);
//        if (!rootFolder.exists()) {
//            System.out.println("File:" + aRootFolderName + "  does not exist");
//            rootFolder = null;
//            System.exit(-1);
//            return;
//        }
//
////        rootName = aRootFolderName;
////        try {
//			rootName = Common.toCanonicalFileName(rootFolder.getAbsolutePath());
////		} catch (IOException e) {
////			rootName = aRootFolderName;
////		}
//
//        localName = Common.toCanonicalFileName(rootFolder.getName());
//        // let us see what happens if we do not do this
//        initEntries(rootFolder);
////        System.out.println("Inefficiently initializing children root data");
//        initChildrenRootData(); // I moved this out of init entries because it only needs to be called once and significantly reduces the loading time. --Josh
//        RootFileSystemFolderLoaded.newCase(getAbsoluteName(), this);

    }
    public AFileSystemRootFolderProxy(String aRootFolderName, String[] aLazilyFetchSubFolderNames, String[] anIgnoreFiles) {
        super(aLazilyFetchSubFolderNames, anIgnoreFiles);
        init (aRootFolderName);
//        rootFolder = new File(aRootFolderName);
//        if (!rootFolder.exists()) {
//            System.out.println("File:" + aRootFolderName + "  does not exist");
//            rootFolder = null;
//            System.exit(-1);
//            return;
//        }
//
////        rootName = aRootFolderName;
////        try {
//			rootName = Common.toCanonicalFileName(rootFolder.getAbsolutePath());
////		} catch (IOException e) {
////			rootName = aRootFolderName;
////		}
//
//        localName = Common.toCanonicalFileName(rootFolder.getName());
//        // let us see what happens if we do not do this
//        initEntries(rootFolder);
////        System.out.println("Inefficiently initializing children root data");
//        initChildrenRootData(); // I moved this out of init entries because it only needs to be called once and significantly reduces the loading time. --Josh
//        RootFileSystemFolderLoaded.newCase(getAbsoluteName(), this);

    }
    protected void init(String aRootFolderName) {
    	 rootFolder = new File(aRootFolderName);
         if (!rootFolder.exists()) {
             System.out.println("File:" + aRootFolderName + "  does not exist");
             rootFolder = null;
             System.exit(-1);
             return;
         }

//         rootName = aRootFolderName;
//         try {
 			rootName = Common.toCanonicalFileName(rootFolder.getAbsolutePath());
// 		} catch (IOException e) {
// 			rootName = aRootFolderName;
// 		}

         localName = Common.toCanonicalFileName(rootFolder.getName());
         // let us see what happens if we do not do this
         initEntries(rootFolder);
//         System.out.println("Inefficiently initializing children root data");
         initChildrenRootData(); // I moved this out of init entries because it only needs to be called once and significantly reduces the loading time. --Josh
         RootFileSystemFolderLoaded.newCase(getAbsoluteName(), this);
    }

    public AFileSystemRootFolderProxy(String aRootFolderName) {
        this(aRootFolderName, (String) null);
    }
    
    private boolean containsOnyen(File file ){
    	int openParenPos = file.getName().lastIndexOf('(');
    	int closeParenPos = file.getName().lastIndexOf(')');
    	return openParenPos >= 0 && closeParenPos >= 0 && openParenPos + 1 < closeParenPos;
    }
    
    private File[] sortFiles(File[] files) {
    	List<File> studentDirectories = new ArrayList<File>();
    	List<File> otherFiles = new ArrayList<File>();
    	
    	for (File file : files) {
    		if (file.isDirectory() && containsOnyen(file)) {
    			studentDirectories.add(file);
    		} else {
    			otherFiles.add(file);
    		}
    	}
    	
    	Collections.sort(studentDirectories, new Comparator<File>() {

			@Override
			public int compare(File f1, File f2) {
				String onyen1 = f1.getName().substring(f1.getName().lastIndexOf('(') + 1,
						f1.getName().lastIndexOf(')'));
				String onyen2 = f2.getName().substring(f2.getName().lastIndexOf('(') + 1,
						f2.getName().lastIndexOf(')'));
				return onyen1.compareTo(onyen2);
			}
		});
    	
    	otherFiles.addAll(studentDirectories);
    	return otherFiles.toArray(new File[0]);
    	
    }
    
    
   @Override
   public  void initEntries(File aFolder) {
        File[] files = aFolder.listFiles();
        if (files == null) {
        	return;
        }
        
		if (aFolder.equals(rootFolder)) {
			files = sortFiles(files);
//			Arrays.sort(files, new Comparator<Object>() {
//
//				@Override
//				public int compare(Object o1, Object o2) {
//					if (!(o1 instanceof File && o2 instanceof File)) {
//						throw new RuntimeException("Invalid Type.  Must be of type File.");
//					}
//					File f1 = (File) o1;
//					File f2 = (File) o2;
//					if (!containsOnyen(f1) || !containsOnyen(f2)) {
//						return f1.compareTo(f2);
//					}
//					String onyen1 = f1.getName().substring(f1.getName().lastIndexOf('(') + 1,
//							f1.getName().lastIndexOf(')'));
//					String onyen2 = f2.getName().substring(f2.getName().lastIndexOf('(') + 1,
//							f2.getName().lastIndexOf(')'));
//					return onyen1.compareTo(onyen2);
//				}
//			});
		}
        
        String rootName = Common.toCanonicalFileName(rootFolder.getAbsolutePath());
        for (File aFile : files) {
        	if (aFolder.equals(rootFolder) &&  !inTreeOfSubFolder(aFile.getName()))
        		continue;
        	if (ignoreFile(aFile.getName())) {
        		continue;
        	}
        	FileProxy aFileProxy
        	= new AFileSystemFileProxy(this, aFile, rootName);
//            add(new AFileSystemFileProxy(this, aFile, rootName));
            add(aFileProxy);
            

//            if (aFile.isDirectory() ) {
            if (aFile.isDirectory() )
            		//&& !excludeDescendentsOf(aFile.getName()))
//            		!aFile.getName().contains("src") &&
//            		!aFile.getName().contains("bin")) 
            {
            
            	if (lazilyFetchDescendentsOf(aFile.getName())) {
                	aFileProxy.setDescendentsInitialized(false);

            	} else {
//                System.out.println("Recursively and inefficiently loading child of bulk folder:" + aFile + " bad things may happen");

                initEntries(aFile);
                aFileProxy.setDescendentsInitialized(true);
            	}
            } else {
            	aFileProxy.setDescendentsInitialized(true);
            }
            
            
            if (subFolderName != null && aFolder.equals(rootFolder)) // we are done, we found our subfolder
            	break;
        }
    }

    @Override
    public boolean exists() {
        return rootFolder != null && rootFolder.exists();
    }

    @Override
    public String getMixedCaseAbsoluteName() {
        return rootName;
    }

    @Override
    public String getMixedCaseLocalName() {
        return localName;
    }

    @Override
    public String getAbsoluteName() {
        return rootName;
    }

    @Override
    public String getLocalName() {
        return localName;
    }
    @Override
    public void clear() {
    	super.clear();
//    	System.out.println ("Clearing file system folder");

    }
    public String toString() {
    	return rootName;
    }
}
]]></snapshot>
  </Command>
  <Command __id="6448" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:31:34 EDT 2019" docOffset="0" timestamp="103018046" />
  <Command __id="6449" _type="MoveCaretCommand" caretOffset="40" date="Sat Aug 24 16:31:40 EDT 2019" docOffset="40" timestamp="103023799" />
  <Command __id="6450" _type="SelectTextCommand" caretOffset="41" date="Sat Aug 24 16:31:40 EDT 2019" end="41" start="35" timestamp="103024027" />
  <Command __id="6451" _type="SelectTextCommand" caretOffset="92" date="Sat Aug 24 16:31:41 EDT 2019" end="92" start="35" timestamp="103024261" />
  <DocumentChange __id="6452" _type="Delete" date="Sat Aug 24 16:31:41 EDT 2019" docASTNodeCount="632" docActiveCodeLength="4894" docExpressionCount="409" docLength="8326" endLine="3" length="57" offset="35" startLine="2" timestamp="103024917">
    <text><![CDATA[import edu.emory.mathcs.backport.java.util.Collections;
]]></text>
  </DocumentChange>
  <Command __id="6453" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sat Aug 24 16:31:41 EDT 2019" timestamp="103024963" />
  <Command __id="6454" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sat Aug 24 16:31:52 EDT 2019" start_end="START" timestamp="103035669" />
  <Command __id="6455" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.internal.ui.CompilationUnitEditor.ruler.actions/org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction" date="Sat Aug 24 16:31:52 EDT 2019" timestamp="103035805" />
  <Command __id="6456" _type="ShellCommand" date="Sat Aug 24 16:31:54 EDT 2019" timestamp="103037312" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6457" _type="ShellCommand" date="Sat Aug 24 16:31:54 EDT 2019" timestamp="103037610" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6458" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sat Aug 24 16:31:54 EDT 2019" start_end="END" timestamp="103037633" />
  <DocumentChange __id="6459" _type="Insert" date="Sat Aug 24 16:31:54 EDT 2019" docASTNodeCount="638" docActiveCodeLength="4925" docExpressionCount="414" docLength="8357" length="31" offset="260" repeat="2" timestamp="103037637" timestamp2="103037638">
    <text><![CDATA[
import java.util.Collections;]]></text>
  </DocumentChange>
  <Command __id="6461" _type="SelectTextCommand" caretOffset="4704" date="Sat Aug 24 16:31:54 EDT 2019" end="4704" start="4693" timestamp="103037675" />
  <Command __id="6462" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 16:31:56 EDT 2019" timestamp="103039330" />
  <Command __id="6463" _type="FileOpenCommand" date="Sat Aug 24 16:32:01 EDT 2019" docASTNodeCount="352" docActiveCodeLength="2610" docExpressionCount="230" docLength="3115" projectName="GraderBasics" timestamp="103044964">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\zipfile\AZippedFileProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file.zipfile;

import grader.basics.util.GraderFileUtils;
import grader.file.AnAbstractFileProxy;
import grader.file.FileProxy;
import grader.file.RootFolderProxy;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import util.misc.Common;
import util.trace.Tracer;

// zip system interface to common interface
public class AZippedFileProxy extends AnAbstractFileProxy implements FileProxy {
    ZipEntry zipEntry;
    ZipFile zipFile;
    String name, mixedCaseName;
    String absoluteName, mixedCaseAbsoluteName;

    //	RootFolderProxy rootFolderProxy;
    public AZippedFileProxy(RootFolderProxy aRootFolderProxy, ZipEntry aZipEntry, ZipFile aZipFile, String aRootLocalName) {
        super(aRootFolderProxy);
        this.zipEntry = aZipEntry;
        this.zipFile = aZipFile;
        mixedCaseAbsoluteName = Common.toCanonicalFileName(Common.toCanonicalFileName(zipFile.getName()) + "/" + zipEntry.getName());
        absoluteName = mixedCaseAbsoluteName.toLowerCase();
        if (aZipEntry == null) {
            System.out.println("null zip entry");
        }
        //System.out.println(this.getClass().getName());
        mixedCaseName = GraderFileUtils.toRelativeName(aRootLocalName, zipEntry.getName());
        if (mixedCaseName != null) // for MACOS, a null value is returned
            name = mixedCaseName.toLowerCase();
    }

//    public String toString() {
//        return zipFile.toString();
//    }
    public String toString() {
    	return getLocalName();
    }

    public boolean exists() {
        return zipFile != null && zipFile.size() > 0 && zipEntry != null;
    }

    @Override
    public String getAbsoluteName() {
        return absoluteName;
    }

    @Override
    public long getTime() {
        return zipEntry.getTime();
    }

    @Override
    public long getSize() {
        return zipEntry.getSize();
    }

    @Override
    public InputStream getInputStream() {
        try {
            return zipFile.getInputStream(zipEntry);
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public OutputStream getOutputStream() {
        return null;
    }

    @Override
    public String getLocalName() {
        return name;
    }

    @Override
    public String getMixedCaseAbsoluteName() {
        return mixedCaseAbsoluteName;
    }

    @Override
    public String getMixedCaseLocalName() {
        return mixedCaseName;
    }
    
    @Override
    public void clear() {
    	super.clear();
//    	if (zipFile != null) {
//    		try {
//    			Tracer.info(this, "Closing zip file " + zipFile);
//				zipFile.close();
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//    	}
    }

	@Override
	public File getFile() {
		// TODO Auto-generated method stub
		return null;
	}
    
}
]]></snapshot>
  </Command>
  <Command __id="6464" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:32:02 EDT 2019" docOffset="0" timestamp="103045116" />
  <Command __id="6465" _type="FileOpenCommand" date="Sat Aug 24 16:32:04 EDT 2019" docASTNodeCount="463" docActiveCodeLength="3575" docExpressionCount="300" docLength="4173" projectName="GraderBasics" timestamp="103047130">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\zipfile\AZippedRootFolderProxy.java]]></filePath>
    <snapshot><![CDATA[package grader.file.zipfile;

import grader.file.AnAbstractRootFolderProxy;
import grader.file.RootFolderProxy;
import grader.trace.file.load.RootFileSystemFolderLoaded;

import java.io.IOException;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

import util.misc.Common;
import util.trace.Tracer;

public class AZippedRootFolderProxy extends AnAbstractRootFolderProxy implements RootFolderProxy {
    private ZipFile zipFile;
    String rootLocalName;
    String absoluteName;
    public static final String MACOS = "_MACOS";

    public AZippedRootFolderProxy(String aZipFileName, String aSubFolderName) {
        super(aSubFolderName);
        try {
            this.zipFile = new ZipFile(aZipFileName);
			System.out.println ("Opening zip file:" + zipFile);

        } catch (IOException e) {
            System.out.println(aZipFileName + ":" + e);
            return;
        }
        initRootName();
        initEntries();
        
    }
    public AZippedRootFolderProxy(String aZipFileName) {
    	this(aZipFileName, null);
    	
    }

    public boolean exists() {
        return zipFile != null && zipFile.size() > 0;
    }

    @Override
    public String getAbsoluteName() {
        return absoluteName;
    }

    @Override
    public String getLocalName() {
        return rootLocalName;
    }

    public static String rootLocalName(String anElementName) {
        int firstSlashIndex = anElementName.indexOf("/");
        if (firstSlashIndex < 0)
            return anElementName;
        else
            return anElementName.substring(0, firstSlashIndex);
    }

    void initRootName() {
        absoluteName = Common.toCanonicalFileName(zipFile.getName());
        Enumeration<? extends ZipEntry> enumeration = zipFile.entries();
        while (enumeration.hasMoreElements()) {

            ZipEntry nextEntry = enumeration.nextElement();
            String name = nextEntry.getName();
            // why do we have this check?
            if ((name.indexOf(".") >= 0 && 
            		name.indexOf('/') == -1) 
//            		|| !name.contains(".MF")) // manifest files in jars
        		|| name.contains(".MF")) // manifest files in jars

                continue; // we got a file at the top level
            rootLocalName = rootLocalName(name);
//            Exception e= new Exception();
//            e.printStackTrace();
            Tracer.info(this, "Local name:" + rootLocalName + " of zip file" + zipFile.getName());
            return;
        }

    }
    
  

    void initEntries() {
        Enumeration<? extends ZipEntry> enumeration = zipFile.entries();
        while (enumeration.hasMoreElements()) {
            ZipEntry nextEntry = enumeration.nextElement();
            if (nextEntry.getName().indexOf(MACOS) >= 0) // why not use contains?
                continue; // mac added stuff
            if (!inTreeOfSubFolder(nextEntry.getName()))
            	continue;
            add(new AZippedFileProxy(this, nextEntry, zipFile, rootLocalName));
        }
        initChildrenRootData();
        RootFileSystemFolderLoaded.newCase(getAbsoluteName(), this);

    }

    @Override
    public String getMixedCaseAbsoluteName() {
        return absoluteName;
    }

    @Override
    public String getMixedCaseLocalName() {
        return rootLocalName;
    }
    protected void closeZipFile() {
    	if (zipFile != null) {
    		try {
				zipFile.close();
				System.out.println ("Closing zip file:" + zipFile.getName());
				zipFile = null;
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    }
    @Override
    public void clear() {
    	
    	super.clear();
//    	System.out.println ("Clearing zipped root folder " );
    	closeZipFile();
//    	if (zipFile != null) {
//    		try {
//				zipFile.close();
//				System.out.println ("Closing zip file:" + zipFile);
//			} catch (IOException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//    	}
    }
}
]]></snapshot>
  </Command>
  <Command __id="6466" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 16:32:04 EDT 2019" docOffset="0" timestamp="103047327" />
  <Command __id="6467" _type="EclipseCommand" commandID="" date="Sat Aug 24 16:32:15 EDT 2019" repeat="3" timestamp="103058240" timestamp2="103059659" />
  <Command __id="6470" _type="EclipseCommand" commandID="" date="Sat Aug 24 16:32:23 EDT 2019" timestamp="103066440" />
  <Command __id="6471" _type="ShellCommand" date="Sat Aug 24 16:32:23 EDT 2019" timestamp="103066528" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6472" _type="ShellCommand" date="Sat Aug 24 16:32:27 EDT 2019" timestamp="103070620" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6473" _type="FileOpenCommand" date="Sat Aug 24 16:32:38 EDT 2019" docASTNodeCount="931" docActiveCodeLength="6413" docExpressionCount="531" docLength="6613" projectName="GraderBasics" timestamp="103081399">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\requirements\interpreter\specification\ACSVRequirementsSpecification.java]]></filePath>
    <snapshot><![CDATA[package grader.requirements.interpreter.specification;

//import framework.grading.FrameworkProjectRequirements;
import grader.file.FileProxy;
//import grader.sakai.project.SakaiProjectDatabase;

import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.List;

import au.com.bytecode.opencsv.CSVReader;
//import bus.uigen.Message;

public class ACSVRequirementsSpecification implements CSVRequirementsSpecification {
	public static final String TYPE_NAME = "Type";
	public static final int TYPE_COLUMN = 0;
	public static final int DESCRIPTION_COLUMN = TYPE_COLUMN+1;
	public static final int MAX_SCORE_COLUMN = DESCRIPTION_COLUMN + 1;
	public static final  int TIMEOUT_COLUMN = MAX_SCORE_COLUMN + 1;
	public static final  int INPUT_COLUMN = TIMEOUT_COLUMN + 1;
	public static final  int MODEL_OUTPUT_COLUMN = INPUT_COLUMN + 1;
	public static final int EXTRA_CREDIT_COLUMN = MODEL_OUTPUT_COLUMN + 1;
	public static final  int CHECKER_COLUMN = EXTRA_CREDIT_COLUMN  + 1;
	public static final  int START_CHECKER_ARGUMENTS_COLUMN = CHECKER_COLUMN + 1;
	
	protected int headerRow = 0;
	protected int numRequirements;
	FileProxy specificationSpreadsheet; // w
	
	List<String[]>  table;
	protected boolean valid;
//	protected FrameworkProjectRequirements projectRequirements;
  


	public ACSVRequirementsSpecification(FileProxy aSpecificationSpreadsheet) {
		specificationSpreadsheet = aSpecificationSpreadsheet;	
		init();
	}
	
	public ACSVRequirementsSpecification(SakaiProjectDatabase aSakaiProjectDatabase) {
		specificationSpreadsheet = aSakaiProjectDatabase.getAssignmentDataFolder().getRequirementsSpreadsheetFile();
		init();
	}
	
	protected void init() {
		maybeCreateTable();
		headerRow = getHeaderRowNum(table);
		valid = headerRow >= 0;
		makeRequirements();
		

	}
	
	protected void makeRequirements() {
		if (isValid()) {
			numRequirements = table.size() - (headerRow + 1);
			
		}
		
	}
	
	protected void maybeCreateTable() {
		if (table != null)
			return;
		createTable();
		
	}
	
	protected void createTable() {
		
		try {
			InputStream input = specificationSpreadsheet.getInputStream();
			CSVReader csvReader 	=	new CSVReader(new InputStreamReader(input));
		     table = csvReader.readAll();
			csvReader.close();
			input.close();
			
		   
	    
	    
		} catch (Exception e) {
			e.printStackTrace();
		
			
		}
		
	}
	
	
	
	public int getHeaderRowNum(List<String[]> aSheet) {
		 for (int rowNum = 0; rowNum < aSheet.size(); rowNum ++) {
			 String[] aRow = aSheet.get(rowNum);
			 if (aRow[TYPE_COLUMN].equalsIgnoreCase(TYPE_NAME))
				 return rowNum;
		 }
		 return -1;
		
	}
	
	
	
	
	
	public FileProxy getSpecificationSpreadsheet() {
		return specificationSpreadsheet;
	}

	public String getFileName() {
		return specificationSpreadsheet.getMixedCaseAbsoluteName();
	}

	public boolean isValid() {
		return valid;
	}

	public void setValid(boolean newValue) {
		this.valid = newValue;
	}

	public List<String[]> getTable() {
		return table;
	}
	@Override
	public int getNumberOfRequirements() {
		return numRequirements;
	}
	@Override
	public String getArg(int aRequirementNum, int anArgNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		int aColumnNum = START_CHECKER_ARGUMENTS_COLUMN + anArgNum;
		return table.get(aRowNum)[aColumnNum];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have arg " + anArgNum);
			return null;
		}
	}
	public String getType(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[TYPE_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have type ");
			return null;
		}
	}
	
	public String getDescription(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[DESCRIPTION_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have description ");
			return null;
		}
	}
	@Override
	public Double getMaxScore(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return Double.parseDouble(table.get(aRowNum)[MAX_SCORE_COLUMN]);
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have max score");
			return null;
		}
	}
	
	@Override
	public Integer getTimeOut(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		String aTimeOut = table.get(aRowNum)[TIMEOUT_COLUMN];
		if (aTimeOut == null || aTimeOut.isEmpty())
			return null;
		return Integer.parseInt(aTimeOut);
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have timeout");
			return null;
		}
	}
	@Override
	public boolean isExtraCredit(int aRequirementNum) {
		try {
			int aRowNum = headerRow + 1 + aRequirementNum;
			String aSpec = table.get(aRowNum)[EXTRA_CREDIT_COLUMN].replaceAll("\\s+", "");
			return !aSpec.isEmpty();
			
			} catch (Exception e) {
				System.out.println("Requirement " + aRequirementNum + " does not have extra credit");
				return false;
			}
	}
	
	
	@Override
	public boolean isManual(int aRequirementNum) {
		try {
			int aRowNum = headerRow + 1 + aRequirementNum;
			String aSpec = table.get(aRowNum)[CHECKER_COLUMN].replaceAll("\\s+", "");
			return aSpec.isEmpty();
			
			} catch (Exception e) {
				System.out.println("Requirement " + aRequirementNum + " does not have checker column");
				return false;
			}
	}

	
	public String getInput(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[INPUT_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have max score ");
			return null;
		}
	}
	public String getModelOutput(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[MODEL_OUTPUT_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have model output");
			return null;
		}
	}
	public String getChecker(int aRequirementNum) {
		try {
		int aRowNum = headerRow + 1 + aRequirementNum;
		return table.get(aRowNum)[CHECKER_COLUMN];
		} catch (Exception e) {
			System.out.println("Requirement " + aRequirementNum + " does not have a function");
			return null;
		}
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="6474" _type="SelectTextCommand" caretOffset="58" date="Sat Aug 24 16:32:38 EDT 2019" end="60" start="58" timestamp="103081540" />
  <Command __id="6475" _type="SelectTextCommand" caretOffset="1697" date="Sat Aug 24 16:32:45 EDT 2019" end="1697" start="1485" timestamp="103088618" />
  <Command __id="6510" _type="FileOpenCommand" date="Sat Aug 24 16:32:59 EDT 2019" docASTNodeCount="2232" docActiveCodeLength="22650" docExpressionCount="1459" docLength="27659" projectName="comp110-grader" timestamp="103102760">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\demoAndTest\basic\AJavaPalindromeBasedGraderDemoerAndTester.java]]></filePath>
  </Command>
  <Command __id="6511" _type="MoveCaretCommand" caretOffset="2971" date="Sat Aug 24 16:33:00 EDT 2019" docOffset="3641" timestamp="103103202" />
  <Command __id="6512" _type="RunCommand" date="Sat Aug 24 16:33:02 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103105307" type="Debug" />
  <Command __id="6513" _type="RunCommand" date="Sat Aug 24 16:33:02 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103105307" type="Debug" />
  <Command __id="6514" _type="RunCommand" date="Sat Aug 24 16:33:02 EDT 2019" kind="HitBreakPoint" projectName="comp110-grader" timestamp="103105307" type="Run" />
  <Command __id="6549" _type="RunCommand" date="Sat Aug 24 16:43:27 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103730462" type="Run" />
  <Command __id="6550" _type="RunCommand" date="Sat Aug 24 16:43:27 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103730470" type="Run" />
  <Command __id="6551" _type="EHExceptionCommand" date="Sat Aug 24 16:43:27 EDT 2019" timestamp="103730509" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:1
]]></outputString>
  </Command>
  <Command __id="6552" _type="EHExceptionCommand" date="Sat Aug 24 16:43:27 EDT 2019" timestamp="103730520" type="Exception">
    <outputString><![CDATA[I***(BasicRunningProject) 1566679407432:Received output from main: Please input an integer
I***(BasicRunningProject) 1566679407433:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566679407433:Processing line from main: Please input an integer
I***(BasicRunningProject) 1566679407433:Processing line from main: Please input a decimal
Premature end of file before decimal was input, exiting
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="6553" _type="RunCommand" date="Sat Aug 24 16:43:29 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103732513" type="Run" />
  <Command __id="6554" _type="RunCommand" date="Sat Aug 24 16:43:29 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103732525" type="Run" />
  <Command __id="6555" _type="RunCommand" date="Sat Aug 24 16:43:29 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103732531" type="Run" />
  <Command __id="6556" _type="EHExceptionCommand" date="Sat Aug 24 16:43:29 EDT 2019" timestamp="103732603" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:1.4
I***(BasicRunningProject) 1566679409508:Received output from main: Please input an integer
I***(BasicRunningProject) 1566679409509:Processing line from main: Please input an integer
I***(BasicRunningProject) 1566679409509:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566679409509:Processing line from main: Please input a decimal
I***(BasicRunningProject) 1566679409519:Received output from main: The int addition:1
I***(BasicRunningProject) 1566679409519:Processing line from main: The int addition:1
I***(BasicRunningProject) 1566679409519:Received output from main: The double addition:1.400000
I***(BasicRunningProject) 1566679409520:Processing line from main: The double addition:1.400000
I***(BasicRunningProject) 1566679409520:Received output from main: The int multiplication:0
I***(BasicRunningProject) 1566679409520:Processing line from main: The int multiplication:0]]></outputString>
  </Command>
  <Command __id="6557" _type="EHExceptionCommand" date="Sat Aug 24 16:43:29 EDT 2019" timestamp="103732677" type="Exception">
    <outputString><![CDATA[
I***(BasicRunningProject) 1566679409522:Received output from main: The double multiplication:0.400000
I***(BasicRunningProject) 1566679409522:Processing line from main: The double multiplication:0.400000
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="6558" _type="RunCommand" date="Sat Aug 24 16:43:31 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103734620" type="Run" />
  <Command __id="6559" _type="RunCommand" date="Sat Aug 24 16:43:31 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103734624" type="Run" />
  <Command __id="6560" _type="RunCommand" date="Sat Aug 24 16:43:31 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103734626" type="Run" />
  <Command __id="6561" _type="EHExceptionCommand" date="Sat Aug 24 16:43:31 EDT 2019" timestamp="103734656" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 0.0
I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### gradingTools.comp524f19.assignment1.testcases.IncrementalInputPromptTestCase: 1.0
I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) 1566679411574:Received output from main: Please input an integer
I***(BasicRunningProject) 1566679411574:Processing line from main: Please input an integer
main output:Please input an integer

Found int prompt true
I***(BasicRunningProject) New input 1for main
I***(ARunnerInputStreamProcessor) Provided Input:1

]]></outputString>
  </Command>
  <Command __id="6562" _type="ShellCommand" date="Sat Aug 24 16:43:31 EDT 2019" timestamp="103734999" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6563" _type="RunCommand" date="Sat Aug 24 16:43:32 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103735477" type="Run" />
  <Command __id="6564" _type="RunCommand" date="Sat Aug 24 16:43:33 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103736321" type="Run" />
  <Command __id="6565" _type="RunCommand" date="Sat Aug 24 16:43:34 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103737809" type="Run" />
  <Command __id="6567" _type="MoveCaretCommand" caretOffset="28877" date="Sat Aug 24 16:43:35 EDT 2019" docOffset="30002" timestamp="103738718" />
  <Command __id="6568" _type="MoveCaretCommand" caretOffset="28877" date="Sat Aug 24 16:43:35 EDT 2019" docOffset="30002" timestamp="103738762" />
  <Command __id="6569" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sat Aug 24 16:43:39 EDT 2019" timestamp="103742122" />
  <Command __id="6570" _type="RunCommand" date="Sat Aug 24 16:43:39 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="103742123" type="Run" />
  <Command __id="6571" _type="EHExceptionCommand" date="Sat Aug 24 16:43:39 EDT 2019" timestamp="103742208" type="Exception">
    <outputString><![CDATA[I***(BasicRunningProject) 1566679419046:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566679419046:Processing line from main: Please input a decimal
main output:Please input a decimal

Found double prompt true
I***(BasicRunningProject) New input 1.4for main
I***(ARunnerInputStreamProcessor) Provided Input:1.4

I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
]]></outputString>
  </Command>
  <Command __id="6572" _type="BreakPointCommand" date="Sat Aug 24 16:43:43 EDT 2019" lineNumber="757" timestamp="103746301" type="BreakPointRemoved" />
  <Command __id="6573" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sat Aug 24 16:43:43 EDT 2019" timestamp="103746351" />
  <Command __id="6574" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sat Aug 24 16:43:44 EDT 2019" timestamp="103747247" />
  <Command __id="6575" _type="RunCommand" date="Sat Aug 24 16:43:44 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="103747261" type="Run" />
  <Command __id="6576" _type="RunCommand" date="Sat Aug 24 16:43:44 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103747271" type="Run" />
  <Command __id="6577" _type="EHExceptionCommand" date="Sat Aug 24 16:43:44 EDT 2019" timestamp="103747302" type="Exception">
    <outputString><![CDATA[I***(BasicRunningProject) 1566679424170:Received output from main: The int addition:2
I***(BasicRunningProject) 1566679424170:Processing line from main: The int addition:2
I***(BasicRunningProject) 1566679424171:Received output from main: The double addition:2.400000
I***(BasicRunningProject) 1566679424171:Processing line from main: The double addition:2.400000
I***(BasicRunningProject) 1566679424171:Received output from main: The int multiplication:1
I***(BasicRunningProject) 1566679424172:Processing line from main: The int multiplication:1
I***(BasicRunningProject) 1566679424172:Received output from main: The double multiplication:1.400000
I***(BasicRunningProject) 1566679424172:Processing line from main: The double multiplication:1.400000
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="6578" _type="EHExceptionCommand" date="Sat Aug 24 16:43:46 EDT 2019" timestamp="103749307" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### PromptSuite: 1.0
]]></outputString>
  </Command>
  <Command __id="6579" _type="ShellCommand" date="Sat Aug 24 16:43:47 EDT 2019" timestamp="103751005" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6580" _type="EHExceptionCommand" date="Sat Aug 24 16:43:51 EDT 2019" timestamp="103754236" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### gradingTools.comp524f19.assignment1.testcases.PledgeTestCase: 1.0
I***(TestCaseResult) ### anonymous: 1.0
]]></outputString>
  </Command>
  <Command __id="6581" _type="RunCommand" date="Sat Aug 24 16:43:52 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103755752" type="Run" />
  <Command __id="6582" _type="RunCommand" date="Sat Aug 24 16:43:52 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103755758" type="Run" />
  <Command __id="6583" _type="RunCommand" date="Sat Aug 24 16:43:52 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103755761" type="Run" />
  <Command __id="6584" _type="EHExceptionCommand" date="Sat Aug 24 16:43:52 EDT 2019" timestamp="103755804" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### gradingTools.comp524f19.assignment1.testcases.CustomCommandIncrementalPromptTestCase: 1.0
I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug/test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug/test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) 1566679432721:Received output from main: Please input an integer
I***(BasicRunningProject) 1566679432721:Processing line from main: Please input an integer
main output:Please input an integer

Found int prompt true
I***(BasicRunningProject) New input 1for main
I***(ARunnerInputStreamProcessor) Provided Input:1

I***(BasicRunningProject) 1566679432722:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566679432722:Processing line from main: Please input a decimal
main output:Please input a decimal

Found double prompt true
I***(BasicRunningProject) New input 1.4for main
I***(ARunnerInputStreamProcessor) Provided Input:1.4

I***(BasicRunningProject) 1566679432723:Received output from main: The int addition:2
I***(BasicRunningProject) 1566679432723:Processing line from main: The int addition:2
I***(BasicRunningProject) 1566679432723:Received output from main: The double addition:2.400000
I***(BasicRunningProject) 1566679432723:Processing line from main: The double addition:2.400000
I***(BasicRunningProject) 1566679432723:Received output from main: The int multiplication:1
I***(BasicRunningProject) 1566679432724:Processing line from main: The int multiplication:1
I***(BasicRunningProject) 1566679432724:Received output from main: The double multiplication:1.400000
]]></outputString>
  </Command>
  <Command __id="6585" _type="EHExceptionCommand" date="Sat Aug 24 16:43:52 EDT 2019" timestamp="103755867" type="Exception">
    <outputString><![CDATA[I***(BasicRunningProject) 1566679432724:Processing line from main: The double multiplication:1.400000
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="6586" _type="RunCommand" date="Sat Aug 24 16:43:54 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103757830" type="Run" />
  <Command __id="6587" _type="RunCommand" date="Sat Aug 24 16:43:54 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103757841" type="Run" />
  <Command __id="6588" _type="RunCommand" date="Sat Aug 24 16:43:54 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103757844" type="Run" />
  <Command __id="6589" _type="EHExceptionCommand" date="Sat Aug 24 16:43:54 EDT 2019" timestamp="103757859" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### gradingTools.comp524f19.assignment1.testcases.CustomCommandPromptTestCase: 1.0
I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug/test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug/test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
]]></outputString>
  </Command>
  <Command __id="6590" _type="EHExceptionCommand" date="Sat Aug 24 16:43:54 EDT 2019" timestamp="103757950" type="Exception">
    <outputString><![CDATA[I***(BasicRunningProject) 1566679434793:Received output from main: Please input an integer
I***(BasicRunningProject) 1566679434793:Processing line from main: Please input an integer
Premature end of file before int was input, exiting
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="6591" _type="RunCommand" date="Sat Aug 24 16:43:56 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103759876" type="Run" />
  <Command __id="6592" _type="RunCommand" date="Sat Aug 24 16:43:56 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103759885" type="Run" />
  <Command __id="6593" _type="RunCommand" date="Sat Aug 24 16:43:56 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103759891" type="Run" />
  <Command __id="6594" _type="EHExceptionCommand" date="Sat Aug 24 16:43:56 EDT 2019" timestamp="103759953" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug/test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug/test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:1
I***(BasicRunningProject) 1566679436856:Received output from main: Please input an integer
I***(BasicRunningProject) 1566679436856:Processing line from main: Please input an integer
I***(BasicRunningProject) 1566679436856:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566679436856:Processing line from main: Please input a decimal
Premature end of file before decimal was input, exiting
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="6595" _type="RunCommand" date="Sat Aug 24 16:43:58 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103761939" type="Run" />
  <Command __id="6596" _type="RunCommand" date="Sat Aug 24 16:43:58 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103761953" type="Run" />
  <Command __id="6597" _type="RunCommand" date="Sat Aug 24 16:43:58 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103761959" type="Run" />
  <Command __id="6598" _type="EHExceptionCommand" date="Sat Aug 24 16:43:58 EDT 2019" timestamp="103762024" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug/test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug/test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:1.4
I***(BasicRunningProject) 1566679438935:Received output from main: Please input an integer
I***(BasicRunningProject) 1566679438935:Processing line from main: Please input an integer
I***(BasicRunningProject) 1566679438935:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566679438935:Processing line from main: Please input a decimal
I***(BasicRunningProject) 1566679438935:Received output from main: The int addition:1
I***(BasicRunningProject) 1566679438935:Processing line from main: The int addition:1
I***(BasicRunningProject) 1566679438936:Received output from main: The double addition:1.400000
I***(BasicRunningProject) 1566679438937:Received output from main: The int multiplication:0
I***(BasicRunningProject) 1566679438937:Processing line from main: The double addition:1.400000
I***(BasicRunningProject) 1566679438937:Processing line from main: The int multiplication:0
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) 1566679438937:Received output from main: The double multiplication:0.400000
I***(BasicRunningProject) 1566679438937:Processing line from main: The double multiplication:0.400000
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="6599" _type="EHExceptionCommand" date="Sat Aug 24 16:44:00 EDT 2019" timestamp="103764074" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 0.0
I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### CustomCommandSuite: 1.0
]]></outputString>
  </Command>
  <Command __id="6600" _type="ShellCommand" date="Sat Aug 24 16:44:05 EDT 2019" timestamp="103768161" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6601" _type="RunCommand" date="Sat Aug 24 16:44:05 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103768316" type="Debug" />
  <Command __id="6602" _type="RunCommand" date="Sat Aug 24 16:44:05 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="103768316" type="Debug" />
  <Command __id="6603" _type="RunCommand" date="Sat Aug 24 16:44:05 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="103768316" type="Run" />
  <Command __id="6605" _type="MoveCaretCommand" caretOffset="109" date="Sat Aug 24 16:44:38 EDT 2019" docOffset="252" timestamp="103801740" />
  <Command __id="6606" _type="MoveCaretCommand" caretOffset="416" date="Sat Aug 24 16:45:12 EDT 2019" docOffset="559" timestamp="103835203" />
  <Command __id="6608" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 16:45:19 EDT 2019" timestamp="103842949" />
  <Command __id="6609" _type="SelectTextCommand" caretOffset="329" date="Sat Aug 24 16:45:19 EDT 2019" end="329" start="325" timestamp="103843053" />
  <Command __id="6610" _type="MoveCaretCommand" caretOffset="684" date="Sat Aug 24 16:45:23 EDT 2019" docOffset="1490" timestamp="103846120" />
  <Command __id="6612" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 16:45:24 EDT 2019" timestamp="103847572" />
  <Command __id="6613" _type="SelectTextCommand" caretOffset="2350" date="Sat Aug 24 16:45:24 EDT 2019" end="2350" start="2335" timestamp="103847680" />
  <Command __id="6614" _type="MoveCaretCommand" caretOffset="2578" date="Sat Aug 24 16:45:55 EDT 2019" docOffset="3430" timestamp="103879016" />
  <Command __id="6615" _type="MoveCaretCommand" caretOffset="2577" date="Sat Aug 24 16:46:00 EDT 2019" docOffset="3429" timestamp="103883094" />
  <Command __id="6616" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 16:46:02 EDT 2019" timestamp="103885401" />
  <Command __id="6617" _type="ShellCommand" date="Sat Aug 24 16:46:56 EDT 2019" timestamp="103939254" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6618" _type="ShellCommand" date="Sat Aug 24 16:46:59 EDT 2019" timestamp="103943014" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6619" _type="MoveCaretCommand" caretOffset="4378" date="Sat Aug 24 16:47:06 EDT 2019" docOffset="5230" timestamp="103949916" />
  <Command __id="6621" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 16:47:20 EDT 2019" timestamp="103963953" />
  <Command __id="6622" _type="SelectTextCommand" caretOffset="197" date="Sat Aug 24 16:47:20 EDT 2019" end="197" start="180" timestamp="103964062" />
  <Command __id="6623" _type="MoveCaretCommand" caretOffset="403" date="Sat Aug 24 16:47:24 EDT 2019" docOffset="576" timestamp="103967270" />
  <Command __id="6624" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.type.hierarchy" date="Sat Aug 24 16:47:27 EDT 2019" timestamp="103970363" />
  <Command __id="6626" _type="SelectTextCommand" caretOffset="278" date="Sat Aug 24 16:47:36 EDT 2019" end="278" start="260" timestamp="103979406" />
  <Command __id="6628" _type="ShellCommand" date="Sat Aug 24 16:47:49 EDT 2019" timestamp="103992385" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6629" _type="FindCommand" caseSensitive="true" date="Sat Aug 24 16:47:54 EDT 2019" forward="true" matchWord="false" offset="1279" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="103997432" wrapSearch="true">
    <searchString><![CDATA[toString]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="6630" _type="ShellCommand" date="Sat Aug 24 16:48:08 EDT 2019" timestamp="104011527" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6631" _type="MoveCaretCommand" caretOffset="12191" date="Sat Aug 24 16:48:10 EDT 2019" docOffset="13192" timestamp="104013461" />
  <Command __id="6632" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 16:48:13 EDT 2019" timestamp="104016086" />
  <Command __id="6633" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Sat Aug 24 16:48:42 EDT 2019" timestamp="104045987" />
  <Command __id="6634" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.forwardHistory" date="Sat Aug 24 16:48:46 EDT 2019" timestamp="104049414" />
  <Command __id="6635" _type="MoveCaretCommand" caretOffset="9836" date="Sat Aug 24 16:48:48 EDT 2019" docOffset="10837" timestamp="104051978" />
  <Command __id="6637" _type="InsertStringCommand" date="Sat Aug 24 16:48:49 EDT 2019" timestamp="104052920" timestamp2="104052920">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6639" _type="InsertStringCommand" date="Sat Aug 24 16:48:50 EDT 2019" repeat="11" timestamp="104053828" timestamp2="104056474">
    <data><![CDATA[public Strn]]></data>
  </Command>
  <Command __id="6661" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 16:48:53 EDT 2019" timestamp="104056918" />
  <Command __id="6663" _type="InsertStringCommand" date="Sat Aug 24 16:48:54 EDT 2019" repeat="21" timestamp="104057226" timestamp2="104062390">
    <data><![CDATA[ing getSimpleName() {]]></data>
  </Command>
  <Command __id="6704" _type="InsertStringCommand" date="Sat Aug 24 16:48:59 EDT 2019" timestamp="104062663" timestamp2="104062663">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6706" _type="InsertStringCommand" date="Sat Aug 24 16:49:03 EDT 2019" repeat="5" timestamp="104067013" timestamp2="104067674">
    <data><![CDATA[retrn]]></data>
  </Command>
  <Command __id="6716" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 16:49:05 EDT 2019" repeat="2" timestamp="104068370" timestamp2="104068539" />
  <Command __id="6720" _type="InsertStringCommand" date="Sat Aug 24 16:49:06 EDT 2019" repeat="4" timestamp="104069369" timestamp2="104069884">
    <data><![CDATA[urn ]]></data>
  </Command>
  <Command __id="6727" _type="ShellCommand" date="Sat Aug 24 16:49:54 EDT 2019" timestamp="104117966" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6728" _type="ShellCommand" date="Sat Aug 24 16:50:55 EDT 2019" timestamp="104178768" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6729" _type="SelectTextCommand" caretOffset="10192" date="Sat Aug 24 16:51:05 EDT 2019" end="10192" start="10161" timestamp="104188278" />
  <Command __id="6730" _type="CopyCommand" date="Sat Aug 24 16:51:06 EDT 2019" timestamp="104189094" />
  <Command __id="6731" _type="MoveCaretCommand" caretOffset="9881" date="Sat Aug 24 16:51:07 EDT 2019" docOffset="10882" timestamp="104190906" />
  <Command __id="6733" _type="PasteCommand" date="Sat Aug 24 16:51:08 EDT 2019" timestamp="104191585" />
  <Command __id="6735" _type="InsertStringCommand" date="Sat Aug 24 16:51:09 EDT 2019" timestamp="104192679" timestamp2="104192679">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="6736" _type="MoveCaretCommand" caretOffset="10207" date="Sat Aug 24 16:51:26 EDT 2019" docOffset="11208" timestamp="104210033" />
  <Command __id="6737" _type="SelectTextCommand" caretOffset="10246" date="Sat Aug 24 16:51:27 EDT 2019" end="10246" start="10177" timestamp="104210483" />
  <Command __id="6738" _type="PredictionCommand" date="Sat Aug 24 16:51:27 EDT 2019" prediction_type="MakingProgress" timestamp="104210490" />
  <Command __id="6739" _type="CopyCommand" date="Sat Aug 24 16:51:28 EDT 2019" timestamp="104211189" />
  <Command __id="6740" _type="MoveCaretCommand" caretOffset="10177" date="Sat Aug 24 16:51:30 EDT 2019" docOffset="11178" timestamp="104213108" />
  <Command __id="6742" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sat Aug 24 16:51:31 EDT 2019" timestamp="104214181" />
  <Command __id="6743" _type="MoveCaretCommand" caretOffset="10184" date="Sat Aug 24 16:51:32 EDT 2019" docOffset="11185" timestamp="104215645" />
  <Command __id="6744" _type="SelectTextCommand" caretOffset="10192" date="Sat Aug 24 16:51:32 EDT 2019" end="10192" start="10181" timestamp="104215839" />
  <Command __id="6745" _type="SelectTextCommand" caretOffset="10248" date="Sat Aug 24 16:51:32 EDT 2019" end="10248" start="10177" timestamp="104216068" />
  <Command __id="6746" _type="CopyCommand" date="Sat Aug 24 16:51:33 EDT 2019" timestamp="104216634" />
  <Command __id="6747" _type="MoveCaretCommand" caretOffset="10246" date="Sat Aug 24 16:51:35 EDT 2019" docOffset="11247" timestamp="104218273" />
  <Command __id="6749" _type="InsertStringCommand" date="Sat Aug 24 16:51:35 EDT 2019" timestamp="104218699" timestamp2="104218699">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6751" _type="PasteCommand" date="Sat Aug 24 16:51:36 EDT 2019" timestamp="104219465" />
  <Command __id="6752" _type="MoveCaretCommand" caretOffset="10248" date="Sat Aug 24 16:51:38 EDT 2019" docOffset="11249" timestamp="104222011" />
  <Command __id="6754" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sat Aug 24 16:51:39 EDT 2019" timestamp="104222769" />
  <Command __id="6755" _type="MoveCaretCommand" caretOffset="10315" date="Sat Aug 24 16:51:46 EDT 2019" docOffset="11316" timestamp="104229572" />
  <Command __id="6757" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sat Aug 24 16:51:47 EDT 2019" repeat="2" timestamp="104230288" timestamp2="104231529" />
  <Command __id="6760" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 16:51:49 EDT 2019" timestamp="104233075" />
  <Command __id="6761" _type="SelectTextCommand" caretOffset="10280" date="Sat Aug 24 16:51:56 EDT 2019" end="10280" start="10264" timestamp="104239815" />
  <Command __id="6763" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sat Aug 24 16:51:57 EDT 2019" timestamp="104240320" />
  <Command __id="6764" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 16:51:58 EDT 2019" timestamp="104241284" />
  <Command __id="6765" _type="MoveCaretCommand" caretOffset="9836" date="Sat Aug 24 16:53:10 EDT 2019" docOffset="10837" timestamp="104314008" />
  <Command __id="6767" _type="InsertStringCommand" date="Sat Aug 24 16:53:11 EDT 2019" timestamp="104314447" timestamp2="104314447">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6769" _type="InsertStringCommand" date="Sat Aug 24 16:53:12 EDT 2019" repeat="9" timestamp="104315307" timestamp2="104317179">
    <data><![CDATA[@Override]]></data>
  </Command>
  <Command __id="6786" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sat Aug 24 16:53:17 EDT 2019" start_end="START" timestamp="104320470" />
  <Command __id="6787" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.internal.ui.CompilationUnitEditor.ruler.actions/org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction" date="Sat Aug 24 16:53:17 EDT 2019" timestamp="104320525" />
  <Command __id="6788" _type="ShellCommand" date="Sat Aug 24 16:53:19 EDT 2019" timestamp="104322528" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6789" _type="ShellCommand" date="Sat Aug 24 16:53:19 EDT 2019" timestamp="104322786" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6790" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sat Aug 24 16:53:19 EDT 2019" start_end="END" timestamp="104322809" />
  <Command __id="6794" _type="MoveCaretCommand" caretOffset="403" date="Sat Aug 24 16:53:19 EDT 2019" docOffset="576" timestamp="104323065" />
  <Command __id="6795" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 16:53:21 EDT 2019" timestamp="104324150" />
  <Command __id="6796" _type="MoveCaretCommand" caretOffset="80" date="Sat Aug 24 16:53:28 EDT 2019" docOffset="253" timestamp="104331149" />
  <Command __id="6798" _type="SelectTextCommand" caretOffset="9880" date="Sat Aug 24 16:53:31 EDT 2019" end="9880" start="9865" timestamp="104334444" />
  <Command __id="6799" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 16:53:32 EDT 2019" timestamp="104335773" />
  <Command __id="6800" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sat Aug 24 16:53:37 EDT 2019" timestamp="104340550" />
  <Command __id="6801" _type="BreakPointCommand" date="Sat Aug 24 16:53:37 EDT 2019" lineNumber="359" timestamp="104340551" type="BreakPointAdded" />
  <Command __id="6802" _type="ShellCommand" date="Sat Aug 24 16:53:42 EDT 2019" timestamp="104345519" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6803" _type="ShellCommand" date="Sat Aug 24 16:53:42 EDT 2019" timestamp="104345545" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6804" _type="EclipseCommand" commandID="" date="Sat Aug 24 16:53:48 EDT 2019" repeat="6" timestamp="104351857" timestamp2="104352170" />
  <Command __id="6810" _type="RunCommand" date="Sat Aug 24 16:53:49 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="104352305" type="Run" />
  <Command __id="6811" _type="RunCommand" date="Sat Aug 24 16:53:49 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="104352305" type="Run" />
  <Command __id="6812" _type="RunCommand" date="Sat Aug 24 16:53:49 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104352508" type="Run" />
  <Command __id="6813" _type="RunCommand" date="Sat Aug 24 16:53:49 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="104352611" type="Run" />
  <Command __id="6814" _type="RunCommand" date="Sat Aug 24 16:53:49 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104352760" type="Run" />
  <Command __id="6815" _type="EHExceptionCommand" date="Sat Aug 24 16:53:49 EDT 2019" timestamp="104352848" type="Exception">
    <outputString><![CDATA[I***Tracer: showInfo = true
Buffer traced nessages =false
]]></outputString>
  </Command>
  <Command __id="6816" _type="RunCommand" date="Sat Aug 24 16:53:50 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104353706" type="Run" />
  <Command __id="6817" _type="RunCommand" date="Sat Aug 24 16:53:50 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104353707" type="Run" />
  <Command __id="6818" _type="RunCommand" date="Sat Aug 24 16:53:50 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104353708" type="Run" />
  <Command __id="6819" _type="RunCommand" date="Sat Aug 24 16:53:50 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104353708" type="Run" />
  <Command __id="6521" _type="FileOpenCommand" date="Sat Aug 24 16:36:50 EDT 2019" docASTNodeCount="1" docActiveCodeLength="755" docExpressionCount="0" docLength="755" projectName="comp110-grader" timestamp="103333466">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\config\Requirements.csv]]></filePath>
  </Command>
  <Command __id="6566" _type="FileOpenCommand" date="Sat Aug 24 16:43:35 EDT 2019" docASTNodeCount="2884" docActiveCodeLength="23489" docExpressionCount="1724" docLength="36996" projectName="GraderBasics" timestamp="103738658">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\execution\BasicRunningProject.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.execution;

import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.project.Project;
import grader.basics.util.TimedProcess;

import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import gradingTools.shared.testcases.utils.ALinesMatcher;
import gradingTools.shared.testcases.utils.LinesMatcher;
import util.pipe.ProcessInputListener;
import util.remote.ProcessExecer;
//import grader.config.StaticConfigurationUtils;
//import grader.sakai.project.SakaiProject;
//import grader.trace.overall_transcript.OverallTranscriptSaved;
import util.pipe.InputGenerator;
import util.trace.Tracer;

/**
 * This is a wrapper for a running project independent of the method of
 * execution. This provides support for synchronization via semaphores and
 * output manipulation.
 */
public class BasicRunningProject implements ProcessInputListener, RunningProject, Runnable {
	public static boolean echoOutput = true;
	

//	public static long RESORT_TIME = 100;
//	public static long MAX_OUTPUT_DELAY = 100;
    private long maxNotificationTime;
    private static long timeToWaitForConcurrentOutput = (long)1e10;

	private boolean hasOutput = false;
	
	protected LinkedList<AProcessOutput> pendingOutput = new LinkedList<>();
//	protected BlockingQueue<AProcessOutput> pendingOutput = new LinkedBlockingQueue<>()

	
    private Semaphore runningState = new Semaphore(1);
    protected Map<String, StringBuffer> processToErrors = new HashMap<>();
    protected Map<String, List<String>> processToErrorLines = new HashMap<>();;

    protected Map<String, StringBuffer> processToProcessedOutput = new HashMap<>();
    protected Map<String, List<String>> processToProcessedOutputLines = new HashMap<>();
    protected Map<String, LinesMatcher> processToProcessedLineMatcher;
    protected StringBuffer allProcessedOutput = new StringBuffer(5000);
    protected StringBuffer allReceivedOutputAndErrors = new StringBuffer(5000);
    protected StringBuffer allReceivedErros = new StringBuffer(5000);

    protected List<String> allProcessedOutputLines = new ArrayList(1000);
    protected List<String> allReceivedOutputAndErrorLines = new ArrayList(1000);

    
    protected Map<String, StringBuffer> processToReceivedOutput = new HashMap<>();
    protected Map<String, List<String>> processToReceivedOutputLines = new HashMap<>();
    protected Map<String, LinesMatcher> processToReceivedLineMatcher;

    // duplicates the mapping in Process Runner
    protected Map<String, RunnerInputStreamProcessor> processToIn = new HashMap<>();
    protected Map<String, TimedProcess> nameToProcess = new HashMap<>();
    protected TimedProcess currentProcess;
    protected boolean destroyed;

   

	
	protected Map<String, String> processToOutputAndErrors = new HashMap<>();

//    protected String output = ""; // why is this a string and not a string buffer?
//    protected String errorOutput = "";
//    protected String outputAndErrors = "";
    protected NotRunnableException exception;
    protected String outputFileName;
    protected StringBuffer projectOutput;
    protected Set<Thread> dependentThreads = new HashSet<>();
    protected Set<Closeable> dependentCloseables = new HashSet<>();

    protected InputGenerator outputBasedInputGenerator; // actuall all we need is an output consumer
    protected StringBuffer input = new StringBuffer();
    protected Map<String, StringBuffer> processToInput = new HashMap<>();
    protected Map<String, RunnerErrorOrOutStreamProcessor> processToOut = new HashMap<>();
    protected Map<String, RunnerErrorOrOutStreamProcessor> processToErr = new HashMap<>();
    protected List<String> processes;
    
    protected void maybeProcessProjectWrappper(Project aProject) {
//    	if (aProject != null && aProject instanceof ProjectWrapper) {
//            projectWrapper = (ProjectWrapper) aProject;
//            project = projectWrapper.getProject();
//            outputFileName = project.getOutputFileName();
//            projectOutput = project.getCurrentOutput();
////			input.append(project.getCurrentInput());
//        }
    }
    
    protected void maybeProcessTrace(String aProcess, int aProcessNumber) {
//    	 if (StaticConfigurationUtils.getTrace()) {
//             LocalGlobalTranscriptManager aTranscriptManager = new ALocalGlobalTranscriptManager();
//             processToTranscriptManager.put(aProcess, aTranscriptManager);
//             aTranscriptManager.setIndexAndLogDirectory(i, project.getStudentAssignment().getFeedbackFolder().getAbsoluteName());
//             aTranscriptManager.setProcessName(aProcess);
//         }
    }
    
    
    protected void maybeWaitForResort() throws InterruptedException {
    	if (BasicExecutionSpecificationSelector.getBasicExecutionSpecification().isWaitForResort()) {
    		Tracer.info(this, System.currentTimeMillis() + ":Waiting for output resort");
    		// should this be sleep?
    		wait(BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getResortTime());
    		
    	}
    }
    protected void resortingOutputProcessing() {
    	try {
			if (pendingOutput.isEmpty()) {
//				System.out.println("waitimng for received output" );
//	    		Tracer.info(this, "Waiting for received output");

				wait();
//				System.out.println("end wait 1");
			} else {
				Tracer.info(this, System.currentTimeMillis() + ": waiting for resort time");
				wait(BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getResortTime());
			}
			long aCurrentTime = System.nanoTime();
			Tracer.info(this, aCurrentTime + ":Finished waiting for input");
			List<AProcessOutput> copy = new LinkedList<>(pendingOutput);
			Collections.sort(pendingOutput);
			
			if (!pendingOutput.equals(copy)) {
				System.out.println("***** Input reordered");
			}

			while (!pendingOutput.isEmpty()) {
				AProcessOutput aProcessOutput = pendingOutput.peek();
				long aTime = aProcessOutput.time;
				if (aCurrentTime - aTime > timeToWaitForConcurrentOutput) {
					if (hasOutput && aTime < maxNotificationTime) {
						long diff = (maxNotificationTime - aTime);
						timeToWaitForConcurrentOutput = Math.max(diff, timeToWaitForConcurrentOutput);
						System.err.println("+++" + diff + " " + timeToWaitForConcurrentOutput);
					}
					hasOutput = true;
					maxNotificationTime = Math.max(maxNotificationTime, aTime);
					pendingOutput.removeFirst();
					if (isEchoOutput())
						Tracer.info(this, System.currentTimeMillis() + ":Processing line from " + aProcessOutput.process + ": " + aProcessOutput.output);
					doAppendProcessProcessedOutput(aProcessOutput.process, aProcessOutput.output + "\n");
				} else {
//					System.out.printf("***** Times:\nCur  %15d\nPend %15d\nDiff %15d\n", aCurrentTime, aTime, aCurrentTime - aTime);
//					System.out.println("***** Pending: \n" + pendingOutput);
					break;
				}
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
    }
    protected void normalOutputProcessing() {
    	try {
			while (pendingOutput.isEmpty()) {
//				System.out.println("waitimng for received output" );
//	    		Tracer.info(this, "Waiting for received output");

				wait();
//				System.out.println("end wait 1");
			}
			

			while (!pendingOutput.isEmpty()) {
				AProcessOutput aProcessOutput = pendingOutput.removeFirst();
				
					if (isEchoOutput())
						Tracer.info(this, System.currentTimeMillis() + ":Processing line from " + aProcessOutput.process + ": " + aProcessOutput.output);
					doAppendProcessProcessedOutput(aProcessOutput.process, aProcessOutput.output + "\n");
				
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
    }
    
    @Override
    public void run() {
    	while (true) {
    		synchronized(this) {
    			// not caching the resorting as we may want to change it dynamically
    	    	if (BasicExecutionSpecificationSelector.getBasicExecutionSpecification().isWaitForResort()) {
    	    		resortingOutputProcessing();
    	    	} else {
    	    		normalOutputProcessing();
    	    	}

//	    		try {
//	    			if (pendingOutput.isEmpty()) {
////	    				System.out.println("waitimng for received output" );
//	    	    		Tracer.info(this, "Waiting for received output");
//
//	    				wait();
////	    				System.out.println("end wait 1");
//	    			} else {
////	    				System.out.println(Thread.currentThread() + " Waiting for resort time");
////	    				wait(RESORT_TIME);
//	    				maybeWaitForResort();
////	    				wait((long)Math.ceil(maxDiff/1e6));
////	    				System.out.println("end wait 2");
//	    			}
//					long aCurrentTime = System.nanoTime();
//					Tracer.info(this, aCurrentTime + ":Finished waiting for input");
//					List<AProcessOutput> copy = new LinkedList<>(pendingOutput);
//					Collections.sort(pendingOutput);
//					
//					if (!pendingOutput.equals(copy)) {
//						System.out.println("***** Input reordered");
//					}
//	
//					while (!pendingOutput.isEmpty()) {
//						AProcessOutput aProcessOutput = pendingOutput.peek();
//						long aTime = aProcessOutput.time;
//						if (aCurrentTime - aTime > timeToWaitForConcurrentOutput) {
//							if (hasOutput && aTime < maxNotificationTime) {
//								long diff = (maxNotificationTime - aTime);
//								timeToWaitForConcurrentOutput = Math.max(diff, timeToWaitForConcurrentOutput);
//								System.err.println("+++" + diff + " " + timeToWaitForConcurrentOutput);
//							}
//							hasOutput = true;
//							maxNotificationTime = Math.max(maxNotificationTime, aTime);
//							pendingOutput.removeFirst();
//							if (isEchoOutput())
//								Tracer.info(this, "Processing line from " + aProcessOutput.process + ": " + aProcessOutput.output);
//							doAppendProcessProcessedOutput(aProcessOutput.process, aProcessOutput.output + "\n");
//						} else {
////							System.out.printf("***** Times:\nCur  %15d\nPend %15d\nDiff %15d\n", aCurrentTime, aTime, aCurrentTime - aTime);
////							System.out.println("***** Pending: \n" + pendingOutput);
//							break;
//						}
//					}
//				} catch (InterruptedException e) {
//					e.printStackTrace();
//				}
    		}
    	}
    }

    public BasicRunningProject(Project aProject, InputGenerator anOutputBasedInputGenerator, List<String> aProcesses, Map<String, String> aProcessToInput) {
        exception = null;
//        output = null;
        processes = aProcesses;
        maybeProcessProjectWrappper(aProject);

        outputBasedInputGenerator = anOutputBasedInputGenerator;
        if (outputBasedInputGenerator != null) {
            outputBasedInputGenerator.addProcessInputListener(this); // maybe this should be in another class
        }
        if (aProcessToInput != null) {
            for (String aProcess : aProcessToInput.keySet()) {
                String anInput = aProcessToInput.get(aProcess);
                // if (anInput != null)
                processToInput.put(aProcess, new StringBuffer(anInput));
//				processToOutput.put(aProcess, new StringBuffer());
                input.append(anInput);
            }
        }
        if (aProcesses != null) {
            for (int i = 0; i < aProcesses.size(); i++) {
                String aProcess = aProcesses.get(i);
//                if (StaticConfigurationUtils.getTrace()) {
//                    LocalGlobalTranscriptManager aTranscriptManager = new ALocalGlobalTranscriptManager();
//                    processToTranscriptManager.put(aProcess, aTranscriptManager);
//                    aTranscriptManager.setIndexAndLogDirectory(i, project.getStudentAssignment().getFeedbackFolder().getAbsoluteName());
//                    aTranscriptManager.setProcessName(aProcess);
//                }
                maybeProcessTrace(aProcess, i);
                if (outputBasedInputGenerator != null) {
                    outputBasedInputGenerator.addProcessName(aProcess);

                }
            }
            if (outputBasedInputGenerator != null) {
                outputBasedInputGenerator.processNamesAdded();
            }

        }
        maxNotificationTime = System.nanoTime();
        Thread aThread = new Thread(this);
        aThread.setName("Output Sorter");
        aThread.start();
    }

    public BasicRunningProject(Project aProject, InputGenerator anOutputBasedInputGenerator, String anInput) {
        this(aProject, anOutputBasedInputGenerator, null, (Map) null);
//		exception = null;
//		output = null;
//		if (aProject != null && aProject instanceof ProjectWrapper) {
//			projectWrapper = (ProjectWrapper) aProject;
//			project = projectWrapper.getProject();
//			outputFileName = project.getOutputFileName();
//			projectOutput = project.getCurrentOutput();
////			input.append(project.getCurrentInput());
//		}
//		outputBasedInputGeneraor = anOutputBasedInputGenerator;
//		if (outputBasedInputGeneraor != null) {
//			outputBasedInputGeneraor.addProcessInputListener(this); // maybe this should be in another class

        input.setLength(0);
        input.append(anInput);

    }

    @Override
	public void start() throws InterruptedException {
        runningState.acquire();
    }

    @Override
	public void end() {
        runningState.release();
    }
    /**
     * The difference between appendProcessOutput and this method is that this one
     * has a \n in it
     */
    @Override
	public synchronized void  appendCumulativeOutput(String newVal) {
    	allReceivedOutputAndErrors.append(newVal);
    	
//    	allReceivedOutputAndErrorLines.add(newVal);
//        if (this.output == null && newVal != null) {
//            this.output = "";
//        }
//        this.output += newVal;
//        Tracer.info(this, System.currentTimeMillis() + ": Appended output:" + newVal);
//        System.out.println("Output:" + output);
//
//
//        outputAndErrors += newVal;

    }

    @Override
	public Map<String, StringBuffer> getProcessOutput() {
        return processToProcessedOutput;
    }
    
    @Override
	public Map<String, List<String>> getProcessOutputLines() {
		
        return processToProcessedOutputLines;
    }
    public static final String ALL_PROCESSES = "All";
    @Override
	public Map<String, LinesMatcher> getProcessLineMatcher() {
    	if (processToProcessedLineMatcher == null) {
//    		List<String> anAllLines = new ArrayList();
    		processToProcessedLineMatcher = new HashMap<>();
    		Set<String> aKeys = processToProcessedOutputLines.keySet();
    		if (aKeys.size() == 0) {
//    			String[] anOutputLines = output.split("\n");
    			String[] anOutputLines = new String[allProcessedOutputLines.size()];
//    			String[] anOutputLines = allProcessedOutputLines.toArray();
    			anOutputLines = allProcessedOutputLines.toArray(anOutputLines);
    			LinesMatcher aLineMatcher =  new ALinesMatcher(anOutputLines);
    			processToProcessedLineMatcher.put("main", aLineMatcher);
    			return processToProcessedLineMatcher;
    		}
    		for (String aKey:aKeys) {
    			System.out.println("line matcher for key:" + aKey);
    			List<String> aList = processToProcessedOutputLines.get(aKey);
//    			anAllLines.addAll(aList);
    			String[] anArray = new String[aList.size()];
    			anArray = aList.toArray(anArray);
    			LinesMatcher aLineMatcher = new ALinesMatcher(anArray);
    			processToProcessedLineMatcher.put(aKey, aLineMatcher);
    		}
    		String[] anAllArray = new String[allProcessedOutputLines.size()];
    		anAllArray = allProcessedOutputLines.toArray(anAllArray);

			LinesMatcher anAllLineMatcher = new ALinesMatcher(anAllArray);

    		processToProcessedLineMatcher.put(ALL_PROCESSES, anAllLineMatcher);
    	}		
        return processToProcessedLineMatcher;
    }
    @Override
   	public Map<String, List<String>> getProcessErrorLines() {
   		
           return processToErrorLines;
       }
    
    @Override
   	public Map<String, StringBuffer> getProcessError() {
   		
           return processToErrors;
       }

	protected synchronized void doAppendProcessProcessedOutput(String aProcess, String newVal) {
    	// delete me
//    	System.out.println("+++++ " + Thread.currentThread().getId() + " " + java.lang.management.ManagementFactory.getRuntimeMXBean().getName() + " - " + aProcess + " - " + newVal);
    	
//    	System.out.println("=== BEGIN STACK DUMP ===");
//    	for(Entry<Thread, StackTraceElement[]> entry : Thread.getAllStackTraces().entrySet()) {
//    		System.out.println("*** " + entry.getKey() + " ***");
//    		for(StackTraceElement element : entry.getValue()) {
//    			System.out.println("  " + element);
//    		}
//    	}
    	//		if (aProcess == null) { // it will never be null
//			return;
//		}
//    	System.out.println ("New output " + newVal + " aprocess " + aProcess);
        // wonder why did not have this before
        if (newVal == null) {
            return;
        }
//        System.out.println(("Current thread:" + Thread.currentThread()));
        List<String> aProcessOutputLines = processToProcessedOutputLines.get(aProcess);
        StringBuffer aProcessOutput = processToProcessedOutput.get(aProcess);
//        System.out.println(" process output of " + aProcess + " aProcessOutput " + aProcessOutput);
//		boolean newProcess = processToTranscriptManager.get(aProcess) == null;
//		if (processOutput == null && newVal != null) {
        if (aProcessOutput == null) {
            aProcessOutput = new StringBuffer();
            aProcessOutputLines = new ArrayList();
//            System.out.println(" process output of " + aProcess + " aProcessOutput " + aProcessOutput);

            processToProcessedOutput.put(aProcess, aProcessOutput);
            processToProcessedOutputLines.put(aProcess, aProcessOutputLines);
//            System.out.println(" process output lines of " + aProcess + " aProcessOutputLines " + aProcessOutputLines);


        }
        String anAnnotatedLine = aProcess + ":" + newVal;
        allProcessedOutput.append(anAnnotatedLine);
        aProcessOutput.append(newVal);
//        System.out.println(" new process output  " + aProcessOutput);

        aProcessOutputLines.add(newVal);
        allProcessedOutputLines.add(anAnnotatedLine);
//        System.out.println(" new process output lines " + aProcessOutputLines);

        
//		processToOutput.put(aProcess, aProcessOutput);
        if (outputBasedInputGenerator != null) {
        	
            outputBasedInputGenerator.newOutputLine(aProcess, newVal);
//			if (newProcess) {
//				outputBasedInputGenerator.addProcessName(aProcess);
//			}
        }

//		if (newProcess) {
//			LocalGlobalTranscriptManager aTranscriptManager = new ALocalGlobalTranscriptManager();
//			processToTranscriptManager.put(aProcess, aTranscriptManager );
//			aTranscriptManager.setProcessName(aProcess);
//			
//		}
        appendErrorAndOutput(aProcess, newVal);

    }
	
	public static final String PROCESS_SEPARARTOR = "#@!";
	public static final Pattern timePattern = Pattern.compile("@([0-9]+) ");
	
    @Override
    /**
     * A newVal does not have a \n in it. All processedoutput is resorted
     */
	public void appendProcessOutput(String aProcess, String newVal) {
    	String aProcessName = aProcess == null?BasicProcessRunner.MAIN_ENTRY_POINT:aProcess;
    	if (BasicRunningProject.isEchoOutput())
    		Tracer.info(this, System.currentTimeMillis() + ":Received output from " + aProcessName + ": " + newVal);
    	allReceivedOutputAndErrorLines.add(newVal); // we do not resort errors, so mix them with received output

    	
    	//    	doAppendProcessOutput(aProcess, newVal);
    	Matcher timeMatcher = timePattern.matcher(newVal);
//    	System.out.println("+++** " + newVal);
//		int anAtIndex = newVal.indexOf('@');
		long aTime = System.nanoTime();
    	if (timeMatcher.find()) {
    		aTime = Long.parseLong(timeMatcher.group(1));
//    		System.out.println("+++** " + aTime);
    	}
//		if (anAtIndex != -1) {
//			int aSpaceIndex = newVal.indexOf(' ', anAtIndex);
//			if (aSpaceIndex > 0) {
//				String aTimeString = newVal.substring(anAtIndex + 1, aSpaceIndex);
//				aTime = Long.parseLong(aTimeString);
//			}
//		}
    	synchronized(this) {
//    		System.out.println("Notifying processor");
//			pendingOutput.addLast(new AProcessOutput(aTime, aProcess, newVal));
			pendingOutput.addLast(new AProcessOutput(aTime, aProcessName, newVal));

			notify();
	    }

	}

    @Override
    /**
     * we are not resorting errors!
     */
	public void appendErrorOutput(String aProcess, String newVal) {
        StringBuffer processErrors = processToErrors.get(aProcess);
        List<String> processErrorLines = processToErrorLines.get(aProcess);
        if (processErrors == null ) {
//        if (processErrors == null && newVal != null) {
            processErrors = new StringBuffer();
            processErrorLines = new ArrayList();
            processToErrors.put(aProcess, processErrors);
            processToErrorLines.put(aProcess, processErrorLines);
        }
        processErrors.append(newVal);
        processErrorLines.add(newVal);

        processToErrors.put(aProcess, processErrors);
        appendErrorAndOutput(aProcess, newVal);
    }

    @Override
	public void appendErrorAndOutput(String aProcess, String newVal) {
        String processOutputAndErrors = processToOutputAndErrors.get(aProcess);
        processOutputAndErrors += newVal;

        processToOutputAndErrors.put(aProcess, processOutputAndErrors);

    }

    @Override
	public void setOutput(String output) {
//        this.output = output;
    	allProcessedOutput.setLength(0);
    	allProcessedOutput.append(output);
    }

    @Override
	public String getOutput() {
//        return output;
    	return allProcessedOutput.toString();
    }

    @Override
	public String getOutputAndErrors() {
//        return outputAndErrors;
    	return allReceivedOutputAndErrors.toString();
    }

    @Override
	public void appendErrorOutput(String anErrorOutput) {
    	allReceivedOutputAndErrors.append(anErrorOutput);
    	allReceivedErros.append(anErrorOutput);
//        if (this.errorOutput == null && anErrorOutput != null) {
//            this.errorOutput = "";
//        }
//        this.errorOutput += anErrorOutput;
//        outputAndErrors += anErrorOutput;

    }

    @Override
	public void setErrorOutput(String errorOutput) {
//        this.errorOutput = errorOutput;
    	allReceivedErros.setLength(0);
    	allReceivedErros.append(errorOutput);
    }

    @Override
	public String getErrorOutput() {
//        return errorOutput;
    	return allReceivedOutputAndErrors.toString();
    }

    @Override
	public void error() {
        this.exception = new NotRunnableException();
        exception.announce();
    }

    public static String featureHeader(String aFeatureName) {
        return FEATURE_HEADER_PREFIX + aFeatureName + FEATURE_HEADER_SUFFIX;
    }

    public static String extractFeatureTranscript(String aFeatureName, String allOutput) {
    	if (aFeatureName.isEmpty()) {
    		return "";
    	}
        int startIndex = allOutput.indexOf(featureHeader(aFeatureName));
        if (startIndex == -1) {
            return "";
        }
        int endIndex;
        int prevIndex = startIndex;
        int nextIndex;
        while (true) {
            nextIndex = allOutput.indexOf(aFeatureName, prevIndex + 1);
            if (nextIndex < 0) {
                endIndex = allOutput.indexOf(FEATURE_HEADER_PREFIX, prevIndex + 1);
                if (endIndex == -1) {
                    endIndex = allOutput.length();
                }
                break;
            } else {
                prevIndex = nextIndex;
            }

        }
        return allOutput.substring(startIndex, endIndex);
    }

    protected StringBuffer transcript = new StringBuffer(); // reusing the buffer
    

   @Override
public void appendCumulativeOutput() {
//        if (projectOutput == null) {
//            return;
//        }
//        String transcript = createFeatureTranscript();
//        projectOutput.append(transcript);
//        if (outputFileName == null) {
//            return;
//        }
//        appendToTranscriptFile(project, transcript);
////		try {
////			FileWriter fileWriter = new FileWriter(outputFileName, true);
////			fileWriter.append(transcript);
////			OverallTranscriptSaved.newCase(null, null, project,  outputFileName, transcript, this);
//////			if (project.getCurrentGradingFeature() != null)
//////			FeatureTranscriptSaved.newCase(null, null, project,  project.getCurrentGradingFeature()., outputFileName, transcript, this);;
////			fileWriter.close();
////		} catch (IOException e) {
////			// TODO Auto-generated catch block
////			e.printStackTrace();
////		}
//
    }
    
    protected void maybeSetCurrentProjectIO() {
//    	 if (project != null) {
//             project.setCurrentOutput(new StringBuffer(output));
//             project.setCurrentInput(input.toString());
//         }
    }
    
    public static final int PROCESS_TEAM_OUTPUT_OUTPUT_SLEEP_TIME = 5000;
    public static final int PROCESS_OUTPUT_SLEEP_TIME = 2000;

//    protected static Integer processOutputSleepTime = PROCESS_OUTPUT_SLEEP_TIME;
    public static Integer getProcessOutputSleepTime() {
    	return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getProcessOutputSleepTime();
//		return processOutputSleepTime;
	}

	public static void setProcessOutputSleepTime(Integer processOutputSleepTime) {
//		BasicRunningProject.processOutputSleepTime = processOutputSleepTime;
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderProcessOutputWaitTime(processOutputSleepTime);

	}

//	protected static Integer processTeamOutputSleepTime = PROCESS_TEAM_OUTPUT_OUTPUT_SLEEP_TIME;

    
	public static Integer getProcessTeamOutputSleepTime() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getProcessTeamOutputSleepTime();
//		return processTeamOutputSleepTime;
	}

	public static void setProcessTeamOutputSleepTime(Integer newVal) {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderProcessTeamOutputWaitTime(newVal);
//		BasicRunningProject.processTeamOutputSleepTime = processTeamOutputSleepTime;
	}
	
	public static int getOutputSleepTime() {
		List<String> aProcessTeams = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getProcessTeams();
		if (aProcessTeams != null && !aProcessTeams.isEmpty()) {
			return getProcessTeamOutputSleepTime() ;
		};
		return getProcessOutputSleepTime();
	}

	@Override
	public String await() throws NotRunnableException {
        if (exception != null) {
            throw exception;
        }
        try {
            runningState.acquire();
        } catch (InterruptedException e) {
            throw new NotRunnableException();
        }
        appendCumulativeOutput();
        maybeSetCurrentProjectIO();
        try {
        	int anOutputSleepTime = getOutputSleepTime();
            Tracer.info(this, Thread.currentThread() + " sleeping for ms:" + anOutputSleepTime + " waiting for pending output from threads ");

			Thread.sleep(getOutputSleepTime()); // wait for output to be received
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
//        if (project != null) {
//            project.setCurrentOutput(new StringBuffer(output));
//            project.setCurrentInput(input.toString());
//        }
//        System.out.println("returning output:" + output);
//        return output;
        return allProcessedOutput.toString();
    }
    
    protected void maybeAppendToProjectInput(String anInput) {
//        project.appendCurrentInput(anInput);// this should go, 

    }
    
    protected void maybeTraceInput (String anInput, String aProcessName) {
//    	if (Tracer.isInfo(anInput)) {
//            return;
//        }
//        if (!StaticConfigurationUtils.getTrace()) {
//            return;
//        }
//
//        ConsoleInput consoleInput = ConsoleInput.newCase(anInput, this);
//        String infoString = Tracer.toInfo(consoleInput, consoleInput.getMessage());
//        if (infoString != null) {
//            appendProcessOutput(aProcessName, infoString);
//        }
    }

    
	@Override
    public void newInputLine(String aProcessName, String anInput) {
    	Tracer.info(this, "New input " + anInput + "for " + aProcessName );
    	if (aProcessName != null && processToIn.get(aProcessName) != null) {
        processToIn.get(aProcessName).newInput(anInput + "\n");
    	} else {
    		System.err.println("process name = " + aProcessName + " processToIn " + processToIn);
    	}
    	maybeAppendToProjectInput(anInput);
//        project.appendCurrentInput(anInput);// this should go, 
        if (aProcessName != null && processToInput != null) {
            StringBuffer aProcessStringBuffer = processToInput.get(aProcessName);
            if (aProcessStringBuffer != null) {
                aProcessStringBuffer.append(anInput);
            }
        }
//        input.append(anInput);
       input.append(anInput + "\n"); // need to put new line to it
       maybeTraceInput(anInput, aProcessName);
//        // why would this be info ever?
//        if (Tracer.isInfo(anInput)) {
//            return;
//        }
//        if (!StaticConfigurationUtils.getTrace()) {
//            return;
//        }
//
//        ConsoleInput consoleInput = ConsoleInput.newCase(anInput, this);
//        String infoString = Tracer.toInfo(consoleInput, consoleInput.getMessage());
//        if (infoString != null) {
//            appendProcessOutput(aProcessName, infoString);
//        }

    }

    @Override
	public void terminateTeam() {
        Set<String> aProcesses = nameToProcess.keySet();
        for (String aProcess : aProcesses) {
            terminateProcess(aProcess);
//			try {
//				processToOut.get(aProcess).getSemaphore().acquire();
//			} catch (InterruptedException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			try {
//				processToErr.get(aProcess).getSemaphore().acquire();
//			} catch (InterruptedException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
//			TimedProcess timedProcess = nameToProcess.get(aProcess);
//			timedProcess.getProcess().destroy();
        }
        terminateRunner();
		// try {
        // // Wait for the output to finish
        // outputSemaphore.acquire();
        // errorSemaphore.acquire();
        // runner.end();
        // } catch (Exception e) {
        // e.printStackTrace();
        // Tracer.error(e.getMessage());
        // runner.error();
        // runner.end();
        // }
    }

    void terminateRunner() {
        try {
            // Wait for the output to finish
//			acquireIOLocks();
            releaseTeamLocks();
        } catch (Exception e) {
            e.printStackTrace();
            Tracer.error(e.getMessage());
            error();
            releaseTeamLocks();
//			runner.end();
        }
    }

    void releaseTeamLocks() {
//		try {
//			outputSemaphore.release(); // share once for all processes
//			errorSemaphore.release();
//		Set<String> aProcesses = processToOut.keySet();
//		for (String aProcess:aProcesses) {
//			processToOut.get(aProcess).getSemaphore().release();;
//			processToErr.get(aProcess).getSemaphore().release();
//			
//		}
        end();
//		} catch (InterruptedException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
    }

	@Override
    public void inputTerminated(String aProcessName) {
//		Tracer.info(this, "Terminating input");
        terminateProcess(aProcessName);
//		processToIn.get(aProcessName).terminateInput();

    }

    @Override
	public void terminateProcess(String aProcess) {
        Tracer.info(this, System.currentTimeMillis() +":Terminating:" + aProcess);
//
        try {
            processToOut.get(aProcess).getSemaphore().acquire(); // this is deadlocking, need to debug
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        try {
            processToErr.get(aProcess).getSemaphore().acquire();
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        TimedProcess timedProcess = nameToProcess.get(aProcess);
        timedProcess.getProcess().destroy();
    }

    @Override
	public RunnerInputStreamProcessor getProcessIn(String aProcessName) {
        return processToIn.get(aProcessName);
    }

    // the mapping could be passed to this object rather than the individual processIn's

    @Override
	public void setProcessIn(String aProcess, RunnerInputStreamProcessor processIn) {
        processToIn.put(aProcess, processIn);
    }

    @Override
	public RunnerErrorOrOutStreamProcessor getProcessOut(String aProcessName) {
        return processToOut.get(aProcessName);
    }
    
    

    // the mapping could be passed to this object rather than the individual processIn's

    @Override
	public void setProcessOut(String aProcess, RunnerErrorOrOutStreamProcessor newVal) {
        processToOut.put(aProcess, newVal);
    }

    @Override
	public RunnerErrorOrOutStreamProcessor getProcessErr(String aProcessName) {
        return processToErr.get(aProcessName);
    }

    // the mapping could be passed to this object rather than the individual processIn's

    @Override
	public void setProcessErr(String aProcess, RunnerErrorOrOutStreamProcessor newVal) {
        processToErr.put(aProcess, newVal);
    }

    @Override
	public TimedProcess getProcess(String aProcessName) {
        return nameToProcess.get(aProcessName);
    }

    @Override
	public void setProcess(String aProcessName, TimedProcess aTimedProcess) {
        nameToProcess.put(aProcessName, aTimedProcess);
    }

    @Override
	public boolean isDestroyed() {
		return destroyed;
	}

	@Override
	public void setDestroyed(boolean destroyed) {
		this.destroyed = destroyed;
	}
	
	@Override
	public void addDependentThread(Thread aThread) {
		dependentThreads.add(aThread);
	}
	
	@Override
	public void addDependentCloseable(Closeable aCloseable) {
		dependentCloseables.add(aCloseable);
	}

    @Override
	public void destroy() {
    	setDestroyed(true);
    	currentProcess.destroy();
    	for (Thread dependentThread:dependentThreads) {
    		dependentThread.interrupt();
    	}
    	for (Closeable closeable:dependentCloseables) {
    		try {
				closeable.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    	end();
    }
    @Override
	public TimedProcess getCurrentTimedProcess() {
		return currentProcess;
	}

	@Override
	public void setCurrentTimeProcess(TimedProcess currentProcess) {
		this.currentProcess = currentProcess;
	}


	/**
	 * 
	 * @return time in nanoseconds
	 */
    public static long getTimeToWaitForConcurrentOutput() {
		return timeToWaitForConcurrentOutput;
	}

    /**
     * 
     * @param timeToWaitForConcurrentOutput time in nanoseconds
     */
	public static void setTimeToWaitForConcurrentOutput(long timeToWaitForConcurrentOutput) {
		BasicRunningProject.timeToWaitForConcurrentOutput = timeToWaitForConcurrentOutput;
	}
	public static boolean isEchoOutput() {
		return echoOutput;
	}

	public static void setEchoOutput(boolean echoOutput) {
		BasicRunningProject.echoOutput = echoOutput;
	}
}
]]></snapshot>
  </Command>
  <Command __id="6604" _type="FileOpenCommand" date="Sat Aug 24 16:44:38 EDT 2019" docASTNodeCount="69" docActiveCodeLength="581" docExpressionCount="49" docLength="581" projectName="PL_Java" timestamp="103801526">
    <filePath><![CDATA[D:\dewan_backup\Java\PLTeaching\PL_Java\src\tests\RunCTest.java]]></filePath>
    <snapshot><![CDATA[package tests;

import grader.basics.config.BasicExecutionSpecificationSelector;
import gradingTools.comp524f19.assignment1.Assignment1Suite;
import trace.grader.basics.GraderBasicsTraceUtility;
import util.trace.Tracer;

public class RunCTest {
	public static void main (String[] args) {
		Tracer.showInfo(true);
		GraderBasicsTraceUtility.setBufferTracedMessages(false);

		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().
		setStudentGradableProjectLocation("D:\\dewan_backup\\Java\\eclipse\\test-c");
		Assignment1Suite.main(args);
	}

}
]]></snapshot>
  </Command>
  <Command __id="6607" _type="FileOpenCommand" date="Sat Aug 24 16:45:19 EDT 2019" docASTNodeCount="199" docActiveCodeLength="1406" docExpressionCount="154" docLength="1749" projectName="Comp524LocalChecks" timestamp="103842814">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp524LocalChecks\src\gradingTools\comp524f19\assignment1\Assignment1Suite.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.comp524f19.assignment1;

import java.util.Arrays;
import java.util.List;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;

import grader.basics.config.BasicStaticConfigurationUtils;
import grader.basics.junit.BasicJUnitUtils;
import grader.basics.project.BasicProjectIntrospection;
import gradingTools.comp524f19.assignment1.testcases.CustomCommandIncrementalPromptTestCase;
import gradingTools.comp524f19.assignment1.testcases.CustomCommandPromptTestCase;
import gradingTools.comp524f19.assignment1.testcases.IncrementalInputPromptTestCase;
import gradingTools.comp524f19.assignment1.testcases.PledgeTestCase;
import gradingTools.comp524f19.assignment1.testcases.PromptTestCase;
import gradingTools.comp524f19.assignment1.testcases.ProperHeaderTestCase;
import util.annotations.MaxValue;
import util.tags.DistributedTags;


@RunWith(Suite.class)
@Suite.SuiteClasses({
	PromptSuite.class,
	CustomCommandSuite.class,
//	CustomCommandIncrementalPromptTestCase.class,
	PledgeTestCase.class
})
	

@MaxValue(50)
public class Assignment1Suite {

	public static void main (String[] args) {
		try {
//			setProcessTimeOut(25);
//			BasicStaticConfigurationUtils.setUseProjectConfiguration(true);
//			BasicStaticConfigurationUtils.setModule("Comp524");
//			BasicStaticConfigurationUtils.setProblem("Assignment1");
//			BasicStaticConfigurationUtils.setModuleProblemAndTest(Assignment1Suite.class);

			BasicJUnitUtils.interactiveTest(Assignment1Suite.class);


		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	static {
		BasicProjectIntrospection.setCheckAllSpecifiedTags(true);
		BasicStaticConfigurationUtils.setUseProjectConfiguration(true);



	}
}
]]></snapshot>
  </Command>
  <Command __id="6611" _type="FileOpenCommand" date="Sat Aug 24 16:45:24 EDT 2019" docASTNodeCount="1690" docActiveCodeLength="11475" docExpressionCount="1011" docLength="16458" projectName="GraderBasics" timestamp="103847386">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\BasicJUnitUtils.java]]></filePath>
  </Command>
  <Command __id="6620" _type="FileOpenCommand" date="Sat Aug 24 16:47:20 EDT 2019" docASTNodeCount="342" docActiveCodeLength="2265" docExpressionCount="154" docLength="2349" projectName="GraderBasics" timestamp="103963858">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\GradableJUnitTest.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.junit;

import java.beans.PropertyChangeListener;
import java.io.Serializable;
import java.util.List;
import java.util.Set;

import grader.basics.testcase.JUnitTestCase;
import util.models.PropertyListenerRegisterer;

/**
 * An instance of this is created automatically from a JUnit test case
 *
 */
public interface GradableJUnitTest extends PropertyListenerRegisterer, Serializable  {
	public static final String TEST_RUN_STARTED = "TestRunStarted";
	public static final String TEST_RUN_FINISHED = "TestRunEnded";
	public void init() ;
	public Class getJUnitClass() ;
	
	public void setDefaultScore(int aDefaultScore);
	
	public int getDefaultScore() ;
	
	public void setMaxScore (Class aJUnitClass) ;
	public void setMaxScore (double aMaxScore);
	public void setIsRestriction (Class aJUnitClass) ;
	public void setIsExtra (Class aJUnitClass) ;
	
	public void setExplanation (Class aJUnitClass) ;

	public void setGroup (Class aJUnitClass) ;
	
	public void setJUnitClass(Class aJUnitClass) ;
	public boolean isRestriction() ;
	public boolean isExtra();
	public Double getMaxScore() ;
	public String getExplanation() ;
	String getGroup();
	public void setGroup(String newVal);
	void setRestriction(boolean newVal);
	void setExtra(boolean newVal);
	void setExplanation(String newVal);
	TestCaseResult test();
	String getMessage();
	String getStatus();
	int numExecutions();
	void addPropertyChangeListenerRecursive(PropertyChangeListener arg0);
	double getFractionComplete();
	List<Double> getPercentages();
	List<String> getMessages();
	List<TestCaseResult> getTestCaseResults();
	double getUnroundedScore();
	String getText();
	double getComputedMaxScore();
	int numLeafNodeDescendents();
	int numInternalNodeDescendents();
	Set<Class> getLeafClasses();
	Set<Class> getPassClasses();
	Set<Class> getPartialPassClasses();
	Set<Class> getFailClasses();

	Set<Class> getUntestedClasses();
	public static double round(double aDouble) {
		return (double) Math.round(aDouble * 10)/10.0;
	}
	double getDisplayedScore();
	JUnitTestCase getJUnitTestCase();
	boolean isDefinesMaxScore();
	void setDefinesMaxScore(boolean definesMaxScore);
	void fillLeafNodeDescendents(List<GradableJUnitTest> retVal);
	public MaxScoreAssignmentResult assignMaxScores();



}
]]></snapshot>
  </Command>
  <Command __id="6625" _type="FileOpenCommand" date="Sat Aug 24 16:47:36 EDT 2019" docASTNodeCount="1963" docActiveCodeLength="13508" docExpressionCount="1220" docLength="16949" projectName="GraderBasics" timestamp="103979220">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\AGradableJUnitTest.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.junit;

import grader.basics.config.BasicStaticConfigurationUtils;
import grader.basics.project.NotGradableException;
import grader.basics.testcase.JUnitTestCase;

import java.awt.Color;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.runner.Runner;
import org.junit.runner.notification.Failure;
import org.junit.runner.notification.RunNotifier;
import org.junit.runners.BlockJUnit4ClassRunner;
import org.junit.runners.model.InitializationError;

import util.annotations.Explanation;
import util.annotations.Group;
import util.annotations.IsExtra;
import util.annotations.IsRestriction;
import util.annotations.MaxValue;
import util.annotations.Position;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.trace.Tracer;
import bus.uigen.attributes.AttributeNames;
import bus.uigen.introspect.Attribute;
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
/**
 * This is the object displayed in the LocalChecks UI as a  (leaf-level?) tree node.
 *
 */
public class AGradableJUnitTest implements GradableJUnitTest{
	public static final Color UNTESTED_COLOR = Color.BLACK;
	public static final Color ALL_FAIL_COLOR = Color.RED;
	public static final Color MOSTLY_FAIL_COLOR = Color.PINK;
	public static final Color MOSTLY_PASS_COLOR = Color.ORANGE;
	public static final Color ALL_PASS_COLOR = Color.GREEN;
	static int DEFAULT_SCORE = 0;	
	int defaultScore = DEFAULT_SCORE;
	Class jUnitClass;
	Color color = UNTESTED_COLOR;
	boolean isExtra;
	

	boolean definesMaxScore = false;
//	boolean writeToConsole;
//	boolean writeToFile;	
//	boolean writeToServer;
	boolean isRestriction;
	Double maxScore;
	Double computedMaxScore;
	Double score = 0.0001;
	String explanation;
	String group = "";
	Set<Class> leafClasses;
	GradableJUnitSuite topLevelSuite;
	RunNotifier runNotifier = new RunNotifier();
//	RunNotifier runNotifier = RunNotifierFactory.getRunNotifier();
	GradableJUnitSuite parentSuite;

	

	AJUnitTestResult runListener = new AJUnitTestResult();
	JUnitTestCase jUnitTest;
	int numTests = 0;
	double fractionComplete = 0;
	String status = "Not Tested";
	String message = "";
	Failure failure;
	PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);
	TestCaseResult testCaseResult;
	
	
	public AGradableJUnitTest (Class aJUnitClass) {
		init();
		setJUnitClass(aJUnitClass);	
	}
	
//	public AJUnitTestToGraderTestCase () {
//		init();
//	}
	@Visible(false)
	public void init() {
		runNotifier.addListener(runListener);
	}
	@Visible(false)
	public Class getJUnitClass() {
		return jUnitClass;
	}
	@Visible(false)

	public void setDefaultScore(int aDefaultScore) {
		defaultScore = aDefaultScore;
	}
	@Visible(false)
	public int getDefaultScore() {
		return defaultScore;
	}
	@Visible(false)
	public void setMaxScore (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(MaxValue.class)) {
			MaxValue aMaxValue =  (MaxValue) aJUnitClass.getAnnotation(MaxValue.class);
			maxScore = (double) aMaxValue.value();
			definesMaxScore = true;
		} else {
			maxScore = null;
			maybeSetDefaultMaxScore();
		}
	}
	protected void maybeSetDefaultMaxScore() {
		maxScore = (double) DEFAULT_SCORE;
	}
	@Visible(false)
	public void setIsRestriction (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(IsRestriction.class)) {
			IsRestriction anIsRestriction =  (IsRestriction) aJUnitClass.getAnnotation(IsRestriction.class);
			isRestriction = anIsRestriction.value();
		} else {
			isRestriction = false;
		}
	}
	@Visible(false)
	public void setIsExtra (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(IsExtra.class)) {
			IsExtra anIsExtra =  (IsExtra) aJUnitClass.getAnnotation(IsExtra.class);
			isExtra = anIsExtra.value();
		} else {
			isExtra = false;
		}
	}
	@Visible(false)
	public void setExplanation (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(Explanation.class)) {
			Explanation anExplanation =  (Explanation) aJUnitClass.getAnnotation(Explanation.class);
			explanation = aJUnitClass.getSimpleName() + ":" + anExplanation.value();
		} else {
			explanation = aJUnitClass.getSimpleName();
		}
//		setName(explanation);
	}	
	@Visible(false)
	public void setGroup (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(Group.class)) {
			Group aGroup =  (Group) aJUnitClass.getAnnotation(Group.class);
			group = aGroup.value();
		} else {
			group = explanation;
		}
	}
	@Override
	@Visible(false)
	public String getGroup() {
		return group;
	}
	@Visible(false)
	@Override
	public JUnitTestCase getJUnitTestCase() {
		return JUnitTestsEnvironment.getPassFailJUnitTest(jUnitClass);
	}
	@Visible(false)
	public void setJUnitClass(Class aJUnitClass) {
		jUnitClass = aJUnitClass;
		setExplanation(aJUnitClass);
		setMaxScore(aJUnitClass);
		setIsRestriction(aJUnitClass);
		setIsExtra(aJUnitClass);
		setGroup(aJUnitClass);
		JUnitTestsEnvironment.addPassFailJUnitTestClass(aJUnitClass, this);


		
	}
	@Visible(false)
	public boolean isRestriction() {
		return isRestriction;
	}
	@Visible(false)
	public boolean isExtra() {
		return isExtra;
	}
	@Visible(false)
	public Double getMaxScore() {
		return maxScore;
	}
	@Visible(false)
	public String getExplanation() {
		return explanation;
	}
	protected void showColor() {
		Color oldColor = color;
		color = computeColor();
		propertyChangeSupport.firePropertyChange("this", oldColor,
				new Attribute(AttributeNames.COMPONENT_FOREGROUND, color));
	}
	protected void showScore() {
		Double oldScore = score;
//		Double oldScore = getDisplayedScore();

//		score = getUnroundedScore();
		score = getDisplayedScore();

//		propertyChangeSupport.firePropertyChange("UnroundedScore", oldScore,
//				score);
		propertyChangeSupport.firePropertyChange("DisplayedScore", oldScore,
				score);
	}
	protected void showResult (TestCaseResult aTestCaseResult) {
		String oldStatus = status;
		String oldMessage = message;
		double oldScore = score;
		status = aTestCaseResult.getPercentage()*100 + "% complete";
		message = aTestCaseResult.getNotes();
//		score = getUnroundedScore();	
		score = getDisplayedScore();		

		propertyChangeSupport.firePropertyChange("DisplayedScore", oldScore, getDisplayedScore());
//		propertyChangeSupport.firePropertyChange("Status", oldStatus, status);

		propertyChangeSupport.firePropertyChange("Message", oldMessage, message);
		showColor();
//		showScore();
//		Color oldColor = color;
//		Color color = computeColor();
//		propertyChangeSupport.firePropertyChange("this", oldColor,
//				new Attribute(AttributeNames.COMPONENT_FOREGROUND, color));
		
	}
	@Override
	@Visible(false)
	public List<Double> getPercentages() {
		List<Double> retVal = new ArrayList();
		retVal.add(fractionComplete);
		return retVal;
	}
	@Override
	@Visible(false)
	public List<String> getMessages() {
		List<String> retVal = new ArrayList();
		retVal.add(message);
		return retVal;
	}
	@Override
	@Visible(false)
	public List<TestCaseResult> getTestCaseResults() {
		List<TestCaseResult> retVal = new ArrayList();
		retVal.add(testCaseResult);
		return retVal;
	}
	@Visible(false)
	public TestCaseResult test()
			throws NotAutomatableException, NotGradableException {
		try {
			Tracer.resetNumTraces();// previous test output should not affect this one
			numTests++;
			Class aJUnitClass = getJUnitClass();
			BasicStaticConfigurationUtils.setTest(aJUnitClass);
//			JUnitTestsEnvironment.addGradableJUnitTest(aJUnitClass, this);

			runListener.setJUnitName(aJUnitClass.getName());
			Runner aRunner = new BlockJUnit4ClassRunner(aJUnitClass);
			aRunner.run(runNotifier);
			testCaseResult = runListener.getTestCaseResult();
			jUnitTest = getJUnitTestCase();
			if (jUnitTest != null) {
				jUnitTest.setLastResult(testCaseResult);
			}
			failure = runListener.getFailure();
			fractionComplete = testCaseResult.getPercentage();
			showResult(testCaseResult);
//			status = aTestCaseResult.getPercentage()*100 + " % complete";
//			message = aTestCaseResult.getNotes();			
			return testCaseResult;

			
		} catch (InitializationError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			String anExceptionMessage = e.getMessage();
			String aMessage = e.getClass().getSimpleName() + " Could not initialize an instance of test class ";
			TestCaseResult aTestCaseResult = new TestCaseResult(false, aMessage, getExplanation(), true);
			showResult(aTestCaseResult);
			return aTestCaseResult;
//			return fail(e.getMessage());
		} catch (IllegalArgumentException e ) {
			e.printStackTrace();
			String anExceptionMessage = e.getMessage();
			TestCaseResult aTestCaseResult = new TestCaseResult(false,  e.getMessage(), getExplanation(), true);
			showResult(aTestCaseResult);
			return aTestCaseResult;
		} catch (Exception e) {
			e.printStackTrace();
			String anExceptionMessage = e.getMessage();
			TestCaseResult aTestCaseResult = new TestCaseResult(false, e.getMessage(), getExplanation(), true);
			showResult(aTestCaseResult);
			return aTestCaseResult;
		}
			
		
		// InitializationError
//		Runner aRunner = new BlockJUnit4ClassRunner(ACartesianPointParametrizedJUnitTester.class);
//		Runner aRunner = new BlockJUnit4ClassRunner(ASinglePointBeforeClassJUnitMultiTester.class);
		// IniitializationError
//		Runner aRunner = new BlockJUnit4ClassRunner(ACartesianPointParametrizedJUnitMultiTester.class);
//		return null;
	}
	protected boolean isPass() {
		return getFractionComplete() == 1.0;
	}
	protected boolean isPartialPass() {
		return !isPass() && getFractionComplete() >  0.0;
	}
	protected boolean isFail() {
		return getFractionComplete() == 0.0 & numTests != 0;
	}
	protected boolean isUntested() {
		return  numTests == 0;
	}
	
	@Visible(false)
	@Override
	public void setMaxScore(double aMaxScore) {
		maxScore = aMaxScore;
//		maybeSetChildrenMaxScores();
	}
//	protected void maybeSetChildrenMaxScores() {
//		
//	}
	@Visible(false)
	@Override
	public void setGroup(String newVal) {
		group = newVal;
		
	}
	@Visible(false)
	@Override
	public void setRestriction(boolean newVal) {
		isRestriction = newVal;		
	}
	@Visible(false)
	@Override
	public void setExtra(boolean newVal) {
		isExtra = newVal;		
	}
	@Visible(false)
	@Override
	public void setExplanation(String newVal) {
		explanation = newVal;		
	}
	
	protected String description = null;
	public String getName() {
		if (description == null) {
		String aScore = "[" + GradableJUnitTest.round(getComputedMaxScore()) + " pts" + "]";
		String anExtra = isExtra?
				"(extra credit)"
				:"";
//		description = explanation + aScore + anExtra;
		description = getJUnitClass().getSimpleName() + aScore + anExtra;

		}
		return description;
	}
	@Visible(false)
	@Position(0)
	@Override
	public String getStatus() {
		return status;
	}
	@Position(1)
	@Override
	public String getMessage() {
		return message;
	}
	@Visible(false)
	public void open(String aField) {
//		System.out.println ("opened: " + aTest);
		test();
	}
	@Override
	@Visible(false)
	public int numExecutions() {
		return numTests;
	}
	protected Color computeColor(int aNumTests,double aFractionComplete) {
		if (aNumTests == 0)
			return UNTESTED_COLOR;
		if (aFractionComplete == 1)
			return ALL_PASS_COLOR;
		if (aFractionComplete == 0)
			return ALL_FAIL_COLOR;		
		if (aFractionComplete >= 0.5)
			return MOSTLY_PASS_COLOR;
		return MOSTLY_FAIL_COLOR;
	}
	protected Color computeColor() {
		return computeColor(numTests, fractionComplete);
//		if (numTests == 0)
//			return UNTESTED_COLOR;
//		if (fractionComplete == 1)
//			return ALL_PASS_COLOR;
//		if (fractionComplete == 0)
//			return ALL_FAIL_COLOR;		
//		if (fractionComplete >= 0.5)
//			return MOSTLY_PASS_COLOR;
//		return MOSTLY_FAIL_COLOR;
	}
//	double aFractionCorrect = ((double) numTestsSuceeded())/children.size());
//	if (aFractionCorrect == 1)
//		return ALL_PASS_COLOR;
//	else if (aFractionCorrect == 0) {
//		
//	}
//}
	@Override
	@Visible(false)
	public double getFractionComplete() {
		return fractionComplete;
	}
	@Override
	@Visible(false)
	public void addPropertyChangeListenerRecursive(PropertyChangeListener arg0) {
		addPropertyChangeListener(arg0);		
	}
	@Override
	public void addPropertyChangeListener(PropertyChangeListener arg0) {
		propertyChangeSupport.addPropertyChangeListener(arg0);
		showColor();
		
	}
	@Visible(false)
	@Override
	public double getUnroundedScore() {
		return maxScore*fractionComplete;
	}
	@Position(0)
	@Override
	public double getDisplayedScore() {
		return GradableJUnitTest.round(getUnroundedScore());
	}
	@Override
	@Visible(false)
	public String getText() {
		return getName() + "," + getUnroundedScore() +  "," + getMessage();
	}
//	public String toString() {
//		return getName();
//	}
	@Visible(false)
	@Override
	public double getComputedMaxScore() {
		return maxScore;
	}
	@Override
	public int numLeafNodeDescendents() {
		return 1;
	}
//	public static void main (String[] args) {
//		ObjectEditor.edit(new bus.uigen.test.ACompositeColorer());
//		AGradableJUnitTest foo = new AGradableJUnitTest(ACartesianPointJUnitTester.class);
////		foo.setJUnitClass(ACartesianPointJUnitTester.class);
//		System.out.println (foo);
//	}

	@Override
	public int numInternalNodeDescendents() {
		// TODO Auto-generated method stub
		return 0;
	}
//	public void setWriteToServer(boolean writeToServer) {
//		this.writeToServer = writeToServer;
//	}
//	@Override
//	public void setWriteToConsole(boolean newVal) {
//		writeToConsole = newVal;
//	}
//	@Override
//	public boolean isWriteToConsole() {
//		return writeToConsole;
//	}
//	@Override
//	public boolean isWriteToFile() {
//		return writeToFile;
//	}
//	@Override
//	public void setWriteToFile(boolean writeToFile) {
//		this.writeToFile = writeToFile;
//	}
//	@Override
//	public boolean isWriteToServer() {
//		return writeToServer;
//	}
	static protected Class[] emptyClassArray = {};
	static protected Set<Class> emptySet = new HashSet();

	@Override
	@Visible(false)
	public Set<Class> getLeafClasses() {
		if (leafClasses == null) {
//			leafClasses = new Class[] {getJUnitClass()};
			leafClasses = new HashSet();
			leafClasses.add(getJUnitClass());

		}
		// TODO Auto-generated method stub
		return leafClasses;
	}

	@Override
	@Visible(false)
	public Set<Class> getPassClasses() {
		if (isPass())
			return getLeafClasses();
		return emptySet;
	}

	@Override
	@Visible(false)
	public Set<Class> getPartialPassClasses() {
		if (isPartialPass())
			return getLeafClasses();
		return emptySet;
	}

	@Override
	@Visible(false)
	public Set<Class> getFailClasses() {
		if (isFail())
			return getLeafClasses();
		return emptySet;
	}
	
	@Override
	@Visible(false)
	public Set<Class> getUntestedClasses() {
		if (isUntested())
			return getLeafClasses();
		return emptySet;
	}
	public String toString() {
		return getName() + "(" + super.toString() + ")";
	}
	
//	@Override
//	public void setTopLevelSuite(GradableJUnitSuite newVal) {
//		topLevelSuite = newVal;
//		
//	}
//
//	@Override
//	public GradableJUnitSuite getTopLevelSuite() {
//		// TODO Auto-generated method stub
//		return topLevelSuite;
//	}

//	@Override
//	public Class[] getUntestedClasses() {
//		// TODO Auto-generated method stub
//		return null;
//	}
	@Override
	@Visible(false)
	public boolean isDefinesMaxScore() {
		return definesMaxScore;
	}
	@Override
	@Visible(false)
	public void setDefinesMaxScore(boolean definesMaxScore) {
		this.definesMaxScore = definesMaxScore;
	}

	@Override
	@Visible(false)
	public void fillLeafNodeDescendents(List<GradableJUnitTest> retVal) {
		retVal.add(this);
	}

	@Override
	@Visible(false)
	public MaxScoreAssignmentResult assignMaxScores() {
		MaxScoreAssignmentResult aMaxScoreAssignmentResult = new MaxScoreAssignmentResult();
		aMaxScoreAssignmentResult.assignedScores = maxScore;
//		if (!isDefinesMaxScore()) {
		if (maxScore == DEFAULT_SCORE) { // may not define score and yet be 
			aMaxScoreAssignmentResult.unassignedLeafNodes.add(this);
		}
		return aMaxScoreAssignmentResult;
	}
	
	@Visible(false)
	public GradableJUnitSuite getParentSuite() {
		return parentSuite;
	}
	@Visible(false)	public void setParentSuite(GradableJUnitSuite parentSuite) {
		this.parentSuite = parentSuite;
	}
	
	
}
]]></snapshot>
  </Command>
  <DocumentChange __id="6636" _type="Insert" date="Sat Aug 24 16:48:49 EDT 2019" docASTNodeCount="1964" docActiveCodeLength="13522" docExpressionCount="1220" docLength="16963" length="14" offset="10837" repeat="12" timestamp="104052912" timestamp2="104056463">
    <text><![CDATA[
	public Strn]]></text>
  </DocumentChange>
  <DocumentChange __id="6660" _type="Delete" date="Sat Aug 24 16:48:53 EDT 2019" docASTNodeCount="1964" docActiveCodeLength="13521" docExpressionCount="1220" docLength="16962" endLine="356" length="1" offset="10850" startLine="356" timestamp="104056909">
    <text><![CDATA[n]]></text>
  </DocumentChange>
  <DocumentChange __id="6662" _type="Insert" date="Sat Aug 24 16:48:54 EDT 2019" docASTNodeCount="1969" docActiveCodeLength="13550" docExpressionCount="1222" docLength="16991" length="29" offset="10850" repeat="21" timestamp="104057216" timestamp2="104062659">
    <text><![CDATA[ing getSimpleName() {
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="6705" _type="Insert" date="Sat Aug 24 16:49:03 EDT 2019" docASTNodeCount="1971" docActiveCodeLength="13555" docExpressionCount="1223" docLength="16996" length="5" offset="10875" repeat="5" timestamp="104067008" timestamp2="104067671">
    <text><![CDATA[retrn]]></text>
  </DocumentChange>
  <DocumentChange __id="6715" _type="Delete" date="Sat Aug 24 16:49:05 EDT 2019" docASTNodeCount="1971" docActiveCodeLength="13553" docExpressionCount="1223" docLength="16994" endLine="357" length="2" offset="10878" repeat="2" startLine="357" timestamp="104068368" timestamp2="104068530">
    <text><![CDATA[rn]]></text>
  </DocumentChange>
  <DocumentChange __id="6719" _type="Insert" date="Sat Aug 24 16:49:06 EDT 2019" docASTNodeCount="1970" docActiveCodeLength="13557" docExpressionCount="1222" docLength="16998" length="4" offset="10878" repeat="4" timestamp="104069357" timestamp2="104069875">
    <text><![CDATA[urn ]]></text>
  </DocumentChange>
  <DocumentChange __id="6732" _type="Insert" date="Sat Aug 24 16:51:08 EDT 2019" docASTNodeCount="1974" docActiveCodeLength="13589" docExpressionCount="1226" docLength="17030" length="32" offset="10882" repeat="2" timestamp="104191576" timestamp2="104192676">
    <text><![CDATA[getJUnitClass().getSimpleName();]]></text>
  </DocumentChange>
  <DocumentChange __id="6741" _type="Insert" date="Sat Aug 24 16:51:31 EDT 2019" docASTNodeCount="1964" docActiveCodeLength="13522" docExpressionCount="1217" docLength="17032" length="2" offset="11178" timestamp="104214154">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6748" _type="Insert" date="Sat Aug 24 16:51:35 EDT 2019" docASTNodeCount="1964" docActiveCodeLength="13526" docExpressionCount="1217" docLength="17036" length="4" offset="11247" timestamp="104218696">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="6750" _type="Replace" date="Sat Aug 24 16:51:36 EDT 2019" docASTNodeCount="1964" docActiveCodeLength="13526" docExpressionCount="1217" docLength="17105" endLine="367" insertionLength="71" int_docASTNodeCount="1964" int_docActiveCodeLength="13524" int_docExpressionCount="1217" int_docLength="17034" length="2" offset="11249" startLine="367" timestamp="104219455">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[//		description = getJUnitClass().getSimpleName() + aScore + anExtra;
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="6753" _type="Delete" date="Sat Aug 24 16:51:39 EDT 2019" docASTNodeCount="1974" docActiveCodeLength="13593" docExpressionCount="1226" docLength="17103" endLine="367" length="2" offset="11249" startLine="367" timestamp="104222751">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="6756" _type="Delete" date="Sat Aug 24 16:51:47 EDT 2019" docASTNodeCount="1974" docActiveCodeLength="13589" docExpressionCount="1226" docLength="17099" endLine="369" length="4" offset="11316" repeat="2" startLine="367" timestamp="104230276" timestamp2="104231518">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="6762" _type="Delete" date="Sat Aug 24 16:51:57 EDT 2019" docASTNodeCount="1972" docActiveCodeLength="13573" docExpressionCount="1224" docLength="17083" endLine="367" length="16" offset="11265" startLine="367" timestamp="104240302">
    <text><![CDATA[getJUnitClass().]]></text>
  </DocumentChange>
  <DocumentChange __id="6766" _type="Insert" date="Sat Aug 24 16:53:11 EDT 2019" docASTNodeCount="1974" docActiveCodeLength="13585" docExpressionCount="1226" docLength="17095" length="12" offset="10837" repeat="10" timestamp="104314443" timestamp2="104317170">
    <text><![CDATA[
	@Override]]></text>
  </DocumentChange>
  <Command __id="6791" _type="FileOpenCommand" date="Sat Aug 24 16:53:19 EDT 2019" docASTNodeCount="342" docActiveCodeLength="2265" docExpressionCount="154" docLength="2349" projectName="GraderBasics" timestamp="104322932">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\GradableJUnitTest.java]]></filePath>
  </Command>
  <DocumentChange __id="6792" _type="Insert" date="Sat Aug 24 16:53:19 EDT 2019" docASTNodeCount="346" docActiveCodeLength="2291" docExpressionCount="156" docLength="2375" length="26" offset="2338" repeat="2" timestamp="104322952" timestamp2="104322953">
    <text><![CDATA[
	String getSimpleName();]]></text>
  </DocumentChange>
  <Command __id="6797" _type="FileOpenCommand" date="Sat Aug 24 16:53:31 EDT 2019" docASTNodeCount="1974" docActiveCodeLength="13585" docExpressionCount="1226" docLength="17095" projectName="GraderBasics" timestamp="104334301">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\AGradableJUnitTest.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.junit;

import grader.basics.config.BasicStaticConfigurationUtils;
import grader.basics.project.NotGradableException;
import grader.basics.testcase.JUnitTestCase;

import java.awt.Color;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.runner.Runner;
import org.junit.runner.notification.Failure;
import org.junit.runner.notification.RunNotifier;
import org.junit.runners.BlockJUnit4ClassRunner;
import org.junit.runners.model.InitializationError;

import util.annotations.Explanation;
import util.annotations.Group;
import util.annotations.IsExtra;
import util.annotations.IsRestriction;
import util.annotations.MaxValue;
import util.annotations.Position;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.trace.Tracer;
import bus.uigen.attributes.AttributeNames;
import bus.uigen.introspect.Attribute;
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
/**
 * This is the object displayed in the LocalChecks UI as a  (leaf-level?) tree node.
 *
 */
public class AGradableJUnitTest implements GradableJUnitTest{
	public static final Color UNTESTED_COLOR = Color.BLACK;
	public static final Color ALL_FAIL_COLOR = Color.RED;
	public static final Color MOSTLY_FAIL_COLOR = Color.PINK;
	public static final Color MOSTLY_PASS_COLOR = Color.ORANGE;
	public static final Color ALL_PASS_COLOR = Color.GREEN;
	static int DEFAULT_SCORE = 0;	
	int defaultScore = DEFAULT_SCORE;
	Class jUnitClass;
	Color color = UNTESTED_COLOR;
	boolean isExtra;
	

	boolean definesMaxScore = false;
//	boolean writeToConsole;
//	boolean writeToFile;	
//	boolean writeToServer;
	boolean isRestriction;
	Double maxScore;
	Double computedMaxScore;
	Double score = 0.0001;
	String explanation;
	String group = "";
	Set<Class> leafClasses;
	GradableJUnitSuite topLevelSuite;
	RunNotifier runNotifier = new RunNotifier();
//	RunNotifier runNotifier = RunNotifierFactory.getRunNotifier();
	GradableJUnitSuite parentSuite;

	

	AJUnitTestResult runListener = new AJUnitTestResult();
	JUnitTestCase jUnitTest;
	int numTests = 0;
	double fractionComplete = 0;
	String status = "Not Tested";
	String message = "";
	Failure failure;
	PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);
	TestCaseResult testCaseResult;
	
	
	public AGradableJUnitTest (Class aJUnitClass) {
		init();
		setJUnitClass(aJUnitClass);	
	}
	
//	public AJUnitTestToGraderTestCase () {
//		init();
//	}
	@Visible(false)
	public void init() {
		runNotifier.addListener(runListener);
	}
	@Visible(false)
	public Class getJUnitClass() {
		return jUnitClass;
	}
	@Visible(false)

	public void setDefaultScore(int aDefaultScore) {
		defaultScore = aDefaultScore;
	}
	@Visible(false)
	public int getDefaultScore() {
		return defaultScore;
	}
	@Visible(false)
	public void setMaxScore (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(MaxValue.class)) {
			MaxValue aMaxValue =  (MaxValue) aJUnitClass.getAnnotation(MaxValue.class);
			maxScore = (double) aMaxValue.value();
			definesMaxScore = true;
		} else {
			maxScore = null;
			maybeSetDefaultMaxScore();
		}
	}
	protected void maybeSetDefaultMaxScore() {
		maxScore = (double) DEFAULT_SCORE;
	}
	@Visible(false)
	public void setIsRestriction (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(IsRestriction.class)) {
			IsRestriction anIsRestriction =  (IsRestriction) aJUnitClass.getAnnotation(IsRestriction.class);
			isRestriction = anIsRestriction.value();
		} else {
			isRestriction = false;
		}
	}
	@Visible(false)
	public void setIsExtra (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(IsExtra.class)) {
			IsExtra anIsExtra =  (IsExtra) aJUnitClass.getAnnotation(IsExtra.class);
			isExtra = anIsExtra.value();
		} else {
			isExtra = false;
		}
	}
	@Visible(false)
	public void setExplanation (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(Explanation.class)) {
			Explanation anExplanation =  (Explanation) aJUnitClass.getAnnotation(Explanation.class);
			explanation = aJUnitClass.getSimpleName() + ":" + anExplanation.value();
		} else {
			explanation = aJUnitClass.getSimpleName();
		}
//		setName(explanation);
	}	
	@Visible(false)
	public void setGroup (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(Group.class)) {
			Group aGroup =  (Group) aJUnitClass.getAnnotation(Group.class);
			group = aGroup.value();
		} else {
			group = explanation;
		}
	}
	@Override
	@Visible(false)
	public String getGroup() {
		return group;
	}
	@Visible(false)
	@Override
	public JUnitTestCase getJUnitTestCase() {
		return JUnitTestsEnvironment.getPassFailJUnitTest(jUnitClass);
	}
	@Visible(false)
	public void setJUnitClass(Class aJUnitClass) {
		jUnitClass = aJUnitClass;
		setExplanation(aJUnitClass);
		setMaxScore(aJUnitClass);
		setIsRestriction(aJUnitClass);
		setIsExtra(aJUnitClass);
		setGroup(aJUnitClass);
		JUnitTestsEnvironment.addPassFailJUnitTestClass(aJUnitClass, this);


		
	}
	@Visible(false)
	public boolean isRestriction() {
		return isRestriction;
	}
	@Visible(false)
	public boolean isExtra() {
		return isExtra;
	}
	@Visible(false)
	public Double getMaxScore() {
		return maxScore;
	}
	@Visible(false)
	public String getExplanation() {
		return explanation;
	}
	protected void showColor() {
		Color oldColor = color;
		color = computeColor();
		propertyChangeSupport.firePropertyChange("this", oldColor,
				new Attribute(AttributeNames.COMPONENT_FOREGROUND, color));
	}
	protected void showScore() {
		Double oldScore = score;
//		Double oldScore = getDisplayedScore();

//		score = getUnroundedScore();
		score = getDisplayedScore();

//		propertyChangeSupport.firePropertyChange("UnroundedScore", oldScore,
//				score);
		propertyChangeSupport.firePropertyChange("DisplayedScore", oldScore,
				score);
	}
	protected void showResult (TestCaseResult aTestCaseResult) {
		String oldStatus = status;
		String oldMessage = message;
		double oldScore = score;
		status = aTestCaseResult.getPercentage()*100 + "% complete";
		message = aTestCaseResult.getNotes();
//		score = getUnroundedScore();	
		score = getDisplayedScore();		

		propertyChangeSupport.firePropertyChange("DisplayedScore", oldScore, getDisplayedScore());
//		propertyChangeSupport.firePropertyChange("Status", oldStatus, status);

		propertyChangeSupport.firePropertyChange("Message", oldMessage, message);
		showColor();
//		showScore();
//		Color oldColor = color;
//		Color color = computeColor();
//		propertyChangeSupport.firePropertyChange("this", oldColor,
//				new Attribute(AttributeNames.COMPONENT_FOREGROUND, color));
		
	}
	@Override
	@Visible(false)
	public List<Double> getPercentages() {
		List<Double> retVal = new ArrayList();
		retVal.add(fractionComplete);
		return retVal;
	}
	@Override
	@Visible(false)
	public List<String> getMessages() {
		List<String> retVal = new ArrayList();
		retVal.add(message);
		return retVal;
	}
	@Override
	@Visible(false)
	public List<TestCaseResult> getTestCaseResults() {
		List<TestCaseResult> retVal = new ArrayList();
		retVal.add(testCaseResult);
		return retVal;
	}
	@Visible(false)
	public TestCaseResult test()
			throws NotAutomatableException, NotGradableException {
		try {
			Tracer.resetNumTraces();// previous test output should not affect this one
			numTests++;
			Class aJUnitClass = getJUnitClass();
			BasicStaticConfigurationUtils.setTest(aJUnitClass);
//			JUnitTestsEnvironment.addGradableJUnitTest(aJUnitClass, this);

			runListener.setJUnitName(aJUnitClass.getName());
			Runner aRunner = new BlockJUnit4ClassRunner(aJUnitClass);
			aRunner.run(runNotifier);
			testCaseResult = runListener.getTestCaseResult();
			jUnitTest = getJUnitTestCase();
			if (jUnitTest != null) {
				jUnitTest.setLastResult(testCaseResult);
			}
			failure = runListener.getFailure();
			fractionComplete = testCaseResult.getPercentage();
			showResult(testCaseResult);
//			status = aTestCaseResult.getPercentage()*100 + " % complete";
//			message = aTestCaseResult.getNotes();			
			return testCaseResult;

			
		} catch (InitializationError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			String anExceptionMessage = e.getMessage();
			String aMessage = e.getClass().getSimpleName() + " Could not initialize an instance of test class ";
			TestCaseResult aTestCaseResult = new TestCaseResult(false, aMessage, getExplanation(), true);
			showResult(aTestCaseResult);
			return aTestCaseResult;
//			return fail(e.getMessage());
		} catch (IllegalArgumentException e ) {
			e.printStackTrace();
			String anExceptionMessage = e.getMessage();
			TestCaseResult aTestCaseResult = new TestCaseResult(false,  e.getMessage(), getExplanation(), true);
			showResult(aTestCaseResult);
			return aTestCaseResult;
		} catch (Exception e) {
			e.printStackTrace();
			String anExceptionMessage = e.getMessage();
			TestCaseResult aTestCaseResult = new TestCaseResult(false, e.getMessage(), getExplanation(), true);
			showResult(aTestCaseResult);
			return aTestCaseResult;
		}
			
		
		// InitializationError
//		Runner aRunner = new BlockJUnit4ClassRunner(ACartesianPointParametrizedJUnitTester.class);
//		Runner aRunner = new BlockJUnit4ClassRunner(ASinglePointBeforeClassJUnitMultiTester.class);
		// IniitializationError
//		Runner aRunner = new BlockJUnit4ClassRunner(ACartesianPointParametrizedJUnitMultiTester.class);
//		return null;
	}
	protected boolean isPass() {
		return getFractionComplete() == 1.0;
	}
	protected boolean isPartialPass() {
		return !isPass() && getFractionComplete() >  0.0;
	}
	protected boolean isFail() {
		return getFractionComplete() == 0.0 & numTests != 0;
	}
	protected boolean isUntested() {
		return  numTests == 0;
	}
	
	@Visible(false)
	@Override
	public void setMaxScore(double aMaxScore) {
		maxScore = aMaxScore;
//		maybeSetChildrenMaxScores();
	}
//	protected void maybeSetChildrenMaxScores() {
//		
//	}
	@Visible(false)
	@Override
	public void setGroup(String newVal) {
		group = newVal;
		
	}
	@Visible(false)
	@Override
	public void setRestriction(boolean newVal) {
		isRestriction = newVal;		
	}
	@Visible(false)
	@Override
	public void setExtra(boolean newVal) {
		isExtra = newVal;		
	}
	@Visible(false)
	@Override
	public void setExplanation(String newVal) {
		explanation = newVal;		
	}
	
	protected String description = null;
	@Override
	public String getSimpleName() {
		return getJUnitClass().getSimpleName();
	}
	public String getName() {
		if (description == null) {
		String aScore = "[" + GradableJUnitTest.round(getComputedMaxScore()) + " pts" + "]";
		String anExtra = isExtra?
				"(extra credit)"
				:"";
//		description = explanation + aScore + anExtra;
//		description = getJUnitClass().getSimpleName() + aScore + anExtra;
		description = getSimpleName() + aScore + anExtra;
		}
		return description;
	}
	@Visible(false)
	@Position(0)
	@Override
	public String getStatus() {
		return status;
	}
	@Position(1)
	@Override
	public String getMessage() {
		return message;
	}
	@Visible(false)
	public void open(String aField) {
//		System.out.println ("opened: " + aTest);
		test();
	}
	@Override
	@Visible(false)
	public int numExecutions() {
		return numTests;
	}
	protected Color computeColor(int aNumTests,double aFractionComplete) {
		if (aNumTests == 0)
			return UNTESTED_COLOR;
		if (aFractionComplete == 1)
			return ALL_PASS_COLOR;
		if (aFractionComplete == 0)
			return ALL_FAIL_COLOR;		
		if (aFractionComplete >= 0.5)
			return MOSTLY_PASS_COLOR;
		return MOSTLY_FAIL_COLOR;
	}
	protected Color computeColor() {
		return computeColor(numTests, fractionComplete);
//		if (numTests == 0)
//			return UNTESTED_COLOR;
//		if (fractionComplete == 1)
//			return ALL_PASS_COLOR;
//		if (fractionComplete == 0)
//			return ALL_FAIL_COLOR;		
//		if (fractionComplete >= 0.5)
//			return MOSTLY_PASS_COLOR;
//		return MOSTLY_FAIL_COLOR;
	}
//	double aFractionCorrect = ((double) numTestsSuceeded())/children.size());
//	if (aFractionCorrect == 1)
//		return ALL_PASS_COLOR;
//	else if (aFractionCorrect == 0) {
//		
//	}
//}
	@Override
	@Visible(false)
	public double getFractionComplete() {
		return fractionComplete;
	}
	@Override
	@Visible(false)
	public void addPropertyChangeListenerRecursive(PropertyChangeListener arg0) {
		addPropertyChangeListener(arg0);		
	}
	@Override
	public void addPropertyChangeListener(PropertyChangeListener arg0) {
		propertyChangeSupport.addPropertyChangeListener(arg0);
		showColor();
		
	}
	@Visible(false)
	@Override
	public double getUnroundedScore() {
		return maxScore*fractionComplete;
	}
	@Position(0)
	@Override
	public double getDisplayedScore() {
		return GradableJUnitTest.round(getUnroundedScore());
	}
	@Override
	@Visible(false)
	public String getText() {
		return getName() + "," + getUnroundedScore() +  "," + getMessage();
	}
//	public String toString() {
//		return getName();
//	}
	@Visible(false)
	@Override
	public double getComputedMaxScore() {
		return maxScore;
	}
	@Override
	public int numLeafNodeDescendents() {
		return 1;
	}
//	public static void main (String[] args) {
//		ObjectEditor.edit(new bus.uigen.test.ACompositeColorer());
//		AGradableJUnitTest foo = new AGradableJUnitTest(ACartesianPointJUnitTester.class);
////		foo.setJUnitClass(ACartesianPointJUnitTester.class);
//		System.out.println (foo);
//	}

	@Override
	public int numInternalNodeDescendents() {
		// TODO Auto-generated method stub
		return 0;
	}
//	public void setWriteToServer(boolean writeToServer) {
//		this.writeToServer = writeToServer;
//	}
//	@Override
//	public void setWriteToConsole(boolean newVal) {
//		writeToConsole = newVal;
//	}
//	@Override
//	public boolean isWriteToConsole() {
//		return writeToConsole;
//	}
//	@Override
//	public boolean isWriteToFile() {
//		return writeToFile;
//	}
//	@Override
//	public void setWriteToFile(boolean writeToFile) {
//		this.writeToFile = writeToFile;
//	}
//	@Override
//	public boolean isWriteToServer() {
//		return writeToServer;
//	}
	static protected Class[] emptyClassArray = {};
	static protected Set<Class> emptySet = new HashSet();

	@Override
	@Visible(false)
	public Set<Class> getLeafClasses() {
		if (leafClasses == null) {
//			leafClasses = new Class[] {getJUnitClass()};
			leafClasses = new HashSet();
			leafClasses.add(getJUnitClass());

		}
		// TODO Auto-generated method stub
		return leafClasses;
	}

	@Override
	@Visible(false)
	public Set<Class> getPassClasses() {
		if (isPass())
			return getLeafClasses();
		return emptySet;
	}

	@Override
	@Visible(false)
	public Set<Class> getPartialPassClasses() {
		if (isPartialPass())
			return getLeafClasses();
		return emptySet;
	}

	@Override
	@Visible(false)
	public Set<Class> getFailClasses() {
		if (isFail())
			return getLeafClasses();
		return emptySet;
	}
	
	@Override
	@Visible(false)
	public Set<Class> getUntestedClasses() {
		if (isUntested())
			return getLeafClasses();
		return emptySet;
	}
	public String toString() {
		return getName() + "(" + super.toString() + ")";
	}
	
//	@Override
//	public void setTopLevelSuite(GradableJUnitSuite newVal) {
//		topLevelSuite = newVal;
//		
//	}
//
//	@Override
//	public GradableJUnitSuite getTopLevelSuite() {
//		// TODO Auto-generated method stub
//		return topLevelSuite;
//	}

//	@Override
//	public Class[] getUntestedClasses() {
//		// TODO Auto-generated method stub
//		return null;
//	}
	@Override
	@Visible(false)
	public boolean isDefinesMaxScore() {
		return definesMaxScore;
	}
	@Override
	@Visible(false)
	public void setDefinesMaxScore(boolean definesMaxScore) {
		this.definesMaxScore = definesMaxScore;
	}

	@Override
	@Visible(false)
	public void fillLeafNodeDescendents(List<GradableJUnitTest> retVal) {
		retVal.add(this);
	}

	@Override
	@Visible(false)
	public MaxScoreAssignmentResult assignMaxScores() {
		MaxScoreAssignmentResult aMaxScoreAssignmentResult = new MaxScoreAssignmentResult();
		aMaxScoreAssignmentResult.assignedScores = maxScore;
//		if (!isDefinesMaxScore()) {
		if (maxScore == DEFAULT_SCORE) { // may not define score and yet be 
			aMaxScoreAssignmentResult.unassignedLeafNodes.add(this);
		}
		return aMaxScoreAssignmentResult;
	}
	
	@Visible(false)
	public GradableJUnitSuite getParentSuite() {
		return parentSuite;
	}
	@Visible(false)	public void setParentSuite(GradableJUnitSuite parentSuite) {
		this.parentSuite = parentSuite;
	}
	
	
}
]]></snapshot>
  </Command>
  <Command __id="6820" _type="EHExceptionCommand" date="Sat Aug 24 16:53:51 EDT 2019" timestamp="104354284" type="Exception">
    <outputString><![CDATA[ObjectEditor(Version 22, built on Thu Dec 06 16:26:09 EST 2018). Copyright Prasun Dewan, 2012, All rights reserved. US Patent Appl. No.: 12/532,327
]]></outputString>
  </Command>
  <Command __id="6821" _type="RunCommand" date="Sat Aug 24 16:53:51 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104354322" type="Run" />
  <Command __id="6822" _type="RunCommand" date="Sat Aug 24 16:53:51 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104354615" type="Run" />
  <Command __id="6823" _type="BreakPointCommand" date="Sat Aug 24 16:53:57 EDT 2019" lineNumber="359" timestamp="104360326" type="BreakPointRemoved" />
  <Command __id="6824" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sat Aug 24 16:53:57 EDT 2019" timestamp="104360362" />
  <Command __id="6825" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sat Aug 24 16:53:58 EDT 2019" timestamp="104361576" />
  <Command __id="6826" _type="RunCommand" date="Sat Aug 24 16:53:58 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="104361576" type="Run" />
  <Command __id="6827" _type="ShellCommand" date="Sat Aug 24 16:54:04 EDT 2019" timestamp="104367126" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6828" _type="ShellCommand" date="Sat Aug 24 16:54:11 EDT 2019" timestamp="104374700" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6829" _type="SelectTextCommand" caretOffset="10111" date="Sat Aug 24 16:54:11 EDT 2019" end="10111" start="10110" timestamp="104374774" />
  <Command __id="6830" _type="MoveCaretCommand" caretOffset="9848" date="Sat Aug 24 16:54:13 EDT 2019" docOffset="10849" timestamp="104376479" />
  <Command __id="6832" _type="InsertStringCommand" date="Sat Aug 24 16:54:13 EDT 2019" timestamp="104377057" timestamp2="104377057">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="6834" _type="InsertStringCommand" date="Sat Aug 24 16:54:14 EDT 2019" repeat="14" timestamp="104377973" timestamp2="104381826">
    <data><![CDATA[@Visible(false]]></data>
  </Command>
  <Command __id="6861" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 16:54:19 EDT 2019" timestamp="104382663" />
  <Command __id="6862" _type="RunCommand" date="Sat Aug 24 16:54:31 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104394457" type="Debug" />
  <Command __id="6863" _type="RunCommand" date="Sat Aug 24 16:54:31 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104394458" type="Debug" />
  <Command __id="6864" _type="RunCommand" date="Sat Aug 24 16:54:31 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="104394458" type="Run" />
  <Command __id="6865" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.DebugLast" date="Sat Aug 24 16:54:32 EDT 2019" timestamp="104395777" />
  <Command __id="6866" _type="EclipseCommand" commandID="" date="Sat Aug 24 16:54:32 EDT 2019" repeat="6" timestamp="104395910" timestamp2="104396109" />
  <Command __id="6872" _type="RunCommand" date="Sat Aug 24 16:54:33 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="104396272" type="Run" />
  <Command __id="6873" _type="RunCommand" date="Sat Aug 24 16:54:33 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="104396272" type="Run" />
  <Command __id="6874" _type="RunCommand" date="Sat Aug 24 16:54:33 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104396524" type="Run" />
  <Command __id="6875" _type="RunCommand" date="Sat Aug 24 16:54:33 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="104396612" type="Run" />
  <Command __id="6876" _type="RunCommand" date="Sat Aug 24 16:54:33 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104396764" type="Run" />
  <Command __id="6877" _type="EHExceptionCommand" date="Sat Aug 24 16:54:33 EDT 2019" timestamp="104396858" type="Exception">
    <outputString><![CDATA[I***Tracer: showInfo = true
Buffer traced nessages =false
]]></outputString>
  </Command>
  <Command __id="6878" _type="RunCommand" date="Sat Aug 24 16:54:34 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104397677" type="Run" />
  <Command __id="6879" _type="RunCommand" date="Sat Aug 24 16:54:34 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104397678" type="Run" />
  <Command __id="6880" _type="RunCommand" date="Sat Aug 24 16:54:34 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104397679" type="Run" />
  <Command __id="6881" _type="RunCommand" date="Sat Aug 24 16:54:34 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104397680" type="Run" />
  <Command __id="6882" _type="EHExceptionCommand" date="Sat Aug 24 16:54:34 EDT 2019" timestamp="104398064" type="Exception">
    <outputString><![CDATA[ObjectEditor(Version 22, built on Thu Dec 06 16:26:09 EST 2018). Copyright Prasun Dewan, 2012, All rights reserved. US Patent Appl. No.: 12/532,327
]]></outputString>
  </Command>
  <Command __id="6883" _type="ShellCommand" date="Sat Aug 24 16:54:35 EDT 2019" timestamp="104398920" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6884" _type="EHExceptionCommand" date="Sat Aug 24 16:54:39 EDT 2019" timestamp="104403072" type="Exception">
    <outputString><![CDATA[W*** Received notification(s) for unknown (possibly invisible or unrecognized atomic-shape) property: TestRunStarted of object: PromptSuite[25.0 pts](grader.basics.junit.AGradableJUnitSuite@1c807b1d). Ignoring notification.
I***(TestCaseResult) ### gradingTools.comp524f19.assignment1.testcases.PromptTestCase: 1.0
]]></outputString>
  </Command>
  <Command __id="6885" _type="RunCommand" date="Sat Aug 24 16:54:40 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104403117" type="Run" />
  <Command __id="6886" _type="RunCommand" date="Sat Aug 24 16:54:40 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104403153" type="Run" />
  <Command __id="6887" _type="RunCommand" date="Sat Aug 24 16:54:40 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104403156" type="Run" />
  <Command __id="6888" _type="EHExceptionCommand" date="Sat Aug 24 16:54:40 EDT 2019" timestamp="104403205" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) 1566680080079:Received output from main: Please input an integer
I***(ARunnerInputStreamProcessor) Provided Input:
I***(BasicRunningProject) 1566680080080:Processing line from main: Please input an integer
Premature end of file before int was input, exiting
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="6889" _type="PredictionCommand" date="Sat Aug 24 16:54:40 EDT 2019" prediction_type="MakingProgress" timestamp="104403228" />
  <Command __id="6890" _type="RunCommand" date="Sat Aug 24 16:54:42 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104405166" type="Run" />
  <Command __id="6891" _type="RunCommand" date="Sat Aug 24 16:54:42 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104405178" type="Run" />
  <Command __id="6892" _type="RunCommand" date="Sat Aug 24 16:54:42 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104405181" type="Run" />
  <Command __id="6893" _type="EHExceptionCommand" date="Sat Aug 24 16:54:42 EDT 2019" timestamp="104405267" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:1
I***(BasicRunningProject) 1566680082129:Received output from main: Please input an integer
I***(BasicRunningProject) 1566680082129:Processing line from main: Please input an integer
I***(BasicRunningProject) 1566680082129:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566680082129:Processing line from main: Please input a decimalPremature end of file before decimal was input, exiting

I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="6894" _type="RunCommand" date="Sat Aug 24 16:54:44 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104407211" type="Run" />
  <Command __id="6895" _type="RunCommand" date="Sat Aug 24 16:54:44 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104407218" type="Run" />
  <Command __id="6896" _type="RunCommand" date="Sat Aug 24 16:54:44 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104407220" type="Run" />
  <Command __id="6897" _type="EHExceptionCommand" date="Sat Aug 24 16:54:44 EDT 2019" timestamp="104407294" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:1.4
I***(BasicRunningProject) 1566680084166:Received output from main: Please input an integer
I***(BasicRunningProject) 1566680084166:Processing line from main: Please input an integer
I***(BasicRunningProject) 1566680084166:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566680084166:Processing line from main: Please input a decimal
I***(BasicRunningProject) 1566680084166:Received output from main: The int addition:1
I***(BasicRunningProject) 1566680084167:Processing line from main: The int addition:1
I***(BasicRunningProject) 1566680084167:Received output from main: The double addition:1.400000
I***(BasicRunningProject) 1566680084167:Processing line from main: The double addition:1.400000
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) 1566680084167:Received output from main: The int multiplication:0
I***(BasicRunningProject) 1566680084167:Processing line from main: The int multiplication:0
I***(BasicRunningProject) 1566680084167:Received output from main: The double multiplication:0.400000
I***(BasicRunningProject) 1566680084167:Processing line from main: The double multiplication:0.400000
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="6898" _type="EHExceptionCommand" date="Sat Aug 24 16:54:46 EDT 2019" timestamp="104409297" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 0.0
I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 1.0
]]></outputString>
  </Command>
  <Command __id="6899" _type="ShellCommand" date="Sat Aug 24 16:54:59 EDT 2019" timestamp="104422427" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6900" _type="RunCommand" date="Sat Aug 24 16:54:59 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104422638" type="Debug" />
  <Command __id="6901" _type="RunCommand" date="Sat Aug 24 16:54:59 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="104422638" type="Debug" />
  <Command __id="6902" _type="RunCommand" date="Sat Aug 24 16:54:59 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="104422638" type="Run" />
  <Command __id="6906" _type="MoveCaretCommand" caretOffset="8628" date="Sat Aug 24 16:59:51 EDT 2019" docOffset="9822" timestamp="104714147" />
  <Command __id="6907" _type="MoveCaretCommand" caretOffset="1258" date="Sat Aug 24 17:01:56 EDT 2019" docOffset="2452" timestamp="104839355" />
  <Command __id="6908" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Sat Aug 24 17:01:57 EDT 2019" timestamp="104840551" />
  <Command __id="6909" _type="MoveCaretCommand" caretOffset="8628" date="Sat Aug 24 17:02:14 EDT 2019" docOffset="9822" timestamp="104857824" />
  <Command __id="6910" _type="MoveCaretCommand" caretOffset="8563" date="Sat Aug 24 17:02:18 EDT 2019" docOffset="9757" timestamp="104861376" />
  <Command __id="6911" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 17:02:26 EDT 2019" timestamp="104869967" />
  <Command __id="6912" _type="MoveCaretCommand" caretOffset="8628" date="Sat Aug 24 17:02:28 EDT 2019" docOffset="9822" timestamp="104871918" />
  <Command __id="6914" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 17:02:29 EDT 2019" timestamp="104872388" />
  <Command __id="6915" _type="SelectTextCommand" caretOffset="4123" date="Sat Aug 24 17:02:29 EDT 2019" end="4123" start="4098" timestamp="104872459" />
  <Command __id="6946" _type="ShellCommand" date="Sat Aug 24 17:12:01 EDT 2019" timestamp="105444946" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6947" _type="ShellCommand" date="Sat Aug 24 17:15:27 EDT 2019" timestamp="105650655" type="ECLIPSE_MAXIMIZED" />
  <Command __id="6948" _type="ShellCommand" date="Sat Aug 24 17:15:27 EDT 2019" timestamp="105650761" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6949" _type="ShellCommand" date="Sat Aug 24 17:15:50 EDT 2019" timestamp="105673799" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6950" _type="ShellCommand" date="Sat Aug 24 17:15:58 EDT 2019" timestamp="105681403" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6951" _type="ShellCommand" date="Sat Aug 24 17:16:07 EDT 2019" timestamp="105690948" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6952" _type="ShellCommand" date="Sat Aug 24 17:16:15 EDT 2019" timestamp="105698192" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6953" _type="ShellCommand" date="Sat Aug 24 17:16:22 EDT 2019" timestamp="105705479" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6954" _type="ShellCommand" date="Sat Aug 24 17:16:24 EDT 2019" timestamp="105707924" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6955" _type="ShellCommand" date="Sat Aug 24 17:16:29 EDT 2019" timestamp="105712854" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="6956" _type="ShellCommand" date="Sat Aug 24 17:16:32 EDT 2019" timestamp="105716035" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="6958" _type="MoveCaretCommand" caretOffset="1998" date="Sat Aug 24 17:16:55 EDT 2019" docOffset="2208" timestamp="105738410" />
  <Command __id="6959" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sat Aug 24 17:17:07 EDT 2019" timestamp="105750813" />
  <Command __id="6960" _type="BreakPointCommand" date="Sat Aug 24 17:17:07 EDT 2019" lineNumber="58" timestamp="105750815" type="BreakPointAdded" />
  <Command __id="6961" _type="RunCommand" date="Sat Aug 24 17:17:25 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="105768386" type="Run" />
  <Command __id="6962" _type="RunCommand" date="Sat Aug 24 17:17:25 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="105768386" type="Run" />
  <Command __id="6963" _type="RunCommand" date="Sat Aug 24 17:17:25 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="105768602" type="Run" />
  <Command __id="6964" _type="RunCommand" date="Sat Aug 24 17:17:25 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="105768694" type="Run" />
  <Command __id="6965" _type="RunCommand" date="Sat Aug 24 17:17:25 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="105768854" type="Run" />
  <Command __id="6966" _type="EHExceptionCommand" date="Sat Aug 24 17:17:25 EDT 2019" timestamp="105768942" type="Exception">
    <outputString><![CDATA[I***Tracer: showInfo = true
Buffer traced nessages =false
]]></outputString>
  </Command>
  <Command __id="6967" _type="RunCommand" date="Sat Aug 24 17:17:26 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="105769510" type="Run" />
  <Command __id="6968" _type="MoveCaretCommand" caretOffset="1433" date="Sat Aug 24 17:17:36 EDT 2019" docOffset="1643" timestamp="105779834" />
  <Command __id="6970" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 17:17:38 EDT 2019" timestamp="105781336" />
  <Command __id="6971" _type="SelectTextCommand" caretOffset="3759" date="Sat Aug 24 17:17:38 EDT 2019" end="3759" start="3747" timestamp="105781416" />
  <DocumentChange __id="6831" _type="Insert" date="Sat Aug 24 16:54:13 EDT 2019" docASTNodeCount="1977" docActiveCodeLength="13603" docExpressionCount="1229" docLength="17113" length="18" offset="10849" repeat="15" timestamp="104377048" timestamp2="104381823">
    <text><![CDATA[
	@Visible(false)]]></text>
  </DocumentChange>
  <Command __id="6903" _type="FileOpenCommand" date="Sat Aug 24 16:57:00 EDT 2019" docASTNodeCount="1" docActiveCodeLength="35" docExpressionCount="0" docLength="35" projectName="test-c" timestamp="104543230">
    <filePath><![CDATA[D:\dewan_backup\Java\eclipse\test-c\project.properties]]></filePath>
    <snapshot><![CDATA[Comp524f19.Assignment1.language = C]]></snapshot>
  </Command>
  <Command __id="6904" _type="FileOpenCommand" date="Sat Aug 24 16:58:49 EDT 2019" docASTNodeCount="1" docActiveCodeLength="35" docExpressionCount="0" docLength="35" projectName="test-c" timestamp="104652470">
    <filePath><![CDATA[D:\dewan_backup\Java\eclipse\test-c\project.properties]]></filePath>
  </Command>
  <Command __id="6905" _type="FileOpenCommand" date="Sat Aug 24 16:59:50 EDT 2019" docASTNodeCount="1485" docActiveCodeLength="13170" docExpressionCount="928" docLength="18430" projectName="comp110-grader" timestamp="104713982">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\assignment\AnAssignmenDataFolder.java]]></filePath>
  </Command>
  <Command __id="6913" _type="FileOpenCommand" date="Sat Aug 24 17:02:29 EDT 2019" docASTNodeCount="775" docActiveCodeLength="5668" docExpressionCount="470" docLength="7928" projectName="GraderBasics" timestamp="104872284">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\file\AnAbstractRootFolderProxy.java]]></filePath>
  </Command>
  <Command __id="6934" _type="FileOpenCommand" date="Sat Aug 24 17:08:01 EDT 2019" docASTNodeCount="375" docActiveCodeLength="2774" docExpressionCount="265" docLength="2907" projectName="comp110-grader" timestamp="105204722">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\requirements\interpreter\AnInterpretedTestCase.java]]></filePath>
    <snapshot><![CDATA[package grader.requirements.interpreter;

import wrappers.framework.project.ProjectWrapper;
import framework.grading.testing.BasicTestCase;
import grader.basics.execution.RunningProject;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.requirements.interpreter.specification.CSVRequirementsSpecification;
import grader.sakai.project.SakaiProject;
import gradingTools.interpreter.checkers.InterpretedChecker;
import gradingTools.interpreter.checkers.InterpretedCheckerRegistry;
import gradingTools.interpreter.checkers.InterpretedCheckerResult;
import gradingTools.utils.RunningProjectUtils;

public class AnInterpretedTestCase extends BasicTestCase{
	CSVRequirementsSpecification csvRequirementsSpecification;
	int featureNumber;
	String input;
	
	public AnInterpretedTestCase(String aName, CSVRequirementsSpecification aCSVRequirementsSpecification,
							int aFeatureNum
							) {
		super(aName);
		csvRequirementsSpecification = aCSVRequirementsSpecification;
		featureNumber = aFeatureNum;
	}

	@Override
	public TestCaseResult test(Project project, boolean autoGrade)
			throws NotAutomatableException, NotGradableException {
		SakaiProject aSakaiProject = ((ProjectWrapper) project).getProject();
		String anInput = InterpretedVariablesSubstituter.getInput(csvRequirementsSpecification, featureNumber);
		Integer aTimeOut = csvRequirementsSpecification.getTimeOut(featureNumber);
		String anOutput = "";
		RunningProject runningProject = null;
		if (aTimeOut != null) {
		 runningProject = RunningProjectUtils.runProject(project, aTimeOut, anInput);
		anOutput = runningProject.await();
		} else { // use the I/O from last run, could also store I/O mapping in project
			anInput = aSakaiProject.getCurrentInput();
			anOutput = aSakaiProject.getCurrentOutput().toString();
		}
		String aComparator = csvRequirementsSpecification.getChecker(featureNumber);
		InterpretedChecker aChecker = InterpretedCheckerRegistry.getInterpretedChecker(aComparator);
		int numArgs = aChecker.getNumArgs();
		String[] anArgs = new String[numArgs];
		String allArgs = "";
		for (int i = 0; i < numArgs; i++) {
			String anArg = csvRequirementsSpecification.getArg(featureNumber, i);
			String anActualArg = InterpretedVariablesSubstituter.getValue(aSakaiProject, csvRequirementsSpecification, featureNumber, anOutput, anArg);
			anArgs[i] = anActualArg;
			allArgs += " " + anArg;
		}
		InterpretedCheckerResult aResult = aChecker.check(anArgs);
		String aFunctionCall = aComparator + " " + allArgs;
		
//		if (checkable instanceof Feature && aResult.isSucceeded()) {
		if (aResult.isSucceeded()) {
			return pass("");
		} else 
			return fail(aFunctionCall + " failed \n" + aResult.getNotes());
	}

}
]]></snapshot>
  </Command>
  <Command __id="6936" _type="FileOpenCommand" date="Sat Aug 24 17:08:14 EDT 2019" docASTNodeCount="31" docActiveCodeLength="215" docExpressionCount="15" docLength="246" projectName="comp110-grader" timestamp="105217264">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\requirements\interpreter\InterpretedRequirements.java]]></filePath>
    <snapshot><![CDATA[package grader.requirements.interpreter;

public interface InterpretedRequirements {
//	static String TYPE = "type";
	static String FEATURE = "feature";
	static String RESTRICTION = "restriction";
	static String DUE_DATE = "duedate";

}
]]></snapshot>
  </Command>
  <Command __id="6938" _type="FileOpenCommand" date="Sat Aug 24 17:08:18 EDT 2019" docASTNodeCount="392" docActiveCodeLength="2914" docExpressionCount="224" docLength="3172" projectName="comp110-grader" timestamp="105221516">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\requirements\interpreter\InterpretedVariablesSubstituter.java]]></filePath>
    <snapshot><![CDATA[package grader.requirements.interpreter;

import grader.requirements.interpreter.specification.CSVRequirementsSpecification;
import grader.sakai.project.ASakaiProjectDatabase;
import grader.sakai.project.SakaiProject;
import grader.sakai.project.SakaiProjectDatabase;
import util.misc.Common;

public class InterpretedVariablesSubstituter {
	public static final String VAR_PREFIX = "$";
	public static final String ACTUAL_OUTPUT = "$actualoutput";
	public static final String MODEL_OUTPUT = "$modeloutput";
	public static final String INPUT = "$input";
	public static final String SOURCE = "$source";
	public static final String FILE_SUFFIX = ".txt";

	public static String getValue(SakaiProject aRunningProject, CSVRequirementsSpecification aSpecification, 
			int aRequirementNumber, 
			String anOutput,
			String anExpression) {
		String anExpressionLC = anExpression.toLowerCase();
		if (!anExpression.startsWith(VAR_PREFIX)) {
			return anExpression;
		} else if (ACTUAL_OUTPUT.equals(anExpressionLC)) {
			return getActualOutput(anOutput);
		} else if (MODEL_OUTPUT.equals(anExpressionLC)) {
			return getModelOutput(aSpecification, aRequirementNumber);
		} else if (INPUT.equals(anExpressionLC)) {
			return getInput(aSpecification, aRequirementNumber);
		} else if (SOURCE.equals(anExpressionLC)) {
			return getSource(aRunningProject);
		}
		else return "";
		
	}
	
	public static String getSource(SakaiProject project) {
//		SakaiProject project = aRunningProject.getProject();
		return project.
				getClassesTextManager().getEditedAllSourcesText(project.getSourceFileName());
		
//		return Common.toText(aRunningProject.getProject().getSourceFileName()).toString();
	}
	
	public static boolean isFileName(String aString) {
		return (aString.endsWith(FILE_SUFFIX));
			
	}
	
	public static String toFullFileName(String aFileName) {
		SakaiProjectDatabase aProjectDatabase = ASakaiProjectDatabase.getCurrentSakaiProjectDatabase();
		String anAssignmentDataFoldername = aProjectDatabase.getAssignmentDataFolder().getMixedCaseAbsoluteName();
		return anAssignmentDataFoldername+ "/" + aFileName;
	}
	
	public static String toString(String aFileOrText) {
		if (isFileName(aFileOrText))
			return Common.toText(toFullFileName( aFileOrText)).toString();
		else
	        return aFileOrText.replace("\\n", "\n"); // to support new lines, csv reader gobbles up single slashes and leaves souble slashes unchanged

		
	}
	public static String getActualOutput(
			String anOutput) {
		return anOutput; // cannot be a file
	}
	public static String getModelOutput(CSVRequirementsSpecification aSpecification, int aRequirementNumber) {
		String aModelOutput = aSpecification.getModelOutput(aRequirementNumber);
		return toString(aModelOutput);
	}
	
	public static String getInput(CSVRequirementsSpecification aSpecification, 
			int aRequirementNumber) {
		String anInput = aSpecification.getInput(aRequirementNumber);
		return toString(anInput);
	}
	
	public static void main (String[] args) {
		String s = "1\\n2\\n";
		String s2 = s.replace("\\n", "\n");
		System.out.println(s2);
	}

}
]]></snapshot>
  </Command>
  <Command __id="6942" _type="FileOpenCommand" date="Sat Aug 24 17:10:37 EDT 2019" docASTNodeCount="1" docActiveCodeLength="755" docExpressionCount="0" docLength="755" projectName="comp110-grader" timestamp="105361037">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\config\Requirements.csv]]></filePath>
  </Command>
  <Command __id="6943" _type="FileOpenCommand" date="Sat Aug 24 17:10:37 EDT 2019" docASTNodeCount="1" docActiveCodeLength="755" docExpressionCount="0" docLength="755" projectName="comp110-grader" timestamp="105361065">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\config\Requirements.csv]]></filePath>
  </Command>
  <Command __id="6944" _type="FileOpenCommand" date="Sat Aug 24 17:10:47 EDT 2019" docASTNodeCount="1" docActiveCodeLength="755" docExpressionCount="0" docLength="755" projectName="comp110-grader" timestamp="105370570">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\config\Requirements.csv]]></filePath>
  </Command>
  <Command __id="6957" _type="FileOpenCommand" date="Sat Aug 24 17:16:55 EDT 2019" docASTNodeCount="248" docActiveCodeLength="1892" docExpressionCount="136" docLength="2253" projectName="GraderBasics" timestamp="105738329">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\project\CurrentProjectHolder.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.project;

import java.io.File;
import java.io.FileNotFoundException;

import grader.basics.config.BasicExecutionSpecification;
import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.execution.GradingMode;

public class CurrentProjectHolder {
	static Project currentProject;
	static boolean localProject;
	static File projectLocation;
	
	public static boolean isLocalProject() {
		return localProject;
	}
	public static void setLocalProject(boolean localProject) {
		CurrentProjectHolder.localProject = localProject;
	}
	public static Project getOrCreateCurrentProject() {
		if (currentProject == null && !GradingMode.getGraderRun()) {
			currentProject = createCurrentProject(); 
			setLocalProject(true);
		}
		return getCurrentProject();
	}
	public static Project getCurrentProject() {
		return currentProject;
	}
	// need a push project and pop project operation also for efficiency
	public static void setProject(Project aProject) {
		currentProject = aProject;
		BasicProjectIntrospection.clearProjectCaches();// avoid having to make an extra call for this
	}
	public static void setProject(String aSourceFilePattern){
		try {
			setProject(new BasicProject(aSourceFilePattern));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public static Project createCurrentProject() {
//		String aProjectLocation = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getGradableProjectLocation();
//		setProjectLocation(new File(aProjectLocation));
		try {
			return new BasicProject(null, getProjectLocation(), null, null);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	public static File getProjectLocation() {
		if (projectLocation == null ) {
			String aProjectLocation = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getGradableProjectLocation();
			projectLocation = new File(aProjectLocation);
		}
		return projectLocation;
	}
	public static void setProjectLocation(File projectLocation) {
		CurrentProjectHolder.projectLocation = projectLocation;
	}

}
]]></snapshot>
  </Command>
  <Command __id="6969" _type="FileOpenCommand" date="Sat Aug 24 17:17:38 EDT 2019" docASTNodeCount="1390" docActiveCodeLength="11547" docExpressionCount="908" docLength="18769" projectName="GraderBasics" timestamp="105781261">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\project\BasicProject.java]]></filePath>
  </Command>
  <Command __id="6975" _type="FileOpenCommand" date="Sat Aug 24 17:18:21 EDT 2019" docASTNodeCount="286" docActiveCodeLength="2011" docExpressionCount="148" docLength="2994" projectName="GraderBasics" timestamp="105824580">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\project\Project.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.project;

import grader.basics.execution.NotRunnableException;
import grader.basics.execution.RunningProject;
import grader.basics.util.Option;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Map;

//import scala.Option;
import util.pipe.InputGenerator;
import util.trace.TraceableLog;

/**
 * Based on {@link grader.project.flexible.FlexibleProject}
 */
public interface Project {
	public static final String SOURCE = "src";
	public static final String BINARY_0 = "classes";

	public static final String BINARY = "bin";
    public static final String BINARY_2 = "out";
    public static final String BINARY_3 = "build"; // net beans
    public static final String BINARY_4 = "target"; // net beans
    public static final String BINARY_5 = "Debug"; // net beans
    public static final String[] BINARIES  = {BINARY, BINARY_2, BINARY_3, BINARY_4, BINARY_5};

//    

//
    /**
     * Attempts to start the project in the same process
     */
    public RunningProject start(String input) throws NotRunnableException;

    /**
     * Attempts to launch the project in a new process
     */
    public RunningProject launch(String input) throws NotRunnableException;
//
//    /**
//     * Attempts to start the project in the same process
//     */
//    public RunningProject start(String input, int timeout) throws NotRunnableException;
//
    /**
     * Attempts to launch the project in a new process
     */
    public RunningProject launch(InputGenerator anOutputBasedInputGenerator, String input, int timeout) throws NotRunnableException;

    public RunningProject launch(String input, int timeout) throws NotRunnableException;
//
    public RunningProject launchInteractive() throws NotRunnableException;

    /**
     * @return The {@link ClassesManager} for this project. This can be used to look at the source code.
     */
    public Option<ClassesManager> getClassesManager();

    /**
     * @return The source code folder
     */
    public File getSourceFolder();

    /**
     * @return The bin/out/target folder
     */
    public File getBuildFolder(String preferredClass) throws FileNotFoundException;

    /**
     * When the project is run in the same JVM then it should log all tracer bus events. This returns that log
     * @return The traceable log of events.
     */
    public TraceableLog getTraceableLog();

    RunningProject launch(
			InputGenerator anOutputBasedInputGenerator,
			Map<String, String> aProcessToInput, int timeout)
			throws NotRunnableException;

	RunningProject launch(String input, String[] anArgs, int timeout)
			throws NotRunnableException;

	boolean isInfinite();

	void setInfinite(boolean newVal);

	File getProjectFolder();

	File getBuildFolder() throws FileNotFoundException;

	File getObjectFolder();

//	RunningProject launchInteractive(String[] args) throws NotRunnableException;
}
]]></snapshot>
  </Command>
  <Command __id="6978" _type="FileOpenCommand" date="Sat Aug 24 17:18:44 EDT 2019" docASTNodeCount="1390" docActiveCodeLength="11547" docExpressionCount="908" docLength="18769" projectName="GraderBasics" timestamp="105848025">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\project\BasicProject.java]]></filePath>
  </Command>
  <Command __id="6980" _type="FileOpenCommand" date="Sat Aug 24 17:19:20 EDT 2019" docASTNodeCount="1690" docActiveCodeLength="11475" docExpressionCount="1011" docLength="16458" projectName="GraderBasics" timestamp="105883078">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\BasicJUnitUtils.java]]></filePath>
  </Command>
  <Command __id="6982" _type="FileOpenCommand" date="Sat Aug 24 17:19:22 EDT 2019" docASTNodeCount="1390" docActiveCodeLength="11547" docExpressionCount="908" docLength="18769" projectName="GraderBasics" timestamp="105885834">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\project\BasicProject.java]]></filePath>
  </Command>
  <Command __id="6989" _type="FileOpenCommand" date="Sat Aug 24 17:20:33 EDT 2019" docASTNodeCount="456" docActiveCodeLength="3409" docExpressionCount="299" docLength="4280" projectName="comp110-grader" timestamp="105956830">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\framework\project\StandardProject.java]]></filePath>
    <snapshot><![CDATA[package framework.project;

import framework.execution.ARunningProject;
import framework.execution.InteractiveConsoleProcessRunner;
import framework.execution.ProcessRunner;
import framework.execution.ReflectionRunner;
import grader.basics.execution.NotRunnableException;
import grader.basics.execution.RunningProject;
import grader.basics.project.BasicProject;
import grader.basics.project.ClassesManager;
import grader.basics.project.CurrentProjectHolder;
import grader.basics.util.Option;
import grader.sakai.project.SakaiProject;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Map;

import util.pipe.InputGenerator;

//import scala.Option;


/**
 * A "standard" project. That is, an IDE-based java project.
 */
public class StandardProject extends BasicProject implements FatProject {
    
//
//    private File directory;
//    private File sourceFolder;
//    private Option<ClassesManager> classesManager;
//    private TraceableLog traceableLog;
//    boolean noSrc;
    protected SakaiProject project;
    protected void setProject (Object aProject) {
    	project = (SakaiProject) aProject;
    }
    protected Option<ClassesManager> createClassesManager(File buildFolder) throws ClassNotFoundException, IOException {
//      classesManager = Option.apply((ClassesManager) new ProjectClassesManager(project, buildFolder, sourceFolder));
     CurrentProjectHolder.setProject(this);
     CurrentProjectHolder.setProjectLocation(this.projectFolder);
     // so that classes manager can find it
     return Option.apply((ClassesManager) new ProjectClassesManager(this, project, buildFolder, sourceFolder, sourceFilePattern));

  }
    /**
     * Basic constructor
     *
     * @param aDirectory The location of the project
     * @param name      The name of the project, such as "Assignment1"
     * @throws FileNotFoundException
     */

    // rewriting Josh's code
    public StandardProject(SakaiProject aProject, File aDirectory, String name, String aFilePattern) throws FileNotFoundException {
        super(aProject, aDirectory, name, aFilePattern);
        project = aProject; 

    }
    


    @Override
    public ARunningProject start(String input) throws NotRunnableException {
        return new ReflectionRunner(this).run(input);
    }

    @Override
    public RunningProject launch(String input) throws NotRunnableException {
        return new ProcessRunner(this).run(input);
    }

    @Override
    public RunningProject start(String input, int timeout) throws NotRunnableException {
        return new ReflectionRunner(this).run(input, timeout);
    }

    @Override
    public RunningProject launch(InputGenerator anOutputBasedInputGenerator, String input, int timeout) throws NotRunnableException {
        return new ProcessRunner(this).run(anOutputBasedInputGenerator, input, timeout);
    }
    @Override
    public RunningProject launch(InputGenerator anOutputBasedInputGenerator, Map<String, String> aProcessToInput, int timeout) throws NotRunnableException {
        return new ProcessRunner(this).run(anOutputBasedInputGenerator, aProcessToInput, timeout);
    }
    
    @Override
    public RunningProject launch( String input, int timeout) throws NotRunnableException {
        return new ProcessRunner(this).run(input, timeout);
    }
    @Override
    public RunningProject launch( String input, String[] anArgs, int timeout) throws NotRunnableException {
        return new ProcessRunner(this).run(input, anArgs, timeout);
    }

    @Override
    public RunningProject launchInteractive() throws NotRunnableException {
    	RunningProject retVal = new InteractiveConsoleProcessRunner(this).run("");
//    	retVal.createFeatureTranscript();
    	return retVal;
//        return new InteractiveConsoleProcessRunner(this).run("");
    }
    @Override
    public RunningProject launchInteractive(String[] args) throws NotRunnableException {
    	RunningProject retVal = new InteractiveConsoleProcessRunner(this).run("", args);
//    	retVal.createFeatureTranscript();
    	return retVal;
//        return new InteractiveConsoleProcessRunner(this).run("");
    }
   
}
]]></snapshot>
  </Command>
  <Command __id="6991" _type="FileOpenCommand" date="Sat Aug 24 17:20:35 EDT 2019" docASTNodeCount="57" docActiveCodeLength="451" docExpressionCount="37" docLength="1460" projectName="comp110-grader" timestamp="105958720">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\framework\project\FatProject.java]]></filePath>
    <snapshot><![CDATA[package framework.project;

import grader.basics.execution.NotRunnableException;
import grader.basics.execution.RunningProject;
import grader.basics.project.Project;

public interface FatProject extends Project{
	/**
     * Attempts to start the project in the same process
     */
//    public RunningProject start(String input) throws NotRunnableException;

//    /**
//     * Attempts to launch the project in a new process
//     */
//    public RunningProject launch(String input) throws NotRunnableException;

    /**
     * Attempts to start the project in the same process
     */
    public RunningProject start(String input, int timeout) throws NotRunnableException;

//    /**
//     * Attempts to launch the project in a new process
//     */
//    public RunningProject launch(InputGenerator anOutputBasedInputGenerator, String input, int timeout) throws NotRunnableException;
//
//    public RunningProject launch(String input, int timeout) throws NotRunnableException;

//    public RunningProject launchInteractive() throws NotRunnableException;

//    RunningProject launch(
//			InputGenerator anOutputBasedInputGenerator,
//			Map<String, String> aProcessToInput, int timeout)
//			throws NotRunnableException;
//
//	RunningProject launch(String input, String[] anArgs, int timeout)
//			throws NotRunnableException;

	RunningProject launchInteractive(String[] args) throws NotRunnableException;

}
]]></snapshot>
  </Command>
  <Command __id="6994" _type="FileOpenCommand" date="Sat Aug 24 17:21:49 EDT 2019" docASTNodeCount="2394" docActiveCodeLength="20847" docExpressionCount="1396" docLength="25952" projectName="comp110-grader" timestamp="106032339">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\project\flexible\AFlexibleProject.java]]></filePath>
  </Command>
  <Command __id="7008" _type="FileOpenCommand" date="Sat Aug 24 17:23:12 EDT 2019" docASTNodeCount="247" docActiveCodeLength="1530" docExpressionCount="139" docLength="1635" projectName="comp110-grader" timestamp="106115594">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\project\view\AClassViewManager.java]]></filePath>
    <snapshot><![CDATA[package grader.project.view;

import grader.project.flexible.FlexibleClassesManager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
// applies
public class AClassViewManager implements ClassViewManager<String> {
	FlexibleClassesManager classesManager;
	Map<String, List<ViewableClassDescription<String>>> views = new HashMap();
	public AClassViewManager (FlexibleClassesManager aClassesManager) {
		classesManager = aClassesManager;	
		initViews();
		
	}
	/* (non-Javadoc)
	 * @see grader.project.view.ClassViewManager#getView(java.lang.String)
	 */
	@Override
	public List<ViewableClassDescription<String>> getView(String aViewName) {
		return views.get(aViewName);		
	}
	
	public List<ViewableClassDescription<String>> getViewableClassDescriptions(String aViewName, String aFilter) {
		List<ViewableClassDescription<String>> view = getView(aViewName);
		List<ViewableClassDescription<String>> retVal = new ArrayList();
		for (ViewableClassDescription viewable:view) {
			if (viewable.filter(aFilter))
				retVal.add(viewable);
		}
		return retVal;
	}
	
	public List<ViewableClassDescription<String>> getViewableClassDescriptions() {
		return getViewableClassDescriptions(ViewNames.CLASS_NAME_VIEW, null);
	}
	
	
	void initViews() {
		Set<String> viewNames = ClassesViewRegistrar.getViewNames();
		for (String aViewName: viewNames) {
			List<ViewableClassDescription<String>> view = ClassesViewRegistrar.createView(classesManager.getClassDescriptions(), aViewName);
			views.put(aViewName, view);
		}		
	}

}
]]></snapshot>
  </Command>
  <Command __id="7011" _type="FileOpenCommand" date="Sat Aug 24 17:23:18 EDT 2019" docASTNodeCount="2394" docActiveCodeLength="20847" docExpressionCount="1396" docLength="25952" projectName="comp110-grader" timestamp="106121763">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\project\flexible\AFlexibleProject.java]]></filePath>
  </Command>
  <Command __id="7015" _type="FileOpenCommand" date="Sat Aug 24 17:23:22 EDT 2019" docASTNodeCount="541" docActiveCodeLength="4113" docExpressionCount="343" docLength="5432" projectName="comp110-grader" timestamp="106125154">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\project\source\AClassesTextManager.java]]></filePath>
    <snapshot><![CDATA[package grader.project.source;


import grader.basics.util.GraderFileUtils;
import grader.project.view.ClassViewManager;
import grader.project.view.ViewableClassDescription;
import grader.sakai.project.SakaiProject;
import grader.trace.source.SourceFileComputed;
import grader.trace.source.SourceFileLoaded;
import grader.trace.source.SourceFileSaved;

import java.io.File;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import util.misc.Common;


public class AClassesTextManager implements ClassesTextManager {
    public static final String SOURCE_SUFFIX = "//END OF FILE\n";
    public static final String SOURCE_PREFIX = "//START OF FILE: ";
    public static final int MAX_FILE_NAME_LENGTH = 100;
    Map<String, StringBuffer> views = new HashMap();
    StringBuffer allSourcesText;
    ClassViewManager classesManager;
//    String sourceFileNamePrefix = SOURCE_PREFIX;
//    String sourceFileNameSuffix = SOURCE_SUFFIX;
//    String sourceFileName = sourceFileNamePrefix + sourceFileNameSuffix; 
//    Project project;


    public AClassesTextManager(ClassViewManager aClassesManager) {
        classesManager = aClassesManager;
//        sourceFileNameSuffix = aProject.getSourceSuffix();
    }

    /* (non-Javadoc)
     * @see grader.project.ClassesSourceManager#writeAllSourcesText()
     */
    @Override
    public void writeAllSourcesText(String aFileName) {
        try {
        	File sourceFile = new File(aFileName);
        	if (sourceFile.exists()) return;
            PrintWriter out = new PrintWriter(aFileName);
            String allText = getAllSourcesText().toString();
            out.print(allText);
            out.close();
            SourceFileComputed.newCase(aFileName, allText, this);
        } catch (Exception e) {
//            e.printStackTrace(); // Commented out by Josh
        }
    }
    
    @Override
    public void setEditedAllSourcesText(String aFileName, String newValue) {
        try {
        	
            PrintWriter out = new PrintWriter(aFileName);
            out.print(newValue);
            out.close();
            SourceFileSaved.newCase(aFileName, newValue, this);

        } catch (Exception e) {
//            e.printStackTrace(); // Commented out by Josh
        }
    }
    @Override
    public String getEditedAllSourcesText(String aFileName) {
    	File sourceFile = new File(aFileName);
    	if (!sourceFile.exists()) writeAllSourcesText(aFileName);
//    	return Common.toText(aFileName).toString();
    	
    	String retVal = Common.toText(aFileName).toString();
        SourceFileLoaded.newCase(aFileName, retVal, this);
        return retVal;

    }

//    @Override
//    public void writeAllSourcesText() {
////        writeAllSourcesText(DEFAULT_SOURCES_FILE_NAME);
//        writeAllSourcesText(sourceFileName);
//
//    }

    /* (non-Javadoc)
     * @see grader.project.ClassesSourceManager#initializeAllSourcesText()
     */
    @Override
    public void initializeAllSourcesText() {
        Collection<ViewableClassDescription> filteredClasses = classesManager.getViewableClassDescriptions();
        allSourcesText = toStringBuffer(filteredClasses);
    }

    @Override
    public StringBuffer toStringBuffer(Collection<ViewableClassDescription> sourceClasses) {
        int totalTextSize = totalTextSize(sourceClasses) + sourceClasses.size() * (SOURCE_SUFFIX.length() + SOURCE_PREFIX.length() + MAX_FILE_NAME_LENGTH);
        StringBuffer retVal = new StringBuffer(totalTextSize);
        for (ViewableClassDescription viewable : sourceClasses) {
        	SakaiProject aProject =  (SakaiProject) viewable.getClassDescription().getProject();
        	String aProjectFolderName = aProject.getProjectFolderName();
        //System.out.println(this.getClass().getName());
        	String aLocalName = GraderFileUtils.toRelativeName(aProjectFolderName, viewable.getClassDescription().getSourceFile().getAbsoluteName());
//        	String fileName = viewable.getClassDescription().getSourceFile().getParentRelativeName();
//        	String prefix = SOURCE_PREFIX + fileName + "\n";
        	String prefix = SOURCE_PREFIX + aLocalName + "\n";
        	retVal.append(prefix);
            retVal.append(viewable.getClassDescription().getText());
            retVal.append(SOURCE_SUFFIX);
        }
        return retVal;
    }

    /* (non-Javadoc)
     * @see grader.project.ClassesSourceManager#totalTextSize(java.util.Collection)
     */
    public int totalTextSize(Collection<ViewableClassDescription> aSourceClasses) {
        int retVal = 0;
        for (ViewableClassDescription viewable : aSourceClasses) {
            retVal += viewable.getClassDescription().getText().length();
        }
        return retVal;
    }

    /* (non-Javadoc)
     * @see grader.project.ClassesSourceManager#getAllSourcesText()
     */
    @Override
    public StringBuffer getAllSourcesText() {
        if (allSourcesText == null)
            initializeAllSourcesText();
        return allSourcesText;
    }

    /* (non-Javadoc)
     * @see grader.project.ClassesSourceManager#setAllSourcesText(java.lang.StringBuffer)
     */
    @Override
    public void setAllSourcesText(StringBuffer anAllSourcesText) {
        allSourcesText = allSourcesText;
    }

}
]]></snapshot>
  </Command>
  <Command __id="7046" _type="FileOpenCommand" date="Sat Aug 24 17:31:39 EDT 2019" docASTNodeCount="7" docActiveCodeLength="46" docExpressionCount="5" docLength="89" projectName="GraderBasics" timestamp="106622447">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\gradingTools\nterpreter\testcases\package-info.java]]></filePath>
    <snapshot><![CDATA[/**
 * 
 */
/**
 * @author dewan
 *
 */
package gradingTools.nterpreter.testcases;]]></snapshot>
  </Command>
  <Command __id="7031" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 17:28:57 EDT 2019" timestamp="106460919" />
  <Command __id="7032" _type="ShellCommand" date="Sat Aug 24 17:29:10 EDT 2019" timestamp="106473484" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7033" _type="ShellCommand" date="Sat Aug 24 17:29:17 EDT 2019" timestamp="106480620" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7034" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 17:29:17 EDT 2019" timestamp="106480637" />
  <Command __id="7035" _type="ShellCommand" date="Sat Aug 24 17:29:21 EDT 2019" timestamp="106484235" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7036" _type="ShellCommand" date="Sat Aug 24 17:29:28 EDT 2019" timestamp="106491891" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7037" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 17:29:28 EDT 2019" timestamp="106491911" />
  <Command __id="7038" _type="ShellCommand" date="Sat Aug 24 17:29:41 EDT 2019" timestamp="106504896" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7039" _type="BreakPointCommand" date="Sat Aug 24 17:29:48 EDT 2019" lineNumber="14" timestamp="106511862" type="BreakPointAdded" />
  <Command __id="7040" _type="ShellCommand" date="Sat Aug 24 17:29:48 EDT 2019" timestamp="106512069" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7041" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 17:29:49 EDT 2019" timestamp="106512088" />
  <Command __id="7042" _type="ShellCommand" date="Sat Aug 24 17:30:48 EDT 2019" timestamp="106571446" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7043" _type="ShellCommand" date="Sat Aug 24 17:30:51 EDT 2019" timestamp="106574707" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7044" _type="ShellCommand" date="Sat Aug 24 17:31:00 EDT 2019" timestamp="106583353" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7045" _type="ShellCommand" date="Sat Aug 24 17:31:39 EDT 2019" timestamp="106622115" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7047" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 17:31:39 EDT 2019" docOffset="0" timestamp="106622721" />
  <Command __id="7048" _type="ShellCommand" date="Sat Aug 24 17:31:51 EDT 2019" timestamp="106634211" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7049" _type="ShellCommand" date="Sat Aug 24 17:32:37 EDT 2019" timestamp="106680850" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7051" _type="PredictionCommand" date="Sat Aug 24 17:32:38 EDT 2019" prediction_type="MakingProgress" timestamp="106681172" />
  <Command __id="7052" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 17:32:38 EDT 2019" docOffset="0" timestamp="106681438" />
  <Command __id="7053" _type="MoveCaretCommand" caretOffset="81" date="Sat Aug 24 17:32:42 EDT 2019" docOffset="81" timestamp="106685911" />
  <Command __id="7055" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 17:33:13 EDT 2019" docOffset="0" timestamp="106717051" />
  <Command __id="7056" _type="SelectTextCommand" caretOffset="166" date="Sat Aug 24 17:33:20 EDT 2019" end="166" start="137" timestamp="106723771" />
  <Command __id="7057" _type="CopyCommand" date="Sat Aug 24 17:33:21 EDT 2019" timestamp="106724553" />
  <Command __id="7105" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 17:37:49 EDT 2019" timestamp="106992706" />
  <Command __id="7106" _type="SelectTextCommand" caretOffset="329" date="Sat Aug 24 17:37:49 EDT 2019" end="329" start="325" timestamp="106992875" />
  <Command __id="7107" _type="MoveCaretCommand" caretOffset="700" date="Sat Aug 24 17:37:58 EDT 2019" docOffset="1506" timestamp="107001234" />
  <Command __id="7108" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 17:37:59 EDT 2019" timestamp="107002934" />
  <Command __id="7109" _type="MoveCaretCommand" caretOffset="125" date="Sat Aug 24 17:38:04 EDT 2019" docOffset="931" timestamp="107007202" />
  <Command __id="7111" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 17:38:05 EDT 2019" timestamp="107008688" />
  <Command __id="7112" _type="SelectTextCommand" caretOffset="223" date="Sat Aug 24 17:38:05 EDT 2019" end="223" start="212" timestamp="107008776" />
  <Command __id="7113" _type="MoveCaretCommand" caretOffset="129" date="Sat Aug 24 17:38:08 EDT 2019" docOffset="497" timestamp="107011281" />
  <Command __id="7115" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 17:38:09 EDT 2019" timestamp="107012512" />
  <Command __id="7116" _type="SelectTextCommand" caretOffset="154" date="Sat Aug 24 17:38:09 EDT 2019" end="154" start="140" timestamp="107012609" />
  <Command __id="7118" _type="MoveCaretCommand" caretOffset="416" date="Sat Aug 24 17:39:56 EDT 2019" docOffset="559" timestamp="107119560" />
  <Command __id="7120" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 17:40:02 EDT 2019" timestamp="107125225" />
  <Command __id="7121" _type="SelectTextCommand" caretOffset="329" date="Sat Aug 24 17:40:02 EDT 2019" end="329" start="325" timestamp="107125299" />
  <Command __id="7122" _type="MoveCaretCommand" caretOffset="684" date="Sat Aug 24 17:40:03 EDT 2019" docOffset="1490" timestamp="107126971" />
  <Command __id="7124" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 17:40:06 EDT 2019" timestamp="107129149" />
  <Command __id="7125" _type="SelectTextCommand" caretOffset="2350" date="Sat Aug 24 17:40:06 EDT 2019" end="2350" start="2335" timestamp="107129245" />
  <Command __id="7126" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sat Aug 24 17:40:18 EDT 2019" timestamp="107141764" />
  <Command __id="7127" _type="BreakPointCommand" date="Sat Aug 24 17:40:18 EDT 2019" lineNumber="98" timestamp="107141766" type="BreakPointAdded" />
  <Command __id="7128" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.DebugLast" date="Sat Aug 24 17:40:30 EDT 2019" timestamp="107153430" />
  <Command __id="7129" _type="EclipseCommand" commandID="" date="Sat Aug 24 17:40:30 EDT 2019" repeat="6" timestamp="107153433" timestamp2="107154617" />
  <Command __id="7135" _type="RunCommand" date="Sat Aug 24 17:40:31 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="107154753" type="Run" />
  <Command __id="7136" _type="RunCommand" date="Sat Aug 24 17:40:32 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="107155268" type="Run" />
  <Command __id="7137" _type="RunCommand" date="Sat Aug 24 17:40:32 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="107155493" type="Run" />
  <Command __id="7138" _type="EHExceptionCommand" date="Sat Aug 24 17:40:32 EDT 2019" timestamp="107155606" type="Exception">
    <outputString><![CDATA[I***Tracer: showInfo = true
]]></outputString>
  </Command>
  <Command __id="7139" _type="EHExceptionCommand" date="Sat Aug 24 17:40:33 EDT 2019" timestamp="107156289" type="Exception">
    <outputString><![CDATA[Buffer traced nessages =false
]]></outputString>
  </Command>
  <Command __id="7140" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Terminate" date="Sat Aug 24 17:40:39 EDT 2019" timestamp="107162471" />
  <Command __id="7141" _type="RunCommand" date="Sat Aug 24 17:40:39 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="107162486" type="Debug" />
  <Command __id="7142" _type="RunCommand" date="Sat Aug 24 17:40:39 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="107162488" type="Run" />
  <Command __id="7143" _type="RunCommand" date="Sat Aug 24 17:40:39 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="107162488" type="Debug" />
  <Command __id="7144" _type="RunCommand" date="Sat Aug 24 17:40:39 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="107162488" type="Run" />
  <Command __id="7145" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sat Aug 24 17:40:43 EDT 2019" timestamp="107166834" />
  <Command __id="7146" _type="RunCommand" date="Sat Aug 24 17:40:43 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="107166836" type="Run" />
  <Command __id="7147" _type="ShellCommand" date="Sat Aug 24 17:40:50 EDT 2019" timestamp="107173508" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7148" _type="ShellCommand" date="Sat Aug 24 17:40:52 EDT 2019" timestamp="107175491" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7149" _type="MoveCaretCommand" caretOffset="4378" date="Sat Aug 24 17:41:06 EDT 2019" docOffset="5230" timestamp="107189652" />
  <Command __id="7151" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sat Aug 24 17:41:08 EDT 2019" timestamp="107191728" />
  <Command __id="7152" _type="SelectTextCommand" caretOffset="197" date="Sat Aug 24 17:41:08 EDT 2019" end="197" start="180" timestamp="107191805" />
  <Command __id="7153" _type="MoveCaretCommand" caretOffset="180" date="Sat Aug 24 17:41:10 EDT 2019" docOffset="353" timestamp="107194013" />
  <Command __id="7154" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.type.hierarchy" date="Sat Aug 24 17:41:18 EDT 2019" timestamp="107201125" />
  <Command __id="7156" _type="SelectTextCommand" caretOffset="278" date="Sat Aug 24 17:41:22 EDT 2019" end="278" start="260" timestamp="107205703" />
  <Command __id="7157" _type="MoveCaretCommand" caretOffset="907" date="Sat Aug 24 17:42:15 EDT 2019" docOffset="1908" timestamp="107258451" />
  <Command __id="7159" _type="ShellCommand" date="Sat Aug 24 17:42:22 EDT 2019" timestamp="107265849" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7160" _type="FindCommand" caseSensitive="true" date="Sat Aug 24 17:42:25 EDT 2019" forward="true" matchWord="false" offset="1908" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="107268693" wrapSearch="true">
    <searchString><![CDATA[score]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7161" _type="FindCommand" caseSensitive="true" date="Sat Aug 24 17:42:34 EDT 2019" forward="true" matchWord="false" offset="5886" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="107277388" wrapSearch="true">
    <searchString><![CDATA[score]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7162" _type="FindCommand" caseSensitive="true" date="Sat Aug 24 17:42:36 EDT 2019" forward="true" matchWord="false" offset="16770" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="107279631" wrapSearch="true">
    <searchString><![CDATA[score]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7163" _type="FindCommand" caseSensitive="true" date="Sat Aug 24 17:42:49 EDT 2019" forward="true" matchWord="false" offset="1950" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="107292794" wrapSearch="true">
    <searchString><![CDATA[getName]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7164" _type="FindCommand" caseSensitive="true" date="Sat Aug 24 17:42:56 EDT 2019" forward="true" matchWord="false" offset="7933" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="107299793" wrapSearch="true">
    <searchString><![CDATA[getName]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="7165" _type="ShellCommand" date="Sat Aug 24 17:43:16 EDT 2019" timestamp="107319198" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7050" _type="FileOpenCommand" date="Sat Aug 24 17:32:38 EDT 2019" docASTNodeCount="10" docActiveCodeLength="90" docExpressionCount="6" docLength="90" projectName="GraderBasics" timestamp="106681169">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\gradingTools\nterpreter\testcases\AnInterpretingTestCase.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.nterpreter.testcases;

public class AnInterpretingTestCase {

}
]]></snapshot>
  </Command>
  <Command __id="7054" _type="FileOpenCommand" date="Sat Aug 24 17:33:13 EDT 2019" docASTNodeCount="339" docActiveCodeLength="2718" docExpressionCount="257" docLength="7683" projectName="Comp533LocalChecks" timestamp="106716884">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp533LocalChecks\src\gradingTools\comp533s19\assignment0\testcases\ConfigurationProvided.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.comp533s19.assignment0.testcases;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.config.BasicStaticConfigurationUtils;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.ResultingOutErr;
import grader.basics.execution.RunningProject;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.BasicProjectIntrospection;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp533s19.assignment0.interfaces.TestMapReduceConfiguration;
import gradingTools.comp533s19.assignment0.interfaces.TestMapper;
import gradingTools.comp533s19.assignment0.interfaces.TestReducer;
import gradingTools.comp533s19.assignment1.Assignment1Suite;
import gradingTools.shared.testcases.MethodExecutionTest.OutputErrorStatus;
import gradingTools.shared.testcases.utils.ABufferingTestInputGenerator;
import gradingTools.utils.RunningProjectUtils;
import util.annotations.MaxValue;
import util.tags.DistributedTags;
@MaxValue(10)
public class ConfigurationProvided extends PassFailJUnitTestCase {
	public static final String CONFIGURATION_CLASS = "MyMapReduceConfiguration";
	TestMapReduceConfiguration testConfiguration ;


	public TestMapReduceConfiguration getTestConfiguration() {
		return testConfiguration;
	}

	@Override
	public TestCaseResult test(Project project, boolean autoGrade)
			throws NotAutomatableException, NotGradableException {
		try {
			Class aConfigurationClass = Class.forName(CONFIGURATION_CLASS);
			Object aConfigurationObject = aConfigurationClass.newInstance();
			 testConfiguration =  (TestMapReduceConfiguration) BasicProjectIntrospection.createProxy(TestMapReduceConfiguration.class, aConfigurationObject);
//			Object aMapperObject = testConfiguration.getTokenCountingMapper();
//			TestMapper aMapper = (TestMapper) BasicProjectIntrospection.createProxy(TestMapper.class, aMapperObject);
//			Object aReducerObject = testConfiguration.getReducer();
//			TestReducer aReducer = (TestReducer) BasicProjectIntrospection.createProxy(TestReducer.class, aReducerObject);
//			Object a1 = aMapper.map("a ");
//			Object a2 = aMapper.map("a");
//			List aList = new ArrayList();
//			aList.add(a1);
//			aList.add(a2);
//			
////			aList.add("c");
//			Object retVal = aReducer.reduce(aList);
//			
//			Class aStandAloneTokenCountingClass = testConfiguration.getStandAloneTokenCounter();
//			BasicStaticConfigurationUtils.setBasicCommandToDefaultEntryPointCommand();
//			String[] emptyArgs = {};
//			ResultingOutErr anOutError = BasicProjectExecution.callOrForkMain(true, aStandAloneTokenCountingClass.getName(), emptyArgs, "3", "a an the a an the a a a an an an the the the");
//			Class aStandALoneIntegerCountingClass = testConfiguration.getStandAloneIntegerSummer();
//			anOutError = BasicProjectExecution.callOrForkMain(true, aStandALoneIntegerCountingClass.getName(), emptyArgs, "3", "1 2 3 4 5 6 7 8 9\n10 20 30 40 50 60 70 80 90\nquit");
//
//			ABufferingTestInputGenerator aGenerator = this.getOutputBasedInputGenerator();
//			setInteractiveInputProject(anOutError.getRunningProject());
//
//						RunningProject aProject = this.getInteractiveInputProject();
//			String anOutput = aProject.getOutputAndErrors();
//			setupProcesses(testConfiguration);
//			Map<String, String> aProcessToInput = new HashMap<>();
//			String[] aServerInput = {
//					"aaa jjj sss zzzz aaa aaa jjj zzz aaa jjj",
//					"bbb iii ttt yyy bbb bbb iii yyy bbb iii"
//			};
////			notifyNewInputLine(GetConfiguration.MAP_REDUCE_SERVER, "bbb iii ttt yyy bbb bbb iii yyy bbb iii");
////			aProcessToInput.put(MAP_REDUCE_SERVER, aServerInput);
//			interactiveInputProject = RunningProjectUtils.runProject(project, 600, new MapReduceInputGenerator(3, aServerInput));
//			 String anOutput2 = interactiveInputProject.await();
//			 
//				String aServerClassName = testConfiguration.getServerIntegerSummer().getName();
//				BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setEntryPoint(
//						MAP_REDUCE_SERVER , aServerClassName);
//				String[] aServerIntInput = {
//						"1 2 3 4 5 6 7 8 9",
//						"111 222 333 444 555 666 777 888 999",
//						"11 22 33 44 55 66 77 88 99"};
//				interactiveInputProject = RunningProjectUtils.runProject(project, 300, new MapReduceInputGenerator(3, aServerIntInput));
//
//			 int i = 4;
////			int i = 4;
////			System.out.println(anOutError.out);
			
			
			
		} 
		catch (ClassNotFoundException  e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return fail("Could not find configuration class:" + e.getMessage());
		
		
		} 
		catch (InstantiationException | IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return fail("Could not instantiate configuration object:" + e.getMessage());		
		
		} 
		catch (Throwable e) {
			e.printStackTrace();
			return fail("Exception occurred:" + e.getMessage());

		}
		return pass();
	}
//	public static final String MAP_REDUCE_PROCESS_TEAM = "MapReduce Team";
//	public static final String MAP_REDUCE_SERVER = "MapReduce Server";
//	public static final String MAP_REDUCE_CLIENT_1 = "MapReduce Client 1";
//	public static final String MAP_REDUCE_CLIENT_2 = "MapReduce Client 2";
//
//	protected void setupProcesses(TestMapReduceConfiguration aTestMapReduceConfiguration) {
//		String aServerClassName = aTestMapReduceConfiguration.getServerTokenCounter().getName();
//		String aClientClassName = aTestMapReduceConfiguration.getClientTokenCounter().getName();
//		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setProcessTeams(Arrays.asList(MAP_REDUCE_PROCESS_TEAM));
//		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setTerminatingProcesses(MAP_REDUCE_PROCESS_TEAM, 
//				Arrays.asList(MAP_REDUCE_CLIENT_1));
//		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setProcesses(MAP_REDUCE_PROCESS_TEAM, 
//				Arrays.asList(MAP_REDUCE_SERVER, MAP_REDUCE_CLIENT_1, MAP_REDUCE_CLIENT_2));
//		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setEntryPoint(
//				MAP_REDUCE_SERVER , aServerClassName);
//		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setEntryPoint(
//				MAP_REDUCE_CLIENT_1 , aClientClassName);
//		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setEntryPoint(
//				MAP_REDUCE_CLIENT_2 , aClientClassName);
////		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setEntryTags(
////				CLIENT_1_NAME, Arrays.asList(client1TaggedTestCase.getTags()));
////		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setEntryTags(
////				CLIENT_2_NAME, Arrays.asList(client2TaggedTestCase.getTags()));
////		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setSleepTime(SERVER_NAME, 5000);
//		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().
//			setSleepTime(MAP_REDUCE_CLIENT_1, 7000);
//		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().
//			setSleepTime(MAP_REDUCE_CLIENT_2, 7000);
//		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getProcessTeams().forEach(team -> System.out.println("### " + team));
//	}

}
]]></snapshot>
  </Command>
  <Command __id="7058" _type="FileOpenCommand" date="Sat Aug 24 17:33:41 EDT 2019" docASTNodeCount="10" docActiveCodeLength="90" docExpressionCount="6" docLength="90" projectName="GraderBasics" timestamp="106744818">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\gradingTools\nterpreter\testcases\AnInterpretingTestCase.java]]></filePath>
  </Command>
  <DocumentChange __id="7060" _type="Insert" date="Sat Aug 24 17:33:44 EDT 2019" docASTNodeCount="12" docActiveCodeLength="120" docExpressionCount="7" docLength="120" length="30" offset="81" repeat="2" timestamp="106747613" timestamp2="106748103">
    <text><![CDATA[ extends PassFailJUnitTestCase]]></text>
  </DocumentChange>
  <DocumentChange __id="7063" _type="Delete" date="Sat Aug 24 17:33:45 EDT 2019" docASTNodeCount="12" docActiveCodeLength="116" docExpressionCount="7" docLength="116" endLine="2" length="4" offset="42" startLine="0" timestamp="106748130">
    <text><![CDATA[

]]></text>
  </DocumentChange>
  <DocumentChange __id="7064" _type="Insert" date="Sat Aug 24 17:33:45 EDT 2019" docASTNodeCount="20" docActiveCodeLength="176" docExpressionCount="14" docLength="176" length="60" offset="42" repeat="3" timestamp="106748130" timestamp2="106748131">
    <text><![CDATA[

import grader.basics.testcase.PassFailJUnitTestCase;

]]></text>
  </DocumentChange>
  <DocumentChange __id="7074" _type="Insert" date="Sat Aug 24 17:34:01 EDT 2019" docASTNodeCount="39" docActiveCodeLength="338" docExpressionCount="24" docLength="372" length="196" offset="169" repeat="4" timestamp="106764116" timestamp2="106764118">
    <text><![CDATA[

	@Override
	public TestCaseResult test(Project project, boolean autoGrade)
			throws NotAutomatableException, NotGradableException {
		// TODO Auto-generated method stub
		return null;
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="7078" _type="Insert" date="Sat Aug 24 17:34:01 EDT 2019" docASTNodeCount="71" docActiveCodeLength="526" docExpressionCount="52" docLength="560" length="188" offset="46" repeat="8" timestamp="106764118" timestamp2="106764120">
    <text><![CDATA[import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
]]></text>
  </DocumentChange>
  <DocumentChange __id="7090" _type="Delete" date="Sat Aug 24 17:34:03 EDT 2019" docASTNodeCount="71" docActiveCodeLength="522" docExpressionCount="52" docLength="522" endLine="14" length="38" offset="497" startLine="13" timestamp="106767063">
    <text><![CDATA[		// TODO Auto-generated method stub
]]></text>
  </DocumentChange>
  <Command __id="7100" _type="FileOpenCommand" date="Sat Aug 24 17:36:24 EDT 2019" docASTNodeCount="269" docActiveCodeLength="2352" docExpressionCount="195" docLength="5602" projectName="Comp533LocalChecks" timestamp="106907585">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp533LocalChecks\src\gradingTools\comp533s19\assignment0\testcases\counts\standalone\StandAloneTokenCountResult.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.comp533s19.assignment0.testcases.counts.standalone;

import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.config.BasicStaticConfigurationUtils;
import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.BasicRunningProject;
import grader.basics.execution.GradingMode;
import grader.basics.execution.ResultingOutErr;
import grader.basics.junit.JUnitTestsEnvironment;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.comp533s19.assignment0.Assignment0Suite;
import gradingTools.comp533s19.assignment0.testcases.ConfigurationProvided;
import gradingTools.comp533s19.assignment4.testcases.AStringCheckBasedDependentTestCase;
import gradingTools.shared.testcases.MainMethodForkerTest;
import gradingTools.shared.testcases.MethodExecutionTest;
import gradingTools.shared.testcases.SubstringSequenceChecker;

public class StandAloneTokenCountResult extends MainMethodForkerTest {
	public StandAloneTokenCountResult() {
//		BasicProjectExecution.setProcessTimeOut(Assignment0Suite.getProcessTimeOut());
	}
//	protected Class mainClass;
//
//	
//	protected String mainClassName;
//	protected String[] emptyStringArgs = {};
//    
//    public String getMainClassName() {
//    	if (mainClassName == null) {
//    		mainClassName = mainClassName();
//    	}
//		return mainClassName;
//	}
//	public void setMainClassName(String mainClassName) {
//		this.mainClassName = mainClassName;
//	}
//	protected Class mainClass() {
//    	return null;
//    }
//    protected Class getMainClass() {
//    	if (mainClass == null) {
//    		mainClass = mainClass();
//    	}
//		return mainClass;
//	}
//	public void setMainClass(Class mainClass) {
//		this.mainClass = mainClass;
//	}
//	protected String mainClassName() {
//    	return getMainClass().getName();
//    }	
//	protected void setMainClass() {
//		ConfigurationProvided aConfigurationProvided = (ConfigurationProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(ConfigurationProvided.class);
//		mainClass = aConfigurationProvided.getTestConfiguration().getStandAloneTokenCounter();
//	}
//	protected String[] getInputLines() {
//		return  new String[]{"3", "a an the a an the a a a an an an the the the"};
//	}
//	@Override
//	public String[] getStudentArgs() {
//		return new String[]{"3", "a an the a an the a a a an an an the the the"};
//	}
	
	
//	protected boolean forkMain() {
//		return true;
//	}
	
//	protected void callOrForkMain(boolean aFork) throws Throwable {
//		
//		resultingOutError = BasicProjectExecution.callOrForkMain(
//			true, getMainClassName(), emptyStringArgs, "3", "a an the a an the a a a an an an the the the");
//		error = resultingOutError.getErr();
//		output = resultingOutError.getOut();
//		interactiveInputProject = resultingOutError.getRunningProject();
//		
//
//	}
	protected void callOrForkMain(boolean aFork) throws Throwable {
//		BasicRunningProject.setProcessOutputSleepTime(15000);
		super.callOrForkMain(aFork);
	}
	protected SubstringSequenceChecker checker() {
		return new AStandAloneTokenCountResultChecker();
	}
	@Override
	protected boolean isValidOutput() {
		return checkWithChecker();
	}
	@Override
	protected boolean hasError(String anError) {
		return false;
	}
	@Override 
	public String[] getInputLines() {
		return new String[] {"3", 
				"Hogwarts Hogwarts muggles wizards Hogwarts Hogwarts Hogwarts muggles muggles wizards",
//				"Abbott Creevey Dumbledore Longbottom Potter Snape Voldemort Weasley Zabini Potter Dumbledore Voldemort",
				"quit"
		};
	}
	protected void setMainClass() {
		ConfigurationProvided aConfigurationProvided = (ConfigurationProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(ConfigurationProvided.class);
        setMainClass( aConfigurationProvided.getTestConfiguration().getStandAloneTokenCounter());

	}
//	@Override
//	public TestCaseResult test(Project project, boolean autoGrade)
//			throws NotAutomatableException, NotGradableException {
//		try {
//		ConfigurationProvided aConfigurationProvided = (ConfigurationProvided) JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(ConfigurationProvided.class);
//		setMainClass();
//		
//			callOrForkMain(forkMain());
//			setOutputErrorStatus();
//			processOutputErrorStatus();
//			return pass();
//			
//		} catch (Throwable e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//			return fail(e.getMessage());
//
//		}
////		String aMainClassName = aConfigurationProvided.getTestConfiguration().getStandAloneTokenCounter().getName();
////		BasicStaticConfigurationUtils.setBasicCommandToDefaultEntryPointCommand();
////		String[] emptyArgs = {};
////		try {
////			ResultingOutErr anOutError = BasicProjectExecution.callOrForkMain(true, aMainClassName, emptyArgs, "3", "a an the a an the a a a an an an the the the");
////			BasicProjectExecution.callOrForkMain(true, getMainClassName(), emptyArgs, "3", "a an the a an the a a a an an an the the the");
////
////			String anOut = anOutError.getOut();
////			String anError = anOutError.getErr();
////			
////		} catch (Throwable e) {
////			return fail(e.getMessage());
////		}
////		return null;
//	}
	public void defaultTest() {
    	passfailDefaultTest();
    }

}
]]></snapshot>
  </Command>
  <Command __id="7102" _type="FileOpenCommand" date="Sat Aug 24 17:37:01 EDT 2019" docASTNodeCount="69" docActiveCodeLength="581" docExpressionCount="49" docLength="581" projectName="PL_Java" timestamp="106944437">
    <filePath><![CDATA[D:\dewan_backup\Java\PLTeaching\PL_Java\src\tests\RunCTest.java]]></filePath>
  </Command>
  <Command __id="7104" _type="FileOpenCommand" date="Sat Aug 24 17:37:49 EDT 2019" docASTNodeCount="199" docActiveCodeLength="1406" docExpressionCount="154" docLength="1749" projectName="Comp524LocalChecks" timestamp="106992597">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp524LocalChecks\src\gradingTools\comp524f19\assignment1\Assignment1Suite.java]]></filePath>
  </Command>
  <Command __id="7110" _type="FileOpenCommand" date="Sat Aug 24 17:38:05 EDT 2019" docASTNodeCount="82" docActiveCodeLength="601" docExpressionCount="69" docLength="601" projectName="Comp524LocalChecks" timestamp="107008612">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp524LocalChecks\src\gradingTools\comp524f19\assignment1\PromptSuite.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.comp524f19.assignment1;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;

import gradingTools.comp524f19.assignment1.testcases.CustomCommandIncrementalPromptTestCase;
import gradingTools.comp524f19.assignment1.testcases.CustomCommandPromptTestCase;
import gradingTools.comp524f19.assignment1.testcases.IncrementalInputPromptTestCase;
import gradingTools.comp524f19.assignment1.testcases.PromptTestCase;
@RunWith(Suite.class)
@Suite.SuiteClasses({
	PromptTestCase.class,
	IncrementalInputPromptTestCase.class
})


public class PromptSuite {
	
}
]]></snapshot>
  </Command>
  <Command __id="7114" _type="FileOpenCommand" date="Sat Aug 24 17:38:09 EDT 2019" docASTNodeCount="403" docActiveCodeLength="3235" docExpressionCount="286" docLength="3638" projectName="Comp524LocalChecks" timestamp="107012432">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp524LocalChecks\src\gradingTools\comp524f19\assignment1\testcases\PromptTestCase.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.comp524f19.assignment1.testcases;

import grader.basics.execution.NotRunnableException;
import grader.basics.execution.RunningProject;
import grader.basics.junit.NotAutomatableException;
import grader.basics.junit.TestCaseResult;
import grader.basics.project.NotGradableException;
import grader.basics.project.Project;
import grader.basics.testcase.PassFailJUnitTestCase;
import gradingTools.utils.RunningProjectUtils;
import util.annotations.MaxValue;
@MaxValue(20)
public class PromptTestCase extends PassFailJUnitTestCase {
	public PromptTestCase() {
//		super("Prompt printer test case");
	}

	private TestCaseResult testForIntegerPrompt(String output) {
		if (output.trim().toLowerCase().contains("int"))
			return pass();
		else
			return fail("Program does not contain prompt for integer");
	}

	private TestCaseResult testForDoublePrompt(String output) {
		if (output.toLowerCase().contains("decimal") || output.toLowerCase().contains("double"))
			return pass();
		else
			return fail("Program does not contain prompt for double");
	}

	@Override
	public TestCaseResult test(Project project, boolean autoGrade) throws NotAutomatableException,
			NotGradableException {
		try {

			// Get the output when we have no input from the user
			RunningProject noInputRunningProject = RunningProjectUtils.runProject(project, 1);
			String noInputPrompt = noInputRunningProject.await();

			// Get the output when we have integer input from the user
			RunningProject integerInputRunningProject = RunningProjectUtils.runProject(project, 1,
					"1");
			String integerInputPrompt = integerInputRunningProject.await();
			integerInputPrompt = integerInputPrompt.substring(noInputPrompt.length());

			// Get the output when we have double input from the user
			RunningProject doubleInputRunningProject = RunningProjectUtils.runProject(project, 1,
					"1.4");
			String doubleInputPrompt = doubleInputRunningProject.await();
			doubleInputPrompt = doubleInputPrompt.substring(noInputPrompt.length());

			// See if the initial prompt is an int or double prompt
			boolean hasIntPrompt = testForIntegerPrompt(noInputPrompt).getPercentage() > 0;
			boolean hasDoublePrompt = testForDoublePrompt(noInputPrompt).getPercentage() > 0;
			boolean samePromptForBoth = hasIntPrompt && hasDoublePrompt;

			// If we have not seen prompts for ints or doubles, check if they
			// show up after giving input
			if (!hasIntPrompt) {
				hasIntPrompt = testForIntegerPrompt(doubleInputPrompt).getPercentage() > 0;
			}
			if (!hasDoublePrompt) {
				hasDoublePrompt = testForDoublePrompt(integerInputPrompt).getPercentage() > 0;
			}

			// Create an error message based on our findings
			String errorMessage = "";
			double credit = 1.0;
			if (!hasIntPrompt) {
				errorMessage += "Program does not prompt for integer inputs\n";
				credit = 0.5;
			}
			if (!hasDoublePrompt) {
				errorMessage += "Program does not prompt for double inputs\n";
				if (credit == 0.5) {
					credit = 0;
				} else {
					credit = 0.5;
				}
			}
			if (samePromptForBoth) {
				errorMessage = "Program does not prompt separately for int and double inputs\n";
				credit = 0.5;
			}

			if (credit == 1.0) {
				return pass();
			} else if ((noInputPrompt.length()) > 0
					&& ((integerInputPrompt.length() > 0) || (doubleInputPrompt.length() > 0))) {
				throw new NotAutomatableException();
			} else {
				return partialPass(credit, errorMessage);
			}
		}

		catch (NotRunnableException e) {
			throw new NotGradableException();
		}
	}
}
]]></snapshot>
  </Command>
  <Command __id="7117" _type="FileOpenCommand" date="Sat Aug 24 17:39:56 EDT 2019" docASTNodeCount="69" docActiveCodeLength="581" docExpressionCount="49" docLength="581" projectName="PL_Java" timestamp="107119404">
    <filePath><![CDATA[D:\dewan_backup\Java\PLTeaching\PL_Java\src\tests\RunCTest.java]]></filePath>
  </Command>
  <Command __id="7119" _type="FileOpenCommand" date="Sat Aug 24 17:40:02 EDT 2019" docASTNodeCount="199" docActiveCodeLength="1406" docExpressionCount="154" docLength="1749" projectName="Comp524LocalChecks" timestamp="107125128">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp524LocalChecks\src\gradingTools\comp524f19\assignment1\Assignment1Suite.java]]></filePath>
  </Command>
  <Command __id="7123" _type="FileOpenCommand" date="Sat Aug 24 17:40:05 EDT 2019" docASTNodeCount="1690" docActiveCodeLength="11475" docExpressionCount="1011" docLength="16458" projectName="GraderBasics" timestamp="107129029">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\BasicJUnitUtils.java]]></filePath>
  </Command>
  <Command __id="7150" _type="FileOpenCommand" date="Sat Aug 24 17:41:08 EDT 2019" docASTNodeCount="346" docActiveCodeLength="2291" docExpressionCount="156" docLength="2375" projectName="GraderBasics" timestamp="107191645">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\GradableJUnitTest.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.junit;

import java.beans.PropertyChangeListener;
import java.io.Serializable;
import java.util.List;
import java.util.Set;

import grader.basics.testcase.JUnitTestCase;
import util.models.PropertyListenerRegisterer;

/**
 * An instance of this is created automatically from a JUnit test case
 *
 */
public interface GradableJUnitTest extends PropertyListenerRegisterer, Serializable  {
	public static final String TEST_RUN_STARTED = "TestRunStarted";
	public static final String TEST_RUN_FINISHED = "TestRunEnded";
	public void init() ;
	public Class getJUnitClass() ;
	
	public void setDefaultScore(int aDefaultScore);
	
	public int getDefaultScore() ;
	
	public void setMaxScore (Class aJUnitClass) ;
	public void setMaxScore (double aMaxScore);
	public void setIsRestriction (Class aJUnitClass) ;
	public void setIsExtra (Class aJUnitClass) ;
	
	public void setExplanation (Class aJUnitClass) ;

	public void setGroup (Class aJUnitClass) ;
	
	public void setJUnitClass(Class aJUnitClass) ;
	public boolean isRestriction() ;
	public boolean isExtra();
	public Double getMaxScore() ;
	public String getExplanation() ;
	String getGroup();
	public void setGroup(String newVal);
	void setRestriction(boolean newVal);
	void setExtra(boolean newVal);
	void setExplanation(String newVal);
	TestCaseResult test();
	String getMessage();
	String getStatus();
	int numExecutions();
	void addPropertyChangeListenerRecursive(PropertyChangeListener arg0);
	double getFractionComplete();
	List<Double> getPercentages();
	List<String> getMessages();
	List<TestCaseResult> getTestCaseResults();
	double getUnroundedScore();
	String getText();
	double getComputedMaxScore();
	int numLeafNodeDescendents();
	int numInternalNodeDescendents();
	Set<Class> getLeafClasses();
	Set<Class> getPassClasses();
	Set<Class> getPartialPassClasses();
	Set<Class> getFailClasses();

	Set<Class> getUntestedClasses();
	public static double round(double aDouble) {
		return (double) Math.round(aDouble * 10)/10.0;
	}
	double getDisplayedScore();
	JUnitTestCase getJUnitTestCase();
	boolean isDefinesMaxScore();
	void setDefinesMaxScore(boolean definesMaxScore);
	void fillLeafNodeDescendents(List<GradableJUnitTest> retVal);
	public MaxScoreAssignmentResult assignMaxScores();
	String getSimpleName();



}
]]></snapshot>
  </Command>
  <Command __id="7155" _type="FileOpenCommand" date="Sat Aug 24 17:41:22 EDT 2019" docASTNodeCount="1977" docActiveCodeLength="13603" docExpressionCount="1229" docLength="17113" projectName="GraderBasics" timestamp="107205581">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\AGradableJUnitTest.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.junit;

import grader.basics.config.BasicStaticConfigurationUtils;
import grader.basics.project.NotGradableException;
import grader.basics.testcase.JUnitTestCase;

import java.awt.Color;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.runner.Runner;
import org.junit.runner.notification.Failure;
import org.junit.runner.notification.RunNotifier;
import org.junit.runners.BlockJUnit4ClassRunner;
import org.junit.runners.model.InitializationError;

import util.annotations.Explanation;
import util.annotations.Group;
import util.annotations.IsExtra;
import util.annotations.IsRestriction;
import util.annotations.MaxValue;
import util.annotations.Position;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.trace.Tracer;
import bus.uigen.attributes.AttributeNames;
import bus.uigen.introspect.Attribute;
@StructurePattern(StructurePatternNames.BEAN_PATTERN)
/**
 * This is the object displayed in the LocalChecks UI as a  (leaf-level?) tree node.
 *
 */
public class AGradableJUnitTest implements GradableJUnitTest{
	public static final Color UNTESTED_COLOR = Color.BLACK;
	public static final Color ALL_FAIL_COLOR = Color.RED;
	public static final Color MOSTLY_FAIL_COLOR = Color.PINK;
	public static final Color MOSTLY_PASS_COLOR = Color.ORANGE;
	public static final Color ALL_PASS_COLOR = Color.GREEN;
	static int DEFAULT_SCORE = 0;	
	int defaultScore = DEFAULT_SCORE;
	Class jUnitClass;
	Color color = UNTESTED_COLOR;
	boolean isExtra;
	

	boolean definesMaxScore = false;
//	boolean writeToConsole;
//	boolean writeToFile;	
//	boolean writeToServer;
	boolean isRestriction;
	Double maxScore;
	Double computedMaxScore;
	Double score = 0.0001;
	String explanation;
	String group = "";
	Set<Class> leafClasses;
	GradableJUnitSuite topLevelSuite;
	RunNotifier runNotifier = new RunNotifier();
//	RunNotifier runNotifier = RunNotifierFactory.getRunNotifier();
	GradableJUnitSuite parentSuite;

	

	AJUnitTestResult runListener = new AJUnitTestResult();
	JUnitTestCase jUnitTest;
	int numTests = 0;
	double fractionComplete = 0;
	String status = "Not Tested";
	String message = "";
	Failure failure;
	PropertyChangeSupport propertyChangeSupport = new PropertyChangeSupport(this);
	TestCaseResult testCaseResult;
	
	
	public AGradableJUnitTest (Class aJUnitClass) {
		init();
		setJUnitClass(aJUnitClass);	
	}
	
//	public AJUnitTestToGraderTestCase () {
//		init();
//	}
	@Visible(false)
	public void init() {
		runNotifier.addListener(runListener);
	}
	@Visible(false)
	public Class getJUnitClass() {
		return jUnitClass;
	}
	@Visible(false)

	public void setDefaultScore(int aDefaultScore) {
		defaultScore = aDefaultScore;
	}
	@Visible(false)
	public int getDefaultScore() {
		return defaultScore;
	}
	@Visible(false)
	public void setMaxScore (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(MaxValue.class)) {
			MaxValue aMaxValue =  (MaxValue) aJUnitClass.getAnnotation(MaxValue.class);
			maxScore = (double) aMaxValue.value();
			definesMaxScore = true;
		} else {
			maxScore = null;
			maybeSetDefaultMaxScore();
		}
	}
	protected void maybeSetDefaultMaxScore() {
		maxScore = (double) DEFAULT_SCORE;
	}
	@Visible(false)
	public void setIsRestriction (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(IsRestriction.class)) {
			IsRestriction anIsRestriction =  (IsRestriction) aJUnitClass.getAnnotation(IsRestriction.class);
			isRestriction = anIsRestriction.value();
		} else {
			isRestriction = false;
		}
	}
	@Visible(false)
	public void setIsExtra (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(IsExtra.class)) {
			IsExtra anIsExtra =  (IsExtra) aJUnitClass.getAnnotation(IsExtra.class);
			isExtra = anIsExtra.value();
		} else {
			isExtra = false;
		}
	}
	@Visible(false)
	public void setExplanation (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(Explanation.class)) {
			Explanation anExplanation =  (Explanation) aJUnitClass.getAnnotation(Explanation.class);
			explanation = aJUnitClass.getSimpleName() + ":" + anExplanation.value();
		} else {
			explanation = aJUnitClass.getSimpleName();
		}
//		setName(explanation);
	}	
	@Visible(false)
	public void setGroup (Class aJUnitClass) {
		if (aJUnitClass.isAnnotationPresent(Group.class)) {
			Group aGroup =  (Group) aJUnitClass.getAnnotation(Group.class);
			group = aGroup.value();
		} else {
			group = explanation;
		}
	}
	@Override
	@Visible(false)
	public String getGroup() {
		return group;
	}
	@Visible(false)
	@Override
	public JUnitTestCase getJUnitTestCase() {
		return JUnitTestsEnvironment.getPassFailJUnitTest(jUnitClass);
	}
	@Visible(false)
	public void setJUnitClass(Class aJUnitClass) {
		jUnitClass = aJUnitClass;
		setExplanation(aJUnitClass);
		setMaxScore(aJUnitClass);
		setIsRestriction(aJUnitClass);
		setIsExtra(aJUnitClass);
		setGroup(aJUnitClass);
		JUnitTestsEnvironment.addPassFailJUnitTestClass(aJUnitClass, this);


		
	}
	@Visible(false)
	public boolean isRestriction() {
		return isRestriction;
	}
	@Visible(false)
	public boolean isExtra() {
		return isExtra;
	}
	@Visible(false)
	public Double getMaxScore() {
		return maxScore;
	}
	@Visible(false)
	public String getExplanation() {
		return explanation;
	}
	protected void showColor() {
		Color oldColor = color;
		color = computeColor();
		propertyChangeSupport.firePropertyChange("this", oldColor,
				new Attribute(AttributeNames.COMPONENT_FOREGROUND, color));
	}
	protected void showScore() {
		Double oldScore = score;
//		Double oldScore = getDisplayedScore();

//		score = getUnroundedScore();
		score = getDisplayedScore();

//		propertyChangeSupport.firePropertyChange("UnroundedScore", oldScore,
//				score);
		propertyChangeSupport.firePropertyChange("DisplayedScore", oldScore,
				score);
	}
	protected void showResult (TestCaseResult aTestCaseResult) {
		String oldStatus = status;
		String oldMessage = message;
		double oldScore = score;
		status = aTestCaseResult.getPercentage()*100 + "% complete";
		message = aTestCaseResult.getNotes();
//		score = getUnroundedScore();	
		score = getDisplayedScore();		

		propertyChangeSupport.firePropertyChange("DisplayedScore", oldScore, getDisplayedScore());
//		propertyChangeSupport.firePropertyChange("Status", oldStatus, status);

		propertyChangeSupport.firePropertyChange("Message", oldMessage, message);
		showColor();
//		showScore();
//		Color oldColor = color;
//		Color color = computeColor();
//		propertyChangeSupport.firePropertyChange("this", oldColor,
//				new Attribute(AttributeNames.COMPONENT_FOREGROUND, color));
		
	}
	@Override
	@Visible(false)
	public List<Double> getPercentages() {
		List<Double> retVal = new ArrayList();
		retVal.add(fractionComplete);
		return retVal;
	}
	@Override
	@Visible(false)
	public List<String> getMessages() {
		List<String> retVal = new ArrayList();
		retVal.add(message);
		return retVal;
	}
	@Override
	@Visible(false)
	public List<TestCaseResult> getTestCaseResults() {
		List<TestCaseResult> retVal = new ArrayList();
		retVal.add(testCaseResult);
		return retVal;
	}
	@Visible(false)
	public TestCaseResult test()
			throws NotAutomatableException, NotGradableException {
		try {
			Tracer.resetNumTraces();// previous test output should not affect this one
			numTests++;
			Class aJUnitClass = getJUnitClass();
			BasicStaticConfigurationUtils.setTest(aJUnitClass);
//			JUnitTestsEnvironment.addGradableJUnitTest(aJUnitClass, this);

			runListener.setJUnitName(aJUnitClass.getName());
			Runner aRunner = new BlockJUnit4ClassRunner(aJUnitClass);
			aRunner.run(runNotifier);
			testCaseResult = runListener.getTestCaseResult();
			jUnitTest = getJUnitTestCase();
			if (jUnitTest != null) {
				jUnitTest.setLastResult(testCaseResult);
			}
			failure = runListener.getFailure();
			fractionComplete = testCaseResult.getPercentage();
			showResult(testCaseResult);
//			status = aTestCaseResult.getPercentage()*100 + " % complete";
//			message = aTestCaseResult.getNotes();			
			return testCaseResult;

			
		} catch (InitializationError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			String anExceptionMessage = e.getMessage();
			String aMessage = e.getClass().getSimpleName() + " Could not initialize an instance of test class ";
			TestCaseResult aTestCaseResult = new TestCaseResult(false, aMessage, getExplanation(), true);
			showResult(aTestCaseResult);
			return aTestCaseResult;
//			return fail(e.getMessage());
		} catch (IllegalArgumentException e ) {
			e.printStackTrace();
			String anExceptionMessage = e.getMessage();
			TestCaseResult aTestCaseResult = new TestCaseResult(false,  e.getMessage(), getExplanation(), true);
			showResult(aTestCaseResult);
			return aTestCaseResult;
		} catch (Exception e) {
			e.printStackTrace();
			String anExceptionMessage = e.getMessage();
			TestCaseResult aTestCaseResult = new TestCaseResult(false, e.getMessage(), getExplanation(), true);
			showResult(aTestCaseResult);
			return aTestCaseResult;
		}
			
		
		// InitializationError
//		Runner aRunner = new BlockJUnit4ClassRunner(ACartesianPointParametrizedJUnitTester.class);
//		Runner aRunner = new BlockJUnit4ClassRunner(ASinglePointBeforeClassJUnitMultiTester.class);
		// IniitializationError
//		Runner aRunner = new BlockJUnit4ClassRunner(ACartesianPointParametrizedJUnitMultiTester.class);
//		return null;
	}
	protected boolean isPass() {
		return getFractionComplete() == 1.0;
	}
	protected boolean isPartialPass() {
		return !isPass() && getFractionComplete() >  0.0;
	}
	protected boolean isFail() {
		return getFractionComplete() == 0.0 & numTests != 0;
	}
	protected boolean isUntested() {
		return  numTests == 0;
	}
	
	@Visible(false)
	@Override
	public void setMaxScore(double aMaxScore) {
		maxScore = aMaxScore;
//		maybeSetChildrenMaxScores();
	}
//	protected void maybeSetChildrenMaxScores() {
//		
//	}
	@Visible(false)
	@Override
	public void setGroup(String newVal) {
		group = newVal;
		
	}
	@Visible(false)
	@Override
	public void setRestriction(boolean newVal) {
		isRestriction = newVal;		
	}
	@Visible(false)
	@Override
	public void setExtra(boolean newVal) {
		isExtra = newVal;		
	}
	@Visible(false)
	@Override
	public void setExplanation(String newVal) {
		explanation = newVal;		
	}
	
	protected String description = null;
	@Override
	@Visible(false)
	public String getSimpleName() {
		return getJUnitClass().getSimpleName();
	}
	public String getName() {
		if (description == null) {
		String aScore = "[" + GradableJUnitTest.round(getComputedMaxScore()) + " pts" + "]";
		String anExtra = isExtra?
				"(extra credit)"
				:"";
//		description = explanation + aScore + anExtra;
//		description = getJUnitClass().getSimpleName() + aScore + anExtra;
		description = getSimpleName() + aScore + anExtra;
		}
		return description;
	}
	@Visible(false)
	@Position(0)
	@Override
	public String getStatus() {
		return status;
	}
	@Position(1)
	@Override
	public String getMessage() {
		return message;
	}
	@Visible(false)
	public void open(String aField) {
//		System.out.println ("opened: " + aTest);
		test();
	}
	@Override
	@Visible(false)
	public int numExecutions() {
		return numTests;
	}
	protected Color computeColor(int aNumTests,double aFractionComplete) {
		if (aNumTests == 0)
			return UNTESTED_COLOR;
		if (aFractionComplete == 1)
			return ALL_PASS_COLOR;
		if (aFractionComplete == 0)
			return ALL_FAIL_COLOR;		
		if (aFractionComplete >= 0.5)
			return MOSTLY_PASS_COLOR;
		return MOSTLY_FAIL_COLOR;
	}
	protected Color computeColor() {
		return computeColor(numTests, fractionComplete);
//		if (numTests == 0)
//			return UNTESTED_COLOR;
//		if (fractionComplete == 1)
//			return ALL_PASS_COLOR;
//		if (fractionComplete == 0)
//			return ALL_FAIL_COLOR;		
//		if (fractionComplete >= 0.5)
//			return MOSTLY_PASS_COLOR;
//		return MOSTLY_FAIL_COLOR;
	}
//	double aFractionCorrect = ((double) numTestsSuceeded())/children.size());
//	if (aFractionCorrect == 1)
//		return ALL_PASS_COLOR;
//	else if (aFractionCorrect == 0) {
//		
//	}
//}
	@Override
	@Visible(false)
	public double getFractionComplete() {
		return fractionComplete;
	}
	@Override
	@Visible(false)
	public void addPropertyChangeListenerRecursive(PropertyChangeListener arg0) {
		addPropertyChangeListener(arg0);		
	}
	@Override
	public void addPropertyChangeListener(PropertyChangeListener arg0) {
		propertyChangeSupport.addPropertyChangeListener(arg0);
		showColor();
		
	}
	@Visible(false)
	@Override
	public double getUnroundedScore() {
		return maxScore*fractionComplete;
	}
	@Position(0)
	@Override
	public double getDisplayedScore() {
		return GradableJUnitTest.round(getUnroundedScore());
	}
	@Override
	@Visible(false)
	public String getText() {
		return getName() + "," + getUnroundedScore() +  "," + getMessage();
	}
//	public String toString() {
//		return getName();
//	}
	@Visible(false)
	@Override
	public double getComputedMaxScore() {
		return maxScore;
	}
	@Override
	public int numLeafNodeDescendents() {
		return 1;
	}
//	public static void main (String[] args) {
//		ObjectEditor.edit(new bus.uigen.test.ACompositeColorer());
//		AGradableJUnitTest foo = new AGradableJUnitTest(ACartesianPointJUnitTester.class);
////		foo.setJUnitClass(ACartesianPointJUnitTester.class);
//		System.out.println (foo);
//	}

	@Override
	public int numInternalNodeDescendents() {
		// TODO Auto-generated method stub
		return 0;
	}
//	public void setWriteToServer(boolean writeToServer) {
//		this.writeToServer = writeToServer;
//	}
//	@Override
//	public void setWriteToConsole(boolean newVal) {
//		writeToConsole = newVal;
//	}
//	@Override
//	public boolean isWriteToConsole() {
//		return writeToConsole;
//	}
//	@Override
//	public boolean isWriteToFile() {
//		return writeToFile;
//	}
//	@Override
//	public void setWriteToFile(boolean writeToFile) {
//		this.writeToFile = writeToFile;
//	}
//	@Override
//	public boolean isWriteToServer() {
//		return writeToServer;
//	}
	static protected Class[] emptyClassArray = {};
	static protected Set<Class> emptySet = new HashSet();

	@Override
	@Visible(false)
	public Set<Class> getLeafClasses() {
		if (leafClasses == null) {
//			leafClasses = new Class[] {getJUnitClass()};
			leafClasses = new HashSet();
			leafClasses.add(getJUnitClass());

		}
		// TODO Auto-generated method stub
		return leafClasses;
	}

	@Override
	@Visible(false)
	public Set<Class> getPassClasses() {
		if (isPass())
			return getLeafClasses();
		return emptySet;
	}

	@Override
	@Visible(false)
	public Set<Class> getPartialPassClasses() {
		if (isPartialPass())
			return getLeafClasses();
		return emptySet;
	}

	@Override
	@Visible(false)
	public Set<Class> getFailClasses() {
		if (isFail())
			return getLeafClasses();
		return emptySet;
	}
	
	@Override
	@Visible(false)
	public Set<Class> getUntestedClasses() {
		if (isUntested())
			return getLeafClasses();
		return emptySet;
	}
	public String toString() {
		return getName() + "(" + super.toString() + ")";
	}
	
//	@Override
//	public void setTopLevelSuite(GradableJUnitSuite newVal) {
//		topLevelSuite = newVal;
//		
//	}
//
//	@Override
//	public GradableJUnitSuite getTopLevelSuite() {
//		// TODO Auto-generated method stub
//		return topLevelSuite;
//	}

//	@Override
//	public Class[] getUntestedClasses() {
//		// TODO Auto-generated method stub
//		return null;
//	}
	@Override
	@Visible(false)
	public boolean isDefinesMaxScore() {
		return definesMaxScore;
	}
	@Override
	@Visible(false)
	public void setDefinesMaxScore(boolean definesMaxScore) {
		this.definesMaxScore = definesMaxScore;
	}

	@Override
	@Visible(false)
	public void fillLeafNodeDescendents(List<GradableJUnitTest> retVal) {
		retVal.add(this);
	}

	@Override
	@Visible(false)
	public MaxScoreAssignmentResult assignMaxScores() {
		MaxScoreAssignmentResult aMaxScoreAssignmentResult = new MaxScoreAssignmentResult();
		aMaxScoreAssignmentResult.assignedScores = maxScore;
//		if (!isDefinesMaxScore()) {
		if (maxScore == DEFAULT_SCORE) { // may not define score and yet be 
			aMaxScoreAssignmentResult.unassignedLeafNodes.add(this);
		}
		return aMaxScoreAssignmentResult;
	}
	
	@Visible(false)
	public GradableJUnitSuite getParentSuite() {
		return parentSuite;
	}
	@Visible(false)	public void setParentSuite(GradableJUnitSuite parentSuite) {
		this.parentSuite = parentSuite;
	}
	
	
}
]]></snapshot>
  </Command>
  <Command __id="7179" _type="FileOpenCommand" date="Sat Aug 24 17:45:24 EDT 2019" docASTNodeCount="1513" docActiveCodeLength="11035" docExpressionCount="920" docLength="13326" projectName="GraderBasics" timestamp="107447521">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\AGradableJUnitSuite.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.junit;

import grader.basics.project.NotGradableException;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.runner.Description;

//import com.sun.xml.internal.bind.annotation.OverrideAnnotationOf;

import util.annotations.Position;
import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
import util.trace.Tracer;

// why is the implicit pattern stack pattern?
@StructurePattern(StructurePatternNames.LIST_PATTERN)
/**
 * This is an internal node in the tree node created by the LocalChecks UI.
 * It starts a test run when it is double clicked.
 */
public class AGradableJUnitSuite extends AGradableJUnitTest implements
		GradableJUnitSuite, PropertyChangeListener {
	Set<Class> previousPassClasses, previousFailClasses, previousPartialPassClasses;
	double previousScore;
	List<GradableJUnitTest> children = new ArrayList();
	

	public AGradableJUnitSuite(Class aJUnitClass) {
		super(aJUnitClass);
		topLevelSuite = this; // will be overridden by parent if they exist
	}
	

	public GradableJUnitTest get(int anIndex) {
		return children.get(anIndex);
	}

	public int size() {
		return children.size();
	}
	@Override
	@Visible(false)
	public List<GradableJUnitTest> children() {
		return children;
	}

	@Visible(false)
	public void add(GradableJUnitTest anElement) {
//		anElement.setTopLevelSuite(getTopLevelSuite()); // asuume children are added top to bottom
		children.add(anElement);
		anElement.addPropertyChangeListener(this);
		// maybeSetChildrenMaxScores();
	}

	// protected void maybeSetChildrenMaxScores() {
	// if (maxScore == null)
	// return;
	// for (GradableJUnitTest aTest:children) {
	// double aChildScore = maxScore/children.size();
	// aTest.setMaxScore(aChildScore);
	// }
	// }
	@Visible(false)
	public void addAll(List<GradableJUnitTest> anElement) {
		children.addAll(anElement);
		for (GradableJUnitTest aTest : anElement) {
			aTest.addPropertyChangeListenerRecursive(this);
		}
		// maybeSetChildrenMaxScores();
	}
	protected void notifyTestRunStarted(GradableJUnitTest aTest) {
//		propertyChangeSupport.firePropertyChange(TEST_RUN_STARTED, aTest, null);
		propertyChangeSupport.firePropertyChange(TEST_RUN_STARTED, null, aTest);

//		
//		String aClassName = aTest.getJUnitClass().getSimpleName();
//		String aName = aTest.getExplanation();
		
	}
	protected void notifyTestRunEnded(GradableJUnitTest aTest) {
		propertyChangeSupport.firePropertyChange(TEST_RUN_FINISHED, aTest, null);
//		
//		String aClassName = aTest.getJUnitClass().getSimpleName();
//		String aName = aTest.getExplanation();
		
	}
	protected void testRunStarted(GradableJUnitTest aTest) throws PropertyVetoException {

		RunVetoerFactory.getOrCreateRunVetoer().vetoableChange(new PropertyChangeEvent(this, TEST_RUN_STARTED, this, null));

		notifyTestRunStarted(aTest);
	}
	
	protected void testRunFinished(GradableJUnitTest aTest) {
//		Description aDescription = Description.createTestDescription(GradableJUnitTest.TEST_RUN_STARTED, "a test", 0);
//		RunNotifierFactory.getRunNotifier().fireTestFinished(aDescription);
		notifyTestRunStarted(aTest);

	}
	
	

	// @Override
	// public List<GradableJUnitTest> getJUnitTests() {
	// return children;
	// }
	// public String getName() {
	// return getExplanation();
	// }
	@Visible(false)
	public void open(GradableJUnitTest aTest) {
		// System.out.println ("opened: " + aTest);
//		Description aDescription = Description.createSuiteDescription(aTest
//				.getJUnitClass());
//		RunNotifierFactory.getRunNotifier().fireTestRunStarted(aDescription);
		try {
		testRunStarted(aTest);
		aTest.test();
		testRunFinished(aTest);
		} catch (PropertyVetoException e) {
			System.err.println(e.getMessage());
		}
//		RunNotifierFactory.getRunNotifier().fireTestRunFinished(null);
	}

	@Visible(false)
	public String getStatus() {
		return "";
	}

	@Position(1)
	@Visible(false)
	public String getMessage() {
		return "";
	}

	protected int numTestsSuceeded() {
		int retVal = 0;
		for (GradableJUnitTest aTest : children) {
			if (aTest.getFractionComplete() == 1.0)
				retVal++;
		}
		return retVal;
	}

	@Override
	@Visible(false)
	public int numLeafNodeDescendents() {
		int retVal = 0;
		for (GradableJUnitTest aChild:children) {
			retVal += aChild.numLeafNodeDescendents();
		}
		return retVal;
	}
	@Visible(false)
	public void fillLeafNodeDescendents(List<GradableJUnitTest> retVal) {
		for (GradableJUnitTest aChild:children) {
			aChild.fillLeafNodeDescendents(retVal);
		}
	}
	@Visible(false)
	public List<GradableJUnitTest> getLeafNodeDescendents() {
		List<GradableJUnitTest> retVal = new ArrayList();
		fillLeafNodeDescendents(retVal);
		return retVal;
	}
	@Override
	@Visible(false)
	public MaxScoreAssignmentResult assignMaxScores() {
		MaxScoreAssignmentResult aMaxScoreAssignmentResult = new MaxScoreAssignmentResult();
//		double anAssignedMaxScore = 0;
		for (GradableJUnitTest aChild:children) {
			MaxScoreAssignmentResult aChildResult = aChild.assignMaxScores();
			aMaxScoreAssignmentResult.assignedScores += aChildResult.assignedScores;
			aMaxScoreAssignmentResult.unassignedLeafNodes.addAll(aChildResult.unassignedLeafNodes);	
			
		}
//		if (!isDefinesMaxScore()) { // no maxScore annotation

		if (maxScore == DEFAULT_SCORE) { // no maxScore annotation
			return aMaxScoreAssignmentResult;
		}
		double anUnassignedMaxScore = maxScore - aMaxScoreAssignmentResult.assignedScores;
		if (anUnassignedMaxScore < 0) {
			Tracer.info(this, "Ignoring MaxScore:" + maxScore + " of " + jUnitClass.getSimpleName() + " as it is less than sum total of Max Scorse of descendents:" + aMaxScoreAssignmentResult.assignedScores );
			return aMaxScoreAssignmentResult;
		}
		double aDistributedScore = anUnassignedMaxScore/aMaxScoreAssignmentResult.unassignedLeafNodes.size();
		for (GradableJUnitTest anUnassignedLeafNode:aMaxScoreAssignmentResult.unassignedLeafNodes) {
			anUnassignedLeafNode.setMaxScore(aDistributedScore);
		}
		aMaxScoreAssignmentResult.unassignedLeafNodes.clear();
		aMaxScoreAssignmentResult.assignedScores = maxScore;
		return aMaxScoreAssignmentResult;
		
		
	}
	
	
	@Override
	@Visible(false)
	public int numInternalNodeDescendents() {
		int retVal = 0;
		for (GradableJUnitTest aChild:children) {
			retVal += aChild.numInternalNodeDescendents();
		}
		return retVal;
	}

	@Visible(false)
	public int numExecutions() {
		int retVal = 0;
		for (GradableJUnitTest aTest : children) {

			retVal += aTest.numExecutions() > 0 ? 1 : 0;
			;
		}
		return retVal;
	}

	// does not retiurn a result
	@Override
	// @Visible(false)
	public void testAll() {
		test();
	}

	@Visible(false)
	public TestCaseResult test() throws NotAutomatableException,
			NotGradableException {
		for (GradableJUnitTest aTest : children) {
			if (aTest.getJUnitTestCase() != null) {
				System.out.println("Not automatically rerunning:" + jUnitClass + ".  Please run it individually");
			} else {
			TestCaseResult aChildResult = aTest.test();
			}
		}
		int aNumSuccesses = numTestsSuceeded();
		if (aNumSuccesses == children.size()) {
			return new TestCaseResult(true, getExplanation());
		} else {
			return new TestCaseResult(((double) aNumSuccesses)
					/ children.size(), getExplanation());
		}
	}

	@Override
	@Visible(false)
	public List<Double> getPercentages() {
		List retVal = new ArrayList();
		for (GradableJUnitTest aTest : children) {
			retVal.addAll(aTest.getPercentages());
		}
		return retVal;
	}

	@Visible(false)
	public List<String> getMessages() {
		List<String> retVal = new ArrayList();
		for (GradableJUnitTest aTest : children) {
			retVal.addAll(aTest.getMessages());
		}
		return retVal;
	}

	@Visible(false)
	@Position(0)
	@Override
	public double getUnroundedScore() {
		double retVal = 0;
		for (GradableJUnitTest aTest : children) {
			retVal += aTest.getUnroundedScore();
		}
		return retVal;
	}

	@Visible(false)
	public Double getMaxScore() {
		
		return maxScore;
	}

	@Visible(false)
	public double getComputedMaxScore() {
		if (computedMaxScore == null) {
			double retVal = 0;
			for (GradableJUnitTest aTest : children) {
				retVal += aTest.getComputedMaxScore();
			}
			computedMaxScore = retVal;
		}
		return computedMaxScore;
	}

	// do nothing as we need to know if the score was set or not
	// we have defines maxScore
//	protected void maybeSetDefaultMaxScore() {
//
//	}

	@Visible(false)
	public List<TestCaseResult> getTestCaseResults() {
		List<TestCaseResult> retVal = new ArrayList();
		for (GradableJUnitTest aTest : children) {
			retVal.addAll(aTest.getTestCaseResults());
		}
		return retVal;
	}

	@Visible(false)
	public String getText() {
		String retVal = getName() + "," + getUnroundedScore() + "\n";
		for (GradableJUnitTest aTest : children) {
			retVal += aTest.getText() + "\n";
		}
		return retVal;
	}

	protected void synthesizeAndDisplayPropertes() {
		numTests = numExecutions();
		fractionComplete = ((double) numTestsSuceeded()) / children.size();
		showColor();
		showScore();
	}

	@Override
	public void propertyChange(PropertyChangeEvent evt) {
		// if (!"Status".equals(evt.getPropertyName()))
		// return; // do not want this computed multiple times for different
		// properties of test
		if (!"DisplayedScore".equals(evt.getPropertyName()))
			return; // do not want this computed multiple times for different
					// properties of test
		synthesizeAndDisplayPropertes();
		// numTests = numTests();
		// fractionComplete = ((double) numTestsSuceeded())/children.size();
		// showColor();
		// showScore();

	}

	@Override
	@Visible(false)
	public void addPropertyChangeListenerRecursive(PropertyChangeListener arg0) {
		for (GradableJUnitTest aTest : children) {
			aTest.addPropertyChangeListener(arg0);
		}
	}

	@Override
	@Visible(false)
	public void addPropertyChangeListener(PropertyChangeListener arg0) {
		synthesizeAndDisplayPropertes();
		// numTests = numTests();
		super.addPropertyChangeListener(arg0);

	}

	@Visible(false)
	@Override
	public Set<Class> getLeafClasses() {
		if (leafClasses == null) {
			Set<Class> aLeafClasses = new HashSet();
			for (GradableJUnitTest aTest : children) {
//				aLeafClasses.addAll(Arrays.asList(aTest.getLeafClasses()));
				aLeafClasses.addAll(aTest.getLeafClasses());

			}
			leafClasses = aLeafClasses;
		}
		return leafClasses;
	}

	@Visible(false)
	@Override
	public Set<Class> getPassClasses() {

		Set<Class> aChildrenClasses = new HashSet();
		for (GradableJUnitTest aTest : children) {
			aChildrenClasses.addAll(aTest.getPassClasses());
		}
		return aChildrenClasses;
	}
	@Override
	@Visible(false)
	public Set<Class> getPartialPassClasses() {

		Set<Class> aChildrenClasses = new HashSet();
		for (GradableJUnitTest aTest : children) {
			aChildrenClasses.addAll(aTest.getPartialPassClasses());
		}
		return aChildrenClasses;
	}
	@Visible(false)
	@Override
	public Set<Class> getFailClasses() {

		Set<Class> aChildrenClasses = new HashSet();
		for (GradableJUnitTest aTest : children) {
			aChildrenClasses.addAll(aTest.getFailClasses());
		}
		return aChildrenClasses;
	}
	@Visible(false)
	@Override
	public Set<Class> getUntestedClasses() {

		Set<Class> aChildrenClasses = new HashSet();
		for (GradableJUnitTest aTest : children) {
			aChildrenClasses.addAll(aTest.getUntestedClasses());
		}
		return aChildrenClasses;
	}
	@Visible(false)
	@Override
	public Set<Class> getPreviousFailClasses() {		
		return previousFailClasses;
	}
	@Visible(false)
	@Override
	public Set<Class> getPreviousPassClasses() {		
		return previousPassClasses;
	}
	@Visible(false)
	@Override
	public Set<Class> getPreviousPartialPassClasses() {		
		return previousPartialPassClasses;
	}
	@Visible(false)
	@Override
	public double getPreviousScore() {
		return previousScore;
	}
	protected void refreshPreviousClasses() {
		previousScore = getUnroundedScore();
		previousPassClasses = getPassClasses();
		previousFailClasses = getFailClasses();
		previousPartialPassClasses = getPartialPassClasses();
	}

	@Override
	public void test(Class aJUnitClass) {
		GradableJUnitTest aTest = findTest(aJUnitClass);
		if (aTest == null) {
			System.err.println("Could not find junit class:" + aJUnitClass);
		} else {
			aTest.test();
		}
		
	}

	@Override
	@Visible(false)
	public GradableJUnitTest findTest(Class aJUnitClass) {
		
		for (GradableJUnitTest aChild:children) {
			if (aChild.getJUnitClass().equals(aJUnitClass)) {
				return aChild;
			}
			if (aChild instanceof GradableJUnitSuite) {
				GradableJUnitTest aResult = ((GradableJUnitSuite) aChild).findTest(aJUnitClass);
				if (aResult!= null) {
					return aResult;
				}
			}
		}
		return null;
	}

}
]]></snapshot>
  </Command>
  <Command __id="7181" _type="FileOpenCommand" date="Sat Aug 24 17:45:40 EDT 2019" docASTNodeCount="1977" docActiveCodeLength="13603" docExpressionCount="1229" docLength="17113" projectName="GraderBasics" timestamp="107463966">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\AGradableJUnitTest.java]]></filePath>
  </Command>
  <Command __id="7199" _type="FileOpenCommand" date="Sat Aug 24 17:59:42 EDT 2019" docASTNodeCount="10" docActiveCodeLength="100" docExpressionCount="6" docLength="100" projectName="GraderBasics" timestamp="108305407">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\gradingTools\interpreter\testcases\AnInterpretingGradableJUnitTest.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.interpreter.testcases;

public class AnInterpretingGradableJUnitTest {

}
]]></snapshot>
  </Command>
  <Command __id="7203" _type="FileOpenCommand" date="Sat Aug 24 18:00:24 EDT 2019" docASTNodeCount="10" docActiveCodeLength="100" docExpressionCount="6" docLength="100" projectName="GraderBasics" timestamp="108347188">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\gradingTools\interpreter\testcases\AnInterpretingJUnitTopLevelTest.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.interpreter.testcases;

public class AnInterpretingJUnitTopLevelTest {

}
]]></snapshot>
  </Command>
  <Command __id="7210" _type="FileOpenCommand" date="Sat Aug 24 18:01:02 EDT 2019" docASTNodeCount="323" docActiveCodeLength="2445" docExpressionCount="214" docLength="3457" projectName="GraderBasics" timestamp="108385148">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\AGradableJUnitTopLevelSuite.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.junit;

import grader.basics.util.ClassComparator;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;

import org.junit.runner.Description;

import util.annotations.StructurePattern;
import util.annotations.StructurePatternNames;
import util.annotations.Visible;
@StructurePattern(StructurePatternNames.LIST_PATTERN)
/**
 * Top-level node in tree created by LocalChecks
 * @author dewan
 *
 */
public class AGradableJUnitTopLevelSuite extends AGradableJUnitSuite {
	public AGradableJUnitTopLevelSuite(Class aJUnitClass) {
		super(aJUnitClass);
	}

	@Visible(false)
	public String getName() {
		return super.getName();
	}
	public void testAll() {

		try {
		testRunStarted(this);
		super.testAll();
		testRunFinished(this);
		} catch (PropertyVetoException e) {
			System.err.println(e.getMessage());
		}

	}

	
	
//	@Override
//	@Visible(false)
//	public int numLeafNodeDescendents() {
//		int retVal = 0;
//		for (GradableJUnitTest aTest:children) {			
//			int aNumGrandChildren = aTest.numLeafNodeDescendents();
//			if (aNumGrandChildren == 0) // aleaf node
//				retVal++;
//			else
//				retVal += aNumGrandChildren;
//			
//		}
//		return retVal;
//	}
//	@Override
//	@Visible(false)
//	public int numInternalNodeDescendents() {
//		int retVal = 0;
//		for (GradableJUnitTest aTest:children) {			
//			int aNumGrandChildren = aTest.numLeafNodeDescendents();
//			if (aNumGrandChildren > 1) // do not count an artifical parent
//				retVal++;		
//			
//		}
//		return retVal;
//	}
	
	protected void maybeProcessTestRunStarted(PropertyChangeEvent evt) {
		if (!TEST_RUN_STARTED.equals(evt.getPropertyName())) {
				return;
		}
		GradableJUnitTest aTest = (GradableJUnitTest) evt.getNewValue();
		try {
			testRunStarted(aTest);
		} catch (PropertyVetoException e) {
			// this should never happen
			e.printStackTrace();
		}

	}
	protected void testRunStarted(GradableJUnitTest aTest) throws PropertyVetoException{
		String aClassName = aTest.getJUnitClass().getSimpleName();
		String aName = aTest.getExplanation();
//		String anId = aTest.getJUnitClass().getName();
		// aClassName and aName not really needed, as aTest has that info.
		Description aDescription = Description.createTestDescription(aClassName, aName, this);
		RunVetoerFactory.getOrCreateRunVetoer().vetoableChange(new PropertyChangeEvent(this, TEST_RUN_STARTED, this, null));

		refreshPreviousClasses();	
		RunNotifierFactory.getOrCreateRunNotifier().fireTestRunStarted(aDescription);
	}
	
	protected void testRunFinished(GradableJUnitTest aTest) {
		RunNotifierFactory.getOrCreateRunNotifier().fireTestRunFinished(null);
//		RunNotifierFactory.getOrCreateRunNotifier().fireTestRunFinished(aTest);




	}
	


    protected void maybeProcessTestRunFinished(PropertyChangeEvent evt) {
    	if (!TEST_RUN_FINISHED.equals(evt.getPropertyName())) {
				return;
    	}
//		RunNotifierFactory.getRunNotifier().fireTestRunFinished(null);
    	testRunFinished((GradableJUnitTest) evt.getNewValue());

	}
	@Override
	public void propertyChange(PropertyChangeEvent evt) {
		maybeProcessTestRunStarted(evt);
		maybeProcessTestRunFinished(evt);
		super.propertyChange(evt);
	}
	

	
}
]]></snapshot>
  </Command>
  <Command __id="7192" _type="ShellCommand" date="Sat Aug 24 17:57:35 EDT 2019" timestamp="108178827" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7193" _type="PredictionCommand" date="Sat Aug 24 17:57:35 EDT 2019" prediction_type="MakingProgress" timestamp="108178835" />
  <Command __id="7194" _type="ShellCommand" date="Sat Aug 24 17:58:24 EDT 2019" timestamp="108227661" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7195" _type="ShellCommand" date="Sat Aug 24 17:58:31 EDT 2019" timestamp="108234587" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7196" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 17:58:31 EDT 2019" timestamp="108234607" />
  <Command __id="7197" _type="ShellCommand" date="Sat Aug 24 17:59:00 EDT 2019" timestamp="108263608" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7198" _type="ShellCommand" date="Sat Aug 24 17:59:41 EDT 2019" timestamp="108305030" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7200" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 17:59:42 EDT 2019" docOffset="0" timestamp="108305755" />
  <Command __id="7201" _type="ShellCommand" date="Sat Aug 24 18:00:07 EDT 2019" timestamp="108330161" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7202" _type="ShellCommand" date="Sat Aug 24 18:00:23 EDT 2019" timestamp="108346832" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7204" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 18:00:24 EDT 2019" docOffset="0" timestamp="108347487" />
  <Command __id="7205" _type="ShellCommand" date="Sat Aug 24 18:00:38 EDT 2019" timestamp="108361598" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7206" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 18:00:49 EDT 2019" start_end="END" timestamp="108372502" />
  <Command __id="7207" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sat Aug 24 18:00:49 EDT 2019" start_end="END" timestamp="108372502" />
  <Command __id="7208" _type="ShellCommand" date="Sat Aug 24 18:00:49 EDT 2019" timestamp="108372629" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7209" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 18:00:49 EDT 2019" timestamp="108372648" />
  <Command __id="7211" _type="SelectTextCommand" caretOffset="253" date="Sat Aug 24 18:01:02 EDT 2019" end="253" start="226" timestamp="108385307" />
  <Command __id="7212" _type="MoveCaretCommand" caretOffset="447" date="Sat Aug 24 18:01:18 EDT 2019" docOffset="835" timestamp="108401702" />
  <Command __id="7213" _type="MoveCaretCommand" caretOffset="433" date="Sat Aug 24 18:01:19 EDT 2019" docOffset="821" timestamp="108402478" />
  <Command __id="7215" _type="MoveCaretCommand" caretOffset="0" date="Sat Aug 24 18:01:47 EDT 2019" docOffset="0" timestamp="108430620" />
  <Command __id="7216" _type="MoveCaretCommand" caretOffset="93" date="Sat Aug 24 18:01:50 EDT 2019" docOffset="93" timestamp="108433186" />
  <Command __id="7218" _type="InsertStringCommand" date="Sat Aug 24 18:01:50 EDT 2019" repeat="14" timestamp="108433710" timestamp2="108437954">
    <data><![CDATA[extends AJUNit]]></data>
  </Command>
  <Command __id="7246" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 18:01:55 EDT 2019" repeat="4" timestamp="108438639" timestamp2="108439117" />
  <Command __id="7254" _type="InsertStringCommand" date="Sat Aug 24 18:01:56 EDT 2019" repeat="7" timestamp="108439980" timestamp2="108442272">
    <data><![CDATA[UnitTop]]></data>
  </Command>
  <Command __id="7267" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 18:01:59 EDT 2019" start_end="START" timestamp="108442793" />
  <Command __id="7268" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sat Aug 24 18:01:59 EDT 2019" timestamp="108442854" />
  <Command __id="7270" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 18:02:03 EDT 2019" start_end="END" timestamp="108446794" />
  <Command __id="7272" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 18:02:03 EDT 2019" repeat="4" timestamp="108447035" timestamp2="108447744" />
  <Command __id="7280" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 18:02:09 EDT 2019" repeat="13" timestamp="108452306" timestamp2="108454420" />
  <Command __id="7305" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 18:02:12 EDT 2019" timestamp="108455458" />
  <Command __id="7306" _type="ShellCommand" date="Sat Aug 24 18:02:22 EDT 2019" timestamp="108465894" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7307" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sat Aug 24 18:02:31 EDT 2019" start_end="END" timestamp="108474621" />
  <Command __id="7308" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sat Aug 24 18:02:31 EDT 2019" start_end="END" timestamp="108474621" />
  <Command __id="7309" _type="ShellCommand" date="Sat Aug 24 18:02:31 EDT 2019" timestamp="108474784" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7310" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 18:02:31 EDT 2019" timestamp="108474810" />
  <Command __id="7311" _type="ShellCommand" date="Sat Aug 24 18:02:43 EDT 2019" timestamp="108486690" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7312" _type="ShellCommand" date="Sat Aug 24 18:02:49 EDT 2019" timestamp="108492960" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7313" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 18:02:49 EDT 2019" timestamp="108492978" />
  <Command __id="7314" _type="MoveCaretCommand" caretOffset="50" date="Sat Aug 24 18:06:17 EDT 2019" docOffset="50" timestamp="108700526" />
  <Command __id="7315" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.rename.element" date="Sat Aug 24 18:06:18 EDT 2019" timestamp="108701574" />
  <Command __id="7316" _type="MoveCaretCommand" caretOffset="65" date="Sat Aug 24 18:06:21 EDT 2019" docOffset="65" timestamp="108704536" />
  <Command __id="7317" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 18:06:22 EDT 2019" timestamp="108705091" />
  <Command __id="7318" _type="MoveCaretCommand" caretOffset="72" date="Sat Aug 24 18:06:24 EDT 2019" docOffset="72" timestamp="108707563" />
  <Command __id="7319" _type="InsertStringCommand" date="Sat Aug 24 18:06:25 EDT 2019" timestamp="108708392" timestamp2="108708392">
    <data><![CDATA[J]]></data>
  </Command>
  <Command __id="7320" _type="InsertStringCommand" date="Sat Aug 24 18:06:25 EDT 2019" timestamp="108708937" timestamp2="108708937">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7321" _type="MoveCaretCommand" caretOffset="90" date="Sat Aug 24 18:06:37 EDT 2019" docOffset="90" timestamp="108720155" />
  <Command __id="7322" _type="InsertStringCommand" date="Sat Aug 24 18:06:37 EDT 2019" repeat="14" timestamp="108720565" timestamp2="108725212">
    <data><![CDATA[ extends AGrad]]></data>
  </Command>
  <Command __id="7336" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sat Aug 24 18:06:42 EDT 2019" timestamp="108726068" />
  <Command __id="7337" _type="ShellCommand" date="Sat Aug 24 18:06:45 EDT 2019" timestamp="108728177" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7338" _type="ShellCommand" date="Sat Aug 24 18:06:45 EDT 2019" timestamp="108728419" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7339" _type="MoveCaretCommand" caretOffset="185" date="Sat Aug 24 18:06:45 EDT 2019" docOffset="185" timestamp="108728485" />
  <Command __id="7340" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 18:06:47 EDT 2019" timestamp="108730620" />
  <Command __id="7341" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.internal.ui.CompilationUnitEditor.ruler.actions/org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction" date="Sat Aug 24 18:06:49 EDT 2019" timestamp="108733011" />
  <Command __id="7342" _type="ShellCommand" date="Sat Aug 24 18:06:53 EDT 2019" timestamp="108736202" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7343" _type="ShellCommand" date="Sat Aug 24 18:06:53 EDT 2019" timestamp="108736482" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7344" _type="SelectTextCommand" caretOffset="244" date="Sat Aug 24 18:06:53 EDT 2019" end="244" start="239" timestamp="108736575" />
  <Command __id="7345" _type="MoveCaretCommand" caretOffset="303" date="Sat Aug 24 18:06:54 EDT 2019" docOffset="303" timestamp="108737948" />
  <Command __id="7346" _type="SelectTextCommand" caretOffset="308" date="Sat Aug 24 18:06:55 EDT 2019" end="308" start="299" timestamp="108738142" />
  <Command __id="7347" _type="SelectTextCommand" caretOffset="327" date="Sat Aug 24 18:06:55 EDT 2019" end="327" start="284" timestamp="108738341" />
  <Command __id="7348" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 18:06:55 EDT 2019" timestamp="108738801" />
  <Command __id="7349" _type="SelectTextCommand" caretOffset="239" date="Sat Aug 24 18:06:59 EDT 2019" end="256" start="239" timestamp="108742698" />
  <Command __id="7350" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sat Aug 24 18:07:00 EDT 2019" timestamp="108743258" />
  <Command __id="7351" _type="InsertStringCommand" date="Sat Aug 24 18:07:01 EDT 2019" repeat="3" timestamp="108744518" timestamp2="108745243">
    <data><![CDATA[Str]]></data>
  </Command>
  <Command __id="7354" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 18:07:03 EDT 2019" repeat="3" timestamp="108746797" timestamp2="108747215" />
  <Command __id="7357" _type="InsertStringCommand" date="Sat Aug 24 18:07:05 EDT 2019" repeat="16" timestamp="108748866" timestamp2="108752563">
    <data><![CDATA[String aFileName]]></data>
  </Command>
  <Command __id="7373" _type="MoveCaretCommand" caretOffset="285" date="Sat Aug 24 18:07:44 EDT 2019" docOffset="285" timestamp="108788054" />
  <Command __id="7374" _type="InsertStringCommand" date="Sat Aug 24 18:07:45 EDT 2019" timestamp="108788495" timestamp2="108788495">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7375" _type="InsertStringCommand" date="Sat Aug 24 18:08:10 EDT 2019" repeat="30" timestamp="108813634" timestamp2="108819400">
    <data><![CDATA[public static void main (Strng]]></data>
  </Command>
  <Command __id="7405" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 18:08:16 EDT 2019" repeat="2" timestamp="108819833" timestamp2="108819973" />
  <Command __id="7407" _type="InsertStringCommand" date="Sat Aug 24 18:08:17 EDT 2019" repeat="10" timestamp="108820294" timestamp2="108823727">
    <data><![CDATA[ing[] args]]></data>
  </Command>
  <Command __id="7417" _type="MoveCaretCommand" caretOffset="327" date="Sat Aug 24 18:08:22 EDT 2019" docOffset="327" timestamp="108825530" />
  <Command __id="7418" _type="InsertStringCommand" date="Sat Aug 24 18:08:22 EDT 2019" repeat="2" timestamp="108825811" timestamp2="108826232">
    <data><![CDATA[ {]]></data>
  </Command>
  <Command __id="7420" _type="InsertStringCommand" date="Sat Aug 24 18:08:23 EDT 2019" timestamp="108826524" timestamp2="108826524">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7421" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sat Aug 24 18:08:24 EDT 2019" timestamp="108827418" />
  <Command __id="7422" _type="InsertStringCommand" date="Sat Aug 24 18:08:45 EDT 2019" repeat="12" timestamp="108848329" timestamp2="108850986">
    <data><![CDATA[String aFile]]></data>
  </Command>
  <Command __id="7434" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 18:08:48 EDT 2019" repeat="4" timestamp="108851950" timestamp2="108852441" />
  <Command __id="7438" _type="InsertStringCommand" date="Sat Aug 24 18:08:50 EDT 2019" repeat="12" timestamp="108853931" timestamp2="108856134">
    <data><![CDATA[Requirements]]></data>
  </Command>
  <Command __id="7450" _type="InsertStringCommand" date="Sat Aug 24 18:08:55 EDT 2019" repeat="6" timestamp="108858620" timestamp2="108861092">
    <data><![CDATA[CSV = ]]></data>
  </Command>
  <Command __id="7456" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 18:09:31 EDT 2019" repeat="3" timestamp="108894528" timestamp2="108894877" />
  <Command __id="7459" _type="InsertStringCommand" date="Sat Aug 24 18:09:32 EDT 2019" repeat="23" timestamp="108895710" timestamp2="108902788">
    <data><![CDATA[FileName = "Assignments]]></data>
  </Command>
  <Command __id="7482" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 18:09:40 EDT 2019" timestamp="108903610" />
  <Command __id="7483" _type="MoveCaretCommand" caretOffset="372" date="Sat Aug 24 18:09:58 EDT 2019" docOffset="372" timestamp="108921593" />
  <Command __id="7484" _type="SelectTextCommand" caretOffset="378" date="Sat Aug 24 18:09:58 EDT 2019" end="378" start="368" timestamp="108921766" />
  <Command __id="7485" _type="SelectTextCommand" caretOffset="381" date="Sat Aug 24 18:09:58 EDT 2019" end="381" start="331" timestamp="108921967" />
  <Command __id="7486" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sat Aug 24 18:09:59 EDT 2019" timestamp="108922830" />
  <Command __id="7487" _type="MoveCaretCommand" caretOffset="274" date="Sat Aug 24 18:10:01 EDT 2019" docOffset="274" timestamp="108924455" />
  <Command __id="7488" _type="SelectTextCommand" caretOffset="279" date="Sat Aug 24 18:10:01 EDT 2019" end="279" start="268" timestamp="108924663" />
  <Command __id="7489" _type="InsertStringCommand" date="Sat Aug 24 18:10:01 EDT 2019" repeat="4" timestamp="108925010" timestamp2="108925666">
    <data><![CDATA[null]]></data>
  </Command>
  <Command __id="7493" _type="MoveCaretCommand" caretOffset="278" date="Sat Aug 24 18:10:04 EDT 2019" docOffset="278" timestamp="108927870" />
  <Command __id="7494" _type="InsertStringCommand" date="Sat Aug 24 18:10:05 EDT 2019" timestamp="108928297" timestamp2="108928297">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7495" _type="InsertStringCommand" date="Sat Aug 24 18:10:05 EDT 2019" repeat="11" timestamp="108928765" timestamp2="108930416">
    <data><![CDATA[public stta]]></data>
  </Command>
  <Command __id="7506" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sat Aug 24 18:10:08 EDT 2019" repeat="2" timestamp="108931154" timestamp2="108931297" />
  <Command __id="7508" _type="InsertStringCommand" date="Sat Aug 24 18:10:08 EDT 2019" repeat="5" timestamp="108931420" timestamp2="108932306">
    <data><![CDATA[atic ]]></data>
  </Command>
  <Command __id="7513" _type="InsertStringCommand" date="Sat Aug 24 18:10:12 EDT 2019" repeat="13" timestamp="108935332" timestamp2="108938149">
    <data><![CDATA[String search]]></data>
  </Command>
  <Command __id="7526" _type="InsertStringCommand" date="Sat Aug 24 18:10:21 EDT 2019" repeat="18" timestamp="108944473" timestamp2="108950858">
    <data><![CDATA[ForAssignmentData(]]></data>
  </Command>
  <Command __id="7544" _type="MoveCaretCommand" caretOffset="327" date="Sat Aug 24 18:10:30 EDT 2019" docOffset="327" timestamp="108953409" />
  <Command __id="7623" _type="RunCommand" date="Sun Aug 25 08:52:31 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="161874268" type="Run" />
  <Command __id="7624" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 08:55:21 EDT 2019" timestamp="162044080" />
  <Command __id="7625" _type="MoveCaretCommand" caretOffset="2453" date="Sun Aug 25 08:55:21 EDT 2019" docOffset="3305" timestamp="162044360" />
  <Command __id="7627" _type="MoveCaretCommand" caretOffset="338" date="Sun Aug 25 08:55:45 EDT 2019" docOffset="338" timestamp="162068436" />
  <Command __id="7628" _type="MoveCaretCommand" caretOffset="341" date="Sun Aug 25 08:55:53 EDT 2019" docOffset="341" timestamp="162076935" />
  <Command __id="7629" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sun Aug 25 08:55:56 EDT 2019" start_end="START" timestamp="162079693" />
  <Command __id="7630" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.internal.ui.CompilationUnitEditor.ruler.actions/org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction" date="Sun Aug 25 08:55:56 EDT 2019" timestamp="162079838" />
  <Command __id="7631" _type="ShellCommand" date="Sun Aug 25 08:55:58 EDT 2019" timestamp="162081430" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7632" _type="ShellCommand" date="Sun Aug 25 08:55:58 EDT 2019" timestamp="162081703" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7633" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sun Aug 25 08:55:58 EDT 2019" start_end="END" timestamp="162081729" />
  <Command __id="7636" _type="SelectTextCommand" caretOffset="354" date="Sun Aug 25 08:55:58 EDT 2019" end="354" start="350" timestamp="162081807" />
  <Command __id="7637" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 08:55:59 EDT 2019" timestamp="162082853" />
  <Command __id="7638" _type="MoveCaretCommand" caretOffset="365" date="Sun Aug 25 08:56:03 EDT 2019" docOffset="365" timestamp="162087067" />
  <Command __id="7639" _type="MoveCaretCommand" caretOffset="358" date="Sun Aug 25 08:56:05 EDT 2019" docOffset="358" timestamp="162088937" />
  <Command __id="7640" _type="SelectTextCommand" caretOffset="362" date="Sun Aug 25 08:56:06 EDT 2019" end="362" start="355" timestamp="162089164" />
  <Command __id="7642" _type="InsertStringCommand" date="Sun Aug 25 08:56:07 EDT 2019" timestamp="162090920" timestamp2="162090920">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7644" _type="InsertStringCommand" date="Sun Aug 25 08:56:14 EDT 2019" repeat="13" timestamp="162097154" timestamp2="162099892">
    <data><![CDATA[ProjectFolder]]></data>
  </Command>
  <Command __id="7669" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 08:56:17 EDT 2019" timestamp="162101000" />
  <Command __id="7670" _type="MoveCaretCommand" caretOffset="372" date="Sun Aug 25 08:56:19 EDT 2019" docOffset="372" timestamp="162102628" />
  <Command __id="7672" _type="InsertStringCommand" date="Sun Aug 25 08:56:20 EDT 2019" timestamp="162103228" timestamp2="162103228">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7674" _type="InsertStringCommand" date="Sun Aug 25 08:56:46 EDT 2019" repeat="12" timestamp="162129604" timestamp2="162133627">
    <data><![CDATA[AssignmentSp]]></data>
  </Command>
  <Command __id="7697" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 08:56:51 EDT 2019" start_end="START" timestamp="162134476" />
  <Command __id="7698" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sun Aug 25 08:56:51 EDT 2019" timestamp="162134617" />
  <Command __id="7699" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 08:56:57 EDT 2019" start_end="END" timestamp="162140319" />
  <Command __id="7214" _type="FileOpenCommand" date="Sat Aug 24 18:01:47 EDT 2019" docASTNodeCount="10" docActiveCodeLength="101" docExpressionCount="6" docLength="101" projectName="GraderBasics" timestamp="108430437">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\gradingTools\interpreter\testcases\AnInterpretingJUnitTopLevelSuite.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.interpreter.testcases;

public class AnInterpretingJUnitTopLevelSuite {

}
]]></snapshot>
  </Command>
  <DocumentChange __id="7217" _type="Insert" date="Sat Aug 24 18:01:50 EDT 2019" docASTNodeCount="12" docActiveCodeLength="115" docExpressionCount="7" docLength="115" length="14" offset="93" repeat="14" timestamp="108433709" timestamp2="108437952">
    <text><![CDATA[extends AJUNit]]></text>
  </DocumentChange>
  <DocumentChange __id="7245" _type="Delete" date="Sat Aug 24 18:01:55 EDT 2019" docASTNodeCount="12" docActiveCodeLength="111" docExpressionCount="7" docLength="111" endLine="2" length="4" offset="103" repeat="4" startLine="2" timestamp="108438628" timestamp2="108439115">
    <text><![CDATA[UNit]]></text>
  </DocumentChange>
  <DocumentChange __id="7253" _type="Insert" date="Sat Aug 24 18:01:56 EDT 2019" docASTNodeCount="12" docActiveCodeLength="118" docExpressionCount="7" docLength="118" length="7" offset="103" repeat="7" timestamp="108439978" timestamp2="108442269">
    <text><![CDATA[UnitTop]]></text>
  </DocumentChange>
  <DocumentChange __id="7269" _type="Delete" date="Sat Aug 24 18:02:03 EDT 2019" docASTNodeCount="12" docActiveCodeLength="113" docExpressionCount="7" docLength="113" endLine="2" length="5" offset="105" repeat="5" startLine="2" timestamp="108446776" timestamp2="108447743">
    <text><![CDATA[itTop]]></text>
  </DocumentChange>
  <DocumentChange __id="7279" _type="Delete" date="Sat Aug 24 18:02:09 EDT 2019" docASTNodeCount="10" docActiveCodeLength="100" docExpressionCount="6" docLength="100" endLine="2" length="13" offset="92" repeat="13" startLine="2" timestamp="108452304" timestamp2="108454419">
    <text><![CDATA[ extends AJUn]]></text>
  </DocumentChange>
  <Command __id="7573" _type="FileOpenCommand" date="Sat Aug 24 18:11:30 EDT 2019" docASTNodeCount="49" docActiveCodeLength="325" docExpressionCount="40" docLength="325" projectName="Comp533AllChecks" timestamp="109013736">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp533AllChecks\src\gradingTools\comp533s18\assignment1\Assignment1Suite.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.comp533s18.assignment1;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;

import gradingTools.comp533s18.assignment1.testcases.OneClientCorrectConnection;


@RunWith(Suite.class)
@Suite.SuiteClasses({
	OneClientCorrectConnection.class,
})
public class Assignment1Suite {
}
]]></snapshot>
  </Command>
  <Command __id="7575" _type="FileOpenCommand" date="Sat Aug 24 18:12:04 EDT 2019" docASTNodeCount="342" docActiveCodeLength="3438" docExpressionCount="276" docLength="3928" projectName="Comp533AllChecks" timestamp="109047324">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp533AllChecks\src\gradingTools\comp533s18\assignment1\Assignment1Requirements.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.comp533s18.assignment1;

import grader.junit.AJUnitProjectRequirements;
import grader.trace.GraderTraceUtility;
import grader.trace.comp533.Comp533TraceUtility;
import gradingTools.comp533s18.assignment1.testcases.OneClientCorrectConnection;
import gradingTools.comp533s18.assignment1.testcases.OneClientCorrectReadWriteTestCase;
import gradingTools.comp533s18.assignment1.testcases.OneClientCorrectThreadsTestCase;
import gradingTools.comp533s18.assignment1.testcases.OneClientMessageRatioTestCase;
import gradingTools.comp533s18.assignment1.testcases.ReadWriteUpdateOrderTestCase;
import gradingTools.comp533s18.assignment1.testcases.SingleClassTaggedTestCase;
import gradingTools.comp533s18.assignment1.testcases.StaticArguments;
import gradingTools.comp533s18.assignment1.testcases.TwoClientConnection;
import gradingTools.comp533s18.assignment1.testcases.TwoClientCorrectReadWriteTestCase;
import gradingTools.comp533s18.assignment1.testcases.TwoClientCorrectThreadsTestCase;
import gradingTools.comp533s18.assignment1.testcases.TwoClientMessageRatioTestCase;

public class Assignment1Requirements extends AJUnitProjectRequirements {
	public Assignment1Requirements() {
		Comp533TraceUtility.setTurnOn(true);
		Comp533TraceUtility.setTracing();
		GraderTraceUtility.setTurnOn(true);
		GraderTraceUtility.setTracing();
		
		addDueDate("02/4/2014 23:55:59", 1.0);
		addDueDate("02/5/2014 23:55:59", 0.5);
		
		addFeature("Server tagged", 5, new SingleClassTaggedTestCase("Server"));
		addFeature("Client tagged", 5, new SingleClassTaggedTestCase("Client"));
		
//		addJUnitTestSuite(Assignment3Suite.class);
		
		// takes 0.5 points from each read, write, and behaviors test, behavior exclusive testing
		addFeature("Static arguments work properly", 20, new StaticArguments());
		addFeature("One client correct connection", 20, new OneClientCorrectConnection());
		// read/write correct and client+server behaviors
		addFeature("One client correct read, write, and behaviors - Atomic", 35, new OneClientCorrectReadWriteTestCase(true));
		addFeature("One client correct read, write, and behaviors - Non-atomic", 35, new OneClientCorrectReadWriteTestCase(false));
//		  threads exist
		addFeature("One client correct threads - Atomic", 5, new OneClientCorrectThreadsTestCase(true));
		addFeature("One client correct threads - Non-atomic", 5, new OneClientCorrectThreadsTestCase(false));
		addFeature("One client correct message ratios - Atomic", 10, new OneClientMessageRatioTestCase(true));
		addFeature("One client correct message ratios - Non-atomic", 10, new OneClientMessageRatioTestCase(false));
//		addFeature("One client correct values - Atomic", 10, new OneClientCorrectValuesTestCase(true));
//		addFeature("One client correct values - Non-atomic", 10, new OneClientCorrectValuesTestCase(false));
		addFeature("Two client correct connection", 20, new TwoClientConnection());
		// read/write correct and client+server behaviors
		addFeature("Two client correct read, write, and behaviors - Atomic", 35, new TwoClientCorrectReadWriteTestCase(true));
		addFeature("Two client correct read, write, and behaviors - Non-atomic", 35, new TwoClientCorrectReadWriteTestCase(false));
		//  threads exist
		addFeature("Two client correct threads - Atomic", 5, new TwoClientCorrectThreadsTestCase(true));
		addFeature("Two client correct threads - Non-atomic", 5, new TwoClientCorrectThreadsTestCase(false));
		addFeature("Two client correct message ratios - Atomic", 10, new TwoClientMessageRatioTestCase(true));
		addFeature("Two client correct message ratios - Non-atomic", 10, new TwoClientMessageRatioTestCase(false));
		// update ordering
		addFeature("Read-Write-Update ordering - Atomic", 10, new ReadWriteUpdateOrderTestCase(true));
		addFeature("Read-Write-Update ordering - Non-atomic", 10, new ReadWriteUpdateOrderTestCase(false));
	}
}
]]></snapshot>
  </Command>
  <Command __id="7577" _type="FileOpenCommand" date="Sat Aug 24 18:13:09 EDT 2019" docASTNodeCount="989" docActiveCodeLength="12508" docExpressionCount="742" docLength="12649" projectName="Comp533AllChecks" timestamp="109112448">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp533AllChecks\src\gradingTools\comp533s18\assignment4\Assignment4Requirements.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.comp533s18.assignment4;

import util.annotations.Comp533Tags;
import util.tags.DistributedTags;
import framework.grading.testing.BasicTestCase;
import framework.grading.testing.TestCase;
import grader.basics.execution.BasicRunningProject;
import grader.basics.project.BasicProjectIntrospection;
import grader.junit.AJUnitProjectRequirements;
import grader.trace.GraderTraceUtility;
import grader.trace.comp533.Comp533TraceUtility;
import gradingTools.comp533s18.assignment1.testcases.SingleClassTagListTestCase;
import gradingTools.comp533s18.assignment3.testcases.StaticArgumentsTestCase;
import gradingTools.comp533s18.assignment4.testcases.TagbasedTwoClientCorrectReadWriteTestCase;
import gradingTools.comp533s18.assignment4.testcases.TwoClientCorrectReadWriteTestCase;
import gradingTools.comp533s18.assignment4.testcases.ARegularCounterClientChecker;
import gradingTools.comp533s18.assignment4.testcases.ARegularCounterServerChecker;
import gradingTools.comp533s18.assignment4.testcases.AStringCheckBasedDependentTestCase;
import gradingTools.comp533s18.assignment4.testcases.AStringPositiveAndNegativeCheckBasedDependentTestCase;
import gradingTools.comp533s18.assignment4.testcases.DistributedCounterProgramRunningTestCase;
import gradingTools.shared.testcases.SubstringSequenceChecker;
import gradingTools.comp533s18.assignment4.testcases.blocking_rpc.ABlockingRPCClientReceivesChecker;
import gradingTools.comp533s18.assignment4.testcases.custom_rpc.ACustomRPCClientReceivesChecker;
import gradingTools.comp533s18.assignment4.testcases.custom_rpc.ARegularRPCClientReceivesChecker;
import gradingTools.comp533s18.assignment4.testcases.explicit_receive.AMultipleReceiveQueueChecker;
import gradingTools.comp533s18.assignment4.testcases.explicit_receive.AnExplicitReceiveClientReceivesChecker;
import gradingTools.comp533s18.assignment4.testcases.explicit_receive.AnExplicitReceiveServerReceivesChecker;

public class Assignment4Requirements extends AJUnitProjectRequirements {
	public static String[] SIMULATION_CLIENT_TAGS = {DistributedTags.CLIENT, DistributedTags.GIPC, Comp533Tags.CUSTOM_IPC};
	public static String[] SIMULATION_SERVER_TAGS = {DistributedTags.SERVER, DistributedTags.GIPC, Comp533Tags.CUSTOM_IPC};
	public static String[] SIMULATION_REGISTRY_TAGS = {DistributedTags.REGISTRY};

	public DistributedCounterProgramRunningTestCase addCounterExperimentFetaures(
			String anExperimentName,
			String aServerTag, 
			String aClient1Tag,
			String aClient2Tag,
			SubstringSequenceChecker aServerChecker,
			SubstringSequenceChecker aClientChecker

			) {
		SingleClassTagListTestCase anExplicitReceiveServerTagged = 
				new SingleClassTagListTestCase(aServerTag);
		SingleClassTagListTestCase anExplicitReceiveClient1Tagged = 
				new SingleClassTagListTestCase(aClient1Tag);
		SingleClassTagListTestCase anExplicitReceiveClient2Tagged = 
				new SingleClassTagListTestCase(aClient2Tag);
		addFeature(anExperimentName + " Server Tagged", 2, anExplicitReceiveServerTagged);
		addFeature(anExperimentName +  " Client1 Tagged", 2, anExplicitReceiveClient1Tagged);
		addFeature(anExperimentName + " Client2 Tagged", 2, anExplicitReceiveClient2Tagged);
		

		DistributedCounterProgramRunningTestCase aProgrammingRunProgramRunningTestCase = 
				new DistributedCounterProgramRunningTestCase(
						new ARegularCounterServerChecker(),
						anExplicitReceiveServerTagged,
						anExplicitReceiveClient1Tagged,
						anExplicitReceiveClient2Tagged);
		addFeature(anExperimentName + " Regular Server Output", 5, aProgrammingRunProgramRunningTestCase);

		if (aServerChecker != null) {
		addFeature(anExperimentName + " Special Server Output", 10, 
				new AStringCheckBasedDependentTestCase(
						"Special Server Output",
						DistributedCounterProgramRunningTestCase.SERVER_NAME,
						aServerChecker,
						aProgrammingRunProgramRunningTestCase )
				);
		}
		addFeature(anExperimentName + " Regular Client 1 Output", 5, 
				new AStringCheckBasedDependentTestCase(
						" Regular Client 1 Output",
						DistributedCounterProgramRunningTestCase.CLIENT_1_NAME,
						new ARegularCounterClientChecker(),
						aProgrammingRunProgramRunningTestCase )
				);
		if (aClientChecker != null) {
		addFeature(anExperimentName + " Speical Client 1 Output", 10, 
				new AStringCheckBasedDependentTestCase(
						" Special Client 1 Output",
						DistributedCounterProgramRunningTestCase.CLIENT_2_NAME,
						aClientChecker,
						aProgrammingRunProgramRunningTestCase )
				);
		};
		addFeature(anExperimentName + " Regular Client 2 Output", 5, 
				new AStringCheckBasedDependentTestCase(
						"Regular Client 2 Output",
						DistributedCounterProgramRunningTestCase.CLIENT_1_NAME,
						new ARegularCounterClientChecker(),
						aProgrammingRunProgramRunningTestCase )
				);
		if (aClientChecker != null) {
		addFeature(anExperimentName + " Special Client 2 Output", 10, 
				new AStringCheckBasedDependentTestCase(
						" Special Client 2 Output",
						DistributedCounterProgramRunningTestCase.CLIENT_2_NAME,
						aClientChecker,
						aProgrammingRunProgramRunningTestCase )
				);
		}
		return aProgrammingRunProgramRunningTestCase;
	}
	public DistributedCounterProgramRunningTestCase createServerProgrammingRunTestCase(
			SubstringSequenceChecker aChecker,
			SingleClassTagListTestCase aServerTaggedTestCase, 
			SingleClassTagListTestCase aClient1TaggedTestCase,
			SingleClassTagListTestCase aClient2TaggedTestCase) {
		return new DistributedCounterProgramRunningTestCase(
				new ARegularCounterServerChecker(),
				aServerTaggedTestCase,
				aClient1TaggedTestCase,
				aClient2TaggedTestCase);
		
	}
	protected int regularOutputCredit() {
		return 5;
	}
	protected int specialOutputCredit() {
		return 30;
	}
	public DistributedCounterProgramRunningTestCase addGroupedCounterExperimentFeatures(
			String anExperimentName,
			String aServerTag, 
			String aClient1Tag,
			String aClient2Tag,
			SubstringSequenceChecker aServerChecker,
			SubstringSequenceChecker aClientChecker,
			SubstringSequenceChecker aServerNegativeChecker,
			SubstringSequenceChecker aClientNegativeChecker			

			) {
		SingleClassTagListTestCase anExplicitReceiveServerTagged = 
				new SingleClassTagListTestCase(aServerTag);
		SingleClassTagListTestCase anExplicitReceiveClient1Tagged = 
				new SingleClassTagListTestCase(aClient1Tag);
		SingleClassTagListTestCase anExplicitReceiveClient2Tagged = 
				new SingleClassTagListTestCase(aClient2Tag);
		addFeature(anExperimentName + " Tags (S, C1, C2)", 6, anExplicitReceiveServerTagged,  
				anExplicitReceiveClient1Tagged, 
				anExplicitReceiveClient2Tagged);
		

		DistributedCounterProgramRunningTestCase anExplicitReceiveProgramRunningTestCase = 
				createServerProgrammingRunTestCase(
						new ARegularCounterServerChecker(), 
						anExplicitReceiveServerTagged, 
						anExplicitReceiveClient1Tagged, 
						anExplicitReceiveClient2Tagged);

		addFeature(anExperimentName + " Regular Output (S, C1, C2)", regularOutputCredit(), 
				anExplicitReceiveProgramRunningTestCase,
				new AStringCheckBasedDependentTestCase(
						"Regular Client 1 Output",
						DistributedCounterProgramRunningTestCase.CLIENT_1_NAME,
						new ARegularCounterClientChecker(),
						anExplicitReceiveProgramRunningTestCase ),
				new AStringCheckBasedDependentTestCase(
						"Regular Client 2 Output",
						DistributedCounterProgramRunningTestCase.CLIENT_2_NAME,
						new ARegularCounterClientChecker(),
						anExplicitReceiveProgramRunningTestCase )						
						
				);
		BasicTestCase aClient1TestCase = new  AStringPositiveAndNegativeCheckBasedDependentTestCase(
				"Special Client 1 Output",
				DistributedCounterProgramRunningTestCase.CLIENT_1_NAME,
				aClientChecker,
				aClientNegativeChecker,
				anExplicitReceiveProgramRunningTestCase
				);
		
		BasicTestCase aClient2TestCase = new  AStringPositiveAndNegativeCheckBasedDependentTestCase(
				"Special Client 2 Output",
				DistributedCounterProgramRunningTestCase.CLIENT_2_NAME,
				aClientChecker,
				aClientNegativeChecker,
				anExplicitReceiveProgramRunningTestCase );
		BasicTestCase aServerTestCase = new  AStringPositiveAndNegativeCheckBasedDependentTestCase(
				"Special Server Output",
				DistributedCounterProgramRunningTestCase.SERVER_NAME,
				aServerChecker,
				aServerNegativeChecker,
				anExplicitReceiveProgramRunningTestCase );
		
		if (aClientChecker != null && aServerChecker != null) {		
			
			
			addFeature(anExperimentName + " Special Output (S, C1, C2)", specialOutputCredit(),
					aServerTestCase,
					aClient1TestCase,
					aClient2TestCase);
		} else if (aServerChecker != null) {
			addFeature(anExperimentName + " Special Output (S)", specialOutputCredit(),
					aServerTestCase,
					aClient1TestCase,
					aClient2TestCase);
		} else if (aClientChecker != null) {
			addFeature(anExperimentName + " Special Output (C1, C2)", specialOutputCredit(),
					aClient1TestCase,
					aClient2TestCase);
		}

		
		return anExplicitReceiveProgramRunningTestCase;
	}
	public Assignment4Requirements() {
		init();
		
	}
	public void init() {
		Comp533TraceUtility.setTurnOn(true);
		Comp533TraceUtility.setTracing();
		GraderTraceUtility.setTurnOn(true);
		GraderTraceUtility.setTracing();
		BasicRunningProject.setEchoOutput(false);
		
		BasicProjectIntrospection.setCheckAllSpecifiedTags(true);
		DistributedCounterProgramRunningTestCase aDistributedCounterProgramRunningTestCase;
		
		 aDistributedCounterProgramRunningTestCase =
//				addCounterExperimentFetaures(	
			addGroupedCounterExperimentFeatures(
				"Explicit Receives (Part 1)", 				
				Comp533Tags.EXPLICIT_RECEIVE_SERVER, 
				Comp533Tags.EXPLICIT_RECEIVE_CLIENT1,
				Comp533Tags.EXPLICIT_RECEIVE_CLIENT2,
				new AnExplicitReceiveServerReceivesChecker(),
				new AnExplicitReceiveClientReceivesChecker(),
				null,
				null);
		addFeature("Explicit Receives Server Creates Two Receive Queues", 5, 
				new AStringCheckBasedDependentTestCase(
						"Explicit Receives Server Creates Two Receive Queues",
						DistributedCounterProgramRunningTestCase.SERVER_NAME,
						new AMultipleReceiveQueueChecker(),
						aDistributedCounterProgramRunningTestCase)
				);
		 aDistributedCounterProgramRunningTestCase =
			addGroupedCounterExperimentFeatures(				
				"Custom RPC (Part 2)", 				
				Comp533Tags.CUSTOM_RPC_SERVER, 
				Comp533Tags.CUSTOM_RPC_CLIENT1,
				Comp533Tags.CUSTOM_RPC_CLIENT2,
				null,
				new ACustomRPCClientReceivesChecker(),
				null,
				null);
		 addFeature("Blocking RPC client does not use regular queue for return values", 5, 
					new AStringCheckBasedDependentTestCase(
							"Blocking RPC client does not use regular queue for return values",
							DistributedCounterProgramRunningTestCase.CLIENT_1_NAME,
							new ARegularRPCClientReceivesChecker(),
							false,
							aDistributedCounterProgramRunningTestCase)
					);
		 aDistributedCounterProgramRunningTestCase =
				addGroupedCounterExperimentFeatures(				
					"Blocking RPC (Part 3)", 				
					Comp533Tags.BLOCKING_RPC_SERVER, 
					Comp533Tags.BLOCKING_RPC_CLIENT1,
					Comp533Tags.BLOCKING_RPC_CLIENT2,
					null,
					new ABlockingRPCClientReceivesChecker(),
					null,
					null);
			
		SingleClassTagListTestCase aRegistryTagTest = new SingleClassTagListTestCase(false, SIMULATION_REGISTRY_TAGS);
		SingleClassTagListTestCase aServerTagTest = new SingleClassTagListTestCase(false, SIMULATION_SERVER_TAGS);
		SingleClassTagListTestCase aClientTagTest = new SingleClassTagListTestCase(false, SIMULATION_CLIENT_TAGS);

//
		addFeature("Simulation Registry Tagged", 2, aRegistryTagTest);
		addFeature("Simulation Server Tagged", 2, aServerTagTest);
		addFeature("Simulation Client Tagged", 2, aClientTagTest);

//		BasicTestCase aSimulationTestCase = new TwoClientCorrectReadWriteTestCase(true, false, true, true);
		BasicTestCase aSimulationTestCase = new TagbasedTwoClientCorrectReadWriteTestCase(true, false, true, true, aRegistryTagTest, aServerTagTest, aClientTagTest);

		addFeature("Two client correct read, write, and behaviors - Atomic", 20, aSimulationTestCase);
		addFeature("Blocking RPC used in Simuilation", 20, 
				new AStringCheckBasedDependentTestCase(
						"Blocking RPC used in Simuilation",
						"Server",
						new ABlockingRPCClientReceivesChecker(),
						true,
						aSimulationTestCase)
				);

	}
}
]]></snapshot>
  </Command>
  <Command __id="7579" _type="FileOpenCommand" date="Sat Aug 24 18:14:01 EDT 2019" docASTNodeCount="519" docActiveCodeLength="6721" docExpressionCount="425" docLength="7921" projectName="Comp401AllChecks" timestamp="109164711">
    <filePath><![CDATA[D:\dewan_backup\Java\Comp401AllChecks\src\gradingTools\comp401f18\assignment9\Assignment9Requirements.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.comp401f18.assignment9;

import java.awt.event.ActionEvent;

import grader.basics.execution.BasicProjectExecution;
import grader.basics.execution.GradingMode;
import grader.junit.AJUnitProjectRequirements;
import grader.trace.GraderTraceUtility;
import gradingTools.comp401f16.assignment1.testcases.ImageEnclosedTestCase;
import gradingTools.comp401f17.assignment9.testcases.Assignment9Suite;
import gradingTools.sharedTestCase.NoWarningOrErrorTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckStyleClassDefinedTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckStyleEditablePropertyDefinedTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckStyleIllegalImportOrCallTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckStyleMagicNumberTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckStylePropertyDefinedTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckStyleVariableHasClassTypeTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckstyleClassInstantiatedTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckstyleConstructorDefinedTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckstyleInterfaceDefinedTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckstyleMethodCalledTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckstyleMethodDefinedTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckstylePatternBasedSuperTypeDefinedTestCase;
import gradingTools.sharedTestCase.checkstyle.CheckstyleSuperTypeDefinedTestCase;
import gradingTools.sharedTestCase.checkstyle.ClassHasAtLeastOneInterfaceTestCase;
import trace.grader.basics.GraderBasicsTraceUtility;
import trace.gradingTools.comp401.Comp401TraceUtility;

public class Assignment9Requirements extends AJUnitProjectRequirements {
	public Assignment9Requirements() {
//		GraderTraceUtility.setTurnOn(true);
		GraderTraceUtility.setTracing();
		Comp401TraceUtility.setTracing();

		addDueDate("11/01/2018 00:59:00", 1.05); 	// wed before + 1hr
     	addDueDate("11/28/2018 00:59:00", 1); 		// tue due + 1hr
     	addDueDate("12/03/2018 00:59:00", 0.9);		// fri after due + 1hr
     	addDueDate("12/03/2018 00:59:01", 0);		// fri after due + 1hr
//		addDueDate("12/07/2017 03:00:00", 1);

		// Functionality
		GradingMode.setGraderRun(true);
		addJUnitTestSuite(Assignment9Suite.class);
		// this was in F16 but not in F17
//		BasicProjectExecution.setUseMethodAndConstructorTimeOut(false);

		addFeature("Public methods are in implemented interfaces", 10, new ClassHasAtLeastOneInterfaceTestCase());

		addRestriction("Variables should have interface, not class, type", 10,
				new CheckStyleVariableHasClassTypeTestCase());

		addRestriction("No magic numbers", 10, new CheckStyleMagicNumberTestCase());

		// A student should get either this one, or the extra credit one, but not both
		addFeature("Normal credit view (0.0 if extra credit instead)", 15,
				new CheckstyleMethodDefinedTestCase("InheritingBridgeScenePainter", "paint:Graphics(.*)->void"),
				new CheckstyleInterfaceDefinedTestCase("InheritingBridgeScenePainter", "PropertyChangeListener"),
				new CheckstyleMethodCalledTestCase("InheritingBridgeScenePainter", "repaint:->void"),
				new CheckstyleSuperTypeDefinedTestCase("InheritingBridgeScenePainter", "Console"),

				new CheckstyleClassInstantiatedTestCase("SingletonsCreator", "InheritingBridgeScenePainter")
//     			new CheckstyleMethodDefinedTestCase("SingletonsCreator", 
//     					"@inheritingBridgeScenePainterFactoryMethod:->@InheritingBridgeScenePainter")
		);

		addFeature("Extra credit view", 25, true,
				new CheckstyleMethodDefinedTestCase("PaintListener", "paint:Graphics(.*)->void(.*)"),
				new CheckstyleInterfaceDefinedTestCase("PaintListener", "PropertyChangeListener"),
				new CheckstyleMethodCalledTestCase("PaintListener", "(.*)!repaint:->void"),

				new CheckstyleMethodDefinedTestCase("ObservableBridgeScenePainter",
						"@addPaintListener:@PaintListener->void"),
				new CheckstyleMethodCalledTestCase("ObservableBridgeScenePainter",
						"@PaintListener!paint:Graphics(.*)->void(.*)"),
				new CheckstyleSuperTypeDefinedTestCase("ObservableBridgeScenePainter", "Console"),

				new CheckstyleMethodCalledTestCase("DelegatingBridgeSceneView",
						"@SingletonsCreator!@observableBridgeScenePainterFactoryMethod:->@ObservableBridgeScenePainter"),
				new CheckstyleMethodCalledTestCase("DelegatingBridgeSceneView",
						"(.*)!addPaintListener:@PaintListener->void"),

				new CheckstyleClassInstantiatedTestCase("SingletonsCreator", "DelegatingBridgeSceneView"),
				new CheckstyleClassInstantiatedTestCase("SingletonsCreator", "ObservableBridgeScenePainter")
//     			new CheckstyleMethodDefinedTestCase("SingletonsCreator", 
//     					"@delegatingBridgeSceneViewFactoryMethod:->@DelegatingBridgeSceneView//EC"),
//     			new CheckstyleMethodDefinedTestCase("SingletonsCreator", 
//     					"@observableBridgeScenePainterFactoryMethod:->@ObservableBridgeScenePainter//EC")
		);

		addFeature("BridgeSceneController", 12,
				new CheckstyleInterfaceDefinedTestCase("BridgeSceneController", "MouseListener"),
				new CheckstyleInterfaceDefinedTestCase("BridgeSceneController", "KeyListener"),
				new CheckstyleMethodCalledTestCase("BridgeSceneController", "(.*)!addKeyListener:KeyListener->void"),
				new CheckstyleMethodCalledTestCase("BridgeSceneController",
						"(.*)!addMouseListener:MouseListener->void"));
		addManualFeature("Clicking and pressing buttons in display works correctly", 8);

		addFeature("CommandInterpreter controller", 3, true,
				new CheckStylePropertyDefinedTestCase("CommandInterpreterController", "TextField", "JTextField"),
				new CheckstyleMethodCalledTestCase("CommandInterpreterController",
						"@CommandInterpreter!setCommand:String->void"),

				new CheckstyleClassInstantiatedTestCase("SingletonsCreator", "CommandInterpreterController")
//     			new CheckstyleMethodDefinedTestCase("SingletonsCreator", "@commandInterpreterControllerFactoryMethod:->@CommandInterpreterController")
		);
		addManualFeature("CommandInterpreter controller issues commands correctly", 7, true);

		addFeature("CommandInterpreter view", 3, true,

				new CheckstyleInterfaceDefinedTestCase("ObservableCommandInterpreter", "PropertyListenerRegisterer"),
				new CheckstyleMethodDefinedTestCase("CommandInterpreterView", "PropertyChangeListener"),

				new CheckstyleClassInstantiatedTestCase("SingletonsCreator", "CommandInterpreterView")
//     			new CheckstyleMethodDefinedTestCase("SingletonsCreator", "@commandInterpreterViewFactoryMethod:->@CommandInterpreterView")
		);
		addManualFeature("CommandInterpreter view shows error property correctly", 5, true);

		addFeature("Menu item and button", 3, true,
				new CheckStylePropertyDefinedTestCase("CommandInterpreterController", "MenuItem", "JMenuItem"),
				new CheckStylePropertyDefinedTestCase("CommandInterpreterController", "Button", "JButton"),
				new CheckstyleInterfaceDefinedTestCase("CommandInterpreterController", "ActionListener"));
		addManualFeature("Menu item and button result in some action in display", 7, true);

		// This should only give 2 points since students will only have one but not the
		// other
		addFeature("Progress bar or slider (max 2.0)", 4, true,
				new CheckStylePropertyDefinedTestCase("ProgressBarCreator", "ProgressBar", "JProgressBar"),
				new CheckStylePropertyDefinedTestCase("ProgressBarCreator", "Slider", "JSlider"));
		addManualFeature("Progress bar or slider works", 4, true);

		addManualFeature("Animation shows function of command interpreter and correct output in all frames", 15, false);

		addManualRestriction(INTERACTIVE_RUN, 5,
				new NoWarningOrErrorTestCase("No OE Warnings", ".*(efresh|not in range).*", null, 0.3));

		addRestriction("Illegal import or call", 25, new CheckStyleIllegalImportOrCallTestCase());

	}// end method
}
]]></snapshot>
  </Command>
  <Command __id="7582" _type="FileOpenCommand" date="Sat Aug 24 18:14:14 EDT 2019" docASTNodeCount="205" docActiveCodeLength="1681" docExpressionCount="126" docLength="4408" projectName="comp110-grader" timestamp="109177339">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\junit\AJUnitProjectRequirements.java]]></filePath>
    <snapshot><![CDATA[package grader.junit;

import java.util.List;
import java.util.Map;

import framework.grading.FrameworkProjectRequirements;
import grader.basics.junit.BasicJUnitUtils;
import grader.basics.junit.GradableJUnitTest;
//import gradingTools.comp999junit.assignment1.testcases.reflection.ReflectiveCartesianPointSuite;


public class AJUnitProjectRequirements extends FrameworkProjectRequirements implements JUnitProjectRequirements{
//	public void addJUnitTestSuiteOriginal (Class<?> aJUnitSuiteClass) {
//		List<Class> aJUnitOrSuiteClasses = getTopLevelJUnitTestClassesAndSuites(aJUnitSuiteClass);
//		List<Class> aSuiteClasses = selectJUnitSuites(aJUnitOrSuiteClasses);
//		List<Class> aTestCases = new ArrayList(aJUnitOrSuiteClasses);
//		aTestCases.removeAll(aSuiteClasses);
//		Map<String, List<JUnitTestToGraderTestCase>>  aGroupedTopLevelTestCases = createAndCollectTopLevelTestCases(aTestCases);
//		Map<String, List<JUnitTestToGraderTestCase>>  aGroupedSuiteTestCases = createAndCollectSuiteTestCases(aSuiteClasses);
//		Map<String,List<JUnitTestToGraderTestCase>> aGroupedTestCases = new HashMap();
//		aGroupedTestCases.putAll(aGroupedTopLevelTestCases);
//		aGroupedTestCases.putAll(aGroupedSuiteTestCases);		
//		addGroupedTwoLevelTestCases(aGroupedTestCases);		
//	}
//	public static  Map<String,List<GraderTestCase>>  toGraderTestCaseMap (Map<String,List<GradableJUnitTest>> aGradableJUnitTestCaseMap) {
//		Map<String,List<GraderTestCase>> retVal = new HashMap();
//		for (String aGroup:aGradableJUnitTestCaseMap.keySet()) {
//			retVal.put(aGroup, JUnitUtils.toGraderTestCaseList(aGradableJUnitTestCaseMap.get(aGroup)));
//		}
//		return retVal;
//	}
//	public static  List<GradableJUnitTest> toGradableTree (Map<String,List<GradableJUnitTest>> aGradableJUnitTestCaseMap) {
//		List<GradableJUnitTest> retVal = new ArrayList();
//		for (String aGroup:aGradableJUnitTestCaseMap.keySet()) {
//			List<GradableJUnitTest> aGradables = aGradableJUnitTestCaseMap.get(aGroup);
//			if (aGradables.size() == 2) { // an ungrouped test
//				retVal.add(aGradables.get(1));
//			} else {
//				retVal.add(aGradables.get(0)); // will also have the children
//			}
////			retVal.put(aGroup, toGraderTestCaseList(aGradableJUnitTestCaseMap.get(aGroup)));
//		}
//		return retVal;
//	}
//	public static GraderTestCase toGraderTestCase(GradableJUnitTest aGradableJUnitCase){
//		return new AGraderTestCase(aGradableJUnitCase);
//	}
//	public static  List<GraderTestCase> toGraderTestCaseList(List<GradableJUnitTest> aGradableJUnitCaseList){
//		List<GraderTestCase> retVal = new ArrayList();
//		for (GradableJUnitTest aGradableJUnitTestCase:aGradableJUnitCaseList) {
//			if (aGradableJUnitTestCase instanceof GradableJUnitSuite)  
//				continue; // that is just for display and hierarchy purposes
//			retVal.add(new AGraderTestCase(aGradableJUnitTestCase));
//		}
//		return retVal;
//	}
	@Override
	public void addJUnitTestSuite (Class<?> aJUnitSuiteClass) {
		// This step is also called in localchecks mode
		Map<String,List<GradableJUnitTest>> aGroupedGradables = BasicJUnitUtils.toGradableTree(aJUnitSuiteClass).groupedGradables;
//		Map<String,List<GradableJUnitTest>> aGroupedGradables = BasicJUnitUtils.toGroupedGradables(aJUnitSuiteClass);
		//  these steps seem to be done only in grader mode
		Map<String, List<GraderTestCase>> aGroupedTestCases = JUnitUtils.toGraderTestCaseMap(aGroupedGradables);		
		addGroupedTwoLevelTestCases(aGroupedTestCases);		
	}
	
	static GraderTestCase[] testCasesType = {};
//	
	public void addGroupedTwoLevelTestCases(Map<String, List<GraderTestCase>> aTestCases) {
		for (String aGroup:aTestCases.keySet()) {
			List<GraderTestCase> aJUnitTestToGraderTestCases = aTestCases.get(aGroup);
			double aTotalScore = JUnitUtils.computeTotalScore(aJUnitTestToGraderTestCases);
			JUnitUtils.setPointWeights(aJUnitTestToGraderTestCases, aTotalScore);
			GraderTestCase aFirstCase = aJUnitTestToGraderTestCases.get(0);
			
			boolean anIsRestriction = aFirstCase.isRestriction();
			boolean anIsExtraCredit = aFirstCase.isExtra();
			if (anIsRestriction) {
				addRestriction(aGroup, aTotalScore, aJUnitTestToGraderTestCases.toArray(testCasesType));
			} else {
				addFeature(aGroup, aTotalScore, anIsExtraCredit, aJUnitTestToGraderTestCases.toArray(testCasesType));
			}			
		}		
	}


}
]]></snapshot>
  </Command>
  <Command __id="7607" _type="FileOpenCommand" date="Sat Aug 24 18:19:23 EDT 2019" docASTNodeCount="1690" docActiveCodeLength="11475" docExpressionCount="1011" docLength="16458" projectName="GraderBasics" timestamp="109486130">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\junit\BasicJUnitUtils.java]]></filePath>
  </Command>
  <DocumentChange __id="7617" _type="Insert" date="Sun Aug 25 08:52:03 EDT 2019" docASTNodeCount="1690" docActiveCodeLength="11478" docExpressionCount="1011" docLength="16461" length="3" offset="3154" timestamp="161846802">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="7626" _type="FileOpenCommand" date="Sun Aug 25 08:55:45 EDT 2019" docASTNodeCount="50" docActiveCodeLength="404" docExpressionCount="23" docLength="404" projectName="GraderBasics" timestamp="162068266">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\gradingTools\interpreter\AnInterpretingGradableJUnitTopLevelSuite.java]]></filePath>
    <snapshot><![CDATA[package gradingTools.interpreter;

import grader.basics.junit.AGradableJUnitTopLevelSuite;

public class AnInterpretingGradableJUnitTopLevelSuite extends AGradableJUnitTopLevelSuite{

	public AnInterpretingGradableJUnitTopLevelSuite(String aFileName) {
		super(null);
	}
	public static String searchForAssignmentData(File aFolder) {
		
	}
	public static void main (String[] args) {
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="7634" _type="Insert" date="Sun Aug 25 08:55:58 EDT 2019" docASTNodeCount="56" docActiveCodeLength="428" docExpressionCount="28" docLength="428" length="24" offset="37" repeat="2" timestamp="162081743" timestamp2="162081743">
    <text><![CDATA[import java.io.File;

]]></text>
  </DocumentChange>
  <DocumentChange __id="7641" _type="Replace" date="Sun Aug 25 08:56:07 EDT 2019" docASTNodeCount="56" docActiveCodeLength="422" docExpressionCount="28" docLength="422" endLine="11" insertionLength="1" int_docASTNodeCount="52" int_docActiveCodeLength="421" int_docExpressionCount="26" int_docLength="421" length="7" offset="355" startLine="11" timestamp="162090890">
    <deletedText><![CDATA[aFolder]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7643" _type="Insert" date="Sun Aug 25 08:56:14 EDT 2019" docASTNodeCount="56" docActiveCodeLength="435" docExpressionCount="28" docLength="435" length="13" offset="356" repeat="13" timestamp="162097150" timestamp2="162099881">
    <text><![CDATA[ProjectFolder]]></text>
  </DocumentChange>
  <DocumentChange __id="7671" _type="Insert" date="Sun Aug 25 08:56:20 EDT 2019" docASTNodeCount="56" docActiveCodeLength="439" docExpressionCount="28" docLength="439" length="4" offset="372" timestamp="162103215">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="7673" _type="Insert" date="Sun Aug 25 08:56:46 EDT 2019" docASTNodeCount="58" docActiveCodeLength="451" docExpressionCount="29" docLength="451" length="12" offset="376" repeat="12" timestamp="162129600" timestamp2="162133618">
    <text><![CDATA[AssignmentSp]]></text>
  </DocumentChange>
  <DocumentChange __id="7700" _type="Delete" date="Sun Aug 25 08:57:01 EDT 2019" docASTNodeCount="56" docActiveCodeLength="439" docExpressionCount="28" docLength="439" endLine="12" length="12" offset="376" repeat="12" startLine="12" timestamp="162144477" timestamp2="162146379">
    <text><![CDATA[AssignmentSp]]></text>
  </DocumentChange>
  <DocumentChange __id="7726" _type="Replace" date="Sun Aug 25 08:58:04 EDT 2019" docASTNodeCount="56" docActiveCodeLength="426" docExpressionCount="28" docLength="426" endLine="11" insertionLength="1" int_docASTNodeCount="52" int_docActiveCodeLength="425" int_docExpressionCount="26" int_docLength="425" length="14" offset="355" startLine="11" timestamp="162207768">
    <deletedText><![CDATA[aProjectFolder]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7728" _type="Insert" date="Sun Aug 25 08:58:05 EDT 2019" docASTNodeCount="56" docActiveCodeLength="448" docExpressionCount="28" docLength="448" length="22" offset="356" repeat="22" timestamp="162208504" timestamp2="162214754">
    <text><![CDATA[nAssignmentsDataFolder]]></text>
  </DocumentChange>
  <DocumentChange __id="7773" _type="Replace" date="Sun Aug 25 08:58:22 EDT 2019" docASTNodeCount="56" docActiveCodeLength="435" docExpressionCount="28" docLength="435" endLine="11" insertionLength="1" int_docASTNodeCount="56" int_docActiveCodeLength="434" int_docExpressionCount="28" int_docLength="434" length="14" offset="335" startLine="11" timestamp="162225235">
    <deletedText><![CDATA[AssignmentData]]></deletedText>
    <insertedText><![CDATA[R]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7775" _type="Insert" date="Sun Aug 25 08:58:22 EDT 2019" docASTNodeCount="56" docActiveCodeLength="450" docExpressionCount="28" docLength="450" length="15" offset="336" repeat="15" timestamp="162225450" timestamp2="162228258">
    <text><![CDATA[equirementsFile]]></text>
  </DocumentChange>
  <Command __id="7701" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 08:57:01 EDT 2019" repeat="12" timestamp="162144488" timestamp2="162146381" />
  <Command __id="7724" _type="MoveCaretCommand" caretOffset="360" date="Sun Aug 25 08:58:03 EDT 2019" docOffset="360" timestamp="162206977" />
  <Command __id="7725" _type="SelectTextCommand" caretOffset="369" date="Sun Aug 25 08:58:04 EDT 2019" end="369" start="355" timestamp="162207123" />
  <Command __id="7727" _type="InsertStringCommand" date="Sun Aug 25 08:58:04 EDT 2019" repeat="23" timestamp="162207790" timestamp2="162214765">
    <data><![CDATA[anAssignmentsDataFolder]]></data>
  </Command>
  <Command __id="7772" _type="SelectTextCommand" caretOffset="349" date="Sun Aug 25 08:58:21 EDT 2019" end="349" start="335" timestamp="162224505" />
  <Command __id="7774" _type="InsertStringCommand" date="Sun Aug 25 08:58:22 EDT 2019" repeat="16" timestamp="162225253" timestamp2="162228271">
    <data><![CDATA[RequirementsFile]]></data>
  </Command>
  <Command __id="7805" _type="MoveCaretCommand" caretOffset="383" date="Sun Aug 25 08:58:31 EDT 2019" docOffset="383" timestamp="162234252" />
  <Command __id="7807" _type="InsertStringCommand" date="Sun Aug 25 08:58:31 EDT 2019" timestamp="162234794" timestamp2="162234794">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7808" _type="MoveCaretCommand" caretOffset="362" date="Sun Aug 25 08:58:57 EDT 2019" docOffset="362" timestamp="162261032" />
  <Command __id="7809" _type="SelectTextCommand" caretOffset="380" date="Sun Aug 25 08:58:58 EDT 2019" end="380" start="357" timestamp="162261255" />
  <Command __id="7811" _type="InsertStringCommand" date="Sun Aug 25 08:58:59 EDT 2019" timestamp="162263042" timestamp2="162263042">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7813" _type="InsertStringCommand" date="Sun Aug 25 08:59:06 EDT 2019" repeat="12" timestamp="162269781" timestamp2="162272364">
    <data><![CDATA[ParentFolder]]></data>
  </Command>
  <Command __id="7836" _type="MoveCaretCommand" caretOffset="373" date="Sun Aug 25 08:59:11 EDT 2019" docOffset="373" timestamp="162274421" />
  <Command __id="7838" _type="InsertStringCommand" date="Sun Aug 25 08:59:11 EDT 2019" timestamp="162274946" timestamp2="162274946">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7840" _type="InsertStringCommand" date="Sun Aug 25 08:59:13 EDT 2019" timestamp="162276574" timestamp2="162276574">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="7842" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 08:59:14 EDT 2019" timestamp="162277507" />
  <Command __id="7844" _type="InsertStringCommand" date="Sun Aug 25 08:59:15 EDT 2019" repeat="14" timestamp="162279040" timestamp2="162282115">
    <data><![CDATA[aParentFolder.]]></data>
  </Command>
  <Command __id="7871" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Aug 25 08:59:19 EDT 2019" start_end="START" timestamp="162282116" />
  <Command __id="7874" _type="ShellCommand" date="Sun Aug 25 08:59:23 EDT 2019" timestamp="162286437" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="7875" _type="ShellCommand" date="Sun Aug 25 08:59:23 EDT 2019" timestamp="162286662" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="7876" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 08:59:23 EDT 2019" start_end="END" timestamp="162286762" />
  <Command __id="7878" _type="MoveCaretCommand" caretOffset="402" date="Sun Aug 25 08:59:23 EDT 2019" docOffset="402" timestamp="162286776" />
  <Command __id="7879" _type="MoveCaretCommand" caretOffset="377" date="Sun Aug 25 08:59:24 EDT 2019" docOffset="377" timestamp="162287980" />
  <Command __id="7881" _type="InsertStringCommand" date="Sun Aug 25 08:59:25 EDT 2019" repeat="6" timestamp="162288737" timestamp2="162290071">
    <data><![CDATA[File a]]></data>
  </Command>
  <Command __id="7893" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:00:13 EDT 2019" timestamp="162336277" />
  <Command __id="7894" _type="PredictionCommand" date="Sun Aug 25 09:00:13 EDT 2019" prediction_type="MakingProgress" timestamp="162336283" />
  <Command __id="7896" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:00:13 EDT 2019" repeat="2" timestamp="162336411" timestamp2="162336604" />
  <Command __id="7900" _type="InsertStringCommand" date="Sun Aug 25 09:00:14 EDT 2019" repeat="13" timestamp="162337335" timestamp2="162340919">
    <data><![CDATA[e[] aFiles = ]]></data>
  </Command>
  <Command __id="7925" _type="MoveCaretCommand" caretOffset="418" date="Sun Aug 25 09:00:19 EDT 2019" docOffset="418" timestamp="162342997" />
  <Command __id="7927" _type="InsertStringCommand" date="Sun Aug 25 09:00:20 EDT 2019" timestamp="162343713" timestamp2="162343713">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="7929" _type="InsertStringCommand" date="Sun Aug 25 09:00:21 EDT 2019" timestamp="162344218" timestamp2="162344218">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="7930" _type="MoveCaretCommand" caretOffset="351" date="Sun Aug 25 09:00:28 EDT 2019" docOffset="351" timestamp="162351885" />
  <Command __id="7932" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:00:29 EDT 2019" repeat="16" timestamp="162352278" timestamp2="162355286" />
  <Command __id="7964" _type="InsertStringCommand" date="Sun Aug 25 09:00:32 EDT 2019" repeat="9" timestamp="162355736" timestamp2="162357915">
    <data><![CDATA[Assigment]]></data>
  </Command>
  <Command __id="7982" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:00:35 EDT 2019" repeat="4" timestamp="162358689" timestamp2="162359592" />
  <Command __id="7990" _type="InsertStringCommand" date="Sun Aug 25 09:00:36 EDT 2019" repeat="9" timestamp="162360051" timestamp2="162363489">
    <data><![CDATA[nmentData]]></data>
  </Command>
  <Command __id="8007" _type="MoveCaretCommand" caretOffset="417" date="Sun Aug 25 09:00:44 EDT 2019" docOffset="417" timestamp="162367708" />
  <Command __id="8009" _type="InsertStringCommand" date="Sun Aug 25 09:00:45 EDT 2019" timestamp="162368623" timestamp2="162368623">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8011" _type="InsertStringCommand" date="Sun Aug 25 09:00:46 EDT 2019" repeat="8" timestamp="162369772" timestamp2="162372227">
    <data><![CDATA[if (aFle]]></data>
  </Command>
  <Command __id="8027" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:00:49 EDT 2019" repeat="2" timestamp="162372508" timestamp2="162372677" />
  <Command __id="8031" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:01:04 EDT 2019" repeat="6" timestamp="162387411" timestamp2="162388359" />
  <Command __id="8043" _type="MoveCaretCommand" caretOffset="368" date="Sun Aug 25 09:01:08 EDT 2019" docOffset="368" timestamp="162391773" />
  <Command __id="8045" _type="InsertStringCommand" date="Sun Aug 25 09:01:09 EDT 2019" repeat="14" timestamp="162392976" timestamp2="162396212">
    <data><![CDATA[, BasicProject]]></data>
  </Command>
  <Command __id="8073" _type="InsertStringCommand" date="Sun Aug 25 09:01:15 EDT 2019" repeat="8" timestamp="162398605" timestamp2="162400401">
    <data><![CDATA[ aPrject]]></data>
  </Command>
  <Command __id="8089" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:01:18 EDT 2019" repeat="4" timestamp="162401129" timestamp2="162401610" />
  <Command __id="8097" _type="InsertStringCommand" date="Sun Aug 25 09:01:19 EDT 2019" repeat="5" timestamp="162402147" timestamp2="162402906">
    <data><![CDATA[oject]]></data>
  </Command>
  <Command __id="8106" _type="MoveCaretCommand" caretOffset="349" date="Sun Aug 25 09:01:45 EDT 2019" docOffset="349" timestamp="162429061" />
  <Command __id="8107" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sun Aug 25 09:01:57 EDT 2019" start_end="START" timestamp="162440686" />
  <DocumentChange __id="7806" _type="Insert" date="Sun Aug 25 08:58:31 EDT 2019" docASTNodeCount="56" docActiveCodeLength="454" docExpressionCount="28" docLength="454" length="4" offset="383" timestamp="162234780">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="7810" _type="Replace" date="Sun Aug 25 08:58:59 EDT 2019" docASTNodeCount="56" docActiveCodeLength="432" docExpressionCount="28" docLength="432" endLine="11" insertionLength="1" int_docASTNodeCount="52" int_docActiveCodeLength="431" int_docExpressionCount="26" int_docLength="431" length="23" offset="357" startLine="11" timestamp="162263035">
    <deletedText><![CDATA[anAssignmentsDataFolder]]></deletedText>
    <insertedText><![CDATA[a]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7812" _type="Insert" date="Sun Aug 25 08:59:06 EDT 2019" docASTNodeCount="56" docActiveCodeLength="444" docExpressionCount="28" docLength="444" length="12" offset="358" repeat="12" timestamp="162269771" timestamp2="162272354">
    <text><![CDATA[ParentFolder]]></text>
  </DocumentChange>
  <DocumentChange __id="7837" _type="Insert" date="Sun Aug 25 08:59:11 EDT 2019" docASTNodeCount="58" docActiveCodeLength="449" docExpressionCount="29" docLength="449" length="5" offset="373" repeat="2" timestamp="162274937" timestamp2="162276568">
    <text><![CDATA[
		a]]></text>
  </DocumentChange>
  <DocumentChange __id="7841" _type="Delete" date="Sun Aug 25 08:59:14 EDT 2019" docASTNodeCount="56" docActiveCodeLength="448" docExpressionCount="28" docLength="448" endLine="12" length="1" offset="377" startLine="12" timestamp="162277506">
    <text><![CDATA[a]]></text>
  </DocumentChange>
  <DocumentChange __id="7843" _type="Insert" date="Sun Aug 25 08:59:15 EDT 2019" docASTNodeCount="60" docActiveCodeLength="464" docExpressionCount="31" docLength="464" length="16" offset="377" repeat="16" timestamp="162279031" timestamp2="162284269">
    <text><![CDATA[aParentFolder.li]]></text>
  </DocumentChange>
  <DocumentChange __id="7877" _type="Replace" date="Sun Aug 25 08:59:23 EDT 2019" docASTNodeCount="60" docActiveCodeLength="473" docExpressionCount="31" docLength="473" endLine="12" insertionLength="11" int_docASTNodeCount="58" int_docActiveCodeLength="462" int_docExpressionCount="29" int_docLength="462" length="2" offset="391" startLine="12" timestamp="162286763">
    <deletedText><![CDATA[li]]></deletedText>
    <insertedText><![CDATA[listFiles()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="7880" _type="Insert" date="Sun Aug 25 08:59:25 EDT 2019" docASTNodeCount="64" docActiveCodeLength="479" docExpressionCount="32" docLength="479" length="6" offset="377" repeat="6" timestamp="162288728" timestamp2="162290067">
    <text><![CDATA[File a]]></text>
  </DocumentChange>
  <DocumentChange __id="7892" _type="Delete" date="Sun Aug 25 09:00:13 EDT 2019" docASTNodeCount="60" docActiveCodeLength="476" docExpressionCount="31" docLength="476" endLine="12" length="3" offset="380" repeat="3" startLine="12" timestamp="162336271" timestamp2="162336603">
    <text><![CDATA[e a]]></text>
  </DocumentChange>
  <DocumentChange __id="7899" _type="Insert" date="Sun Aug 25 09:00:14 EDT 2019" docASTNodeCount="65" docActiveCodeLength="489" docExpressionCount="33" docLength="489" length="13" offset="380" repeat="13" timestamp="162337330" timestamp2="162340905">
    <text><![CDATA[e[] aFiles = ]]></text>
  </DocumentChange>
  <DocumentChange __id="7926" _type="Insert" date="Sun Aug 25 09:00:20 EDT 2019" docASTNodeCount="65" docActiveCodeLength="494" docExpressionCount="33" docLength="494" length="5" offset="418" repeat="2" timestamp="162343701" timestamp2="162344214">
    <text><![CDATA[;
		]]></text>
  </DocumentChange>
  <DocumentChange __id="7931" _type="Delete" date="Sun Aug 25 09:00:29 EDT 2019" docASTNodeCount="65" docActiveCodeLength="478" docExpressionCount="33" docLength="478" endLine="11" length="16" offset="335" repeat="16" startLine="11" timestamp="162352272" timestamp2="162355280">
    <text><![CDATA[RequirementsFile]]></text>
  </DocumentChange>
  <DocumentChange __id="7963" _type="Insert" date="Sun Aug 25 09:00:32 EDT 2019" docASTNodeCount="65" docActiveCodeLength="487" docExpressionCount="33" docLength="487" length="9" offset="335" repeat="9" timestamp="162355724" timestamp2="162357899">
    <text><![CDATA[Assigment]]></text>
  </DocumentChange>
  <DocumentChange __id="7981" _type="Delete" date="Sun Aug 25 09:00:35 EDT 2019" docASTNodeCount="65" docActiveCodeLength="483" docExpressionCount="33" docLength="483" endLine="11" length="4" offset="340" repeat="4" startLine="11" timestamp="162358684" timestamp2="162359587">
    <text><![CDATA[ment]]></text>
  </DocumentChange>
  <DocumentChange __id="7989" _type="Insert" date="Sun Aug 25 09:00:36 EDT 2019" docASTNodeCount="65" docActiveCodeLength="492" docExpressionCount="33" docLength="492" length="9" offset="340" repeat="9" timestamp="162360046" timestamp2="162363474">
    <text><![CDATA[nmentData]]></text>
  </DocumentChange>
  <DocumentChange __id="8008" _type="Insert" date="Sun Aug 25 09:00:45 EDT 2019" docASTNodeCount="68" docActiveCodeLength="505" docExpressionCount="34" docLength="505" length="13" offset="417" repeat="9" timestamp="162368615" timestamp2="162372223">
    <text><![CDATA[
		if (aFle)]]></text>
  </DocumentChange>
  <DocumentChange __id="8026" _type="Delete" date="Sun Aug 25 09:00:49 EDT 2019" docASTNodeCount="68" docActiveCodeLength="503" docExpressionCount="34" docLength="503" endLine="13" length="2" offset="427" repeat="2" startLine="13" timestamp="162372503" timestamp2="162372671">
    <text><![CDATA[le]]></text>
  </DocumentChange>
  <DocumentChange __id="8030" _type="Delete" date="Sun Aug 25 09:01:04 EDT 2019" docASTNodeCount="65" docActiveCodeLength="496" docExpressionCount="33" docLength="496" endLine="13" length="7" offset="421" repeat="7" startLine="13" timestamp="162387407" timestamp2="162388355">
    <text><![CDATA[if (aF)]]></text>
  </DocumentChange>
  <DocumentChange __id="8044" _type="Insert" date="Sun Aug 25 09:01:09 EDT 2019" docASTNodeCount="56" docActiveCodeLength="510" docExpressionCount="28" docLength="510" length="14" offset="368" repeat="14" timestamp="162392965" timestamp2="162396202">
    <text><![CDATA[, BasicProject]]></text>
  </DocumentChange>
  <DocumentChange __id="8072" _type="Insert" date="Sun Aug 25 09:01:15 EDT 2019" docASTNodeCount="69" docActiveCodeLength="518" docExpressionCount="35" docLength="518" length="8" offset="382" repeat="8" timestamp="162398594" timestamp2="162400393">
    <text><![CDATA[ aPrject]]></text>
  </DocumentChange>
  <DocumentChange __id="8088" _type="Delete" date="Sun Aug 25 09:01:18 EDT 2019" docASTNodeCount="69" docActiveCodeLength="514" docExpressionCount="35" docLength="514" endLine="11" length="4" offset="386" repeat="4" startLine="11" timestamp="162401128" timestamp2="162401605">
    <text><![CDATA[ject]]></text>
  </DocumentChange>
  <DocumentChange __id="8096" _type="Insert" date="Sun Aug 25 09:01:19 EDT 2019" docASTNodeCount="69" docActiveCodeLength="519" docExpressionCount="35" docLength="519" length="5" offset="386" repeat="5" timestamp="162402138" timestamp2="162402900">
    <text><![CDATA[oject]]></text>
  </DocumentChange>
  <DocumentChange __id="8112" _type="Insert" date="Sun Aug 25 09:01:59 EDT 2019" docASTNodeCount="77" docActiveCodeLength="563" docExpressionCount="42" docLength="563" length="44" offset="116" repeat="2" timestamp="162443036" timestamp2="162443037">
    <text><![CDATA[
import grader.basics.project.BasicProject;]]></text>
  </DocumentChange>
  <Command __id="8115" _type="FileOpenCommand" date="Sun Aug 25 09:03:11 EDT 2019" docASTNodeCount="138" docActiveCodeLength="916" docExpressionCount="62" docLength="916" projectName="GraderBasics" timestamp="162514542">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\requirements\interpreter\specification\CSVRequirementsSpecification.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.requirements.interpreter.specification;

import java.util.List;

import grader.basics.file.FileProxy;

public interface CSVRequirementsSpecification {
	public FileProxy getSpecificationSpreadsheet() ;

	public String getFileName() ;

	public boolean isValid();

	public void setValid(boolean newValue) ;

	public List<String[]> getTable();

	int getNumberOfRequirements();

	String getArg(int aRequirementNum, int anArgNum);
	public String getType(int aFeatureNum);
	
	public String getDescription(int aRequirementNum);
	
	public Double getMaxScore(int aRequirementNum) ;

	
	public String getInput(int aRequirementNum) ;
	public String getModelOutput(int aRequirementNum) ;
	public String getChecker(int aRequirementNum);

	Integer getTimeOut(int aRequirementNum);

	boolean isExtraCredit(int aRequirementNum);

	boolean isManual(int aRequirementNum);

}
]]></snapshot>
  </Command>
  <Command __id="8108" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.internal.ui.CompilationUnitEditor.ruler.actions/org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction" date="Sun Aug 25 09:01:57 EDT 2019" timestamp="162440774" />
  <Command __id="8109" _type="ShellCommand" date="Sun Aug 25 09:01:59 EDT 2019" timestamp="162442754" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8110" _type="ShellCommand" date="Sun Aug 25 09:01:59 EDT 2019" timestamp="162443007" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8111" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sun Aug 25 09:01:59 EDT 2019" start_end="END" timestamp="162443033" />
  <Command __id="8114" _type="SelectTextCommand" caretOffset="426" date="Sun Aug 25 09:02:00 EDT 2019" end="426" start="414" timestamp="162443091" />
  <Command __id="8116" _type="MoveCaretCommand" caretOffset="0" date="Sun Aug 25 09:03:11 EDT 2019" docOffset="0" timestamp="162514729" />
  <Command __id="8118" _type="MoveCaretCommand" caretOffset="1474" date="Sun Aug 25 09:03:14 EDT 2019" docOffset="1645" timestamp="162517580" />
  <Command __id="8120" _type="SelectTextCommand" caretOffset="426" date="Sun Aug 25 09:03:31 EDT 2019" end="426" start="414" timestamp="162534938" />
  <Command __id="8121" _type="MoveCaretCommand" caretOffset="484" date="Sun Aug 25 09:03:33 EDT 2019" docOffset="484" timestamp="162536603" />
  <Command __id="8123" _type="InsertStringCommand" date="Sun Aug 25 09:03:33 EDT 2019" timestamp="162537053" timestamp2="162537053">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8125" _type="InsertStringCommand" date="Sun Aug 25 09:03:34 EDT 2019" repeat="12" timestamp="162537355" timestamp2="162539662">
    <data><![CDATA[return null;]]></data>
  </Command>
  <Command __id="8148" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:03:37 EDT 2019" timestamp="162540248" />
  <Command __id="8150" _type="MoveCaretCommand" caretOffset="28239" date="Sun Aug 25 09:05:52 EDT 2019" docOffset="28643" timestamp="162676039" />
  <Command __id="8152" _type="SelectTextCommand" caretOffset="17128" date="Sun Aug 25 09:06:46 EDT 2019" end="17128" start="17094" timestamp="162729230" />
  <Command __id="8153" _type="MoveCaretCommand" caretOffset="2561" date="Sun Aug 25 09:06:56 EDT 2019" docOffset="3134" timestamp="162739204" />
  <Command __id="8154" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Aug 25 09:06:56 EDT 2019" timestamp="162740011" />
  <Command __id="8155" _type="MoveCaretCommand" caretOffset="7571" date="Sun Aug 25 09:06:59 EDT 2019" docOffset="8144" timestamp="162742650" />
  <Command __id="8157" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Aug 25 09:07:00 EDT 2019" timestamp="162743193" />
  <Command __id="8158" _type="SelectTextCommand" caretOffset="35386" date="Sun Aug 25 09:07:00 EDT 2019" end="35386" start="35341" timestamp="162743269" />
  <Command __id="8159" _type="MoveCaretCommand" caretOffset="35514" date="Sun Aug 25 09:07:05 EDT 2019" docOffset="35918" timestamp="162748360" />
  <Command __id="8160" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Aug 25 09:07:06 EDT 2019" timestamp="162749094" />
  <Command __id="8161" _type="MoveCaretCommand" caretOffset="32376" date="Sun Aug 25 09:07:27 EDT 2019" docOffset="32780" timestamp="162770346" />
  <Command __id="8162" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Sun Aug 25 09:07:30 EDT 2019" repeat="3" timestamp="162773682" timestamp2="162775421" />
  <Command __id="8166" _type="MoveCaretCommand" caretOffset="7571" date="Sun Aug 25 09:07:32 EDT 2019" docOffset="8144" timestamp="162775497" />
  <Command __id="8306" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.move.element" date="Sun Aug 25 09:18:12 EDT 2019" timestamp="163415470" />
  <Command __id="8307" _type="SelectTextCommand" caretOffset="6948" date="Sun Aug 25 09:18:20 EDT 2019" end="6948" start="6219" timestamp="163423469" />
  <Command __id="8308" _type="CopyCommand" date="Sun Aug 25 09:18:21 EDT 2019" timestamp="163424558" />
  <Command __id="8326" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 09:18:29 EDT 2019" timestamp="163432563" />
  <Command __id="8327" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:18:30 EDT 2019" timestamp="163434046" />
  <Command __id="8329" _type="MoveCaretCommand" caretOffset="7571" date="Sun Aug 25 09:18:33 EDT 2019" docOffset="8144" timestamp="163436359" />
  <Command __id="8330" _type="ShellCommand" date="Sun Aug 25 09:18:44 EDT 2019" timestamp="163447349" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8331" _type="ShellCommand" date="Sun Aug 25 09:18:44 EDT 2019" timestamp="163447535" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8333" _type="UndoCommand" date="Sun Aug 25 09:18:48 EDT 2019" timestamp="163451432" />
  <Command __id="8334" _type="MoveCaretCommand" caretOffset="387" date="Sun Aug 25 09:18:50 EDT 2019" docOffset="387" timestamp="163453588" />
  <Command __id="8336" _type="RedoCommand" date="Sun Aug 25 09:18:57 EDT 2019" timestamp="163460421" />
  <Command __id="8338" _type="SelectTextCommand" caretOffset="6982" date="Sun Aug 25 09:19:00 EDT 2019" end="6982" start="6221" timestamp="163463629" />
  <Command __id="8339" _type="ShellCommand" date="Sun Aug 25 09:19:15 EDT 2019" timestamp="163478408" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8340" _type="ShellCommand" date="Sun Aug 25 09:19:19 EDT 2019" timestamp="163482085" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8342" _type="MoveCaretCommand" caretOffset="1071" date="Sun Aug 25 09:19:19 EDT 2019" docOffset="1403" timestamp="163482723" />
  <Command __id="8343" _type="MoveCaretCommand" caretOffset="1432" date="Sun Aug 25 09:19:22 EDT 2019" docOffset="1764" timestamp="163485835" />
  <Command __id="8345" _type="InsertStringCommand" date="Sun Aug 25 09:19:23 EDT 2019" timestamp="163486453" timestamp2="163486453">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8349" _type="PasteCommand" date="Sun Aug 25 09:19:24 EDT 2019" timestamp="163487352" />
  <Command __id="8350" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:19:26 EDT 2019" timestamp="163489285" />
  <Command __id="8351" _type="MoveCaretCommand" caretOffset="344" date="Sun Aug 25 09:19:41 EDT 2019" docOffset="344" timestamp="163504936" />
  <Command __id="8352" _type="MoveCaretCommand" caretOffset="342" date="Sun Aug 25 09:19:43 EDT 2019" docOffset="342" timestamp="163506125" />
  <Command __id="8354" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 09:19:43 EDT 2019" timestamp="163506894" />
  <Command __id="8355" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:19:47 EDT 2019" timestamp="163510131" />
  <Command __id="8356" _type="MoveCaretCommand" caretOffset="840" date="Sun Aug 25 09:19:58 EDT 2019" docOffset="840" timestamp="163521788" />
  <DocumentChange __id="8323" _type="Insert" date="Sun Aug 25 09:18:29 EDT 2019" docASTNodeCount="817" docActiveCodeLength="8461" docExpressionCount="521" docLength="11676" length="2" offset="7591" timestamp="163432540">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8324" _type="Insert" date="Sun Aug 25 09:18:29 EDT 2019" docASTNodeCount="817" docActiveCodeLength="8453" docExpressionCount="521" docLength="11678" length="2" offset="7669" timestamp="163432545">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8325" _type="Insert" date="Sun Aug 25 09:18:29 EDT 2019" docASTNodeCount="815" docActiveCodeLength="8448" docExpressionCount="521" docLength="11680" length="2" offset="7681" timestamp="163432546">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="8328" _type="FileOpenCommand" date="Sun Aug 25 09:18:33 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="163436242">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <DocumentChange __id="8332" _type="Insert" date="Sun Aug 25 09:18:48 EDT 2019" docASTNodeCount="2389" docActiveCodeLength="20826" docExpressionCount="1486" docLength="31114" length="61" offset="344" timestamp="163451397">
    <text><![CDATA[
import grader.basics.execution.BasicExecutionSpecification;]]></text>
  </DocumentChange>
  <DocumentChange __id="8335" _type="Delete" date="Sun Aug 25 09:18:57 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" endLine="12" length="61" offset="344" startLine="11" timestamp="163460392">
    <text><![CDATA[
import grader.basics.execution.BasicExecutionSpecification;]]></text>
  </DocumentChange>
  <Command __id="8337" _type="FileOpenCommand" date="Sun Aug 25 09:19:00 EDT 2019" docASTNodeCount="815" docActiveCodeLength="8448" docExpressionCount="521" docLength="11680" projectName="comp110-grader" timestamp="163463510">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\config\AConfigurationManager.java]]></filePath>
    <snapshot><![CDATA[package grader.config;

import framework.utils.UserPropertyWriter;
import grader.basics.config.ABasicConfigurationManager;
import grader.basics.project.CurrentProjectHolder;
import grader.executor.ExecutorSelector;
import grader.language.LanguageDependencyManager;
import grader.trace.config.DynamicConfigurationFileCreated;
import grader.trace.config.DynamicConfigurationFileRead;
import grader.trace.config.StaticConfigurationFileNotRead;
import grader.trace.config.StaticConfigurationFileRead;
import util.trace.Tracer;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Arrays;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;

public class AConfigurationManager extends ABasicConfigurationManager implements ConfigurationManager {

    public static final String CONFIG_FILE = "config.properties";
    public static final String DYNAMIC_CONFIGURATION_FILE = "dynamicconfig.properties";
    public static final String DYNAMIC_MODULES_FILE = "dynamicmodules.properties";
    public static final String DYNAMIC_CONFIG_PROPERTY = "grader.dynamicConfiguration";
//    public static final String STATIC_CONFIGURATION_FILE_NAME = "./config/config.properties";
    public static final String STATIC_CONFIGURATION_FILE_NAME = "./" + ABasicConfigurationManager.CONFIG_DIR + "/" + CONFIG_FILE;
    public static final String DYNAMIC_CONFIGURATION_FILE_NAME = "./" + ABasicConfigurationManager.CONFIG_DIR + "/" + DYNAMIC_CONFIGURATION_FILE;

    public static final String DYNAMIC_MODULE_CONFIGURATION_FILE_NAME = "./" + ABasicConfigurationManager.CONFIG_DIR + "/" + DYNAMIC_MODULES_FILE;


    private static PropertiesConfiguration staticConfiguration = new PropertiesConfiguration();
    static File userPropsFile;
    PropertiesConfiguration dynamicConfiguration;
    PropertiesConfiguration moduleConfiguration, dynamicModuleConfiguration;

    public AConfigurationManager() {
//		init();

    }


    /**
     * These methods should be in StaticConfigurationUtils
     */
    public PropertiesConfiguration getDynamicConfiguration() {
        return dynamicConfiguration;
    }
    

    public void setDynamicConfiguration(
            PropertiesConfiguration dynamicConfiguration) {
        this.dynamicConfiguration = dynamicConfiguration;
    }

    public PropertiesConfiguration getStaticConfiguration() {
        return staticConfiguration;
    }

    public void setStaticConfiguration(PropertiesConfiguration staticConfiguration) {
        this.staticConfiguration = staticConfiguration;
    }
    @Override
    public PropertiesConfiguration getCourseConfiguration() {
        return moduleConfiguration;
    }
    @Override
    public void setCourseConfiguration(PropertiesConfiguration newVal) {
        this.moduleConfiguration = newVal;
    }
    
    @Override
    public PropertiesConfiguration getDynamicModuleConfiguration() {
        return dynamicModuleConfiguration;
    }
    @Override
    public void setDynamicModuleConfiguration(PropertiesConfiguration newVal) {
        this.dynamicModuleConfiguration = newVal;
    }


    public void init(String args[]) {
        try {
//			 PropertiesConfiguration configuration = new PropertiesConfiguration("./config/config.properties");
//			 PropertiesConfiguration configuration = new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
            PropertiesConfiguration configuration = createStaticConfiguration(args);
            if (configuration != null) {
            StaticConfigurationFileRead.newCase(STATIC_CONFIGURATION_FILE_NAME, this);
            setStaticConfiguration(configuration);
            }
//            String dynamicConfigurationName = configuration.getString(DYNAMIC_CONFIG_PROPERTY, DYNAMIC_CONFIGURATION_FILE_NAME);
            // allowing for no configuration
            String dynamicConfigurationName = ExecutionSpecificationSelector.getExecutionSpecification().getDynamicExecutionFileName();

            File dynamicConfigurationFile = new File(dynamicConfigurationName);
            if (!dynamicConfigurationFile.exists()) {
            	File parent = dynamicConfigurationFile.getParentFile();
            	if (!parent.exists()) {
            		parent.mkdirs();
            	}
                dynamicConfigurationFile.createNewFile();
                DynamicConfigurationFileCreated.newCase(dynamicConfigurationName, this);
//	         	convertToDynamicConfiguration();
            }
//            dynamicConfiguration = new PropertiesConfiguration(dynamicConfigurationName);
            setDynamicConfiguration(createDynamicConfiguration(args, dynamicConfigurationName));

            DynamicConfigurationFileRead.newCase(dynamicConfigurationName, this);
            
            setCourseConfiguration(createCourseConfiguration(args));
            
            
           File dynamicModuleFile = new File(DYNAMIC_MODULE_CONFIGURATION_FILE_NAME);
           if (!dynamicModuleFile.exists()) {
           	File parent = dynamicModuleFile.getParentFile();
           	if (!parent.exists()) {
           		parent.mkdirs();
           	}
           	dynamicModuleFile.createNewFile();
//	         	convertToDynamicConfiguration();
           }
            
            setDynamicModuleConfiguration(new PropertiesConfiguration(dynamicModuleFile.getAbsolutePath()));  
//            LanguageDependencyManager.setCOBj(
//            		StaticConfigurationUtils.getCourseOrStaticString(StaticConfigurationUtils.C_OBJ, null));
            /*
             * Why are these values being pushed eagerly rather than pulled when needed lazily
             */
            String cObj = ExecutionSpecificationSelector.getExecutionSpecification().getCObjSuffix();

            LanguageDependencyManager.setCOBj(
            		cObj);

//            ExecutorSelector.getExecutor().setExecutorDirectory(
//            		StaticConfigurationUtils.getCourseOrStaticString(StaticConfigurationUtils.EXECUTOR, null));
            // really do not understand what an executor is.
            ExecutorSelector.getExecutor().setExecutorDirectory(
            		
            		ExecutionSpecificationSelector.getExecutionSpecification().getExecutorDirectory()
            		);

//	         GraderSettings.get().convertToDynamicConfiguration();
        } catch (ConfigurationException e) {
            StaticConfigurationFileNotRead.newCase(STATIC_CONFIGURATION_FILE_NAME, this);
            System.err.println("Error loading config file.");
            System.err.println(e.getMessage());
            e.printStackTrace();

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    
//    PropertiesConfiguration createCourseConfiguration(String[] args) {
//       
//                try {
//                	File aFile = new File(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
//                	if (!aFile.exists()) {
//                		Tracer.warning (ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME + " does not exist, using defaults");
//                		return null;
//                	}
//					return new PropertiesConfiguration(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
//				} catch (ConfigurationException e) {
//					e.printStackTrace();
//					return null;
//				}
//                
//                // Andrew might need to add stuff like in the method below
//        
//    }
    
    PropertiesConfiguration createStaticConfiguration(String[] args) {
        userPropsFile = null;
        try {
        //  this seems wrong, one should use the satic file and overrwrite those args
        	// Best is to use course configuration and use overwrite or set property to overrwrite it
        	// will not change until I have tried out andrew's server
            if (args.length == 0) { 
            	File aConfigFile = new File(STATIC_CONFIGURATION_FILE_NAME);
            	if (!aConfigFile.exists()) {
            		Tracer.warning(STATIC_CONFIGURATION_FILE_NAME + " not found, using defaults" );
            		return null;
            	}
                return new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
            }
//		           UserPropertyWriter userProperties = new UserPropertyWriter(Paths.get("config", "config.properties").toString());
            UserPropertyWriter userProperties = new UserPropertyWriter(Paths.get(ABasicConfigurationManager.CONFIG_DIR, CONFIG_FILE).toString());
// this seems to be Andrew's code duplicating the properties in a thread specific file
            
            userProperties.setUserProperties(args);
            userPropsFile = Paths.get(ABasicConfigurationManager.CONFIG_DIR, "user-config.properties").toFile();
            
            if (userPropsFile.exists()) {
                userPropsFile.delete();
            }
            
            try {
                userPropsFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }

            userProperties.writeUserProperties(userPropsFile);
            // Load the default config file
            PropertiesConfiguration configuration = new PropertiesConfiguration(userPropsFile);
            
            return configuration;
//			PropertiesConfiguration configuration = new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
        } catch (ConfigurationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return null;
        } finally {
            //System.out.println("run done");
            //if (userPropsFile != null) {
            //    userPropsFile.delete();
            //}
        }
    }
    
    PropertiesConfiguration createDynamicConfiguration(String[] args, String dynamicConfigName) {
        userPropsFile = null;
        try {
            if (args.length == 0) {
                return new PropertiesConfiguration(dynamicConfigName);
            }
//		           UserPropertyWriter userProperties = new UserPropertyWriter(Paths.get("config", "config.properties").toString());
            UserPropertyWriter userProperties = new UserPropertyWriter(dynamicConfigName);
// this seems to be Andrew's code duplicating the properties in a thread specific file
            System.out.println ("Writing user properties:" + Arrays.toString(args));
            userProperties.setUserProperties(args);
            userPropsFile = Paths.get(dynamicConfigName).toFile();
            
            try {
                userPropsFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }

            userProperties.writeUserProperties(userPropsFile);
            // Load the default config file
            PropertiesConfiguration configuration = new PropertiesConfiguration(userPropsFile);
            
            return configuration;
//			PropertiesConfiguration configuration = new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
        } catch (ConfigurationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return null;
        } finally {
            //System.out.println("run done");
            //if (userPropsFile != null) {
            //    userPropsFile.delete();
            //}
        }
    }

}
]]></snapshot>
  </Command>
  <Command __id="8341" _type="FileOpenCommand" date="Sun Aug 25 09:19:19 EDT 2019" docASTNodeCount="259" docActiveCodeLength="2073" docExpressionCount="160" docLength="2477" projectName="GraderBasics" timestamp="163482528">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.NotImplementedException;

import grader.basics.project.CurrentProjectHolder;
import grader.basics.util.DirectoryUtils;
import grader.config.AConfigurationManager;

public class ABasicConfigurationManager implements BasicConfigurationManager{
    public static final String PROJECT_CONFIG_FILE = "project.properties";
//    File projectDirectory;

	protected PropertiesConfiguration projectConfiguration;

	public static final String COURSE_FILE = "course.properties";

	public static final String COURSE_CONFIGURATION_FILE_NAME = "./" + CONFIG_DIR + "/" + AConfigurationManager.COURSE_FILE;

	public static final String CONFIG_DIR = "config";
	@Override
	public void clear() {
		projectConfiguration = null;
	}

	@Override
	public PropertiesConfiguration getOrCreateProjectConfiguration() {
		if (projectConfiguration == null) {
//			createProjectConfiguration(CurrentProjectHolder.getOrCreateCurrentProject().getProjectFolder());
			createProjectConfiguration(CurrentProjectHolder.getProjectLocation());

		}
		return projectConfiguration;
	}
	@Override
	public PropertiesConfiguration getProjectConfiguration() {		
		return projectConfiguration;
	}
	public void setProjectConfiguration(PropertiesConfiguration aPropertiesConfiguration) {
		projectConfiguration = aPropertiesConfiguration;
	}
//	@Override
//	public void setProjectDirectory(File aProjectDirectory) {
//		projectDirectory = aProjectDirectory;
//	}
//	@Override
//	public File getProjectDirectory() {
//		return projectDirectory;
//	}
	@Override
	public void createProjectConfiguration (File aProjectDirectory) {	
		File[] aFiles = aProjectDirectory.listFiles();
		File aConfigFile = null;
		for (File aFile: aFiles) {
			if (aFile.getName().toLowerCase().equals(PROJECT_CONFIG_FILE)) {
				aConfigFile = aFile;
				break;
			}
		}
		if (aConfigFile != null) {
			try {
				projectConfiguration = new PropertiesConfiguration(aConfigFile);
			} catch (ConfigurationException e) {
				e.printStackTrace();
			}
		} else {
			System.err.println("Did not find file " + PROJECT_CONFIG_FILE + " in " + aProjectDirectory.getAbsolutePath());
		}
//		String aConfigFileFullName = aProjectDirectory.getAbsolutePath() + "/" +
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="8344" _type="Insert" date="Sun Aug 25 09:19:23 EDT 2019" docASTNodeCount="259" docActiveCodeLength="2076" docExpressionCount="160" docLength="2480" length="3" offset="1764" timestamp="163486447">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="8346" _type="Replace" date="Sun Aug 25 09:19:24 EDT 2019" docASTNodeCount="318" docActiveCodeLength="2662" docExpressionCount="195" docLength="3124" endLine="52" insertionLength="645" int_docASTNodeCount="259" int_docActiveCodeLength="2075" int_docExpressionCount="160" int_docLength="2479" length="1" offset="1766" startLine="52" timestamp="163487270">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	PropertiesConfiguration createCourseConfiguration(String[] args) {
	       
        try {
        	File aFile = new File(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
        	if (!aFile.exists()) {
        		Tracer.warning (ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME + " does not exist, using defaults");
        		return null;
        	}
			return new PropertiesConfiguration(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
		} catch (ConfigurationException e) {
			e.printStackTrace();
			return null;
		}
        
        // Andrew might need to add stuff like in the method below

}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8347" _type="Insert" date="Sun Aug 25 09:19:24 EDT 2019" docASTNodeCount="324" docActiveCodeLength="2689" docExpressionCount="200" docLength="3151" length="27" offset="385" repeat="2" timestamp="163487320" timestamp2="163487321">
    <text><![CDATA[
import util.trace.Tracer;]]></text>
  </DocumentChange>
  <DocumentChange __id="8353" _type="Insert" date="Sun Aug 25 09:19:43 EDT 2019" docASTNodeCount="318" docActiveCodeLength="2646" docExpressionCount="195" docLength="3153" length="2" offset="342" timestamp="163506881">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8357" _type="Delete" date="Sun Aug 25 09:19:59 EDT 2019" docASTNodeCount="316" docActiveCodeLength="2624" docExpressionCount="193" docLength="3131" endLine="21" length="22" offset="818" repeat="22" startLine="21" timestamp="163522386" timestamp2="163526809">
    <text><![CDATA[AConfigurationManager.]]></text>
  </DocumentChange>
  <DocumentChange __id="8405" _type="Delete" date="Sun Aug 25 09:20:14 EDT 2019" docASTNodeCount="307" docActiveCodeLength="2572" docExpressionCount="190" docLength="3079" endLine="24" length="52" offset="834" startLine="23" timestamp="163537744">
    <text><![CDATA[	public static final String CONFIG_DIR = "config";
]]></text>
  </DocumentChange>
  <DocumentChange __id="8408" _type="Insert" date="Sun Aug 25 09:20:16 EDT 2019" docASTNodeCount="307" docActiveCodeLength="2575" docExpressionCount="190" docLength="3082" length="3" offset="727" timestamp="163539744">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="8410" _type="Replace" date="Sun Aug 25 09:20:17 EDT 2019" docASTNodeCount="316" docActiveCodeLength="2626" docExpressionCount="193" docLength="3133" endLine="20" insertionLength="52" int_docASTNodeCount="307" int_docActiveCodeLength="2574" int_docExpressionCount="190" int_docLength="3081" length="1" offset="729" startLine="20" timestamp="163540415">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public static final String CONFIG_DIR = "config";
]]></insertedText>
  </DocumentChange>
  <Command __id="8417" _type="FileOpenCommand" date="Sun Aug 25 09:20:35 EDT 2019" docASTNodeCount="815" docActiveCodeLength="8448" docExpressionCount="521" docLength="11680" projectName="comp110-grader" timestamp="163558325">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\config\AConfigurationManager.java]]></filePath>
  </Command>
  <Command __id="8420" _type="FileOpenCommand" date="Sun Aug 25 09:20:45 EDT 2019" docASTNodeCount="316" docActiveCodeLength="2626" docExpressionCount="193" docLength="3133" projectName="GraderBasics" timestamp="163568713">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.NotImplementedException;

import grader.basics.project.CurrentProjectHolder;
import grader.basics.util.DirectoryUtils;
//import grader.config.AConfigurationManager;
import util.trace.Tracer;

public class ABasicConfigurationManager implements BasicConfigurationManager{
    public static final String PROJECT_CONFIG_FILE = "project.properties";
//    File projectDirectory;

	protected PropertiesConfiguration projectConfiguration;

	public static final String COURSE_FILE = "course.properties";
	public static final String CONFIG_DIR = "config";


	public static final String COURSE_CONFIGURATION_FILE_NAME = "./" + CONFIG_DIR + "/" + COURSE_FILE;

	@Override
	public void clear() {
		projectConfiguration = null;
	}

	@Override
	public PropertiesConfiguration getOrCreateProjectConfiguration() {
		if (projectConfiguration == null) {
//			createProjectConfiguration(CurrentProjectHolder.getOrCreateCurrentProject().getProjectFolder());
			createProjectConfiguration(CurrentProjectHolder.getProjectLocation());

		}
		return projectConfiguration;
	}
	@Override
	public PropertiesConfiguration getProjectConfiguration() {		
		return projectConfiguration;
	}
	public void setProjectConfiguration(PropertiesConfiguration aPropertiesConfiguration) {
		projectConfiguration = aPropertiesConfiguration;
	}
//	@Override
//	public void setProjectDirectory(File aProjectDirectory) {
//		projectDirectory = aProjectDirectory;
//	}
//	@Override
//	public File getProjectDirectory() {
//		return projectDirectory;
//	}
	PropertiesConfiguration createCourseConfiguration(String[] args) {
	       
        try {
        	File aFile = new File(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
        	if (!aFile.exists()) {
        		Tracer.warning (ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME + " does not exist, using defaults");
        		return null;
        	}
			return new PropertiesConfiguration(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
		} catch (ConfigurationException e) {
			e.printStackTrace();
			return null;
		}
        
        // Andrew might need to add stuff like in the method below

}
	@Override
	public void createProjectConfiguration (File aProjectDirectory) {	
		File[] aFiles = aProjectDirectory.listFiles();
		File aConfigFile = null;
		for (File aFile: aFiles) {
			if (aFile.getName().toLowerCase().equals(PROJECT_CONFIG_FILE)) {
				aConfigFile = aFile;
				break;
			}
		}
		if (aConfigFile != null) {
			try {
				projectConfiguration = new PropertiesConfiguration(aConfigFile);
			} catch (ConfigurationException e) {
				e.printStackTrace();
			}
		} else {
			System.err.println("Did not find file " + PROJECT_CONFIG_FILE + " in " + aProjectDirectory.getAbsolutePath());
		}
//		String aConfigFileFullName = aProjectDirectory.getAbsolutePath() + "/" +
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="8423" _type="Insert" date="Sun Aug 25 09:20:53 EDT 2019" docASTNodeCount="317" docActiveCodeLength="2636" docExpressionCount="193" docLength="3143" length="10" offset="1776" repeat="10" timestamp="163576436" timestamp2="163577807">
    <text><![CDATA[protected ]]></text>
  </DocumentChange>
  <Command __id="8444" _type="FileOpenCommand" date="Sun Aug 25 09:21:03 EDT 2019" docASTNodeCount="815" docActiveCodeLength="8448" docExpressionCount="521" docLength="11680" projectName="comp110-grader" timestamp="163586857">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\config\AConfigurationManager.java]]></filePath>
  </Command>
  <DocumentChange __id="8448" _type="Insert" date="Sun Aug 25 09:21:16 EDT 2019" docASTNodeCount="813" docActiveCodeLength="8450" docExpressionCount="520" docLength="11682" length="2" offset="1921" repeat="2" timestamp="163599278" timestamp2="163599526">
    <text><![CDATA[in]]></text>
  </DocumentChange>
  <DocumentChange __id="8452" _type="Delete" date="Sun Aug 25 09:21:17 EDT 2019" docASTNodeCount="815" docActiveCodeLength="8448" docExpressionCount="521" docLength="11680" endLine="36" length="2" offset="1921" startLine="36" timestamp="163600752">
    <text><![CDATA[in]]></text>
  </DocumentChange>
  <Command __id="8474" _type="FileOpenCommand" date="Sun Aug 25 09:22:36 EDT 2019" docASTNodeCount="317" docActiveCodeLength="2636" docExpressionCount="193" docLength="3143" projectName="GraderBasics" timestamp="163679165">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.NotImplementedException;

import grader.basics.project.CurrentProjectHolder;
import grader.basics.util.DirectoryUtils;
//import grader.config.AConfigurationManager;
import util.trace.Tracer;

public class ABasicConfigurationManager implements BasicConfigurationManager{
    public static final String PROJECT_CONFIG_FILE = "project.properties";
//    File projectDirectory;

	protected PropertiesConfiguration projectConfiguration;

	public static final String COURSE_FILE = "course.properties";
	public static final String CONFIG_DIR = "config";


	public static final String COURSE_CONFIGURATION_FILE_NAME = "./" + CONFIG_DIR + "/" + COURSE_FILE;

	@Override
	public void clear() {
		projectConfiguration = null;
	}

	@Override
	public PropertiesConfiguration getOrCreateProjectConfiguration() {
		if (projectConfiguration == null) {
//			createProjectConfiguration(CurrentProjectHolder.getOrCreateCurrentProject().getProjectFolder());
			createProjectConfiguration(CurrentProjectHolder.getProjectLocation());

		}
		return projectConfiguration;
	}
	@Override
	public PropertiesConfiguration getProjectConfiguration() {		
		return projectConfiguration;
	}
	public void setProjectConfiguration(PropertiesConfiguration aPropertiesConfiguration) {
		projectConfiguration = aPropertiesConfiguration;
	}
//	@Override
//	public void setProjectDirectory(File aProjectDirectory) {
//		projectDirectory = aProjectDirectory;
//	}
//	@Override
//	public File getProjectDirectory() {
//		return projectDirectory;
//	}
	protected PropertiesConfiguration createCourseConfiguration(String[] args) {
	       
        try {
        	File aFile = new File(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
        	if (!aFile.exists()) {
        		Tracer.warning (ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME + " does not exist, using defaults");
        		return null;
        	}
			return new PropertiesConfiguration(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
		} catch (ConfigurationException e) {
			e.printStackTrace();
			return null;
		}
        
        // Andrew might need to add stuff like in the method below

}
	@Override
	public void createProjectConfiguration (File aProjectDirectory) {	
		File[] aFiles = aProjectDirectory.listFiles();
		File aConfigFile = null;
		for (File aFile: aFiles) {
			if (aFile.getName().toLowerCase().equals(PROJECT_CONFIG_FILE)) {
				aConfigFile = aFile;
				break;
			}
		}
		if (aConfigFile != null) {
			try {
				projectConfiguration = new PropertiesConfiguration(aConfigFile);
			} catch (ConfigurationException e) {
				e.printStackTrace();
			}
		} else {
			System.err.println("Did not find file " + PROJECT_CONFIG_FILE + " in " + aProjectDirectory.getAbsolutePath());
		}
//		String aConfigFileFullName = aProjectDirectory.getAbsolutePath() + "/" +
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="8477" _type="Insert" date="Sun Aug 25 09:23:10 EDT 2019" docASTNodeCount="317" docActiveCodeLength="2645" docExpressionCount="193" docLength="3152" length="9" offset="886" repeat="7" timestamp="163713085" timestamp2="163715272">
    <text><![CDATA[
	publoc]]></text>
  </DocumentChange>
  <Command __id="8456" _type="MoveCaretCommand" caretOffset="1357" date="Sun Aug 25 09:21:22 EDT 2019" docOffset="2063" timestamp="163605532" />
  <Command __id="8457" _type="PredictionCommand" date="Sun Aug 25 09:21:22 EDT 2019" prediction_type="MakingProgress" timestamp="163605538" />
  <Command __id="8460" _type="ShellCommand" date="Sun Aug 25 09:21:27 EDT 2019" timestamp="163610444" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8461" _type="ShellCommand" date="Sun Aug 25 09:21:27 EDT 2019" timestamp="163610603" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8462" _type="MoveCaretCommand" caretOffset="1327" date="Sun Aug 25 09:21:33 EDT 2019" docOffset="2033" timestamp="163616442" />
  <Command __id="8463" _type="ShellCommand" date="Sun Aug 25 09:21:36 EDT 2019" timestamp="163619136" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8464" _type="ShellCommand" date="Sun Aug 25 09:21:39 EDT 2019" timestamp="163622707" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8465" _type="EclipseCommand" commandID="org.eclipse.search.ui.openFileSearchPage" date="Sun Aug 25 09:21:39 EDT 2019" timestamp="163622727" />
  <Command __id="8467" _type="ShellCommand" date="Sun Aug 25 09:21:44 EDT 2019" timestamp="163627888" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8468" _type="FindCommand" caseSensitive="true" date="Sun Aug 25 09:21:53 EDT 2019" forward="true" matchWord="false" offset="2033" regexp="false" replaceAll="false" selection="Find" selectionScope="false" timestamp="163636880" wrapSearch="true">
    <searchString><![CDATA[init]]></searchString>
    <replaceString><![CDATA[]]></replaceString>
  </Command>
  <Command __id="8469" _type="ShellCommand" date="Sun Aug 25 09:21:55 EDT 2019" timestamp="163638853" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8470" _type="MoveCaretCommand" caretOffset="2565" date="Sun Aug 25 09:21:55 EDT 2019" docOffset="3271" timestamp="163638971" />
  <Command __id="8471" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Sun Aug 25 09:22:00 EDT 2019" timestamp="163643170" />
  <Command __id="8472" _type="SelectTextCommand" caretOffset="4278" date="Sun Aug 25 09:22:29 EDT 2019" end="4278" start="4222" timestamp="163672086" />
  <Command __id="8473" _type="CopyCommand" date="Sun Aug 25 09:22:31 EDT 2019" timestamp="163674626" />
  <Command __id="8475" _type="MoveCaretCommand" caretOffset="1786" date="Sun Aug 25 09:22:36 EDT 2019" docOffset="1786" timestamp="163679288" />
  <Command __id="8476" _type="MoveCaretCommand" caretOffset="886" date="Sun Aug 25 09:23:08 EDT 2019" docOffset="886" timestamp="163711886" />
  <Command __id="8478" _type="InsertStringCommand" date="Sun Aug 25 09:23:10 EDT 2019" timestamp="163713092" timestamp2="163713092">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8480" _type="InsertStringCommand" date="Sun Aug 25 09:23:11 EDT 2019" repeat="6" timestamp="163714095" timestamp2="163715276">
    <data><![CDATA[publoc]]></data>
  </Command>
  <Command __id="8492" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:23:12 EDT 2019" repeat="2" timestamp="163716064" timestamp2="163716207" />
  <Command __id="8496" _type="InsertStringCommand" date="Sun Aug 25 09:23:13 EDT 2019" repeat="3" timestamp="163716611" timestamp2="163716935">
    <data><![CDATA[ic ]]></data>
  </Command>
  <Command __id="8502" _type="InsertStringCommand" date="Sun Aug 25 09:23:18 EDT 2019" repeat="3" timestamp="163721119" timestamp2="163722343">
    <data><![CDATA[ABS]]></data>
  </Command>
  <Command __id="8508" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:23:19 EDT 2019" timestamp="163723049" />
  <Command __id="8510" _type="InsertStringCommand" date="Sun Aug 25 09:23:20 EDT 2019" repeat="27" timestamp="163723166" timestamp2="163730521">
    <data><![CDATA[asicConfigurationManager(0 ]]></data>
  </Command>
  <DocumentChange __id="8491" _type="Delete" date="Sun Aug 25 09:23:12 EDT 2019" docASTNodeCount="317" docActiveCodeLength="2643" docExpressionCount="193" docLength="3150" endLine="25" length="2" offset="893" repeat="2" startLine="25" timestamp="163716047" timestamp2="163716201">
    <text><![CDATA[oc]]></text>
  </DocumentChange>
  <DocumentChange __id="8495" _type="Insert" date="Sun Aug 25 09:23:13 EDT 2019" docASTNodeCount="318" docActiveCodeLength="2646" docExpressionCount="193" docLength="3153" length="3" offset="893" repeat="3" timestamp="163716606" timestamp2="163716923">
    <text><![CDATA[ic ]]></text>
  </DocumentChange>
  <DocumentChange __id="8501" _type="Insert" date="Sun Aug 25 09:23:18 EDT 2019" docASTNodeCount="318" docActiveCodeLength="2649" docExpressionCount="193" docLength="3156" length="3" offset="896" repeat="3" timestamp="163721112" timestamp2="163722333">
    <text><![CDATA[ABS]]></text>
  </DocumentChange>
  <DocumentChange __id="8507" _type="Delete" date="Sun Aug 25 09:23:19 EDT 2019" docASTNodeCount="318" docActiveCodeLength="2648" docExpressionCount="193" docLength="3155" endLine="25" length="1" offset="898" startLine="25" timestamp="163723045">
    <text><![CDATA[S]]></text>
  </DocumentChange>
  <DocumentChange __id="8509" _type="Insert" date="Sun Aug 25 09:23:20 EDT 2019" docASTNodeCount="321" docActiveCodeLength="2676" docExpressionCount="194" docLength="3183" length="28" offset="898" repeat="27" timestamp="163723161" timestamp2="163730516">
    <text><![CDATA[asicConfigurationManager(0 )]]></text>
  </DocumentChange>
  <DocumentChange __id="8563" _type="Delete" date="Sun Aug 25 09:23:27 EDT 2019" docASTNodeCount="321" docActiveCodeLength="2674" docExpressionCount="194" docLength="3181" endLine="25" length="2" offset="923" repeat="2" startLine="25" timestamp="163731073" timestamp2="163731235">
    <text><![CDATA[0 ]]></text>
  </DocumentChange>
  <DocumentChange __id="8568" _type="Insert" date="Sun Aug 25 09:23:29 EDT 2019" docASTNodeCount="321" docActiveCodeLength="2684" docExpressionCount="194" docLength="3191" length="10" offset="924" repeat="3" timestamp="163732543" timestamp2="163733291">
    <text><![CDATA[ {
		
	}]]></text>
  </DocumentChange>
  <DocumentChange __id="8574" _type="Replace" date="Sun Aug 25 09:23:32 EDT 2019" docASTNodeCount="327" docActiveCodeLength="2740" docExpressionCount="199" docLength="3247" endLine="26" insertionLength="58" int_docASTNodeCount="321" int_docActiveCodeLength="2682" int_docExpressionCount="194" int_docLength="3189" length="2" offset="928" startLine="26" timestamp="163735704">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		setCourseConfiguration(createCourseConfiguration(args));]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8580" _type="Delete" date="Sun Aug 25 09:23:45 EDT 2019" docASTNodeCount="322" docActiveCodeLength="2727" docExpressionCount="197" docLength="3234" endLine="57" length="13" offset="1940" repeat="13" startLine="57" timestamp="163748155" timestamp2="163750146">
    <text><![CDATA[String[] args]]></text>
  </DocumentChange>
  <DocumentChange __id="8608" _type="Delete" date="Sun Aug 25 09:23:54 EDT 2019" docASTNodeCount="321" docActiveCodeLength="2723" docExpressionCount="196" docLength="3230" endLine="26" length="4" offset="979" startLine="26" timestamp="163757597">
    <text><![CDATA[args]]></text>
  </DocumentChange>
  <Command __id="8611" _type="FileOpenCommand" date="Sun Aug 25 09:24:18 EDT 2019" docASTNodeCount="815" docActiveCodeLength="8448" docExpressionCount="521" docLength="11680" projectName="comp110-grader" timestamp="163781857">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\config\AConfigurationManager.java]]></filePath>
  </Command>
  <DocumentChange __id="8615" _type="Insert" date="Sun Aug 25 09:24:22 EDT 2019" docASTNodeCount="809" docActiveCodeLength="8380" docExpressionCount="516" docLength="11682" length="2" offset="4916" timestamp="163785217">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8628" _type="Insert" date="Sun Aug 25 09:24:52 EDT 2019" docASTNodeCount="807" docActiveCodeLength="8367" docExpressionCount="514" docLength="11684" length="2" offset="2693" timestamp="163815521">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8629" _type="Insert" date="Sun Aug 25 09:24:52 EDT 2019" docASTNodeCount="801" docActiveCodeLength="8306" docExpressionCount="511" docLength="11686" length="2" offset="2710" timestamp="163815523">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8630" _type="Insert" date="Sun Aug 25 09:24:52 EDT 2019" docASTNodeCount="801" docActiveCodeLength="8271" docExpressionCount="511" docLength="11688" length="2" offset="2775" timestamp="163815524">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8631" _type="Insert" date="Sun Aug 25 09:24:52 EDT 2019" docASTNodeCount="799" docActiveCodeLength="8266" docExpressionCount="511" docLength="11690" length="2" offset="2814" timestamp="163815525">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8632" _type="Insert" date="Sun Aug 25 09:24:52 EDT 2019" docASTNodeCount="797" docActiveCodeLength="8253" docExpressionCount="509" docLength="11692" length="2" offset="2823" timestamp="163815526">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8633" _type="Insert" date="Sun Aug 25 09:24:52 EDT 2019" docASTNodeCount="784" docActiveCodeLength="8181" docExpressionCount="501" docLength="11694" length="2" offset="2840" timestamp="163815528">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8634" _type="Insert" date="Sun Aug 25 09:24:52 EDT 2019" docASTNodeCount="784" docActiveCodeLength="8139" docExpressionCount="501" docLength="11696" length="2" offset="2916" timestamp="163815530">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="8635" _type="Insert" date="Sun Aug 25 09:24:52 EDT 2019" docASTNodeCount="782" docActiveCodeLength="8134" docExpressionCount="501" docLength="11698" length="2" offset="2962" timestamp="163815531">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="8638" _type="FileOpenCommand" date="Sun Aug 25 09:24:56 EDT 2019" docASTNodeCount="321" docActiveCodeLength="2723" docExpressionCount="196" docLength="3230" projectName="GraderBasics" timestamp="163819425">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.NotImplementedException;

import grader.basics.project.CurrentProjectHolder;
import grader.basics.util.DirectoryUtils;
//import grader.config.AConfigurationManager;
import util.trace.Tracer;

public class ABasicConfigurationManager implements BasicConfigurationManager{
    public static final String PROJECT_CONFIG_FILE = "project.properties";
//    File projectDirectory;

	protected PropertiesConfiguration projectConfiguration;

	public static final String COURSE_FILE = "course.properties";
	public static final String CONFIG_DIR = "config";


	public static final String COURSE_CONFIGURATION_FILE_NAME = "./" + CONFIG_DIR + "/" + COURSE_FILE;

	public ABasicConfigurationManager() {
		setCourseConfiguration(createCourseConfiguration());
	}
	@Override
	public void clear() {
		projectConfiguration = null;
	}

	@Override
	public PropertiesConfiguration getOrCreateProjectConfiguration() {
		if (projectConfiguration == null) {
//			createProjectConfiguration(CurrentProjectHolder.getOrCreateCurrentProject().getProjectFolder());
			createProjectConfiguration(CurrentProjectHolder.getProjectLocation());

		}
		return projectConfiguration;
	}
	@Override
	public PropertiesConfiguration getProjectConfiguration() {		
		return projectConfiguration;
	}
	public void setProjectConfiguration(PropertiesConfiguration aPropertiesConfiguration) {
		projectConfiguration = aPropertiesConfiguration;
	}
//	@Override
//	public void setProjectDirectory(File aProjectDirectory) {
//		projectDirectory = aProjectDirectory;
//	}
//	@Override
//	public File getProjectDirectory() {
//		return projectDirectory;
//	}
	protected PropertiesConfiguration createCourseConfiguration() {
	       
        try {
        	File aFile = new File(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
        	if (!aFile.exists()) {
        		Tracer.warning (ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME + " does not exist, using defaults");
        		return null;
        	}
			return new PropertiesConfiguration(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
		} catch (ConfigurationException e) {
			e.printStackTrace();
			return null;
		}
        
        // Andrew might need to add stuff like in the method below

}
	@Override
	public void createProjectConfiguration (File aProjectDirectory) {	
		File[] aFiles = aProjectDirectory.listFiles();
		File aConfigFile = null;
		for (File aFile: aFiles) {
			if (aFile.getName().toLowerCase().equals(PROJECT_CONFIG_FILE)) {
				aConfigFile = aFile;
				break;
			}
		}
		if (aConfigFile != null) {
			try {
				projectConfiguration = new PropertiesConfiguration(aConfigFile);
			} catch (ConfigurationException e) {
				e.printStackTrace();
			}
		} else {
			System.err.println("Did not find file " + PROJECT_CONFIG_FILE + " in " + aProjectDirectory.getAbsolutePath());
		}
//		String aConfigFileFullName = aProjectDirectory.getAbsolutePath() + "/" +
	}


}
]]></snapshot>
  </Command>
  <DocumentChange __id="8642" _type="Insert" date="Sun Aug 25 09:25:05 EDT 2019" docASTNodeCount="321" docActiveCodeLength="2726" docExpressionCount="196" docLength="3233" length="3" offset="2517" timestamp="163828932">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="8644" _type="Replace" date="Sun Aug 25 09:25:06 EDT 2019" docASTNodeCount="348" docActiveCodeLength="2982" docExpressionCount="211" docLength="3489" endLine="74" insertionLength="257" int_docASTNodeCount="321" int_docActiveCodeLength="2725" int_docExpressionCount="196" int_docLength="3232" length="1" offset="2519" startLine="74" timestamp="163829813">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	@Override
    public PropertiesConfiguration getCourseConfiguration() {
        return moduleConfiguration;
    }
    @Override
    public void setCourseConfiguration(PropertiesConfiguration newVal) {
        this.moduleConfiguration = newVal;
    }]]></insertedText>
  </DocumentChange>
  <Command __id="8652" _type="FileOpenCommand" date="Sun Aug 25 09:25:16 EDT 2019" docASTNodeCount="53" docActiveCodeLength="465" docExpressionCount="31" docLength="547" projectName="GraderBasics" timestamp="163840025">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicConfigurationManager.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;

import org.apache.commons.configuration.PropertiesConfiguration;

public interface BasicConfigurationManager {
	public  PropertiesConfiguration getOrCreateProjectConfiguration() ;
	public void setProjectConfiguration(PropertiesConfiguration aPropertiesConfiguration);
	void createProjectConfiguration(File aProjectDirectory);
//	void setProjectDirectory(File aProjectDirectory);
//	File getProjectDirectory();
	PropertiesConfiguration getProjectConfiguration();
	void clear();
}
]]></snapshot>
  </Command>
  <Command __id="8625" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.move.element" date="Sun Aug 25 09:24:45 EDT 2019" timestamp="163808573" />
  <Command __id="8626" _type="SelectTextCommand" caretOffset="2247" date="Sun Aug 25 09:24:51 EDT 2019" end="2247" start="1991" timestamp="163814145" />
  <Command __id="8627" _type="CopyCommand" date="Sun Aug 25 09:24:51 EDT 2019" timestamp="163814845" />
  <Command __id="8636" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 09:24:52 EDT 2019" timestamp="163815547" />
  <Command __id="8637" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:24:53 EDT 2019" timestamp="163816947" />
  <Command __id="8639" _type="MoveCaretCommand" caretOffset="979" date="Sun Aug 25 09:24:56 EDT 2019" docOffset="979" timestamp="163819542" />
  <Command __id="8640" _type="MoveCaretCommand" caretOffset="2514" date="Sun Aug 25 09:25:03 EDT 2019" docOffset="2514" timestamp="163827068" />
  <Command __id="8641" _type="MoveCaretCommand" caretOffset="2517" date="Sun Aug 25 09:25:05 EDT 2019" docOffset="2517" timestamp="163828445" />
  <Command __id="8643" _type="InsertStringCommand" date="Sun Aug 25 09:25:05 EDT 2019" timestamp="163828945" timestamp2="163828945">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8645" _type="PasteCommand" date="Sun Aug 25 09:25:06 EDT 2019" timestamp="163829879" />
  <Command __id="8646" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:25:09 EDT 2019" timestamp="163832339" />
  <Command __id="8647" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sun Aug 25 09:25:14 EDT 2019" start_end="START" timestamp="163837736" />
  <Command __id="8648" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.internal.ui.CompilationUnitEditor.ruler.actions/org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction" date="Sun Aug 25 09:25:14 EDT 2019" timestamp="163837783" />
  <Command __id="8649" _type="ShellCommand" date="Sun Aug 25 09:25:16 EDT 2019" timestamp="163839483" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8650" _type="ShellCommand" date="Sun Aug 25 09:25:16 EDT 2019" timestamp="163839733" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8651" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sun Aug 25 09:25:16 EDT 2019" start_end="END" timestamp="163839769" />
  <Command __id="8655" _type="MoveCaretCommand" caretOffset="0" date="Sun Aug 25 09:25:17 EDT 2019" docOffset="0" timestamp="163840254" />
  <Command __id="8656" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:25:17 EDT 2019" timestamp="163840591" />
  <Command __id="8658" _type="SelectTextCommand" caretOffset="2590" date="Sun Aug 25 09:25:20 EDT 2019" end="2590" start="2566" timestamp="163843239" />
  <Command __id="8659" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sun Aug 25 09:25:24 EDT 2019" start_end="START" timestamp="163847801" />
  <Command __id="8660" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.internal.ui.CompilationUnitEditor.ruler.actions/org.eclipse.jdt.internal.ui.javaeditor.JavaSelectRulerAction" date="Sun Aug 25 09:25:24 EDT 2019" timestamp="163847851" />
  <Command __id="8661" _type="ShellCommand" date="Sun Aug 25 09:25:26 EDT 2019" timestamp="163849568" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8662" _type="ShellCommand" date="Sun Aug 25 09:25:26 EDT 2019" timestamp="163849813" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8663" _type="AssistCommand" assist_type="QUICK_ASSIST" auto_activated="false" date="Sun Aug 25 09:25:26 EDT 2019" start_end="END" timestamp="163849840" />
  <Command __id="8669" _type="SelectTextCommand" caretOffset="587" date="Sun Aug 25 09:25:27 EDT 2019" end="587" start="581" timestamp="163850190" />
  <Command __id="8670" _type="PredictionCommand" date="Sun Aug 25 09:25:27 EDT 2019" prediction_type="MakingProgress" timestamp="163850193" />
  <Command __id="8671" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:25:27 EDT 2019" timestamp="163850646" />
  <Command __id="8673" _type="SelectTextCommand" caretOffset="2263" date="Sun Aug 25 09:25:31 EDT 2019" end="2263" start="1993" timestamp="163854227" />
  <Command __id="8674" _type="MoveCaretCommand" caretOffset="2187" date="Sun Aug 25 09:25:31 EDT 2019" docOffset="2893" timestamp="163854986" />
  <Command __id="8675" _type="MoveCaretCommand" caretOffset="1245" date="Sun Aug 25 09:25:38 EDT 2019" docOffset="1951" timestamp="163862046" />
  <Command __id="8676" _type="SelectTextCommand" caretOffset="1264" date="Sun Aug 25 09:25:39 EDT 2019" end="1264" start="1245" timestamp="163862225" />
  <Command __id="8677" _type="SelectTextCommand" caretOffset="1295" date="Sun Aug 25 09:25:39 EDT 2019" end="1295" start="1217" timestamp="163862433" />
  <Command __id="8678" _type="CopyCommand" date="Sun Aug 25 09:25:39 EDT 2019" timestamp="163863033" />
  <Command __id="8679" _type="MoveCaretCommand" caretOffset="1293" date="Sun Aug 25 09:25:41 EDT 2019" docOffset="1999" timestamp="163864853" />
  <Command __id="8681" _type="InsertStringCommand" date="Sun Aug 25 09:25:42 EDT 2019" timestamp="163865271" timestamp2="163865271">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8683" _type="PasteCommand" date="Sun Aug 25 09:25:42 EDT 2019" timestamp="163865892" />
  <Command __id="8684" _type="SelectTextCommand" caretOffset="1323" date="Sun Aug 25 09:25:45 EDT 2019" end="1344" start="1323" timestamp="163868878" />
  <Command __id="8686" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sun Aug 25 09:25:46 EDT 2019" timestamp="163869345" />
  <Command __id="8687" _type="MoveCaretCommand" caretOffset="1220" date="Sun Aug 25 09:25:49 EDT 2019" docOffset="1926" timestamp="163872806" />
  <Command __id="8688" _type="SelectTextCommand" caretOffset="1244" date="Sun Aug 25 09:25:51 EDT 2019" end="1244" start="1220" timestamp="163874112" />
  <Command __id="8689" _type="SelectTextCommand" caretOffset="1295" date="Sun Aug 25 09:25:51 EDT 2019" end="1295" start="1217" timestamp="163874693" />
  <Command __id="8690" _type="CopyCommand" date="Sun Aug 25 09:25:52 EDT 2019" timestamp="163875439" />
  <Command __id="8692" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 09:25:53 EDT 2019" timestamp="163876648" />
  <Command __id="8693" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:25:54 EDT 2019" timestamp="163877447" />
  <Command __id="8695" _type="SelectTextCommand" caretOffset="2723" date="Sun Aug 25 09:25:56 EDT 2019" end="2723" start="2669" timestamp="163879788" />
  <Command __id="8696" _type="MoveCaretCommand" caretOffset="781" date="Sun Aug 25 09:26:03 EDT 2019" docOffset="781" timestamp="163886623" />
  <Command __id="8698" _type="PasteCommand" date="Sun Aug 25 09:26:04 EDT 2019" timestamp="163887528" />
  <Command __id="8699" _type="SelectTextCommand" caretOffset="856" date="Sun Aug 25 09:26:08 EDT 2019" end="856" start="828" timestamp="163891651" />
  <Command __id="8701" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sun Aug 25 09:26:09 EDT 2019" timestamp="163892196" />
  <Command __id="8702" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:26:10 EDT 2019" timestamp="163893090" />
  <Command __id="8704" _type="SelectTextCommand" caretOffset="1297" date="Sun Aug 25 09:26:55 EDT 2019" end="1297" start="1217" timestamp="163938513" />
  <Command __id="8705" _type="ShellCommand" date="Sun Aug 25 09:27:04 EDT 2019" timestamp="163947404" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8706" _type="ShellCommand" date="Sun Aug 25 09:27:21 EDT 2019" timestamp="163964136" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8707" _type="MoveCaretCommand" caretOffset="1325" date="Sun Aug 25 09:27:21 EDT 2019" docOffset="2031" timestamp="163964234" />
  <Command __id="8708" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Sun Aug 25 09:27:23 EDT 2019" timestamp="163966172" />
  <Command __id="8709" _type="MoveCaretCommand" caretOffset="2382" date="Sun Aug 25 09:27:33 EDT 2019" docOffset="3088" timestamp="163976126" />
  <Command __id="8710" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Sun Aug 25 09:27:34 EDT 2019" timestamp="163977504" />
  <Command __id="8712" _type="SelectTextCommand" caretOffset="1620" date="Sun Aug 25 09:27:37 EDT 2019" end="1620" start="1589" timestamp="163980186" />
  <Command __id="8713" _type="ShellCommand" date="Sun Aug 25 09:27:50 EDT 2019" timestamp="163993113" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8714" _type="ShellCommand" date="Sun Aug 25 09:27:50 EDT 2019" timestamp="163993326" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8715" _type="ShellCommand" date="Sun Aug 25 09:27:53 EDT 2019" timestamp="163996884" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8716" _type="ShellCommand" date="Sun Aug 25 09:27:57 EDT 2019" timestamp="164000507" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8718" _type="MoveCaretCommand" caretOffset="344" date="Sun Aug 25 09:28:06 EDT 2019" docOffset="344" timestamp="164009637" />
  <Command __id="8719" _type="MoveCaretCommand" caretOffset="3856" date="Sun Aug 25 09:28:16 EDT 2019" docOffset="3856" timestamp="164019415" />
  <Command __id="8720" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Aug 25 09:28:17 EDT 2019" timestamp="164020329" />
  <Command __id="8721" _type="MoveCaretCommand" caretOffset="10065" date="Sun Aug 25 09:28:30 EDT 2019" docOffset="10065" timestamp="164033883" />
  <Command __id="8723" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Aug 25 09:28:31 EDT 2019" timestamp="164034359" />
  <Command __id="8724" _type="SelectTextCommand" caretOffset="34893" date="Sun Aug 25 09:28:31 EDT 2019" end="34893" start="34848" timestamp="164034451" />
  <Command __id="8725" _type="MoveCaretCommand" caretOffset="35129" date="Sun Aug 25 09:28:42 EDT 2019" docOffset="35533" timestamp="164045220" />
  <Command __id="8726" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Aug 25 09:28:42 EDT 2019" timestamp="164045527" />
  <Command __id="8727" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Sun Aug 25 09:28:53 EDT 2019" timestamp="164056784" />
  <Command __id="8728" _type="MoveCaretCommand" caretOffset="35126" date="Sun Aug 25 09:28:57 EDT 2019" docOffset="35530" timestamp="164060753" />
  <DocumentChange __id="8653" _type="Insert" date="Sun Aug 25 09:25:17 EDT 2019" docASTNodeCount="57" docActiveCodeLength="517" docExpressionCount="33" docLength="599" length="52" offset="542" repeat="2" timestamp="163840085" timestamp2="163840103">
    <text><![CDATA[
	PropertiesConfiguration getCourseConfiguration();]]></text>
  </DocumentChange>
  <Command __id="8657" _type="FileOpenCommand" date="Sun Aug 25 09:25:20 EDT 2019" docASTNodeCount="348" docActiveCodeLength="2982" docExpressionCount="211" docLength="3489" projectName="GraderBasics" timestamp="163843120">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.NotImplementedException;

import grader.basics.project.CurrentProjectHolder;
import grader.basics.util.DirectoryUtils;
//import grader.config.AConfigurationManager;
import util.trace.Tracer;

public class ABasicConfigurationManager implements BasicConfigurationManager{
    public static final String PROJECT_CONFIG_FILE = "project.properties";
//    File projectDirectory;

	protected PropertiesConfiguration projectConfiguration;

	public static final String COURSE_FILE = "course.properties";
	public static final String CONFIG_DIR = "config";


	public static final String COURSE_CONFIGURATION_FILE_NAME = "./" + CONFIG_DIR + "/" + COURSE_FILE;

	public ABasicConfigurationManager() {
		setCourseConfiguration(createCourseConfiguration());
	}
	@Override
	public void clear() {
		projectConfiguration = null;
	}

	@Override
	public PropertiesConfiguration getOrCreateProjectConfiguration() {
		if (projectConfiguration == null) {
//			createProjectConfiguration(CurrentProjectHolder.getOrCreateCurrentProject().getProjectFolder());
			createProjectConfiguration(CurrentProjectHolder.getProjectLocation());

		}
		return projectConfiguration;
	}
	@Override
	public PropertiesConfiguration getProjectConfiguration() {		
		return projectConfiguration;
	}
	public void setProjectConfiguration(PropertiesConfiguration aPropertiesConfiguration) {
		projectConfiguration = aPropertiesConfiguration;
	}
//	@Override
//	public void setProjectDirectory(File aProjectDirectory) {
//		projectDirectory = aProjectDirectory;
//	}
//	@Override
//	public File getProjectDirectory() {
//		return projectDirectory;
//	}
	protected PropertiesConfiguration createCourseConfiguration() {
	       
        try {
        	File aFile = new File(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
        	if (!aFile.exists()) {
        		Tracer.warning (ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME + " does not exist, using defaults");
        		return null;
        	}
			return new PropertiesConfiguration(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
		} catch (ConfigurationException e) {
			e.printStackTrace();
			return null;
		}
        
        // Andrew might need to add stuff like in the method below

}
	@Override
    public PropertiesConfiguration getCourseConfiguration() {
        return moduleConfiguration;
    }
    @Override
    public void setCourseConfiguration(PropertiesConfiguration newVal) {
        this.moduleConfiguration = newVal;
    }
	@Override
	public void createProjectConfiguration (File aProjectDirectory) {	
		File[] aFiles = aProjectDirectory.listFiles();
		File aConfigFile = null;
		for (File aFile: aFiles) {
			if (aFile.getName().toLowerCase().equals(PROJECT_CONFIG_FILE)) {
				aConfigFile = aFile;
				break;
			}
		}
		if (aConfigFile != null) {
			try {
				projectConfiguration = new PropertiesConfiguration(aConfigFile);
			} catch (ConfigurationException e) {
				e.printStackTrace();
			}
		} else {
			System.err.println("Did not find file " + PROJECT_CONFIG_FILE + " in " + aProjectDirectory.getAbsolutePath());
		}
//		String aConfigFileFullName = aProjectDirectory.getAbsolutePath() + "/" +
	}


}
]]></snapshot>
  </Command>
  <Command __id="8664" _type="FileOpenCommand" date="Sun Aug 25 09:25:26 EDT 2019" docASTNodeCount="57" docActiveCodeLength="517" docExpressionCount="33" docLength="599" projectName="GraderBasics" timestamp="163850002">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicConfigurationManager.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;

import org.apache.commons.configuration.PropertiesConfiguration;

public interface BasicConfigurationManager {
	public  PropertiesConfiguration getOrCreateProjectConfiguration() ;
	public void setProjectConfiguration(PropertiesConfiguration aPropertiesConfiguration);
	void createProjectConfiguration(File aProjectDirectory);
//	void setProjectDirectory(File aProjectDirectory);
//	File getProjectDirectory();
	PropertiesConfiguration getProjectConfiguration();
	void clear();
	PropertiesConfiguration getCourseConfiguration();
}
]]></snapshot>
  </Command>
  <DocumentChange __id="8665" _type="Insert" date="Sun Aug 25 09:25:26 EDT 2019" docASTNodeCount="64" docActiveCodeLength="580" docExpressionCount="36" docLength="662" length="63" offset="594" repeat="4" timestamp="163850025" timestamp2="163850026">
    <text><![CDATA[
	void setCourseConfiguration(PropertiesConfiguration newVal);]]></text>
  </DocumentChange>
  <Command __id="8672" _type="FileOpenCommand" date="Sun Aug 25 09:25:31 EDT 2019" docASTNodeCount="782" docActiveCodeLength="8134" docExpressionCount="501" docLength="11698" projectName="comp110-grader" timestamp="163854101">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\config\AConfigurationManager.java]]></filePath>
    <snapshot><![CDATA[package grader.config;

import framework.utils.UserPropertyWriter;
import grader.basics.config.ABasicConfigurationManager;
import grader.basics.project.CurrentProjectHolder;
import grader.executor.ExecutorSelector;
import grader.language.LanguageDependencyManager;
import grader.trace.config.DynamicConfigurationFileCreated;
import grader.trace.config.DynamicConfigurationFileRead;
import grader.trace.config.StaticConfigurationFileNotRead;
import grader.trace.config.StaticConfigurationFileRead;
import util.trace.Tracer;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Arrays;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;

public class AConfigurationManager extends ABasicConfigurationManager implements ConfigurationManager {

    public static final String CONFIG_FILE = "config.properties";
    public static final String DYNAMIC_CONFIGURATION_FILE = "dynamicconfig.properties";
    public static final String DYNAMIC_MODULES_FILE = "dynamicmodules.properties";
    public static final String DYNAMIC_CONFIG_PROPERTY = "grader.dynamicConfiguration";
//    public static final String STATIC_CONFIGURATION_FILE_NAME = "./config/config.properties";
    public static final String STATIC_CONFIGURATION_FILE_NAME = "./" + ABasicConfigurationManager.CONFIG_DIR + "/" + CONFIG_FILE;
    public static final String DYNAMIC_CONFIGURATION_FILE_NAME = "./" + ABasicConfigurationManager.CONFIG_DIR + "/" + DYNAMIC_CONFIGURATION_FILE;

    public static final String DYNAMIC_MODULE_CONFIGURATION_FILE_NAME = "./" + ABasicConfigurationManager.CONFIG_DIR + "/" + DYNAMIC_MODULES_FILE;


    private static PropertiesConfiguration staticConfiguration = new PropertiesConfiguration();
    static File userPropsFile;
    PropertiesConfiguration dynamicConfiguration;
    PropertiesConfiguration moduleConfiguration, dynamicModuleConfiguration;

    public AConfigurationManager() {
//		init();

    }


    /**
     * These methods should be in StaticConfigurationUtils
     */
    public PropertiesConfiguration getDynamicConfiguration() {
        return dynamicConfiguration;
    }
    

    public void setDynamicConfiguration(
            PropertiesConfiguration dynamicConfiguration) {
        this.dynamicConfiguration = dynamicConfiguration;
    }

    public PropertiesConfiguration getStaticConfiguration() {
        return staticConfiguration;
    }

    public void setStaticConfiguration(PropertiesConfiguration staticConfiguration) {
        this.staticConfiguration = staticConfiguration;
    }
//    @Override
//    public PropertiesConfiguration getCourseConfiguration() {
//        return moduleConfiguration;
//    }
//    @Override
//    public void setCourseConfiguration(PropertiesConfiguration newVal) {
//        this.moduleConfiguration = newVal;
//    }
    
    @Override
    public PropertiesConfiguration getDynamicModuleConfiguration() {
        return dynamicModuleConfiguration;
    }
    @Override
    public void setDynamicModuleConfiguration(PropertiesConfiguration newVal) {
        this.dynamicModuleConfiguration = newVal;
    }


    public void init(String args[]) {
        try {
//			 PropertiesConfiguration configuration = new PropertiesConfiguration("./config/config.properties");
//			 PropertiesConfiguration configuration = new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
            PropertiesConfiguration configuration = createStaticConfiguration(args);
            if (configuration != null) {
            StaticConfigurationFileRead.newCase(STATIC_CONFIGURATION_FILE_NAME, this);
            setStaticConfiguration(configuration);
            }
//            String dynamicConfigurationName = configuration.getString(DYNAMIC_CONFIG_PROPERTY, DYNAMIC_CONFIGURATION_FILE_NAME);
            // allowing for no configuration
            String dynamicConfigurationName = ExecutionSpecificationSelector.getExecutionSpecification().getDynamicExecutionFileName();

            File dynamicConfigurationFile = new File(dynamicConfigurationName);
            if (!dynamicConfigurationFile.exists()) {
            	File parent = dynamicConfigurationFile.getParentFile();
            	if (!parent.exists()) {
            		parent.mkdirs();
            	}
                dynamicConfigurationFile.createNewFile();
                DynamicConfigurationFileCreated.newCase(dynamicConfigurationName, this);
//	         	convertToDynamicConfiguration();
            }
//            dynamicConfiguration = new PropertiesConfiguration(dynamicConfigurationName);
            setDynamicConfiguration(createDynamicConfiguration(args, dynamicConfigurationName));

            DynamicConfigurationFileRead.newCase(dynamicConfigurationName, this);
            
//            setCourseConfiguration(createCourseConfiguration(args));
            
            
           File dynamicModuleFile = new File(DYNAMIC_MODULE_CONFIGURATION_FILE_NAME);
           if (!dynamicModuleFile.exists()) {
           	File parent = dynamicModuleFile.getParentFile();
           	if (!parent.exists()) {
           		parent.mkdirs();
           	}
           	dynamicModuleFile.createNewFile();
//	         	convertToDynamicConfiguration();
           }
            
            setDynamicModuleConfiguration(new PropertiesConfiguration(dynamicModuleFile.getAbsolutePath()));  
//            LanguageDependencyManager.setCOBj(
//            		StaticConfigurationUtils.getCourseOrStaticString(StaticConfigurationUtils.C_OBJ, null));
            /*
             * Why are these values being pushed eagerly rather than pulled when needed lazily
             */
            String cObj = ExecutionSpecificationSelector.getExecutionSpecification().getCObjSuffix();

            LanguageDependencyManager.setCOBj(
            		cObj);

//            ExecutorSelector.getExecutor().setExecutorDirectory(
//            		StaticConfigurationUtils.getCourseOrStaticString(StaticConfigurationUtils.EXECUTOR, null));
            // really do not understand what an executor is.
            ExecutorSelector.getExecutor().setExecutorDirectory(
            		
            		ExecutionSpecificationSelector.getExecutionSpecification().getExecutorDirectory()
            		);

//	         GraderSettings.get().convertToDynamicConfiguration();
        } catch (ConfigurationException e) {
            StaticConfigurationFileNotRead.newCase(STATIC_CONFIGURATION_FILE_NAME, this);
            System.err.println("Error loading config file.");
            System.err.println(e.getMessage());
            e.printStackTrace();

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    
//    PropertiesConfiguration createCourseConfiguration(String[] args) {
//       
//                try {
//                	File aFile = new File(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
//                	if (!aFile.exists()) {
//                		Tracer.warning (ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME + " does not exist, using defaults");
//                		return null;
//                	}
//					return new PropertiesConfiguration(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
//				} catch (ConfigurationException e) {
//					e.printStackTrace();
//					return null;
//				}
//                
//                // Andrew might need to add stuff like in the method below
//        
//    }
    
    PropertiesConfiguration createStaticConfiguration(String[] args) {
        userPropsFile = null;
        try {
        //  this seems wrong, one should use the satic file and overrwrite those args
        	// Best is to use course configuration and use overwrite or set property to overrwrite it
        	// will not change until I have tried out andrew's server
            if (args.length == 0) { 
            	File aConfigFile = new File(STATIC_CONFIGURATION_FILE_NAME);
            	if (!aConfigFile.exists()) {
            		Tracer.warning(STATIC_CONFIGURATION_FILE_NAME + " not found, using defaults" );
            		return null;
            	}
                return new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
            }
//		           UserPropertyWriter userProperties = new UserPropertyWriter(Paths.get("config", "config.properties").toString());
            UserPropertyWriter userProperties = new UserPropertyWriter(Paths.get(ABasicConfigurationManager.CONFIG_DIR, CONFIG_FILE).toString());
// this seems to be Andrew's code duplicating the properties in a thread specific file
            
            userProperties.setUserProperties(args);
            userPropsFile = Paths.get(ABasicConfigurationManager.CONFIG_DIR, "user-config.properties").toFile();
            
            if (userPropsFile.exists()) {
                userPropsFile.delete();
            }
            
            try {
                userPropsFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }

            userProperties.writeUserProperties(userPropsFile);
            // Load the default config file
            PropertiesConfiguration configuration = new PropertiesConfiguration(userPropsFile);
            
            return configuration;
//			PropertiesConfiguration configuration = new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
        } catch (ConfigurationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return null;
        } finally {
            //System.out.println("run done");
            //if (userPropsFile != null) {
            //    userPropsFile.delete();
            //}
        }
    }
    
    PropertiesConfiguration createDynamicConfiguration(String[] args, String dynamicConfigName) {
        userPropsFile = null;
        try {
            if (args.length == 0) {
                return new PropertiesConfiguration(dynamicConfigName);
            }
//		           UserPropertyWriter userProperties = new UserPropertyWriter(Paths.get("config", "config.properties").toString());
            UserPropertyWriter userProperties = new UserPropertyWriter(dynamicConfigName);
// this seems to be Andrew's code duplicating the properties in a thread specific file
            System.out.println ("Writing user properties:" + Arrays.toString(args));
            userProperties.setUserProperties(args);
            userPropsFile = Paths.get(dynamicConfigName).toFile();
            
            try {
                userPropsFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }

            userProperties.writeUserProperties(userPropsFile);
            // Load the default config file
            PropertiesConfiguration configuration = new PropertiesConfiguration(userPropsFile);
            
            return configuration;
//			PropertiesConfiguration configuration = new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
        } catch (ConfigurationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return null;
        } finally {
            //System.out.println("run done");
            //if (userPropsFile != null) {
            //    userPropsFile.delete();
            //}
        }
    }

}
]]></snapshot>
  </Command>
  <DocumentChange __id="8680" _type="Insert" date="Sun Aug 25 09:25:42 EDT 2019" docASTNodeCount="782" docActiveCodeLength="8140" docExpressionCount="501" docLength="11704" length="6" offset="1999" timestamp="163865263">
    <text><![CDATA[
    ]]></text>
  </DocumentChange>
  <DocumentChange __id="8682" _type="Replace" date="Sun Aug 25 09:25:42 EDT 2019" docASTNodeCount="789" docActiveCodeLength="8214" docExpressionCount="504" docLength="11778" endLine="38" insertionLength="78" int_docASTNodeCount="782" int_docActiveCodeLength="8136" int_docExpressionCount="501" int_docLength="11700" length="4" offset="2001" startLine="38" timestamp="163865880">
    <deletedText><![CDATA[    ]]></deletedText>
    <insertedText><![CDATA[    PropertiesConfiguration moduleConfiguration, dynamicModuleConfiguration;
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8685" _type="Delete" date="Sun Aug 25 09:25:46 EDT 2019" docASTNodeCount="787" docActiveCodeLength="8193" docExpressionCount="503" docLength="11757" endLine="38" length="21" offset="2029" startLine="38" timestamp="163869329">
    <text><![CDATA[moduleConfiguration, ]]></text>
  </DocumentChange>
  <DocumentChange __id="8691" _type="Insert" date="Sun Aug 25 09:25:53 EDT 2019" docASTNodeCount="780" docActiveCodeLength="8117" docExpressionCount="500" docLength="11759" length="2" offset="1923" timestamp="163876620">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="8694" _type="FileOpenCommand" date="Sun Aug 25 09:25:56 EDT 2019" docASTNodeCount="348" docActiveCodeLength="2982" docExpressionCount="211" docLength="3489" projectName="GraderBasics" timestamp="163879525">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
  </Command>
  <DocumentChange __id="8697" _type="Insert" date="Sun Aug 25 09:26:04 EDT 2019" docASTNodeCount="355" docActiveCodeLength="3060" docExpressionCount="214" docLength="3567" length="78" offset="781" timestamp="163887443">
    <text><![CDATA[    PropertiesConfiguration moduleConfiguration, dynamicModuleConfiguration;
]]></text>
  </DocumentChange>
  <DocumentChange __id="8700" _type="Delete" date="Sun Aug 25 09:26:09 EDT 2019" docASTNodeCount="353" docActiveCodeLength="3032" docExpressionCount="213" docLength="3539" endLine="21" length="28" offset="828" startLine="21" timestamp="163892184">
    <text><![CDATA[, dynamicModuleConfiguration]]></text>
  </DocumentChange>
  <Command __id="8703" _type="FileOpenCommand" date="Sun Aug 25 09:26:55 EDT 2019" docASTNodeCount="780" docActiveCodeLength="8117" docExpressionCount="500" docLength="11759" projectName="comp110-grader" timestamp="163938390">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\config\AConfigurationManager.java]]></filePath>
    <snapshot><![CDATA[package grader.config;

import framework.utils.UserPropertyWriter;
import grader.basics.config.ABasicConfigurationManager;
import grader.basics.project.CurrentProjectHolder;
import grader.executor.ExecutorSelector;
import grader.language.LanguageDependencyManager;
import grader.trace.config.DynamicConfigurationFileCreated;
import grader.trace.config.DynamicConfigurationFileRead;
import grader.trace.config.StaticConfigurationFileNotRead;
import grader.trace.config.StaticConfigurationFileRead;
import util.trace.Tracer;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.util.Arrays;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;

public class AConfigurationManager extends ABasicConfigurationManager implements ConfigurationManager {

    public static final String CONFIG_FILE = "config.properties";
    public static final String DYNAMIC_CONFIGURATION_FILE = "dynamicconfig.properties";
    public static final String DYNAMIC_MODULES_FILE = "dynamicmodules.properties";
    public static final String DYNAMIC_CONFIG_PROPERTY = "grader.dynamicConfiguration";
//    public static final String STATIC_CONFIGURATION_FILE_NAME = "./config/config.properties";
    public static final String STATIC_CONFIGURATION_FILE_NAME = "./" + ABasicConfigurationManager.CONFIG_DIR + "/" + CONFIG_FILE;
    public static final String DYNAMIC_CONFIGURATION_FILE_NAME = "./" + ABasicConfigurationManager.CONFIG_DIR + "/" + DYNAMIC_CONFIGURATION_FILE;

    public static final String DYNAMIC_MODULE_CONFIGURATION_FILE_NAME = "./" + ABasicConfigurationManager.CONFIG_DIR + "/" + DYNAMIC_MODULES_FILE;


    private static PropertiesConfiguration staticConfiguration = new PropertiesConfiguration();
    static File userPropsFile;
    PropertiesConfiguration dynamicConfiguration;
//    PropertiesConfiguration moduleConfiguration, dynamicModuleConfiguration;
    PropertiesConfiguration dynamicModuleConfiguration;


    public AConfigurationManager() {
//		init();

    }


    /**
     * These methods should be in StaticConfigurationUtils
     */
    public PropertiesConfiguration getDynamicConfiguration() {
        return dynamicConfiguration;
    }
    

    public void setDynamicConfiguration(
            PropertiesConfiguration dynamicConfiguration) {
        this.dynamicConfiguration = dynamicConfiguration;
    }

    public PropertiesConfiguration getStaticConfiguration() {
        return staticConfiguration;
    }

    public void setStaticConfiguration(PropertiesConfiguration staticConfiguration) {
        this.staticConfiguration = staticConfiguration;
    }
//    @Override
//    public PropertiesConfiguration getCourseConfiguration() {
//        return moduleConfiguration;
//    }
//    @Override
//    public void setCourseConfiguration(PropertiesConfiguration newVal) {
//        this.moduleConfiguration = newVal;
//    }
    
    @Override
    public PropertiesConfiguration getDynamicModuleConfiguration() {
        return dynamicModuleConfiguration;
    }
    @Override
    public void setDynamicModuleConfiguration(PropertiesConfiguration newVal) {
        this.dynamicModuleConfiguration = newVal;
    }


    public void init(String args[]) {
        try {
//			 PropertiesConfiguration configuration = new PropertiesConfiguration("./config/config.properties");
//			 PropertiesConfiguration configuration = new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
            PropertiesConfiguration configuration = createStaticConfiguration(args);
            if (configuration != null) {
            StaticConfigurationFileRead.newCase(STATIC_CONFIGURATION_FILE_NAME, this);
            setStaticConfiguration(configuration);
            }
//            String dynamicConfigurationName = configuration.getString(DYNAMIC_CONFIG_PROPERTY, DYNAMIC_CONFIGURATION_FILE_NAME);
            // allowing for no configuration
            String dynamicConfigurationName = ExecutionSpecificationSelector.getExecutionSpecification().getDynamicExecutionFileName();

            File dynamicConfigurationFile = new File(dynamicConfigurationName);
            if (!dynamicConfigurationFile.exists()) {
            	File parent = dynamicConfigurationFile.getParentFile();
            	if (!parent.exists()) {
            		parent.mkdirs();
            	}
                dynamicConfigurationFile.createNewFile();
                DynamicConfigurationFileCreated.newCase(dynamicConfigurationName, this);
//	         	convertToDynamicConfiguration();
            }
//            dynamicConfiguration = new PropertiesConfiguration(dynamicConfigurationName);
            setDynamicConfiguration(createDynamicConfiguration(args, dynamicConfigurationName));

            DynamicConfigurationFileRead.newCase(dynamicConfigurationName, this);
            
//            setCourseConfiguration(createCourseConfiguration(args));
            
            
           File dynamicModuleFile = new File(DYNAMIC_MODULE_CONFIGURATION_FILE_NAME);
           if (!dynamicModuleFile.exists()) {
           	File parent = dynamicModuleFile.getParentFile();
           	if (!parent.exists()) {
           		parent.mkdirs();
           	}
           	dynamicModuleFile.createNewFile();
//	         	convertToDynamicConfiguration();
           }
            
            setDynamicModuleConfiguration(new PropertiesConfiguration(dynamicModuleFile.getAbsolutePath()));  
//            LanguageDependencyManager.setCOBj(
//            		StaticConfigurationUtils.getCourseOrStaticString(StaticConfigurationUtils.C_OBJ, null));
            /*
             * Why are these values being pushed eagerly rather than pulled when needed lazily
             */
            String cObj = ExecutionSpecificationSelector.getExecutionSpecification().getCObjSuffix();

            LanguageDependencyManager.setCOBj(
            		cObj);

//            ExecutorSelector.getExecutor().setExecutorDirectory(
//            		StaticConfigurationUtils.getCourseOrStaticString(StaticConfigurationUtils.EXECUTOR, null));
            // really do not understand what an executor is.
            ExecutorSelector.getExecutor().setExecutorDirectory(
            		
            		ExecutionSpecificationSelector.getExecutionSpecification().getExecutorDirectory()
            		);

//	         GraderSettings.get().convertToDynamicConfiguration();
        } catch (ConfigurationException e) {
            StaticConfigurationFileNotRead.newCase(STATIC_CONFIGURATION_FILE_NAME, this);
            System.err.println("Error loading config file.");
            System.err.println(e.getMessage());
            e.printStackTrace();

        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
    
//    PropertiesConfiguration createCourseConfiguration(String[] args) {
//       
//                try {
//                	File aFile = new File(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
//                	if (!aFile.exists()) {
//                		Tracer.warning (ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME + " does not exist, using defaults");
//                		return null;
//                	}
//					return new PropertiesConfiguration(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
//				} catch (ConfigurationException e) {
//					e.printStackTrace();
//					return null;
//				}
//                
//                // Andrew might need to add stuff like in the method below
//        
//    }
    
    PropertiesConfiguration createStaticConfiguration(String[] args) {
        userPropsFile = null;
        try {
        //  this seems wrong, one should use the satic file and overrwrite those args
        	// Best is to use course configuration and use overwrite or set property to overrwrite it
        	// will not change until I have tried out andrew's server
            if (args.length == 0) { 
            	File aConfigFile = new File(STATIC_CONFIGURATION_FILE_NAME);
            	if (!aConfigFile.exists()) {
            		Tracer.warning(STATIC_CONFIGURATION_FILE_NAME + " not found, using defaults" );
            		return null;
            	}
                return new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
            }
//		           UserPropertyWriter userProperties = new UserPropertyWriter(Paths.get("config", "config.properties").toString());
            UserPropertyWriter userProperties = new UserPropertyWriter(Paths.get(ABasicConfigurationManager.CONFIG_DIR, CONFIG_FILE).toString());
// this seems to be Andrew's code duplicating the properties in a thread specific file
            
            userProperties.setUserProperties(args);
            userPropsFile = Paths.get(ABasicConfigurationManager.CONFIG_DIR, "user-config.properties").toFile();
            
            if (userPropsFile.exists()) {
                userPropsFile.delete();
            }
            
            try {
                userPropsFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }

            userProperties.writeUserProperties(userPropsFile);
            // Load the default config file
            PropertiesConfiguration configuration = new PropertiesConfiguration(userPropsFile);
            
            return configuration;
//			PropertiesConfiguration configuration = new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
        } catch (ConfigurationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return null;
        } finally {
            //System.out.println("run done");
            //if (userPropsFile != null) {
            //    userPropsFile.delete();
            //}
        }
    }
    
    PropertiesConfiguration createDynamicConfiguration(String[] args, String dynamicConfigName) {
        userPropsFile = null;
        try {
            if (args.length == 0) {
                return new PropertiesConfiguration(dynamicConfigName);
            }
//		           UserPropertyWriter userProperties = new UserPropertyWriter(Paths.get("config", "config.properties").toString());
            UserPropertyWriter userProperties = new UserPropertyWriter(dynamicConfigName);
// this seems to be Andrew's code duplicating the properties in a thread specific file
            System.out.println ("Writing user properties:" + Arrays.toString(args));
            userProperties.setUserProperties(args);
            userPropsFile = Paths.get(dynamicConfigName).toFile();
            
            try {
                userPropsFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }

            userProperties.writeUserProperties(userPropsFile);
            // Load the default config file
            PropertiesConfiguration configuration = new PropertiesConfiguration(userPropsFile);
            
            return configuration;
//			PropertiesConfiguration configuration = new PropertiesConfiguration(STATIC_CONFIGURATION_FILE_NAME);
        } catch (ConfigurationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            return null;
        } finally {
            //System.out.println("run done");
            //if (userPropsFile != null) {
            //    userPropsFile.delete();
            //}
        }
    }

}
]]></snapshot>
  </Command>
  <Command __id="8711" _type="FileOpenCommand" date="Sun Aug 25 09:27:36 EDT 2019" docASTNodeCount="274" docActiveCodeLength="2750" docExpressionCount="186" docLength="9320" projectName="comp110-grader" timestamp="163980047">
    <filePath><![CDATA[D:\dewan_backup\Java\Grader\src\main\java\grader\modules\AModuleProblemManager.java]]></filePath>
    <snapshot><![CDATA[package grader.modules;

import grader.basics.config.BasicExecutionSpecificationSelector;
import grader.basics.config.BasicStaticConfigurationUtils;
import grader.config.ConfigurationManagerSelector;
import grader.config.ExecutionSpecificationSelector;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;

public class AModuleProblemManager implements ModuleProblemManager{
//	public static final String MODULES = "modules";
//	public static final String GENERIC_COURSE = "GenericCourse";
	PropertiesConfiguration configuration, dynamicConfiguration;
	PropertiesConfiguration courseConfiguration, dynamicModuleConfiguration;
//	GraderSettingsManager graderSettingsManager = GraderSettingsManagerSelector.getGraderSettingsManager();
	List<String> modules;
	public AModuleProblemManager() {
		init();
		
				
//				GraderSettingsManagerSelector.getGraderSettingsManager();
//		configuration = ConfigurationManagerSelector.getConfigurationManager().getStaticConfiguration();
//		dynamicConfiguration = ConfigurationManagerSelector.getConfigurationManager().getDynamicConfiguration();
//		courseConfiguration = ConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration();
//		dynamicModuleConfiguration = ConfigurationManagerSelector.getConfigurationManager().getDynamicModuleConfiguration();
		
	}
	// this may be executed twice
	@Override
	public void init() {
		configuration = ConfigurationManagerSelector.getConfigurationManager().getStaticConfiguration();
		dynamicConfiguration = ConfigurationManagerSelector.getConfigurationManager().getDynamicConfiguration();
		courseConfiguration = ConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration();
		dynamicModuleConfiguration = ConfigurationManagerSelector.getConfigurationManager().getDynamicModuleConfiguration();
	}
//	@Override
//	public void init(GraderSettingsManager aGraderSettingsManager) {
//		graderSettingsManager = aGraderSettingsManager;
//	}
	
	public void saveModules() {
		try {
			if (dynamicModuleConfiguration == null) {
				System.err.println("null dynamic module config");
				return;
			}
			dynamicModuleConfiguration.setProperty(BasicStaticConfigurationUtils.MODULES, getModules());
			dynamicModuleConfiguration.save();
        } catch (ConfigurationException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
		
	}
//	// side effect, reading modules will save them
//	public List<String> getModules() {
//		if (modules != null) return modules;
//		List objectModules = null;
//		if (courseConfiguration != null) {
//			 objectModules = courseConfiguration.getList(MODULES);
//		 }
//		
//		if (objectModules != null && objectModules.isEmpty()) {
//			System.err.println("No modules found in modules.properties, using the ones in config");
//		}
//		
//		if (objectModules == null || objectModules.isEmpty()) {
//		
////		 List objectModules = configuration.getList("modules");
////		 List objectModules = configuration.getList(MODULES);
//			if (configuration != null) {
//		objectModules = configuration.getList(MODULES);
//			} else {
//				System.err.println("Null configuration");
//				return new ArrayList(); // when we are rnning code without the grader running such as a C compiler of checkstyle
//			}
//		}
//		
//
////		 List<String> 	modules = objectModules;
//		modules = objectModules;
//
//			if (modules == null || objectModules.size() == 0) {
//				modules = new ArrayList();
////				Tracer.error("No modules specified in configuration file!");
////				modules.add("GenericCourse");
//				modules.add(GENERIC_COURSE);
////				Tracer.error("No modules specified in configuration file!");
////				System.exit(-1);
//			}
//			saveModules();
//			
//		return modules;
//		
//	}
	// side effect, reading modules will save them
	public List<String> getModules() {
		if (modules != null) return modules;
		List objectModules = null;
		objectModules = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getModules();
		if (objectModules == null) {
			objectModules = new ArrayList();
		}
		if (objectModules.isEmpty()) {
			objectModules.add(BasicStaticConfigurationUtils.DEFAULT_MODULE);
		}
		modules = objectModules;
		return objectModules;
//		if (courseConfiguration != null) {
//			 objectModules = courseConfiguration.getList(MODULES);
//		 }
//		
//		if (objectModules != null && objectModules.isEmpty()) {
//			System.err.println("No modules found in modules.properties, using the ones in config");
//		}
//		
//		if (objectModules == null || objectModules.isEmpty()) {
//		
////		 List objectModules = configuration.getList("modules");
////		 List objectModules = configuration.getList(MODULES);
//			if (configuration != null) {
//		objectModules = configuration.getList(MODULES);
//			} else {
//				System.err.println("Null configuration");
//				return new ArrayList(); // when we are rnning code without the grader running such as a C compiler of checkstyle
//			}
//		}
		

////		 List<String> 	modules = objectModules;
//		modules = objectModules;
//
//			if (modules == null || objectModules.size() == 0) {
//				modules = new ArrayList();
////				Tracer.error("No modules specified in configuration file!");
////				modules.add("GenericCourse");
//				modules.add(GENERIC_COURSE);
////				Tracer.error("No modules specified in configuration file!");
////				System.exit(-1);
//			}
//			saveModules();
//			
//		return modules;
		
	}
	
//	@Override
//	public String replaceModuleProblemVars(String  original) {
//		String moduleName = graderSettingsManager.getModule();
//		String problemName = graderSettingsManager.getProblem(moduleName);
//		String retVal = original;
////		String problemName = dynamicConfiguration.getString(AGraderSettingsModel.MODULE + "." + AGraderSettingsModel.MODULE);
//		retVal = retVal.replace("{moduleName}", moduleName);
//		retVal = retVal.replace("{ModuleName}", moduleName);
//		retVal = retVal.replace("{modulename}", moduleName.toLowerCase());
//		
//		retVal = retVal.replace("{problemName}", problemName);
//		retVal = retVal.replace("{ProblemName}", problemName);
//		retVal = retVal.replace("{problemname}", problemName.toLowerCase());
//		return retVal;
//		
//	}
    public String getModulePrefix(String aModule) {
    	String retVal =  configuration.getString(aModule + ".problems.prefix")	;

		if (retVal == null)
			retVal = configuration.getString("default.problems.prefix", "Assignment");
		return retVal;
	}
    
//    public String getCurrentModule() {
//    	List<String> modules = getModules();
//    	return  dynamicConfiguration.getString("currentModule", modules.get(0));
//    	
//    }

//	public String getProblemsAndCurrentProblem(String aModule, String downloadPath, List<String> problems) {
//		problems.clear();
////		List<String> problems = new ArrayList();
//		String currentModulePrefix =getModulePrefix(aModule);
//		problems.clear();
//		if (downloadPath != null) {
//			File folder = new File(downloadPath);
//			if (!folder.exists()) {
//				Tracer.error("No folder found for:" + downloadPath);				
//			} else {
//				File gradesFile = new File(downloadPath + "/grades.csv"); // is this a sakai assignment folder
//				if (gradesFile.exists()) 
//					folder = folder.getParentFile();
//				File[] children = folder.listFiles();
//				for (File child:children) {
//					if (child.getName().startsWith(currentModulePrefix)) {
//						problems.add(child.getName());
//					}
//				}
//			}
//		}
//		if (problems.size() > 0)
//			return problems.get(problems.size() - 1);
//		else
//			return null;
////		return problems;
//	}
	
	
	
	
//	public void setProblems(String aModule, String aProblemDirectory, List<String> aProblems) {
//		
//		
//	}
//	public String getStartingOnyen(String aModule, String aProblem) {
//		return null;
//	}
//	
//	public void setStartingOnyen(String aModule, String aProblem, String aStartOnyen) {
//		;
//	}
//	
//	public String getEndingOnyen(String aModule, String aProblem) {
//		return null;
//	}
//	
//	public void setEndingOnyen(String aModule, String aProblem, String anEndOnyen) {
//		;
//	}
//	
//	public NavigationKind getNavigationKind(String aModule, String aProblem) {
//		return null;
//	}
//	
//	public void setNavigationKind(String aModule, String aProblem, NavigationKind aNavigationKind) {
//		;
//	}
//	
//	public Boolean getAnimateGrades(String aModule, String aProblem) {
//		return null;
//	}
//	
//	public void setAnimateGrades(String aModule, String aProblem, boolean newVal) {
//		;
//	}
//	
//	public Integer getAnimationPauseTime(String aModule, String aProblem) {
//		return null;
//	}
//	
//	public NavigationFilter getAnimatePauseTime(String aModule, String aProblem) {
//		return null;
//	}
//	
//	public Object getFilterOption(String aModule, String aProblem) {
//		return null;
//	}
//
//	public void setFilterOption(String aModule, String aProblem, Object newVal ) {
//		;
//	}


}
]]></snapshot>
  </Command>
  <Command __id="8717" _type="FileOpenCommand" date="Sun Aug 25 09:28:06 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="164009485">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <Command __id="8722" _type="FileOpenCommand" date="Sun Aug 25 09:28:31 EDT 2019" docASTNodeCount="3023" docActiveCodeLength="23744" docExpressionCount="1687" docLength="40229" projectName="GraderBasics" timestamp="164034267">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <DocumentChange __id="8730" _type="Replace" date="Sun Aug 25 09:29:17 EDT 2019" docASTNodeCount="3025" docActiveCodeLength="23739" docExpressionCount="1688" docLength="40224" endLine="939" insertionLength="1" int_docASTNodeCount="3023" int_docActiveCodeLength="23738" int_docExpressionCount="1687" int_docLength="40223" length="6" offset="35526" startLine="939" timestamp="164080545">
    <deletedText><![CDATA[return]]></deletedText>
    <insertedText><![CDATA[B]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8732" _type="Insert" date="Sun Aug 25 09:29:18 EDT 2019" docASTNodeCount="3027" docActiveCodeLength="23754" docExpressionCount="1689" docLength="40239" length="15" offset="35527" repeat="15" timestamp="164081144" timestamp2="164084344">
    <text><![CDATA[oolean retVal =]]></text>
  </DocumentChange>
  <DocumentChange __id="8763" _type="Insert" date="Sun Aug 25 09:29:26 EDT 2019" docASTNodeCount="3030" docActiveCodeLength="23769" docExpressionCount="1690" docLength="40254" length="15" offset="35726" repeat="11" timestamp="164089804" timestamp2="164093153">
    <text><![CDATA[
	 if (retVal)]]></text>
  </DocumentChange>
  <DocumentChange __id="8785" _type="Insert" date="Sun Aug 25 09:30:18 EDT 2019" docASTNodeCount="3032" docActiveCodeLength="23777" docExpressionCount="1692" docLength="40262" length="8" offset="35740" repeat="8" timestamp="164142050" timestamp2="164144395">
    <text><![CDATA[ == null]]></text>
  </DocumentChange>
  <DocumentChange __id="8802" _type="Insert" date="Sun Aug 25 09:30:24 EDT 2019" docASTNodeCount="3032" docActiveCodeLength="23789" docExpressionCount="1692" docLength="40274" length="12" offset="35749" repeat="3" timestamp="164147110" timestamp2="164147873">
    <text><![CDATA[ {
		 
	 }]]></text>
  </DocumentChange>
  <Command __id="8808" _type="FileOpenCommand" date="Sun Aug 25 09:30:43 EDT 2019" docASTNodeCount="353" docActiveCodeLength="3032" docExpressionCount="213" docLength="3539" projectName="GraderBasics" timestamp="164166929">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.apache.commons.lang.NotImplementedException;

import grader.basics.project.CurrentProjectHolder;
import grader.basics.util.DirectoryUtils;
//import grader.config.AConfigurationManager;
import util.trace.Tracer;

public class ABasicConfigurationManager implements BasicConfigurationManager{
    public static final String PROJECT_CONFIG_FILE = "project.properties";
//    File projectDirectory;

	protected PropertiesConfiguration projectConfiguration;

	public static final String COURSE_FILE = "course.properties";
	public static final String CONFIG_DIR = "config";
    PropertiesConfiguration moduleConfiguration;


	public static final String COURSE_CONFIGURATION_FILE_NAME = "./" + CONFIG_DIR + "/" + COURSE_FILE;

	public ABasicConfigurationManager() {
		setCourseConfiguration(createCourseConfiguration());
	}
	@Override
	public void clear() {
		projectConfiguration = null;
	}

	@Override
	public PropertiesConfiguration getOrCreateProjectConfiguration() {
		if (projectConfiguration == null) {
//			createProjectConfiguration(CurrentProjectHolder.getOrCreateCurrentProject().getProjectFolder());
			createProjectConfiguration(CurrentProjectHolder.getProjectLocation());

		}
		return projectConfiguration;
	}
	@Override
	public PropertiesConfiguration getProjectConfiguration() {		
		return projectConfiguration;
	}
	public void setProjectConfiguration(PropertiesConfiguration aPropertiesConfiguration) {
		projectConfiguration = aPropertiesConfiguration;
	}
//	@Override
//	public void setProjectDirectory(File aProjectDirectory) {
//		projectDirectory = aProjectDirectory;
//	}
//	@Override
//	public File getProjectDirectory() {
//		return projectDirectory;
//	}
	protected PropertiesConfiguration createCourseConfiguration() {
	       
        try {
        	File aFile = new File(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
        	if (!aFile.exists()) {
        		Tracer.warning (ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME + " does not exist, using defaults");
        		return null;
        	}
			return new PropertiesConfiguration(ABasicConfigurationManager.COURSE_CONFIGURATION_FILE_NAME);
		} catch (ConfigurationException e) {
			e.printStackTrace();
			return null;
		}
        
        // Andrew might need to add stuff like in the method below

}
	@Override
    public PropertiesConfiguration getCourseConfiguration() {
        return moduleConfiguration;
    }
    @Override
    public void setCourseConfiguration(PropertiesConfiguration newVal) {
        this.moduleConfiguration = newVal;
    }
	@Override
	public void createProjectConfiguration (File aProjectDirectory) {	
		File[] aFiles = aProjectDirectory.listFiles();
		File aConfigFile = null;
		for (File aFile: aFiles) {
			if (aFile.getName().toLowerCase().equals(PROJECT_CONFIG_FILE)) {
				aConfigFile = aFile;
				break;
			}
		}
		if (aConfigFile != null) {
			try {
				projectConfiguration = new PropertiesConfiguration(aConfigFile);
			} catch (ConfigurationException e) {
				e.printStackTrace();
			}
		} else {
			System.err.println("Did not find file " + PROJECT_CONFIG_FILE + " in " + aProjectDirectory.getAbsolutePath());
		}
//		String aConfigFileFullName = aProjectDirectory.getAbsolutePath() + "/" +
	}


}
]]></snapshot>
  </Command>
  <Command __id="8810" _type="FileOpenCommand" date="Sun Aug 25 09:30:54 EDT 2019" docASTNodeCount="3032" docActiveCodeLength="23789" docExpressionCount="1692" docLength="40274" projectName="GraderBasics" timestamp="164177874">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.configuration.PropertiesConfiguration;

import grader.basics.BasicLanguageDependencyManager;
import grader.basics.project.Project;
import grader.basics.settings.BasicGradingEnvironment;
import util.trace.Tracer;
/**
 * 
 *This serves two purposes.
 *It defines defaults for configurable properties.
 *It also reads project-based properties to be used in localchecks on student
 *computer.
 *Ultimate authority over properties in localchecks mode is ABasicExecution
 *
 */
public class BasicStaticConfigurationUtils {
	public static final String PRIVACY = "privacy";
	public static final String EXECUTION_COMMAND = "execution";

	public static final String LANGUAGE = "language";
	
	public static final String ENTRY_POINT = "entryPoint";
	public static final String BUILD_FOLDER = "buildFolder";
	public static final String PERMISSIONS = "permissions";

	public static final String CLASS_PATH = "classPath";
	public static final String OE_PATH = "oePath";
	public static final String JUNIT_PATH = "junitPath";
	public static final String LOCAL_GRADER_PATH = "localGraderPath";
	public static final String OE_AND_CLASS_PATH = "oeAndClassPath";
	public static final String CLASS_PATH_SEPARATOR = ":";

	public static final String PROCESS_TEAMS = "processTeams";

	public static final String ENTRY_TAG = "entryTag";
	public static final String ENTRY_TAGS = "entryTags";
	public static final String RESOURCE_RELEASE_TIME = "sleepTime";
	public static final String ARGS = "args";
	public static final String START_TAGS = "startTags";
	public static final String TERMINATING = "terminating";
	public static final String GENERATE_TRACE_FILES = "trace";

//	public static final String JAVA = "Java";

	public static final String CLASS_PATH_VAR = toVariable(CLASS_PATH);
	public static final String CLASS_PATH_SEPARATOR_VAR = toVariable(CLASS_PATH_SEPARATOR);
	public static final String OE_PATH_VAR = toVariable(OE_PATH);
	public static final String LOCAL_GRADER_PATH_VAR = toVariable(LOCAL_GRADER_PATH);

	public static final String JUNIT_PATH_VAR = toVariable(JUNIT_PATH);
	public static final String OE_AND_CLASS_PATH_VAR = toVariable(OE_AND_CLASS_PATH );
	public static final String PERMISSIONS_VAR = toVariable(PERMISSIONS);
	public static final String BUILD_FOLDER_VAR = toVariable(BUILD_FOLDER);
	public static final String IMPLICIT_REQUIRMENTS_ROOT = "implicitRequirementsRoot";
	public static final String DEFAULT_IMPLICIT_REQUIRMENTS_ROOT = "gradingTools";
	public static final String USE_EXECEUTOR = "useExecutor";
	public static final boolean DEFAULT_USE_EXECUTOR = false;
	public static final String EXECUTOR = "executor";
	// this makes no sense, but it is consistent with config file
	public static final String DEFAULT_EXECUTOR = "D:/dewan_backup/Java/Grader/executor";
	public static final String C_OBJ = "language.C.obj";
	public static final String DEFAULT_C_OBJ = "o";
	public static final String MODULES = "modules";
	public static final String DEFAULT_MODULE = "Comp101";
	public static final String FORK_MAIN = "forkMain";
	public static final Boolean DEFAULT_FORK_MAIN = true;
	public static final String GRADABLE_PROJECT_LOCATION = "gradableProjectLocation";
	public static final String SOURCE_LOCATION = "sourceLocation";
	public static final String BINARY_LOCATION = "binaryLocation";
	public static final String OBJECT_LOCATION = "objectLocation";
	public static final String OUTPUT_WAIT_TIME = "outputWaitTime";
	public static final String TEAM_OUTPUT_WAIT_TIME = "teamOutputWaitTime";
	public static final String WAIT_FOR_RESORT = "waitForResort";
	public static final String RESORT_TIME = "resortTime";
	public static final String PROCESS_TIMEOUT = "processTimeout";
	public static final String METHOD_TIMEOUT = "methodTimeout";
	public static final String CONSTRUCTOR_TIMEOUT = "constructorTimeout";
	public static final String USE_METHOD_CONSTRUCTOR_TIMEOUT = "useMethodConstructorTimeout";
	public static final String USE_PROCESS_TIMEOUT = "useProcessTimeout";
	public static final String WAIT_FOR_METHOD_CONSTRUCTOR_AND_PROCESSES = "waitFotMethodConstructorAndProcesses";
	public static final String USE_PROJECT_CONFIGURATION = "useProjectConfiguration";
	public static final boolean DEFAULT_USE_PROJECT_CONFIGURATION = false;






//	private static  List<String> basicCommand;
//	private static Map<String, List<String>> processToBasicCommand = new HashMap();
	private static String duplicatedClassPathSeparator;
	private static List<String> graderProcessTeams;

	private static boolean useProjectConfiguration;
	protected static String module;
	
	protected static String problem;
	protected static String test;
	protected static String testSuite;
	protected static List<String> emptyList = new ArrayList();


//	Comp533s18.execution = java, -cp, .{:}..{:}{classPath}{:}{oePath}{:}{junitPath}, {entryTags}, {args}


	//	public static final String[] DEFAULT_JAVA_BASIC_COMMAND_ARRAY = {
//			"java", "-cp", ".{:}..{:}{classPath}{:}{:}{junitPath}{:}{localGraderPath}", "{entryTags}", "{args}"
//	};
	public static final String[] DEFAULT_JAVA_BASIC_COMMAND_ARRAY = {
			"java", "-cp", ".{:}..{:}{classPath}{:}{:}{junitPath}{:}{localGraderPath}", "{entryPoint}", "{args}"
	};
	public static final String[] DEFAULT_OE_BASIC_COMMAND_ARRAY = {
			"java", "-cp", ".{:}..{:}{classPath}{:}{oePath}{:}{junitPath}{:}{localGraderPath}", "{entryTags}", "{args}"
	};

	public static final List<String> DEFAULT_JAVA_BASIC_COMMAND =
			Arrays.asList(DEFAULT_JAVA_BASIC_COMMAND_ARRAY);
	public static final List<String> DEFAULT_OE_BASIC_COMMAND =
			Arrays.asList(DEFAULT_OE_BASIC_COMMAND_ARRAY);
	public static final int DEFAULT_RESOURCE_RELEASE_TIME = 2000;
	public static final int DEFAULT_CONSTRUCTOR_TIME_OUT = 2000;// in
	// milliseconds
public static final int DEFAULT_METHOD_TIME_OUT = 2000; // in milliseconds
public static final int DEFAULT_PROCESS_TIME_OUT = 4; // in seconds
public static final  String CHECK_ALL_SPECIFIED_TAGS = "checkAllSpecifiedTags";
public static final  boolean DEFAULT_CHECK_ALL_SPECIFIED_TAGS = false;


	
	public static String toVariable(String aVariableName) {
		return "{" + aVariableName + "}";
	}
	public static void setBasicCommandToDefaultEntryPointCommand() {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderBasicCommand(DEFAULT_JAVA_BASIC_COMMAND);
//		basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
	}
	public static void setBasicCommandToDefaultEntryTagCommand() {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderBasicCommand(DEFAULT_OE_BASIC_COMMAND);
//		basicCommand =  DEFAULT_OE_BASIC_COMMAND;
	}
	public static List<String> getBasicCommand() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		if (basicCommand == null) {
//			basicCommand = DEFAULT_OE_BASIC_COMMAND;
//		}
//////		return getInheritedListModuleProblemProperty(EXECUTION_COMMAND);
//		return basicCommand;
	}
	public static boolean hasClassPath() {
//		getBasicCommand();
		return hasClassPath(getBasicCommand());
//		if (basicCommand == null) {
//			return false;
//		}
//		for (String aCommand:basicCommand) {
//			if (aCommand.contains(CLASS_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
//				return true;
//			}
//		}
//		return false;	
	}
	public static boolean hasClassPath(List<String> basicCommand) {
//		getBasicCommand();
		if (basicCommand == null) {
			return false;
		}
		for (String aCommand:basicCommand) {
			if (aCommand.contains(CLASS_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
				return true;
			}
		}
		return false;	
	}
	
	public static boolean hasOEClassPath() {
		return hasOEClassPath(getBasicCommand());
//		getBasicCommand();
//		if (basicCommand == null) {
//			return false;
//		}
//		for (String aCommand:basicCommand) {
//			if (aCommand.contains(OE_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
//				return true;
//			}
//		}
//		return false;	
	}
	public static boolean hasOEClassPath(List<String> basicCommand) {
//		getBasicCommand();
		if (basicCommand == null) {
			return false;
		}
		for (String aCommand:basicCommand) {
			if (aCommand.contains(OE_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
				return true;
			}
		}
		return false;	
	}
	
	public static boolean hasOEOrClassPath() {
		return hasClassPath(getBasicCommand()) || hasOEClassPath(getBasicCommand());
	}
	public static boolean hasOEOrClassPath(List<String> basicCommand) {
		return hasClassPath(basicCommand) || hasOEClassPath(basicCommand);
	}
	protected static String[] emptyEntryPoints = {};
	protected static String[] potentialMainEntryPoints;
//	public static String[] getPotentialMainEntryPointNames() {
//		String retVal = getInheritedStringModuleProblemProperty(ENTRY_POINT, null);
//		if (retVal != null) {
//			GraderSettingsManager manager = GraderSettingsManagerSelector.getGraderSettingsManager();
//			retVal = manager.replaceModuleProblemVars(retVal);
//			return new String[]{retVal.replaceAll(" ", "")};
//		}
//		return emptyEntryPoints;
//	}
	public static String[] getPotentialMainEntryPointNames() {
		return potentialMainEntryPoints;
//		if (potentialMainEntryPoints == null) {
//		String retVal = getInheritedStringModuleProblemProperty(ENTRY_POINT, null);
//		if (retVal != null) {
//			GraderSettingsManager manager = GraderSettingsManagerSelector.getGraderSettingsManager();
//			retVal = manager.replaceModuleProblemVars(retVal);
//			potentialMainEntryPoints = new String[]{retVal.replaceAll(" ", "")};
//		} else {
//			potentialMainEntryPoints = emptyEntryPoints;
//		}
//		}
//		return potentialMainEntryPoints;
	}
	
	public static void setPotentialMainEntryPointNames(String[] aNames) {
		potentialMainEntryPoints = aNames;
	}
	// we really do not need this method, for backwards compatibility
	public static List<String> getBasicCommand(String aProcessName) {	
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand(aProcessName);
//		List<String> retVal = processToBasicCommand.get(aProcessName);
//		if (retVal == null) {
////			retVal = getBasicCommand();
//			retVal = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		}
//		
//		return retVal;
		
	}
	public static void setBasicCommand(String aProcessName, List<String> aCommand) {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderBasicCommand(aProcessName, aCommand);
//		processToBasicCommand.put(aProcessName, aCommand);
	
	}
	public static boolean hasEntryPoint(List<String> aCommand) {
		return hasSubString(aCommand, ENTRY_POINT);
	}

	public static boolean hasSubString(List<String> aCommand, String aSubString) {
		for (String aCommmandComponent : aCommand) {
			if (aCommmandComponent.contains(aSubString)) {
				return true;
			}
		}
		return false;
	}

	public static boolean hasEntryTag(List<String> aProcessCommand) {
		return hasSubString(aProcessCommand, ENTRY_TAG);
	}

	public static boolean hasEntryTags(List<String> aProcessCommand) {
		return hasSubString(aProcessCommand, ENTRY_TAGS);
	}

	public static boolean haArgs(String aProcessCommand) {
		return aProcessCommand.contains(ARGS);
	}
	
//	public static final String FILE_SEPARATOR = System.getProperty("file.separator");
	public static final String FILE_SEPARATOR = "/";


	public static String quotePath(String path) {
		if (!path.contains(" ")) return path;
	    boolean startSlash = path.startsWith("\\") || path.startsWith("/");
	    boolean endSlash = path.endsWith("\\") || path.endsWith("/");
	    String[] split = path.split("[\\\\/]+");

	    StringBuilder quotPath = new StringBuilder(path.length());

	    if (startSlash) {
	        quotPath.append(FILE_SEPARATOR);
	    }
	    
	    for(int i = 0; i < split.length; i ++) {
	    	String s = split[i];
	        if (s.contains(" ")) {
//	            s = "\"" + s + "\"";
	            s = "\\\"" + s + "\\\"";

	        }
	        quotPath.append(s);
	        if (i+1 < split.length) {
	            quotPath.append(FILE_SEPARATOR);
	        }
	    }
	    
	    if (endSlash) {
	        quotPath.append(FILE_SEPARATOR);
	    }
	    
	    return quotPath.toString();
	}
	
	public static int getClassPathFlagIndex(List<String> aBasicCommand) {
		int aCpIndex = aBasicCommand.indexOf("-cp");
		if (aCpIndex < 0) 
			aCpIndex = aBasicCommand.indexOf("-classpath");
		return aCpIndex;
	}
	public static String getExecutionCommandRawClassPath() {
		return getExecutionCommandRawClassPath(getBasicCommand());
//		List<String> aBasicCommand = getBasicCommand();
//		int aCpIndex = getClassPathFlagIndex(aBasicCommand);
//		if (aCpIndex < 0)
//			return null;
//		if (aCpIndex + 1 >= aBasicCommand.size())
//			return null;
//		return getReplacedRawClassPath(aBasicCommand.get(aCpIndex + 1));
		
	}
	public static String getExecutionCommandRawClassPath(List<String> aBasicCommand) {
//		List<String> aBasicCommand = getBasicCommand();
		int aCpIndex = getClassPathFlagIndex(aBasicCommand);
		if (aCpIndex < 0)
			return null;
		if (aCpIndex + 1 >= aBasicCommand.size())
			return null;
		return getReplacedRawClassPath(aBasicCommand.get(aCpIndex + 1));
		
	}
	
	public static String getReplacedRawClassPath (String command) {
		// do we really need all of these ifs, more efficient without them? - debugging will be easier
					// all of these will be in the same command
					if (command.contains(CLASS_PATH_VAR)) {

						command = command.replace(CLASS_PATH_VAR,
								BasicGradingEnvironment.get().getClassPath());
					}

					if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
						command = command.replace(CLASS_PATH_SEPARATOR_VAR,
								BasicGradingEnvironment.get().getClassPathSeparator());
					}
					 
					if (command.contains(LOCAL_GRADER_PATH_VAR)) { // the config property does not have this, I suppose it is to allow student code to invoke api calls in grader

						command = command.replace(LOCAL_GRADER_PATH_VAR,
						// BasicGradingEnvironment.get().getClasspath());
								BasicGradingEnvironment.get().getLocalGraderClassPath());

					} 
					if (command.contains(OE_PATH_VAR)) {
						if (command.toLowerCase().contains("local")) { // we already have oeall
							command = command.replace(OE_PATH_VAR,
									// BasicGradingEnvironment.get().getClasspath());
									"");
						} else {
						command = command.replace(OE_PATH_VAR,
						// BasicGradingEnvironment.get().getClasspath());
								BasicGradingEnvironment.get().getOEClassPath());
						}

					}

					if (command.contains(JUNIT_PATH_VAR)) {
						command = command.replace(JUNIT_PATH_VAR,
								BasicGradingEnvironment.get().getJUnitClassPath());
						// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
						// command = command.replace(OE_AND_CLASS_PATH_VAR,
						// BasicGradingEnvironment.get().getClassPath());
					} 
					String aClassPathSeparator = BasicGradingEnvironment.get().getClassPathSeparator();
					if (duplicatedClassPathSeparator == null) {
						//just avoding new String creation
						duplicatedClassPathSeparator = aClassPathSeparator + aClassPathSeparator;
					}
					// certain libraries may not exist, specially in the server, see what happens without them
					command = command.replaceAll(duplicatedClassPathSeparator, aClassPathSeparator);
					return command;
					// javac wants no quotes!
//					String anOSPath = BasicGradingEnvironment.get().toOSClassPath(command);
//					return anOSPath;
	}
	public static void replaceClassPathVars (List<String> basicCommand) {
		int aCpIndex = getClassPathFlagIndex(basicCommand);
		if (aCpIndex < 0)
			return ;
		
		if (aCpIndex + 1 >= basicCommand.size()) {
			Tracer.warning("Nothing follows classpath flag");
			return ;
		}
		String aReplacement = getReplacedRawClassPath(basicCommand.get(aCpIndex + 1));
		String anOSPath = BasicGradingEnvironment.get().toOSClassPath(aReplacement);
		basicCommand.set(aCpIndex + 1, anOSPath);

		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			
////			// do we really need all of these ifs, more efficient without them? - debugging will be easier
////			// all of these will be in the same command
////			if (command.contains(CLASS_PATH_VAR)) {
////
////				command = command.replace(CLASS_PATH_VAR,
////						BasicGradingEnvironment.get().getClassPath());
////			}
////
////			if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
////				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
////						BasicGradingEnvironment.get().getClassPathSeparator());
////			}
////			if (command.contains(OE_PATH_VAR)) {
////
////				command = command.replace(OE_PATH_VAR,
////				// BasicGradingEnvironment.get().getClasspath());
////						BasicGradingEnvironment.get().getOEClassPath());
////
////			} 
////			if (command.contains(JUNIT_PATH_VAR)) {
////				command = command.replace(JUNIT_PATH_VAR,
////						BasicGradingEnvironment.get().getJUnitClassPath());
////				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
////				// command = command.replace(OE_AND_CLASS_PATH_VAR,
////				// BasicGradingEnvironment.get().getClassPath());
////			} 
//			command = getReplacedClassPath(command);
//			basicCommand.set(aCommandIndex, command);
//		}
	}
	
//	public static void replacePermissionVariables(List<String> basicCommand, Project aProject) {
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath);
//				basicCommand.set(aCommandIndex, command);
//
//			}
//		}
//	}
	
	public static void replaceEntryPoint(List<String> basicCommand,  String anEntryPoint,
			String anEntryTagTarget) {
		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {

			String command = basicCommand.get(aCommandIndex);
			if (anEntryPoint != null) {
				command = command
						.replace(toVariable(ENTRY_POINT), anEntryPoint);
				
			}
			if (anEntryTagTarget != null) {
				command = command.replace(toVariable(ENTRY_TAGS),
						anEntryTagTarget);
				command = command.replace(toVariable(ENTRY_TAG),
						anEntryTagTarget); // will match tags also

			}
			// check if entryTagTarget is empty and replace it with entry point
			basicCommand.set(aCommandIndex, command);
		}
	}
	public static void replaceBuildFolder(List<String> basicCommand,  File aBuildFolder) {
		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {

			String command = basicCommand.get(aCommandIndex);
			// we should always have a build folder I suppose
			// this is meant for C like programs
			if (command.contains(BUILD_FOLDER_VAR)) {
			command = command.replace(BUILD_FOLDER_VAR,
					aBuildFolder.getAbsolutePath());
			basicCommand.set(aCommandIndex, command);

			}
		}
	}
	public static void replaceArgs(List<String> basicCommand,  String[] anArgs) {
		int argsIndex = basicCommand.indexOf(toVariable(ARGS));
		if (argsIndex >= 0) {
			basicCommand.remove(argsIndex);
			if (anArgs != null) {
			for (int i = 0; i < anArgs.length; i++) {
				basicCommand.add(argsIndex + i, anArgs[i]);
			}
			}

		}
	}
//	public static String[] getExecutionCommand(Project aProject,
//			String aProcessName, File aBuildFolder, String anEntryPoint,
//			String anEntryTagTarget, String[] anArgs) {
//
//		List<String> basicCommand = null;
//		if (aProcessName == null || aProcessName.isEmpty()) {
//		    if (anEntryPoint != null) {
//		    	basicCommand = getBasicCommand();
////		    	basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
//
//		    } else {
//			basicCommand = getBasicCommand();
//		    }
//		} else {
//		
//			basicCommand = getBasicCommand(aProcessName);
//
//		}
//		return getExecutionCommand(basicCommand, aProject, aProcessName, aBuildFolder, anEntryPoint, anEntryTagTarget, anArgs);
//////		List<String> retVal = new ArrayList(basicCommand.size());
////		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
////		retVal.addAll(basicCommand);
////		replaceClassPathVars(retVal);
//////		replacePermissionVariables(retVal, aProject);
////		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
////		replaceBuildFolder(retVal, aBuildFolder);
////		replaceArgs(retVal, anArgs);
////		return retVal.toArray(new String[0]);
//
//
////		
////		
////		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
////
////			String command = basicCommand.get(aCommandIndex);
////			if (command.contains(CLASS_PATH_VAR)) {
////
////				command = command.replace(CLASS_PATH_VAR,
////						BasicGradingEnvironment.get().getClassPath());
////
////			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
////				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
////						BasicGradingEnvironment.get().getClassPathSeparator());
////			} else if (command.contains(OE_PATH_VAR)) {
////
////				command = command.replace(OE_PATH_VAR,
////				// BasicGradingEnvironment.get().getClasspath());
////						BasicGradingEnvironment.get().getOEClassPath());
////
////			} else if (command.contains(JUNIT_PATH_VAR)) {
////				command = command.replace(JUNIT_PATH_VAR,
////						BasicGradingEnvironment.get().getJUnitClassPath());
////				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
////				// command = command.replace(OE_AND_CLASS_PATH_VAR,
////				// BasicGradingEnvironment.get().getClassPath());
////			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
////
////				String aPolicyFilePath = JavaProjectToPermissionFile
////						.getPermissionFile(aProject).getAbsolutePath();
////				try {
////					aPolicyFilePath = JavaProjectToPermissionFile
////							.getPermissionFile(aProject).getCanonicalPath();
////				} catch (IOException e1) {
////					e1.printStackTrace();
////				}
////				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
////
////				aPolicyFilePath = quotePath(aPolicyFilePath);
////
////				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
////
////				);
////			}
////
////			if (anEntryPoint != null) {
////				command = command
////						.replace(toVariable(ENTRY_POINT), anEntryPoint);
////			}
////			if (anEntryTagTarget != null) {
////				command = command.replace(toVariable(ENTRY_TAGS),
////						anEntryTagTarget);
////				command = command.replace(toVariable(ENTRY_TAG),
////						anEntryTagTarget); // will match tags also
////
////			}
////
////			command = command.replace(toVariable(BUILD_FOLDER),
////					aBuildFolder.getAbsolutePath());
////
////			retVal.add(command);
////		}
////		int argsIndex = retVal.indexOf(toVariable(ARGS));
////		if (argsIndex >= 0) {
////			retVal.remove(argsIndex);
////			for (int i = 0; i < anArgs.length; i++) {
////				retVal.add(argsIndex + i, anArgs[i]);
////			}
////
////		}
////		return retVal.toArray(new String[0]);
//
//	}
	public static String[] getExecutionCommand(Project aProject,
			String aProcessName, File aBuildFolder, String anEntryPoint,
			String anEntryTagTarget, String[] anArgs) {

		List<String> basicCommand = null;
		if (aProcessName == null || aProcessName.isEmpty()) {
			basicCommand = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		    if (anEntryPoint != null) {
//		    	basicCommand = getBasicCommand();
////		    	basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
//
//		    } else {
//			basicCommand = getBasicCommand();
//		    }
		} else {
		
			basicCommand = getBasicCommand(aProcessName);

		}
		return getExecutionCommand(basicCommand, aProject, aProcessName, aBuildFolder, anEntryPoint, anEntryTagTarget, anArgs);
////		List<String> retVal = new ArrayList(basicCommand.size());
//		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
//		retVal.addAll(basicCommand);
//		replaceClassPathVars(retVal);
////		replacePermissionVariables(retVal, aProject);
//		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
//		replaceBuildFolder(retVal, aBuildFolder);
//		replaceArgs(retVal, anArgs);
//		return retVal.toArray(new String[0]);


//		
//		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (command.contains(CLASS_PATH_VAR)) {
//
//				command = command.replace(CLASS_PATH_VAR,
//						BasicGradingEnvironment.get().getClassPath());
//
//			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
//				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
//						BasicGradingEnvironment.get().getClassPathSeparator());
//			} else if (command.contains(OE_PATH_VAR)) {
//
//				command = command.replace(OE_PATH_VAR,
//				// BasicGradingEnvironment.get().getClasspath());
//						BasicGradingEnvironment.get().getOEClassPath());
//
//			} else if (command.contains(JUNIT_PATH_VAR)) {
//				command = command.replace(JUNIT_PATH_VAR,
//						BasicGradingEnvironment.get().getJUnitClassPath());
//				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
//				// command = command.replace(OE_AND_CLASS_PATH_VAR,
//				// BasicGradingEnvironment.get().getClassPath());
//			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
//
//				);
//			}
//
//			if (anEntryPoint != null) {
//				command = command
//						.replace(toVariable(ENTRY_POINT), anEntryPoint);
//			}
//			if (anEntryTagTarget != null) {
//				command = command.replace(toVariable(ENTRY_TAGS),
//						anEntryTagTarget);
//				command = command.replace(toVariable(ENTRY_TAG),
//						anEntryTagTarget); // will match tags also
//
//			}
//
//			command = command.replace(toVariable(BUILD_FOLDER),
//					aBuildFolder.getAbsolutePath());
//
//			retVal.add(command);
//		}
//		int argsIndex = retVal.indexOf(toVariable(ARGS));
//		if (argsIndex >= 0) {
//			retVal.remove(argsIndex);
//			for (int i = 0; i < anArgs.length; i++) {
//				retVal.add(argsIndex + i, anArgs[i]);
//			}
//
//		}
//		return retVal.toArray(new String[0]);

	}
	public static String[] getExecutionCommand(List<String> basicCommand, Project aProject,
			String aProcessName, File aBuildFolder, String anEntryPoint,
			String anEntryTagTarget, String[] anArgs) {

//		List<String> basicCommand = null;
//		if (aProcessName == null || aProcessName.isEmpty()) {
//		
//			basicCommand = getBasicCommand();
//		} else {
//		
//			basicCommand = getBasicCommand(aProcessName);
//
//		}
//		List<String> retVal = new ArrayList(basicCommand.size());
		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
		retVal.addAll(basicCommand);
		replaceClassPathVars(retVal);
//		replacePermissionVariables(retVal, aProject);
		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
		replaceBuildFolder(retVal, aBuildFolder);
		replaceArgs(retVal, anArgs);
		return retVal.toArray(new String[0]);


//		
//		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (command.contains(CLASS_PATH_VAR)) {
//
//				command = command.replace(CLASS_PATH_VAR,
//						BasicGradingEnvironment.get().getClassPath());
//
//			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
//				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
//						BasicGradingEnvironment.get().getClassPathSeparator());
//			} else if (command.contains(OE_PATH_VAR)) {
//
//				command = command.replace(OE_PATH_VAR,
//				// BasicGradingEnvironment.get().getClasspath());
//						BasicGradingEnvironment.get().getOEClassPath());
//
//			} else if (command.contains(JUNIT_PATH_VAR)) {
//				command = command.replace(JUNIT_PATH_VAR,
//						BasicGradingEnvironment.get().getJUnitClassPath());
//				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
//				// command = command.replace(OE_AND_CLASS_PATH_VAR,
//				// BasicGradingEnvironment.get().getClassPath());
//			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
//
//				);
//			}
//
//			if (anEntryPoint != null) {
//				command = command
//						.replace(toVariable(ENTRY_POINT), anEntryPoint);
//			}
//			if (anEntryTagTarget != null) {
//				command = command.replace(toVariable(ENTRY_TAGS),
//						anEntryTagTarget);
//				command = command.replace(toVariable(ENTRY_TAG),
//						anEntryTagTarget); // will match tags also
//
//			}
//
//			command = command.replace(toVariable(BUILD_FOLDER),
//					aBuildFolder.getAbsolutePath());
//
//			retVal.add(command);
//		}
//		int argsIndex = retVal.indexOf(toVariable(ARGS));
//		if (argsIndex >= 0) {
//			retVal.remove(argsIndex);
//			for (int i = 0; i < anArgs.length; i++) {
//				retVal.add(argsIndex + i, anArgs[i]);
//			}
//
//		}
//		return retVal.toArray(new String[0]);

	}
	public static List<String> getProcessTeams() {
		return graderProcessTeams;
	}
	public static void setProcessTeams(List<String> newVal) {
		 graderProcessTeams = newVal;;
	}
	public static boolean isTeamProcess() {
		return graderProcessTeams != null && graderProcessTeams.isEmpty();
	}
	public static boolean isUseProjectConfiguration() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().isUseProjectConfiguration();
//		return useProjectConfiguration;
	}
	public static void setUseProjectConfiguration(boolean newVal) {
//		BasicStaticConfigurationUtils.useProjectConfiguration = useProjectConfiguration;
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setUseProjectConfiguration(newVal);
	}
	public static Boolean getInheritedBooleanModuleProblemProperty(
			PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, Boolean defaultValue) {
		if (configuration == null) {
			return defaultValue;
		}
	
		Boolean retVal = configuration.getBoolean(module + "." + problem + "."
				+ property, null);
	
		if (retVal == null) {
			retVal = configuration.getBoolean(module + "." + property, null);
		}
		if (retVal == null) {
			retVal = configuration.getBoolean(DEFAULT + "." + property,
					defaultValue);
		}
	
		return retVal;
	
	}
	public static final String DEFAULT = "default";
	
	public static Integer getInheritedIntegerModuleProblemProperty(
			PropertiesConfiguration configuration, String module,
			String problem, String test, String property, Integer defaultValue) {
		if (configuration == null) {
			return defaultValue;
		}
	
		Integer retVal = configuration.getInteger(module + "." + problem + "."
				+ property, null);
	
		if (retVal == null) {
			retVal = configuration.getInteger(module + "." + property, null);
		}
		if (retVal == null) {
			retVal = configuration.getInteger(DEFAULT + "." + property,
					defaultValue);
		}
	
		return retVal;
	
	}
	
	public static String getConfigurationBasicDirectString (String property, String defaultValue) {
		
			if (!isUseProjectConfiguration()) {
				 // cannot use project configuration before location is known to create project
				return defaultValue;
			}
		 PropertiesConfiguration aConfiguration = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration();
		 if (aConfiguration == null) {
			 return defaultValue;
		 }
		 return aConfiguration.getString(property, defaultValue);
		
	}
	public static List getConfigurationBasicDirectList (String property, List  defaultValue) {
		
		if (property == BasicStaticConfigurationUtils.MODULES || // infinite recursion
			!isUseProjectConfiguration()) {
			 // cannot use project configuration before location is known to create project
			return defaultValue;
		}
	 PropertiesConfiguration aConfiguration = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration();
	 if (aConfiguration == null) {
		 return defaultValue;
	 }
	 List retVal = aConfiguration.getList(property);
	 if (retVal == null) {
		 return defaultValue;
	 }
	 return retVal;
	
}
	public static String getBasicInheritedStringModuleProblemProperty(
			String property, String defaultValue) {
		if (
			// cannot use project configuration before location is known to create project
			property == BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION || // can do == as we are using named constants
			!isUseProjectConfiguration() ) {
//			property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION){ 
			return defaultValue;
		}

	 return getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	}
	public static Boolean getBasicInheritedBooleanModuleProblemProperty(
			String property, Boolean defaultValue) {
		if (
			property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION || // avoiding recursion
			!isUseProjectConfiguration() ) {			  
			return defaultValue;
		}

	 Boolean retVal = getInheritedBooleanModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	 if (retVal == null) {
		 
	 }
	}
	public static Integer getBasicInheritedIntegerModuleProblemProperty(
			String property, Integer defaultValue) {
		if (!isUseProjectConfiguration()) {
			return defaultValue;
		}

	 return getInheritedIntegerModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	}
	public static List getBasicInheritedListModuleProblemProperty(
			String property, List defaultValue) {
		if (!isUseProjectConfiguration() ) { // can do == as we are using named constants
			return defaultValue;
		}

	 return getInheritedListModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	}
	public static String getInheritedStringModuleProblemProperty(
			PropertiesConfiguration configuration, String module, 
			String problem, String aTest, String property, String defaultValue) {
		if (configuration == null) {
			System.err.println("Null configuration, returning " + defaultValue + " for " + property);
			return defaultValue;
		}
		String retVal = configuration.getString(module + "." + problem + "." + aTest + "."
				+ property, null);
		if (retVal != null) {
			return retVal;
		}
		retVal = configuration.getString(module + "." + problem + "."
				+ property, null);
	
//		String retVal = configuration.getString(module + "." + problem + "."
//				+ property, null);
		if (retVal != null) {
			return retVal;
		}
			retVal = configuration.getString(module + "." + property, null);
		if (retVal != null) {
			return retVal;
		}
//		if (retVal == null) {
			retVal = configuration.getString(DEFAULT + "." + property,
					defaultValue);
//		}
	
		return retVal;
	
	}
	public static List getInheritedListModuleProblemProperty(
			PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, List<String> aDefaultValue) {
		if (configuration == null) {
			return aDefaultValue;
		}
		List retVal = configuration.getList(module + "." + problem + "." + aTest + "."
				+ property);
	
		if (retVal.isEmpty()) {
			retVal = configuration.getList(module + "." + problem + "."
					+ property);
		}
		
	
//		List retVal = configuration.getList(module + "." + problem + "."
//				+ property);
	
		if (retVal.isEmpty()) {
			retVal = configuration.getList(module + "." + property);
		}
		if (retVal.isEmpty()) {
			retVal = configuration.getList(DEFAULT + "." + property);
		}
		if (retVal.isEmpty()) {
			retVal = aDefaultValue;
		}
	
		return retVal;
	
	}
	public static String getModule() {
		return module;
	}
	public static void setTest(Class aTest) {
		test = aTest.getSimpleName();
	}
	public static void setModuleProblemAndSuite(Class aSuiteClass) {
		testSuite = aSuiteClass.getSimpleName();
		Package aPackage = aSuiteClass.getPackage();
		String aPackageName = aPackage.getName();
		String[] aPackageComponents = aPackageName.split("\\.");
		if (aPackageComponents.length < 3) {
			System.err.println(aPackageName + " has < 3 components, cannot set module and problem ");
		}
		String aRawModuleName = aPackageComponents[1];
		String aRawProblemName = aPackageComponents[2];
		module = firstCharacterUpperCase(aRawModuleName);
		problem = firstCharacterUpperCase(aRawProblemName);
		
	}
	public static String firstCharacterUpperCase(String aLowerCaseString) {
		return Character.toUpperCase (aLowerCaseString.charAt(0)) + aLowerCaseString.substring(1);
	}
	public static void setModule(String module) {
		BasicStaticConfigurationUtils.module = module;
	}
	public static String getProblem() {
		return problem;
	}
	public static void setProblem(String problem) {
		BasicStaticConfigurationUtils.problem = problem;
	}
	public static String getTest() {
		return test;
	}
	public static void settest(String newVal) {
		test = newVal;
	}
	
	
	public static String getLanguage() {
		if (!isUseProjectConfiguration())
//			return JAVA;
			return BasicLanguageDependencyManager.JAVA_LANGUAGE;

		return getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, LANGUAGE, BasicLanguageDependencyManager.JAVA_LANGUAGE);

	}
	public static String toCompoundProperty(String aParent, String aChild) {
		return aParent + "." + aChild;
	}
}
]]></snapshot>
  </Command>
  <DocumentChange __id="8812" _type="Insert" date="Sun Aug 25 09:31:00 EDT 2019" docASTNodeCount="3034" docActiveCodeLength="23794" docExpressionCount="1693" docLength="40279" length="5" offset="35756" repeat="5" timestamp="164183468" timestamp2="164183972">
    <text><![CDATA[retur]]></text>
  </DocumentChange>
  <Command __id="8729" _type="SelectTextCommand" caretOffset="35128" date="Sun Aug 25 09:28:57 EDT 2019" end="35128" start="35122" timestamp="164060976" />
  <Command __id="8731" _type="InsertStringCommand" date="Sun Aug 25 09:29:17 EDT 2019" repeat="16" timestamp="164080561" timestamp2="164084357">
    <data><![CDATA[Boolean retVal =]]></data>
  </Command>
  <Command __id="8762" _type="MoveCaretCommand" caretOffset="35322" date="Sun Aug 25 09:29:26 EDT 2019" docOffset="35726" timestamp="164089229" />
  <Command __id="8764" _type="InsertStringCommand" date="Sun Aug 25 09:29:26 EDT 2019" timestamp="164089819" timestamp2="164089819">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8766" _type="InsertStringCommand" date="Sun Aug 25 09:29:27 EDT 2019" repeat="10" timestamp="164091009" timestamp2="164093155">
    <data><![CDATA[if (retVal]]></data>
  </Command>
  <Command __id="8786" _type="InsertStringCommand" date="Sun Aug 25 09:30:18 EDT 2019" repeat="8" timestamp="164142052" timestamp2="164144398">
    <data><![CDATA[ == null]]></data>
  </Command>
  <Command __id="8801" _type="MoveCaretCommand" caretOffset="35345" date="Sun Aug 25 09:30:23 EDT 2019" docOffset="35749" timestamp="164146728" />
  <Command __id="8803" _type="InsertStringCommand" date="Sun Aug 25 09:30:24 EDT 2019" repeat="2" timestamp="164147114" timestamp2="164147554">
    <data><![CDATA[ {]]></data>
  </Command>
  <Command __id="8807" _type="InsertStringCommand" date="Sun Aug 25 09:30:24 EDT 2019" timestamp="164147878" timestamp2="164147878">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8809" _type="MoveCaretCommand" caretOffset="828" date="Sun Aug 25 09:30:43 EDT 2019" docOffset="828" timestamp="164167055" />
  <Command __id="8811" _type="MoveCaretCommand" caretOffset="35352" date="Sun Aug 25 09:30:54 EDT 2019" docOffset="35756" timestamp="164177993" />
  <Command __id="8813" _type="InsertStringCommand" date="Sun Aug 25 09:31:00 EDT 2019" repeat="5" timestamp="164183474" timestamp2="164183984">
    <data><![CDATA[retur]]></data>
  </Command>
  <Command __id="8823" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:31:01 EDT 2019" repeat="5" timestamp="164184494" timestamp2="164185125" />
  <Command __id="8833" _type="InsertStringCommand" date="Sun Aug 25 09:31:03 EDT 2019" repeat="6" timestamp="164186310" timestamp2="164187021">
    <data><![CDATA[proper]]></data>
  </Command>
  <Command __id="8845" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:31:04 EDT 2019" repeat="6" timestamp="164187568" timestamp2="164188319" />
  <Command __id="8857" _type="InsertStringCommand" date="Sun Aug 25 09:31:05 EDT 2019" repeat="13" timestamp="164188841" timestamp2="164191675">
    <data><![CDATA[PropertiesCon]]></data>
  </Command>
  <Command __id="8882" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:31:09 EDT 2019" start_end="START" timestamp="164192092" />
  <Command __id="8883" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sun Aug 25 09:31:09 EDT 2019" timestamp="164192230" />
  <Command __id="8884" _type="ShellCommand" date="Sun Aug 25 09:31:10 EDT 2019" timestamp="164193259" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8885" _type="ShellCommand" date="Sun Aug 25 09:31:10 EDT 2019" timestamp="164193529" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8886" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:31:10 EDT 2019" start_end="END" timestamp="164193551" />
  <Command __id="8888" _type="MoveCaretCommand" caretOffset="35375" date="Sun Aug 25 09:31:10 EDT 2019" docOffset="35779" timestamp="164193572" />
  <Command __id="8890" _type="InsertStringCommand" date="Sun Aug 25 09:31:11 EDT 2019" repeat="5" timestamp="164194260" timestamp2="164195817">
    <data><![CDATA[ aCou]]></data>
  </Command>
  <Command __id="8900" _type="InsertStringCommand" date="Sun Aug 25 09:31:21 EDT 2019" repeat="6" timestamp="164204703" timestamp2="164206325">
    <data><![CDATA[rseCon]]></data>
  </Command>
  <Command __id="8911" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:31:23 EDT 2019" start_end="START" timestamp="164206915" />
  <Command __id="8912" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sun Aug 25 09:31:23 EDT 2019" timestamp="164206987" />
  <Command __id="8913" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:31:35 EDT 2019" start_end="END" timestamp="164218399" />
  <Command __id="8914" _type="SelectTextCommand" caretOffset="35326" date="Sun Aug 25 09:31:39 EDT 2019" end="35391" start="35326" timestamp="164223015" />
  <Command __id="8916" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sun Aug 25 09:31:40 EDT 2019" timestamp="164223535" />
  <Command __id="8918" _type="InsertStringCommand" date="Sun Aug 25 09:31:41 EDT 2019" repeat="14" timestamp="164225004" timestamp2="164227601">
    <data><![CDATA[return retVal;]]></data>
  </Command>
  <Command __id="8945" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:31:44 EDT 2019" timestamp="164228066" />
  <Command __id="8946" _type="SelectTextCommand" caretOffset="34826" date="Sun Aug 25 09:32:10 EDT 2019" end="35344" start="34826" timestamp="164254049" />
  <Command __id="8947" _type="CopyCommand" date="Sun Aug 25 09:32:11 EDT 2019" timestamp="164254813" />
  <Command __id="8948" _type="MoveCaretCommand" caretOffset="35344" date="Sun Aug 25 09:32:13 EDT 2019" docOffset="35748" timestamp="164256186" />
  <Command __id="8950" _type="InsertStringCommand" date="Sun Aug 25 09:32:13 EDT 2019" timestamp="164256692" timestamp2="164256692">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8951" _type="MoveCaretCommand" caretOffset="34848" date="Sun Aug 25 09:32:20 EDT 2019" docOffset="35252" timestamp="164263486" />
  <Command __id="8952" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.search.references.in.workspace" date="Sun Aug 25 09:32:21 EDT 2019" timestamp="164264903" />
  <Command __id="8953" _type="MoveCaretCommand" caretOffset="35118" date="Sun Aug 25 09:32:37 EDT 2019" docOffset="35522" timestamp="164280578" />
  <Command __id="8955" _type="InsertStringCommand" date="Sun Aug 25 09:32:38 EDT 2019" timestamp="164281876" timestamp2="164281876">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="8957" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:32:39 EDT 2019" timestamp="164282887" />
  <Command __id="8959" _type="InsertStringCommand" date="Sun Aug 25 09:32:40 EDT 2019" repeat="11" timestamp="164283562" timestamp2="164287773">
    <data><![CDATA[ if (Grader]]></data>
  </Command>
  <Command __id="8980" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:32:45 EDT 2019" start_end="START" timestamp="164288477" />
  <Command __id="8981" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sun Aug 25 09:32:45 EDT 2019" timestamp="164288608" />
  <Command __id="8983" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:32:49 EDT 2019" start_end="END" timestamp="164292828" />
  <Command __id="8984" _type="SelectTextCommand" caretOffset="35131" date="Sun Aug 25 09:32:49 EDT 2019" end="35131" start="35124" timestamp="164293073" />
  <Command __id="8985" _type="SelectTextCommand" caretOffset="35134" date="Sun Aug 25 09:32:50 EDT 2019" end="35134" start="35118" timestamp="164293274" />
  <Command __id="8987" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:32:50 EDT 2019" timestamp="164293842" />
  <Command __id="8988" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:32:52 EDT 2019" timestamp="164295563" />
  <DocumentChange __id="8822" _type="Delete" date="Sun Aug 25 09:31:01 EDT 2019" docASTNodeCount="3032" docActiveCodeLength="23789" docExpressionCount="1692" docLength="40274" endLine="941" length="5" offset="35756" repeat="5" startLine="941" timestamp="164184483" timestamp2="164185123">
    <text><![CDATA[retur]]></text>
  </DocumentChange>
  <DocumentChange __id="8832" _type="Insert" date="Sun Aug 25 09:31:03 EDT 2019" docASTNodeCount="3034" docActiveCodeLength="23795" docExpressionCount="1693" docLength="40280" length="6" offset="35756" repeat="6" timestamp="164186303" timestamp2="164187014">
    <text><![CDATA[proper]]></text>
  </DocumentChange>
  <DocumentChange __id="8844" _type="Delete" date="Sun Aug 25 09:31:04 EDT 2019" docASTNodeCount="3032" docActiveCodeLength="23789" docExpressionCount="1692" docLength="40274" endLine="941" length="6" offset="35756" repeat="6" startLine="941" timestamp="164187563" timestamp2="164188313">
    <text><![CDATA[proper]]></text>
  </DocumentChange>
  <DocumentChange __id="8856" _type="Insert" date="Sun Aug 25 09:31:05 EDT 2019" docASTNodeCount="3034" docActiveCodeLength="23802" docExpressionCount="1693" docLength="40287" length="13" offset="35756" repeat="13" timestamp="164188831" timestamp2="164191667">
    <text><![CDATA[PropertiesCon]]></text>
  </DocumentChange>
  <DocumentChange __id="8887" _type="Replace" date="Sun Aug 25 09:31:10 EDT 2019" docASTNodeCount="3034" docActiveCodeLength="23812" docExpressionCount="1693" docLength="40297" endLine="941" insertionLength="23" int_docASTNodeCount="3032" int_docActiveCodeLength="23789" int_docExpressionCount="1692" int_docLength="40274" length="13" offset="35756" startLine="941" timestamp="164193557">
    <deletedText><![CDATA[PropertiesCon]]></deletedText>
    <insertedText><![CDATA[PropertiesConfiguration]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="8889" _type="Insert" date="Sun Aug 25 09:31:11 EDT 2019" docASTNodeCount="3037" docActiveCodeLength="23817" docExpressionCount="1694" docLength="40302" length="5" offset="35779" repeat="5" timestamp="164194254" timestamp2="164195810">
    <text><![CDATA[ aCou]]></text>
  </DocumentChange>
  <DocumentChange __id="8899" _type="Insert" date="Sun Aug 25 09:31:21 EDT 2019" docASTNodeCount="3037" docActiveCodeLength="23823" docExpressionCount="1694" docLength="40308" length="6" offset="35784" repeat="6" timestamp="164204700" timestamp2="164206316">
    <text><![CDATA[rseCon]]></text>
  </DocumentChange>
  <DocumentChange __id="8915" _type="Delete" date="Sun Aug 25 09:31:40 EDT 2019" docASTNodeCount="3027" docActiveCodeLength="23758" docExpressionCount="1689" docLength="40243" endLine="942" length="65" offset="35730" startLine="940" timestamp="164223523">
    <text><![CDATA[if (retVal == null) {
		 PropertiesConfiguration aCourseCon
	 }]]></text>
  </DocumentChange>
  <DocumentChange __id="8917" _type="Insert" date="Sun Aug 25 09:31:41 EDT 2019" docASTNodeCount="3029" docActiveCodeLength="23772" docExpressionCount="1690" docLength="40257" length="14" offset="35730" repeat="14" timestamp="164225001" timestamp2="164227590">
    <text><![CDATA[return retVal;]]></text>
  </DocumentChange>
  <DocumentChange __id="8949" _type="Insert" date="Sun Aug 25 09:32:13 EDT 2019" docASTNodeCount="3029" docActiveCodeLength="23775" docExpressionCount="1690" docLength="40260" length="3" offset="35748" timestamp="164256684">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="8954" _type="Insert" date="Sun Aug 25 09:32:38 EDT 2019" docASTNodeCount="3029" docActiveCodeLength="23777" docExpressionCount="1690" docLength="40262" length="2" offset="35522" timestamp="164281870">
    <text><![CDATA[		]]></text>
  </DocumentChange>
  <DocumentChange __id="8956" _type="Delete" date="Sun Aug 25 09:32:39 EDT 2019" docASTNodeCount="3029" docActiveCodeLength="23776" docExpressionCount="1690" docLength="40261" endLine="938" length="1" offset="35523" startLine="938" timestamp="164282881">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="8958" _type="Insert" date="Sun Aug 25 09:32:40 EDT 2019" docASTNodeCount="3033" docActiveCodeLength="23788" docExpressionCount="1694" docLength="40273" length="12" offset="35523" repeat="11" timestamp="164283554" timestamp2="164287769">
    <text><![CDATA[ if (Grader)]]></text>
  </DocumentChange>
  <DocumentChange __id="8982" _type="Insert" date="Sun Aug 25 09:32:46 EDT 2019" docASTNodeCount="3033" docActiveCodeLength="23789" docExpressionCount="1694" docLength="40274" length="1" offset="35534" timestamp="164289811">
    <text><![CDATA[R]]></text>
  </DocumentChange>
  <DocumentChange __id="8986" _type="Delete" date="Sun Aug 25 09:32:50 EDT 2019" docASTNodeCount="3029" docActiveCodeLength="23773" docExpressionCount="1690" docLength="40258" endLine="939" length="16" offset="35522" startLine="938" timestamp="164293835">
    <text><![CDATA[	 if (GraderR)
]]></text>
  </DocumentChange>
  <DocumentChange __id="8994" _type="Insert" date="Sun Aug 25 09:33:20 EDT 2019" docASTNodeCount="3029" docActiveCodeLength="23777" docExpressionCount="1690" docLength="40262" length="4" offset="35728" timestamp="164323929">
    <text><![CDATA[
	 ]]></text>
  </DocumentChange>
  <DocumentChange __id="8997" _type="Insert" date="Sun Aug 25 09:33:26 EDT 2019" docASTNodeCount="3031" docActiveCodeLength="23794" docExpressionCount="1691" docLength="40279" length="17" offset="35728" repeat="16" timestamp="164329139" timestamp2="164332597">
    <text><![CDATA[if (GradingModel)]]></text>
  </DocumentChange>
  <DocumentChange __id="9029" _type="Delete" date="Sun Aug 25 09:33:30 EDT 2019" docASTNodeCount="3031" docActiveCodeLength="23793" docExpressionCount="1691" docLength="40278" endLine="939" length="1" offset="35743" startLine="939" timestamp="164333442">
    <text><![CDATA[l]]></text>
  </DocumentChange>
  <DocumentChange __id="9031" _type="Insert" date="Sun Aug 25 09:33:34 EDT 2019" docASTNodeCount="3033" docActiveCodeLength="23794" docExpressionCount="1692" docLength="40279" length="1" offset="35743" timestamp="164337498">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="9037" _type="Insert" date="Sun Aug 25 09:33:37 EDT 2019" docASTNodeCount="3041" docActiveCodeLength="23839" docExpressionCount="1699" docLength="40324" length="45" offset="335" repeat="2" timestamp="164340530" timestamp2="164340534">
    <text><![CDATA[
import grader.basics.execution.GradingMode;]]></text>
  </DocumentChange>
  <DocumentChange __id="9039" _type="Insert" date="Sun Aug 25 09:33:37 EDT 2019" docASTNodeCount="3041" docActiveCodeLength="23853" docExpressionCount="1700" docLength="40338" length="14" offset="35789" timestamp="164340546">
    <text><![CDATA[getGraderRun()]]></text>
  </DocumentChange>
  <DocumentChange __id="9042" _type="Insert" date="Sun Aug 25 09:33:39 EDT 2019" docASTNodeCount="3042" docActiveCodeLength="23854" docExpressionCount="1701" docLength="40339" length="1" offset="35777" timestamp="164342975">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="9045" _type="Insert" date="Sun Aug 25 09:33:41 EDT 2019" docASTNodeCount="3043" docActiveCodeLength="23866" docExpressionCount="1701" docLength="40351" length="12" offset="35805" repeat="3" timestamp="164344490" timestamp2="164345149">
    <text><![CDATA[ {
		 
	 }]]></text>
  </DocumentChange>
  <DocumentChange __id="9051" _type="Insert" date="Sun Aug 25 09:33:45 EDT 2019" docASTNodeCount="3045" docActiveCodeLength="23872" docExpressionCount="1702" docLength="40357" length="6" offset="35812" repeat="6" timestamp="164348400" timestamp2="164348967">
    <text><![CDATA[proper]]></text>
  </DocumentChange>
  <Command __id="8989" _type="ShellCommand" date="Sun Aug 25 09:33:05 EDT 2019" timestamp="164308689" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="8990" _type="PredictionCommand" date="Sun Aug 25 09:33:05 EDT 2019" prediction_type="MakingProgress" timestamp="164308699" />
  <Command __id="8991" _type="ShellCommand" date="Sun Aug 25 09:33:13 EDT 2019" timestamp="164316094" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="8992" _type="EclipseCommand" commandID="org.eclipse.search.ui.openFileSearchPage" date="Sun Aug 25 09:33:13 EDT 2019" timestamp="164316171" />
  <Command __id="8993" _type="MoveCaretCommand" caretOffset="35324" date="Sun Aug 25 09:33:19 EDT 2019" docOffset="35728" timestamp="164323052" />
  <Command __id="8995" _type="InsertStringCommand" date="Sun Aug 25 09:33:20 EDT 2019" timestamp="164323935" timestamp2="164323935">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="8996" _type="MoveCaretCommand" caretOffset="35324" date="Sun Aug 25 09:33:25 EDT 2019" docOffset="35728" timestamp="164328452" />
  <Command __id="8998" _type="InsertStringCommand" date="Sun Aug 25 09:33:26 EDT 2019" repeat="16" timestamp="164329142" timestamp2="164332602">
    <data><![CDATA[if (GradingModel]]></data>
  </Command>
  <Command __id="9030" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:33:30 EDT 2019" timestamp="164333446" />
  <Command __id="9032" _type="InsertStringCommand" date="Sun Aug 25 09:33:34 EDT 2019" timestamp="164337501" timestamp2="164337501">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="9033" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Aug 25 09:33:34 EDT 2019" start_end="START" timestamp="164337503" />
  <Command __id="9034" _type="ShellCommand" date="Sun Aug 25 09:33:37 EDT 2019" timestamp="164340245" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9035" _type="ShellCommand" date="Sun Aug 25 09:33:37 EDT 2019" timestamp="164340501" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9036" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:33:37 EDT 2019" start_end="END" timestamp="164340525" />
  <Command __id="9040" _type="MoveCaretCommand" caretOffset="35354" date="Sun Aug 25 09:33:37 EDT 2019" docOffset="35803" timestamp="164340560" />
  <Command __id="9041" _type="MoveCaretCommand" caretOffset="35328" date="Sun Aug 25 09:33:39 EDT 2019" docOffset="35777" timestamp="164342308" />
  <Command __id="9043" _type="InsertStringCommand" date="Sun Aug 25 09:33:39 EDT 2019" timestamp="164342982" timestamp2="164342982">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="9044" _type="MoveCaretCommand" caretOffset="35356" date="Sun Aug 25 09:33:41 EDT 2019" docOffset="35805" timestamp="164344116" />
  <Command __id="9046" _type="InsertStringCommand" date="Sun Aug 25 09:33:41 EDT 2019" repeat="2" timestamp="164344500" timestamp2="164344858">
    <data><![CDATA[ {]]></data>
  </Command>
  <Command __id="9050" _type="InsertStringCommand" date="Sun Aug 25 09:33:42 EDT 2019" timestamp="164345154" timestamp2="164345154">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9052" _type="InsertStringCommand" date="Sun Aug 25 09:33:45 EDT 2019" repeat="6" timestamp="164348407" timestamp2="164348971">
    <data><![CDATA[proper]]></data>
  </Command>
  <Command __id="9064" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:33:46 EDT 2019" repeat="6" timestamp="164349417" timestamp2="164350270" />
  <Command __id="9076" _type="InsertStringCommand" date="Sun Aug 25 09:33:47 EDT 2019" repeat="12" timestamp="164350782" timestamp2="164354069">
    <data><![CDATA[PropertiesCo]]></data>
  </Command>
  <Command __id="9099" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:33:51 EDT 2019" start_end="START" timestamp="164354614" />
  <Command __id="9100" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sun Aug 25 09:33:51 EDT 2019" timestamp="164354702" />
  <Command __id="9101" _type="ShellCommand" date="Sun Aug 25 09:33:52 EDT 2019" timestamp="164355852" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9102" _type="ShellCommand" date="Sun Aug 25 09:33:52 EDT 2019" timestamp="164356036" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9103" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:33:52 EDT 2019" start_end="END" timestamp="164356058" />
  <Command __id="9105" _type="MoveCaretCommand" caretOffset="35386" date="Sun Aug 25 09:33:53 EDT 2019" docOffset="35835" timestamp="164356115" />
  <Command __id="9107" _type="InsertStringCommand" date="Sun Aug 25 09:33:53 EDT 2019" repeat="6" timestamp="164356702" timestamp2="164358420">
    <data><![CDATA[ aCour]]></data>
  </Command>
  <Command __id="9119" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:33:55 EDT 2019" repeat="4" timestamp="164358838" timestamp2="164359590" />
  <Command __id="9127" _type="InsertStringCommand" date="Sun Aug 25 09:33:56 EDT 2019" repeat="12" timestamp="164359953" timestamp2="164362363">
    <data><![CDATA[LocalCourseC]]></data>
  </Command>
  <Command __id="9150" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:33:59 EDT 2019" start_end="START" timestamp="164362934" />
  <Command __id="9151" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sun Aug 25 09:33:59 EDT 2019" timestamp="164362988" />
  <Command __id="9153" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:34:01 EDT 2019" start_end="END" timestamp="164364893" />
  <Command __id="9155" _type="InsertStringCommand" date="Sun Aug 25 09:34:02 EDT 2019" repeat="10" timestamp="164365201" timestamp2="164367796">
    <data><![CDATA[nfiguraton]]></data>
  </Command>
  <Command __id="9175" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:34:05 EDT 2019" repeat="2" timestamp="164368228" timestamp2="164368382" />
  <Command __id="9179" _type="InsertStringCommand" date="Sun Aug 25 09:34:05 EDT 2019" repeat="7" timestamp="164368893" timestamp2="164372397">
    <data><![CDATA[on = Bs]]></data>
  </Command>
  <Command __id="9193" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:34:10 EDT 2019" timestamp="164373400" />
  <Command __id="9195" _type="InsertStringCommand" date="Sun Aug 25 09:34:10 EDT 2019" repeat="8" timestamp="164373546" timestamp2="164375233">
    <data><![CDATA[asicConf]]></data>
  </Command>
  <Command __id="9211" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:34:14 EDT 2019" repeat="4" timestamp="164377922" timestamp2="164378401" />
  <Command __id="9219" _type="InsertStringCommand" date="Sun Aug 25 09:34:16 EDT 2019" timestamp="164379356" timestamp2="164379356">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="9220" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:34:16 EDT 2019" start_end="START" timestamp="164379831" />
  <Command __id="9221" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sun Aug 25 09:34:16 EDT 2019" timestamp="164379945" />
  <Command __id="9222" _type="ShellCommand" date="Sun Aug 25 09:34:18 EDT 2019" timestamp="164381337" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9223" _type="ShellCommand" date="Sun Aug 25 09:34:18 EDT 2019" timestamp="164381596" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9224" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:34:18 EDT 2019" start_end="END" timestamp="164381619" />
  <Command __id="9226" _type="MoveCaretCommand" caretOffset="35447" date="Sun Aug 25 09:34:18 EDT 2019" docOffset="35896" timestamp="164381645" />
  <Command __id="9227" _type="MoveCaretCommand" caretOffset="35414" date="Sun Aug 25 09:34:19 EDT 2019" docOffset="35863" timestamp="164382775" />
  <Command __id="9229" _type="InsertStringCommand" date="Sun Aug 25 09:34:20 EDT 2019" timestamp="164383317" timestamp2="164383317">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9230" _type="MoveCaretCommand" caretOffset="35454" date="Sun Aug 25 09:34:21 EDT 2019" docOffset="35903" timestamp="164384656" />
  <Command __id="9232" _type="InsertStringCommand" date="Sun Aug 25 09:34:22 EDT 2019" timestamp="164385216" timestamp2="164385216">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="9233" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Aug 25 09:34:22 EDT 2019" start_end="START" timestamp="164385219" />
  <Command __id="9234" _type="ShellCommand" date="Sun Aug 25 09:34:24 EDT 2019" timestamp="164387095" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9235" _type="ShellCommand" date="Sun Aug 25 09:34:24 EDT 2019" timestamp="164387893" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9236" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:34:24 EDT 2019" start_end="END" timestamp="164387917" />
  <Command __id="9238" _type="MoveCaretCommand" caretOffset="35480" date="Sun Aug 25 09:34:24 EDT 2019" docOffset="35929" timestamp="164387942" />
  <Command __id="9240" _type="InsertStringCommand" date="Sun Aug 25 09:34:25 EDT 2019" timestamp="164388697" timestamp2="164388697">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="9241" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Sun Aug 25 09:34:25 EDT 2019" start_end="START" timestamp="164388702" />
  <Command __id="9245" _type="ShellCommand" date="Sun Aug 25 09:34:27 EDT 2019" timestamp="164390599" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9246" _type="ShellCommand" date="Sun Aug 25 09:34:27 EDT 2019" timestamp="164390814" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9247" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:34:27 EDT 2019" start_end="END" timestamp="164390839" />
  <Command __id="9249" _type="MoveCaretCommand" caretOffset="35505" date="Sun Aug 25 09:34:27 EDT 2019" docOffset="35954" timestamp="164390884" />
  <Command __id="9251" _type="InsertStringCommand" date="Sun Aug 25 09:34:28 EDT 2019" timestamp="164391849" timestamp2="164391849">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="9253" _type="InsertStringCommand" date="Sun Aug 25 09:34:29 EDT 2019" timestamp="164392325" timestamp2="164392325">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9255" _type="InsertStringCommand" date="Sun Aug 25 09:34:34 EDT 2019" repeat="19" timestamp="164397505" timestamp2="164403466">
    <data><![CDATA[if (aLocalCourseCon]]></data>
  </Command>
  <Command __id="9292" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:34:40 EDT 2019" start_end="START" timestamp="164403947" />
  <Command __id="9294" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:34:40 EDT 2019" start_end="END" timestamp="164403994" />
  <Command __id="9295" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sun Aug 25 09:34:40 EDT 2019" timestamp="164403999" />
  <Command __id="9296" _type="MoveCaretCommand" caretOffset="34823" date="Sun Aug 25 09:34:49 EDT 2019" docOffset="35272" timestamp="164412851" />
  <Command __id="9298" _type="InsertStringCommand" date="Sun Aug 25 09:34:50 EDT 2019" timestamp="164413470" timestamp2="164413470">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9300" _type="InsertStringCommand" date="Sun Aug 25 09:34:54 EDT 2019" repeat="13" timestamp="164417816" timestamp2="164420097">
    <data><![CDATA[public static]]></data>
  </Command>
  <DocumentChange __id="9063" _type="Delete" date="Sun Aug 25 09:33:46 EDT 2019" docASTNodeCount="3043" docActiveCodeLength="23866" docExpressionCount="1701" docLength="40351" endLine="941" length="6" offset="35812" repeat="6" startLine="941" timestamp="164349411" timestamp2="164350266">
    <text><![CDATA[proper]]></text>
  </DocumentChange>
  <DocumentChange __id="9075" _type="Insert" date="Sun Aug 25 09:33:47 EDT 2019" docASTNodeCount="3045" docActiveCodeLength="23878" docExpressionCount="1702" docLength="40363" length="12" offset="35812" repeat="12" timestamp="164350774" timestamp2="164354066">
    <text><![CDATA[PropertiesCo]]></text>
  </DocumentChange>
  <DocumentChange __id="9104" _type="Replace" date="Sun Aug 25 09:33:52 EDT 2019" docASTNodeCount="3045" docActiveCodeLength="23889" docExpressionCount="1702" docLength="40374" endLine="941" insertionLength="23" int_docASTNodeCount="3043" int_docActiveCodeLength="23866" int_docExpressionCount="1701" int_docLength="40351" length="12" offset="35812" startLine="941" timestamp="164356064">
    <deletedText><![CDATA[PropertiesCo]]></deletedText>
    <insertedText><![CDATA[PropertiesConfiguration]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9106" _type="Insert" date="Sun Aug 25 09:33:53 EDT 2019" docASTNodeCount="3048" docActiveCodeLength="23895" docExpressionCount="1703" docLength="40380" length="6" offset="35835" repeat="6" timestamp="164356694" timestamp2="164358416">
    <text><![CDATA[ aCour]]></text>
  </DocumentChange>
  <DocumentChange __id="9118" _type="Delete" date="Sun Aug 25 09:33:55 EDT 2019" docASTNodeCount="3048" docActiveCodeLength="23891" docExpressionCount="1703" docLength="40376" endLine="941" length="4" offset="35837" repeat="4" startLine="941" timestamp="164358836" timestamp2="164359587">
    <text><![CDATA[Cour]]></text>
  </DocumentChange>
  <DocumentChange __id="9126" _type="Insert" date="Sun Aug 25 09:33:56 EDT 2019" docASTNodeCount="3048" docActiveCodeLength="23903" docExpressionCount="1703" docLength="40388" length="12" offset="35837" repeat="12" timestamp="164359948" timestamp2="164362355">
    <text><![CDATA[LocalCourseC]]></text>
  </DocumentChange>
  <DocumentChange __id="9152" _type="Insert" date="Sun Aug 25 09:34:01 EDT 2019" docASTNodeCount="3048" docActiveCodeLength="23914" docExpressionCount="1703" docLength="40399" length="11" offset="35849" repeat="11" timestamp="164364878" timestamp2="164367793">
    <text><![CDATA[onfiguraton]]></text>
  </DocumentChange>
  <DocumentChange __id="9174" _type="Delete" date="Sun Aug 25 09:34:05 EDT 2019" docASTNodeCount="3048" docActiveCodeLength="23912" docExpressionCount="1703" docLength="40397" endLine="941" length="2" offset="35858" repeat="2" startLine="941" timestamp="164368224" timestamp2="164368377">
    <text><![CDATA[on]]></text>
  </DocumentChange>
  <DocumentChange __id="9178" _type="Insert" date="Sun Aug 25 09:34:05 EDT 2019" docASTNodeCount="3049" docActiveCodeLength="23919" docExpressionCount="1704" docLength="40404" length="7" offset="35858" repeat="7" timestamp="164368887" timestamp2="164372393">
    <text><![CDATA[on = Bs]]></text>
  </DocumentChange>
  <DocumentChange __id="9192" _type="Delete" date="Sun Aug 25 09:34:10 EDT 2019" docASTNodeCount="3049" docActiveCodeLength="23918" docExpressionCount="1704" docLength="40403" endLine="941" length="1" offset="35864" startLine="941" timestamp="164373396">
    <text><![CDATA[s]]></text>
  </DocumentChange>
  <DocumentChange __id="9194" _type="Insert" date="Sun Aug 25 09:34:10 EDT 2019" docASTNodeCount="3049" docActiveCodeLength="23926" docExpressionCount="1704" docLength="40411" length="8" offset="35864" repeat="8" timestamp="164373542" timestamp2="164375230">
    <text><![CDATA[asicConf]]></text>
  </DocumentChange>
  <DocumentChange __id="9210" _type="Delete" date="Sun Aug 25 09:34:14 EDT 2019" docASTNodeCount="3049" docActiveCodeLength="23922" docExpressionCount="1704" docLength="40407" endLine="941" length="4" offset="35868" repeat="4" startLine="941" timestamp="164377920" timestamp2="164378399">
    <text><![CDATA[Conf]]></text>
  </DocumentChange>
  <DocumentChange __id="9218" _type="Insert" date="Sun Aug 25 09:34:16 EDT 2019" docASTNodeCount="3049" docActiveCodeLength="23923" docExpressionCount="1704" docLength="40408" length="1" offset="35868" timestamp="164379349">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <DocumentChange __id="9225" _type="Replace" date="Sun Aug 25 09:34:18 EDT 2019" docASTNodeCount="3049" docActiveCodeLength="23950" docExpressionCount="1704" docLength="40435" endLine="941" insertionLength="33" int_docASTNodeCount="3048" int_docActiveCodeLength="23917" int_docExpressionCount="1703" int_docLength="40402" length="6" offset="35863" startLine="941" timestamp="164381626">
    <deletedText><![CDATA[BasicC]]></deletedText>
    <insertedText><![CDATA[BasicConfigurationManagerSelector]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9228" _type="Insert" date="Sun Aug 25 09:34:20 EDT 2019" docASTNodeCount="3049" docActiveCodeLength="23957" docExpressionCount="1704" docLength="40442" length="7" offset="35863" timestamp="164383309">
    <text><![CDATA[
				 ]]></text>
  </DocumentChange>
  <DocumentChange __id="9231" _type="Insert" date="Sun Aug 25 09:34:22 EDT 2019" docASTNodeCount="3049" docActiveCodeLength="23958" docExpressionCount="1704" docLength="40443" length="1" offset="35903" timestamp="164385209">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="9237" _type="Insert" date="Sun Aug 25 09:34:24 EDT 2019" docASTNodeCount="3053" docActiveCodeLength="23987" docExpressionCount="1708" docLength="40472" length="29" offset="35904" repeat="5" timestamp="164387923" timestamp2="164389370">
    <text><![CDATA[getConfigurationManager().get]]></text>
  </DocumentChange>
  <DocumentChange __id="9248" _type="Replace" date="Sun Aug 25 09:34:27 EDT 2019" docASTNodeCount="3053" docActiveCodeLength="24008" docExpressionCount="1708" docLength="40493" endLine="942" insertionLength="24" int_docASTNodeCount="3051" int_docActiveCodeLength="23984" int_docExpressionCount="1706" int_docLength="40469" length="3" offset="35930" startLine="942" timestamp="164390846">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[getCourseConfiguration()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9250" _type="Insert" date="Sun Aug 25 09:34:28 EDT 2019" docASTNodeCount="3053" docActiveCodeLength="24014" docExpressionCount="1708" docLength="40499" length="6" offset="35954" repeat="2" timestamp="164391842" timestamp2="164392311">
    <text><![CDATA[;
		 ]]></text>
  </DocumentChange>
  <DocumentChange __id="9254" _type="Insert" date="Sun Aug 25 09:34:34 EDT 2019" docASTNodeCount="3056" docActiveCodeLength="24034" docExpressionCount="1709" docLength="40519" length="20" offset="35960" repeat="19" timestamp="164397498" timestamp2="164403463">
    <text><![CDATA[if (aLocalCourseCon)]]></text>
  </DocumentChange>
  <DocumentChange __id="9293" _type="Replace" date="Sun Aug 25 09:34:40 EDT 2019" docASTNodeCount="3056" docActiveCodeLength="24043" docExpressionCount="1709" docLength="40528" endLine="943" insertionLength="24" int_docASTNodeCount="3053" int_docActiveCodeLength="24019" int_docExpressionCount="1708" int_docLength="40504" length="15" offset="35964" startLine="943" timestamp="164403988">
    <deletedText><![CDATA[aLocalCourseCon]]></deletedText>
    <insertedText><![CDATA[aLocalCourseConfiguraton]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="9297" _type="Insert" date="Sun Aug 25 09:34:50 EDT 2019" docASTNodeCount="3056" docActiveCodeLength="24046" docExpressionCount="1709" docLength="40531" length="3" offset="35272" timestamp="164413460">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="9299" _type="Insert" date="Sun Aug 25 09:34:54 EDT 2019" docASTNodeCount="3058" docActiveCodeLength="24059" docExpressionCount="1709" docLength="40544" length="13" offset="35275" repeat="13" timestamp="164417813" timestamp2="164420094">
    <text><![CDATA[public static]]></text>
  </DocumentChange>
  <DocumentChange __id="9325" _type="Insert" date="Sun Aug 25 09:35:00 EDT 2019" docASTNodeCount="3058" docActiveCodeLength="24075" docExpressionCount="1709" docLength="40560" length="16" offset="35288" repeat="16" timestamp="164423176" timestamp2="164426310">
    <text><![CDATA[ PropertiesConfi]]></text>
  </DocumentChange>
  <Command __id="9326" _type="InsertStringCommand" date="Sun Aug 25 09:35:00 EDT 2019" repeat="16" timestamp="164423183" timestamp2="164426315">
    <data><![CDATA[ PropertiesConfi]]></data>
  </Command>
  <Command __id="9357" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:35:03 EDT 2019" start_end="START" timestamp="164426917" />
  <Command __id="9358" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sun Aug 25 09:35:04 EDT 2019" timestamp="164427106" />
  <Command __id="9359" _type="ShellCommand" date="Sun Aug 25 09:35:05 EDT 2019" timestamp="164428926" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9360" _type="ShellCommand" date="Sun Aug 25 09:35:06 EDT 2019" timestamp="164429142" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9361" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:35:06 EDT 2019" start_end="END" timestamp="164429166" />
  <DocumentChange __id="9362" _type="Replace" date="Sun Aug 25 09:35:06 EDT 2019" docASTNodeCount="3058" docActiveCodeLength="24083" docExpressionCount="1709" docLength="40568" endLine="932" insertionLength="23" int_docASTNodeCount="3058" int_docActiveCodeLength="24060" int_docExpressionCount="1709" int_docLength="40545" length="15" offset="35289" startLine="932" timestamp="164429174">
    <deletedText><![CDATA[PropertiesConfi]]></deletedText>
    <insertedText><![CDATA[PropertiesConfiguration]]></insertedText>
  </DocumentChange>
  <Command __id="9363" _type="MoveCaretCommand" caretOffset="34863" date="Sun Aug 25 09:35:06 EDT 2019" docOffset="35312" timestamp="164429198" />
  <Command __id="9364" _type="PredictionCommand" date="Sun Aug 25 09:35:06 EDT 2019" prediction_type="MakingProgress" timestamp="164429199" />
  <DocumentChange __id="9365" _type="Insert" date="Sun Aug 25 09:35:06 EDT 2019" docASTNodeCount="3063" docActiveCodeLength="24094" docExpressionCount="1711" docLength="40579" length="11" offset="35312" repeat="11" timestamp="164429864" timestamp2="164434874">
    <text><![CDATA[ maybeGetCo]]></text>
  </DocumentChange>
  <Command __id="9366" _type="InsertStringCommand" date="Sun Aug 25 09:35:06 EDT 2019" repeat="11" timestamp="164429868" timestamp2="164434877">
    <data><![CDATA[ maybeGetCo]]></data>
  </Command>
  <DocumentChange __id="9387" _type="Delete" date="Sun Aug 25 09:35:12 EDT 2019" docASTNodeCount="3063" docActiveCodeLength="24092" docExpressionCount="1711" docLength="40577" endLine="932" length="2" offset="35321" repeat="2" startLine="932" timestamp="164435308" timestamp2="164435468">
    <text><![CDATA[Co]]></text>
  </DocumentChange>
  <Command __id="9388" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:35:12 EDT 2019" repeat="2" timestamp="164435312" timestamp2="164435473" />
  <DocumentChange __id="9391" _type="Insert" date="Sun Aug 25 09:35:12 EDT 2019" docASTNodeCount="3063" docActiveCodeLength="24115" docExpressionCount="1711" docLength="40600" length="23" offset="35321" repeat="23" timestamp="164435976" timestamp2="164442032">
    <text><![CDATA[LocalCourseConfguration]]></text>
  </DocumentChange>
  <Command __id="9392" _type="InsertStringCommand" date="Sun Aug 25 09:35:12 EDT 2019" repeat="23" timestamp="164435980" timestamp2="164442040">
    <data><![CDATA[LocalCourseConfguration]]></data>
  </Command>
  <Command __id="9437" _type="MoveCaretCommand" caretOffset="35209" date="Sun Aug 25 09:35:32 EDT 2019" docOffset="35658" timestamp="164455224" />
  <Command __id="9438" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Aug 25 09:35:33 EDT 2019" timestamp="164456193" />
  <Command __id="9439" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Sun Aug 25 09:35:36 EDT 2019" timestamp="164459822" />
  <Command __id="9440" _type="MoveCaretCommand" caretOffset="34895" date="Sun Aug 25 09:35:57 EDT 2019" docOffset="35344" timestamp="164480498" />
  <DocumentChange __id="9441" _type="Insert" date="Sun Aug 25 09:35:59 EDT 2019" docASTNodeCount="3063" docActiveCodeLength="24127" docExpressionCount="1711" docLength="40612" length="12" offset="35344" repeat="4" timestamp="164482898" timestamp2="164484442">
    <text><![CDATA[() {
		
	}]]></text>
  </DocumentChange>
  <Command __id="9442" _type="InsertStringCommand" date="Sun Aug 25 09:35:59 EDT 2019" repeat="4" timestamp="164482904" timestamp2="164484112">
    <data><![CDATA[() {]]></data>
  </Command>
  <Command __id="9449" _type="InsertStringCommand" date="Sun Aug 25 09:36:01 EDT 2019" timestamp="164484446" timestamp2="164484446">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9450" _type="SelectTextCommand" caretOffset="35629" date="Sun Aug 25 09:36:07 EDT 2019" end="35629" start="35408" timestamp="164490649" />
  <Command __id="9451" _type="CopyCommand" date="Sun Aug 25 09:36:08 EDT 2019" timestamp="164491103" />
  <Command __id="9452" _type="MoveCaretCommand" caretOffset="34903" date="Sun Aug 25 09:36:11 EDT 2019" docOffset="35352" timestamp="164494818" />
  <DocumentChange __id="9453" _type="Replace" date="Sun Aug 25 09:36:12 EDT 2019" docASTNodeCount="3082" docActiveCodeLength="24352" docExpressionCount="1723" docLength="40837" endLine="933" insertionLength="227" int_docASTNodeCount="3063" int_docActiveCodeLength="24125" int_docExpressionCount="1711" int_docLength="40610" length="2" offset="35350" startLine="933" timestamp="164495463">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		if (!GradingMode.getGraderRun()) {
			 PropertiesConfiguration aLocalCourseConfiguraton = 
					 BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration();
			 if (aLocalCourseConfiguraton)
		 }]]></insertedText>
  </DocumentChange>
  <Command __id="9454" _type="PasteCommand" date="Sun Aug 25 09:36:12 EDT 2019" timestamp="164495480" />
  <Command __id="9455" _type="MoveCaretCommand" caretOffset="34908" date="Sun Aug 25 09:36:23 EDT 2019" docOffset="35357" timestamp="164506497" />
  <DocumentChange __id="9456" _type="Delete" date="Sun Aug 25 09:36:23 EDT 2019" docASTNodeCount="3081" docActiveCodeLength="24351" docExpressionCount="1722" docLength="40836" endLine="933" length="1" offset="35356" startLine="933" timestamp="164506935">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <Command __id="9457" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:36:23 EDT 2019" timestamp="164506941" />
  <Command __id="9458" _type="MoveCaretCommand" caretOffset="34936" date="Sun Aug 25 09:36:25 EDT 2019" docOffset="35385" timestamp="164508530" />
  <DocumentChange __id="9459" _type="Insert" date="Sun Aug 25 09:36:25 EDT 2019" docASTNodeCount="3081" docActiveCodeLength="24356" docExpressionCount="1722" docLength="40841" length="5" offset="35385" timestamp="164509029">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <Command __id="9460" _type="InsertStringCommand" date="Sun Aug 25 09:36:25 EDT 2019" timestamp="164509037" timestamp2="164509037">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="9461" _type="Replace" date="Sun Aug 25 09:36:26 EDT 2019" docASTNodeCount="3083" docActiveCodeLength="24356" docExpressionCount="1722" docLength="40841" endLine="934" insertionLength="3" int_docASTNodeCount="3081" int_docActiveCodeLength="24353" int_docExpressionCount="1722" int_docLength="40838" length="3" offset="35387" startLine="934" timestamp="164509958">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[		}]]></insertedText>
  </DocumentChange>
  <Command __id="9462" _type="InsertStringCommand" date="Sun Aug 25 09:36:26 EDT 2019" timestamp="164509964" timestamp2="164509964">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="9463" _type="MoveCaretCommand" caretOffset="34936" date="Sun Aug 25 09:36:28 EDT 2019" docOffset="35385" timestamp="164511414" />
  <DocumentChange __id="9464" _type="Insert" date="Sun Aug 25 09:36:28 EDT 2019" docASTNodeCount="3085" docActiveCodeLength="24373" docExpressionCount="1723" docLength="40858" length="17" offset="35385" repeat="13" timestamp="164511899" timestamp2="164514452">
    <text><![CDATA[
			return null;]]></text>
  </DocumentChange>
  <Command __id="9465" _type="InsertStringCommand" date="Sun Aug 25 09:36:28 EDT 2019" timestamp="164511910" timestamp2="164511910">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9467" _type="InsertStringCommand" date="Sun Aug 25 09:36:29 EDT 2019" repeat="12" timestamp="164512149" timestamp2="164514455">
    <data><![CDATA[return null;]]></data>
  </Command>
  <Command __id="9490" _type="MoveCaretCommand" caretOffset="34964" date="Sun Aug 25 09:36:33 EDT 2019" docOffset="35413" timestamp="164516669" />
  <DocumentChange __id="9491" _type="Delete" date="Sun Aug 25 09:36:34 EDT 2019" docASTNodeCount="3085" docActiveCodeLength="24371" docExpressionCount="1723" docLength="40856" endLine="936" length="2" offset="35411" repeat="2" startLine="936" timestamp="164517080" timestamp2="164517437">
    <text><![CDATA[	 ]]></text>
  </DocumentChange>
  <Command __id="9492" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:36:34 EDT 2019" repeat="2" timestamp="164517083" timestamp2="164517442" />
  <Command __id="9495" _type="SelectTextCommand" caretOffset="35013" date="Sun Aug 25 09:36:40 EDT 2019" end="35013" start="34962" timestamp="164523558" />
  <DocumentChange __id="9496" _type="Replace" date="Sun Aug 25 09:36:40 EDT 2019" docASTNodeCount="3081" docActiveCodeLength="24321" docExpressionCount="1721" docLength="40806" endLine="936" insertionLength="1" int_docASTNodeCount="3081" int_docActiveCodeLength="24320" int_docExpressionCount="1721" int_docLength="40805" length="51" offset="35411" startLine="936" timestamp="164523983">
    <deletedText><![CDATA[PropertiesConfiguration aLocalCourseConfiguraton = ]]></deletedText>
    <insertedText><![CDATA[r]]></insertedText>
  </DocumentChange>
  <Command __id="9497" _type="InsertStringCommand" date="Sun Aug 25 09:36:40 EDT 2019" repeat="5" timestamp="164523989" timestamp2="164524527">
    <data><![CDATA[reyir]]></data>
  </Command>
  <DocumentChange __id="9498" _type="Insert" date="Sun Aug 25 09:36:40 EDT 2019" docASTNodeCount="3081" docActiveCodeLength="24325" docExpressionCount="1721" docLength="40810" length="4" offset="35412" repeat="4" timestamp="164524036" timestamp2="164524524">
    <text><![CDATA[eyir]]></text>
  </DocumentChange>
  <DocumentChange __id="9506" _type="Delete" date="Sun Aug 25 09:36:41 EDT 2019" docASTNodeCount="3081" docActiveCodeLength="24322" docExpressionCount="1721" docLength="40807" endLine="936" length="3" offset="35413" repeat="3" startLine="936" timestamp="164524829" timestamp2="164525118">
    <text><![CDATA[yir]]></text>
  </DocumentChange>
  <Command __id="9507" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:36:41 EDT 2019" repeat="3" timestamp="164524834" timestamp2="164525121" />
  <DocumentChange __id="9512" _type="Insert" date="Sun Aug 25 09:36:42 EDT 2019" docASTNodeCount="3081" docActiveCodeLength="24327" docExpressionCount="1721" docLength="40812" length="5" offset="35413" repeat="5" timestamp="164525823" timestamp2="164526915">
    <text><![CDATA[turn ]]></text>
  </DocumentChange>
  <Command __id="9513" _type="InsertStringCommand" date="Sun Aug 25 09:36:42 EDT 2019" repeat="5" timestamp="164525827" timestamp2="164526920">
    <data><![CDATA[turn ]]></data>
  </Command>
  <Command __id="9522" _type="SelectTextCommand" caretOffset="35103" date="Sun Aug 25 09:36:46 EDT 2019" end="35103" start="35066" timestamp="164529809" />
  <DocumentChange __id="9523" _type="Delete" date="Sun Aug 25 09:36:47 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1720" docLength="40775" endLine="939" length="37" offset="35515" startLine="938" timestamp="164530267">
    <text><![CDATA[	 if (aLocalCourseConfiguraton)
		 }]]></text>
  </DocumentChange>
  <Command __id="9524" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sun Aug 25 09:36:47 EDT 2019" timestamp="164530282" />
  <Command __id="9525" _type="MoveCaretCommand" caretOffset="34977" date="Sun Aug 25 09:36:52 EDT 2019" docOffset="35426" timestamp="164535796" />
  <DocumentChange __id="9526" _type="Delete" date="Sun Aug 25 09:36:53 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24286" docExpressionCount="1720" docLength="40771" endLine="937" length="4" offset="35422" repeat="4" startLine="937" timestamp="164536132" timestamp2="164536837">
    <text><![CDATA[			 ]]></text>
  </DocumentChange>
  <Command __id="9527" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:36:53 EDT 2019" repeat="4" timestamp="164536137" timestamp2="164536841" />
  <DocumentChange __id="9534" _type="Insert" date="Sun Aug 25 09:36:54 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24288" docExpressionCount="1720" docLength="40773" length="2" offset="35422" repeat="2" timestamp="164537695" timestamp2="164537885">
    <text><![CDATA[  ]]></text>
  </DocumentChange>
  <Command __id="9535" _type="InsertStringCommand" date="Sun Aug 25 09:36:54 EDT 2019" repeat="2" timestamp="164537702" timestamp2="164537889">
    <data><![CDATA[  ]]></data>
  </Command>
  <Command __id="9538" _type="MoveCaretCommand" caretOffset="35411" date="Sun Aug 25 09:37:04 EDT 2019" docOffset="35860" timestamp="164547820" />
  <Command __id="9539" _type="SelectTextCommand" caretOffset="35422" date="Sun Aug 25 09:37:04 EDT 2019" end="35422" start="35382" timestamp="164548007" />
  <Command __id="9540" _type="SelectTextCommand" caretOffset="35567" date="Sun Aug 25 09:37:05 EDT 2019" end="35567" start="35363" timestamp="164548248" />
  <Command __id="9541" _type="CopyCommand" date="Sun Aug 25 09:37:05 EDT 2019" timestamp="164548861" />
  <Command __id="9542" _type="MoveCaretCommand" caretOffset="35569" date="Sun Aug 25 09:37:07 EDT 2019" docOffset="36018" timestamp="164550365" />
  <DocumentChange __id="9543" _type="Insert" date="Sun Aug 25 09:37:07 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24292" docExpressionCount="1720" docLength="40777" length="4" offset="36018" timestamp="164551075">
    <text><![CDATA[
	 ]]></text>
  </DocumentChange>
  <Command __id="9544" _type="InsertStringCommand" date="Sun Aug 25 09:37:08 EDT 2019" timestamp="164551084" timestamp2="164551084">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9545" _type="MoveCaretCommand" caretOffset="35569" date="Sun Aug 25 09:37:09 EDT 2019" docOffset="36018" timestamp="164552290" />
  <DocumentChange __id="9546" _type="Replace" date="Sun Aug 25 09:37:09 EDT 2019" docASTNodeCount="3093" docActiveCodeLength="24494" docExpressionCount="1734" docLength="40979" endLine="948" insertionLength="204" int_docASTNodeCount="3076" int_docActiveCodeLength="24290" int_docExpressionCount="1720" int_docLength="40775" length="2" offset="36016" startLine="948" timestamp="164553073">
    <deletedText><![CDATA[	 ]]></deletedText>
    <insertedText><![CDATA[	 Boolean retVal = getInheritedBooleanModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
]]></insertedText>
  </DocumentChange>
  <Command __id="9547" _type="PasteCommand" date="Sun Aug 25 09:37:10 EDT 2019" timestamp="164553086" />
  <Command __id="9548" _type="SelectTextCommand" caretOffset="35365" date="Sun Aug 25 09:37:12 EDT 2019" end="35382" start="35365" timestamp="164555849" />
  <DocumentChange __id="9549" _type="Replace" date="Sun Aug 25 09:37:13 EDT 2019" docASTNodeCount="3089" docActiveCodeLength="24478" docExpressionCount="1732" docLength="40963" endLine="947" insertionLength="1" int_docASTNodeCount="3089" int_docActiveCodeLength="24477" int_docExpressionCount="1732" int_docLength="40962" length="17" offset="35814" startLine="947" timestamp="164556258">
    <deletedText><![CDATA[Boolean retVal = ]]></deletedText>
    <insertedText><![CDATA[r]]></insertedText>
  </DocumentChange>
  <Command __id="9550" _type="InsertStringCommand" date="Sun Aug 25 09:37:13 EDT 2019" repeat="3" timestamp="164556267" timestamp2="164556711">
    <data><![CDATA[reu]]></data>
  </Command>
  <DocumentChange __id="9551" _type="Insert" date="Sun Aug 25 09:37:13 EDT 2019" docASTNodeCount="3089" docActiveCodeLength="24480" docExpressionCount="1732" docLength="40965" length="2" offset="35815" repeat="2" timestamp="164556319" timestamp2="164556703">
    <text><![CDATA[eu]]></text>
  </DocumentChange>
  <DocumentChange __id="9555" _type="Delete" date="Sun Aug 25 09:37:14 EDT 2019" docASTNodeCount="3089" docActiveCodeLength="24479" docExpressionCount="1732" docLength="40964" endLine="947" length="1" offset="35816" startLine="947" timestamp="164557114">
    <text><![CDATA[u]]></text>
  </DocumentChange>
  <Command __id="9556" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:37:14 EDT 2019" timestamp="164557117" />
  <DocumentChange __id="9557" _type="Insert" date="Sun Aug 25 09:37:14 EDT 2019" docASTNodeCount="3089" docActiveCodeLength="24484" docExpressionCount="1732" docLength="40969" length="5" offset="35816" repeat="5" timestamp="164557685" timestamp2="164558376">
    <text><![CDATA[turn ]]></text>
  </DocumentChange>
  <Command __id="9558" _type="InsertStringCommand" date="Sun Aug 25 09:37:14 EDT 2019" repeat="5" timestamp="164557694" timestamp2="164558382">
    <data><![CDATA[turn ]]></data>
  </Command>
  <Command __id="9567" _type="MoveCaretCommand" caretOffset="35364" date="Sun Aug 25 09:37:16 EDT 2019" docOffset="35813" timestamp="164559375" />
  <DocumentChange __id="9568" _type="Insert" date="Sun Aug 25 09:37:17 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24292" docExpressionCount="1720" docLength="40971" length="2" offset="35812" timestamp="164560251">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9569" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 09:37:17 EDT 2019" timestamp="164560278" />
  <Command __id="9570" _type="MoveCaretCommand" caretOffset="35752" date="Sun Aug 25 09:37:25 EDT 2019" docOffset="36201" timestamp="164568225" />
  <Command __id="9571" _type="SelectTextCommand" caretOffset="35759" date="Sun Aug 25 09:37:25 EDT 2019" end="35759" start="35747" timestamp="164568433" />
  <DocumentChange __id="9572" _type="Replace" date="Sun Aug 25 09:37:25 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24281" docExpressionCount="1720" docLength="40960" endLine="948" insertionLength="1" int_docASTNodeCount="3076" int_docActiveCodeLength="24280" int_docExpressionCount="1720" int_docLength="40959" length="12" offset="36196" startLine="948" timestamp="164568859">
    <deletedText><![CDATA[defaultValue]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <Command __id="9573" _type="InsertStringCommand" date="Sun Aug 25 09:37:25 EDT 2019" repeat="4" timestamp="164568870" timestamp2="164569541">
    <data><![CDATA[null]]></data>
  </Command>
  <DocumentChange __id="9574" _type="Insert" date="Sun Aug 25 09:37:26 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24284" docExpressionCount="1720" docLength="40963" length="3" offset="36197" repeat="3" timestamp="164569120" timestamp2="164569532">
    <text><![CDATA[ull]]></text>
  </DocumentChange>
  <Command __id="9580" _type="SelectTextCommand" caretOffset="35998" date="Sun Aug 25 09:37:35 EDT 2019" end="35998" start="35759" timestamp="164578853" />
  <DocumentChange __id="9581" _type="Replace" date="Sun Aug 25 09:37:36 EDT 2019" docASTNodeCount="3057" docActiveCodeLength="24046" docExpressionCount="1708" docLength="40725" endLine="955" insertionLength="1" int_docASTNodeCount="3055" int_docActiveCodeLength="24045" int_docExpressionCount="1707" int_docLength="40724" length="239" offset="36208" startLine="950" timestamp="164579568">
    <deletedText><![CDATA[if (!GradingMode.getGraderRun()) {
		 PropertiesConfiguration aLocalCourseConfiguraton = 
				 BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration();
		 if (aLocalCourseConfiguraton)
	 }
	 return retVal;]]></deletedText>
    <insertedText><![CDATA[i]]></insertedText>
  </DocumentChange>
  <Command __id="9582" _type="InsertStringCommand" date="Sun Aug 25 09:37:36 EDT 2019" repeat="18" timestamp="164579581" timestamp2="164584988">
    <data><![CDATA[if (retVal == null]]></data>
  </Command>
  <DocumentChange __id="9583" _type="Insert" date="Sun Aug 25 09:37:36 EDT 2019" docASTNodeCount="3060" docActiveCodeLength="24064" docExpressionCount="1710" docLength="40743" length="18" offset="36209" repeat="17" timestamp="164579708" timestamp2="164584986">
    <text><![CDATA[f (retVal == null)]]></text>
  </DocumentChange>
  <Command __id="9617" _type="MoveCaretCommand" caretOffset="35778" date="Sun Aug 25 09:37:43 EDT 2019" docOffset="36227" timestamp="164586923" />
  <DocumentChange __id="9618" _type="Insert" date="Sun Aug 25 09:37:44 EDT 2019" docASTNodeCount="3060" docActiveCodeLength="24076" docExpressionCount="1710" docLength="40755" length="12" offset="36227" repeat="3" timestamp="164587262" timestamp2="164588146">
    <text><![CDATA[ {
		 
	 }]]></text>
  </DocumentChange>
  <Command __id="9619" _type="InsertStringCommand" date="Sun Aug 25 09:37:44 EDT 2019" repeat="2" timestamp="164587273" timestamp2="164587885">
    <data><![CDATA[ {]]></data>
  </Command>
  <Command __id="9623" _type="InsertStringCommand" date="Sun Aug 25 09:37:45 EDT 2019" timestamp="164588150" timestamp2="164588150">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9624" _type="MoveCaretCommand" caretOffset="35392" date="Sun Aug 25 09:37:47 EDT 2019" docOffset="35841" timestamp="164590574" />
  <Command __id="9625" _type="SelectTextCommand" caretOffset="35414" date="Sun Aug 25 09:37:47 EDT 2019" end="35414" start="35374" timestamp="164590746" />
  <Command __id="9626" _type="SelectTextCommand" caretOffset="35559" date="Sun Aug 25 09:37:47 EDT 2019" end="35559" start="35363" timestamp="164590961" />
  <Command __id="9627" _type="CopyCommand" date="Sun Aug 25 09:37:48 EDT 2019" timestamp="164591591" />
  <Command __id="9628" _type="MoveCaretCommand" caretOffset="35785" date="Sun Aug 25 09:37:49 EDT 2019" docOffset="36234" timestamp="164592967" />
  <DocumentChange __id="9629" _type="Replace" date="Sun Aug 25 09:37:50 EDT 2019" docASTNodeCount="3060" docActiveCodeLength="24075" docExpressionCount="1710" docLength="40949" endLine="951" insertionLength="197" int_docASTNodeCount="3060" int_docActiveCodeLength="24073" int_docExpressionCount="1710" int_docLength="40752" length="3" offset="36231" startLine="951" timestamp="164593510">
    <deletedText><![CDATA[		 ]]></deletedText>
    <insertedText><![CDATA[//		 return getInheritedBooleanModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
]]></insertedText>
  </DocumentChange>
  <Command __id="9630" _type="PasteCommand" date="Sun Aug 25 09:37:50 EDT 2019" timestamp="164593524" />
  <Command __id="9631" _type="MoveCaretCommand" caretOffset="35782" date="Sun Aug 25 09:37:52 EDT 2019" docOffset="36231" timestamp="164595434" />
  <DocumentChange __id="9632" _type="Delete" date="Sun Aug 25 09:37:53 EDT 2019" docASTNodeCount="3073" docActiveCodeLength="24268" docExpressionCount="1722" docLength="40947" endLine="951" length="2" offset="36231" startLine="951" timestamp="164596147">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9633" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 09:37:53 EDT 2019" timestamp="164596168" />
  <Command __id="9634" _type="MoveCaretCommand" caretOffset="35833" date="Sun Aug 25 09:37:55 EDT 2019" docOffset="36282" timestamp="164598885" />
  <DocumentChange __id="9635" _type="Insert" date="Sun Aug 25 09:37:56 EDT 2019" docASTNodeCount="3073" docActiveCodeLength="24275" docExpressionCount="1722" docLength="40954" length="7" offset="36282" timestamp="164599364">
    <text><![CDATA[
				 ]]></text>
  </DocumentChange>
  <Command __id="9636" _type="InsertStringCommand" date="Sun Aug 25 09:37:56 EDT 2019" timestamp="164599377" timestamp2="164599377">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9637" _type="SelectTextCommand" caretOffset="35933" date="Sun Aug 25 09:38:05 EDT 2019" end="35933" start="35900" timestamp="164608254" />
  <DocumentChange __id="9638" _type="Replace" date="Sun Aug 25 09:38:07 EDT 2019" docASTNodeCount="3073" docActiveCodeLength="24243" docExpressionCount="1722" docLength="40922" endLine="952" insertionLength="1" int_docASTNodeCount="3072" int_docActiveCodeLength="24242" int_docExpressionCount="1721" int_docLength="40921" length="33" offset="36349" startLine="952" timestamp="164610781">
    <deletedText><![CDATA[getOrCreateProjectConfiguration()]]></deletedText>
    <insertedText><![CDATA[g]]></insertedText>
  </DocumentChange>
  <Command __id="9639" _type="InsertStringCommand" date="Sun Aug 25 09:38:07 EDT 2019" repeat="3" timestamp="164610787" timestamp2="164611075">
    <data><![CDATA[get]]></data>
  </Command>
  <DocumentChange __id="9640" _type="Insert" date="Sun Aug 25 09:38:07 EDT 2019" docASTNodeCount="3073" docActiveCodeLength="24245" docExpressionCount="1722" docLength="40924" length="2" offset="36350" repeat="2" timestamp="164610892" timestamp2="164611072">
    <text><![CDATA[et]]></text>
  </DocumentChange>
  <DocumentChange __id="9644" _type="Insert" date="Sun Aug 25 09:38:18 EDT 2019" docASTNodeCount="3073" docActiveCodeLength="24246" docExpressionCount="1722" docLength="40925" length="1" offset="36352" timestamp="164621141">
    <text><![CDATA[C]]></text>
  </DocumentChange>
  <Command __id="9645" _type="InsertStringCommand" date="Sun Aug 25 09:38:18 EDT 2019" timestamp="164621148" timestamp2="164621148">
    <data><![CDATA[C]]></data>
  </Command>
  <Command __id="9646" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:38:18 EDT 2019" start_end="START" timestamp="164621596" />
  <Command __id="9647" _type="EclipseCommand" commandID="org.eclipse.ui.edit.text.contentAssist.proposals" date="Sun Aug 25 09:38:18 EDT 2019" timestamp="164621667" />
  <Command __id="9648" _type="ShellCommand" date="Sun Aug 25 09:38:19 EDT 2019" timestamp="164622868" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9649" _type="ShellCommand" date="Sun Aug 25 09:38:20 EDT 2019" timestamp="164623115" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9650" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Sun Aug 25 09:38:20 EDT 2019" start_end="END" timestamp="164623138" />
  <DocumentChange __id="9651" _type="Replace" date="Sun Aug 25 09:38:20 EDT 2019" docASTNodeCount="3073" docActiveCodeLength="24266" docExpressionCount="1722" docLength="40945" endLine="952" insertionLength="24" int_docASTNodeCount="3072" int_docActiveCodeLength="24242" int_docExpressionCount="1721" int_docLength="40921" length="4" offset="36349" startLine="952" timestamp="164623144">
    <deletedText><![CDATA[getC]]></deletedText>
    <insertedText><![CDATA[getCourseConfiguration()]]></insertedText>
  </DocumentChange>
  <Command __id="9652" _type="MoveCaretCommand" caretOffset="35924" date="Sun Aug 25 09:38:20 EDT 2019" docOffset="36373" timestamp="164623165" />
  <Command __id="9653" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:38:24 EDT 2019" timestamp="164627947" />
  <Command __id="9654" _type="MoveCaretCommand" caretOffset="35771" date="Sun Aug 25 09:38:36 EDT 2019" docOffset="36220" timestamp="164639419" />
  <DocumentChange __id="9655" _type="Delete" date="Sun Aug 25 09:38:36 EDT 2019" docASTNodeCount="3073" docActiveCodeLength="24265" docExpressionCount="1722" docLength="40944" endLine="950" length="1" offset="36219" startLine="950" timestamp="164639940">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="9656" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:38:36 EDT 2019" timestamp="164639952" />
  <DocumentChange __id="9657" _type="Insert" date="Sun Aug 25 09:38:37 EDT 2019" docASTNodeCount="3073" docActiveCodeLength="24266" docExpressionCount="1722" docLength="40945" length="1" offset="36219" timestamp="164640604">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <Command __id="9658" _type="InsertStringCommand" date="Sun Aug 25 09:38:37 EDT 2019" timestamp="164640611" timestamp2="164640611">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="9659" _type="MoveCaretCommand" caretOffset="35780" date="Sun Aug 25 09:38:39 EDT 2019" docOffset="36229" timestamp="164642121" />
  <DocumentChange __id="9660" _type="Insert" date="Sun Aug 25 09:38:39 EDT 2019" docASTNodeCount="3075" docActiveCodeLength="24285" docExpressionCount="1723" docLength="40964" length="19" offset="36229" repeat="15" timestamp="164642495" timestamp2="164646007">
    <text><![CDATA[
		 return retVal;]]></text>
  </DocumentChange>
  <Command __id="9661" _type="InsertStringCommand" date="Sun Aug 25 09:38:39 EDT 2019" timestamp="164642504" timestamp2="164642504">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9663" _type="InsertStringCommand" date="Sun Aug 25 09:38:40 EDT 2019" repeat="14" timestamp="164643314" timestamp2="164646014">
    <data><![CDATA[return retVal;]]></data>
  </Command>
  <Command __id="9690" _type="MoveCaretCommand" caretOffset="35999" date="Sun Aug 25 09:38:44 EDT 2019" docOffset="36448" timestamp="164647930" />
  <DocumentChange __id="9691" _type="Delete" date="Sun Aug 25 09:38:45 EDT 2019" docASTNodeCount="3075" docActiveCodeLength="24284" docExpressionCount="1723" docLength="40963" endLine="955" length="1" offset="36447" startLine="955" timestamp="164648366">
    <text><![CDATA[}]]></text>
  </DocumentChange>
  <DocumentChange __id="9694" _type="Delete" date="Sun Aug 25 09:38:47 EDT 2019" docASTNodeCount="3075" docActiveCodeLength="24282" docExpressionCount="1723" docLength="40961" endLine="952" length="2" offset="36251" repeat="2" startLine="952" timestamp="164650497" timestamp2="164651234">
    <text><![CDATA[	 ]]></text>
  </DocumentChange>
  <Command __id="9695" _type="PredictionCommand" date="Sun Aug 25 09:38:47 EDT 2019" prediction_type="MakingProgress" timestamp="164650499" />
  <Command __id="9696" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:38:47 EDT 2019" repeat="2" timestamp="164650509" timestamp2="164651240" />
  <Command __id="9699" _type="MoveCaretCommand" caretOffset="35799" date="Sun Aug 25 09:38:50 EDT 2019" docOffset="36248" timestamp="164653247" />
  <DocumentChange __id="9700" _type="Insert" date="Sun Aug 25 09:38:50 EDT 2019" docASTNodeCount="3075" docActiveCodeLength="24287" docExpressionCount="1723" docLength="40966" length="5" offset="36248" timestamp="164653582">
    <text><![CDATA[
		 ]]></text>
  </DocumentChange>
  <Command __id="9701" _type="InsertStringCommand" date="Sun Aug 25 09:38:50 EDT 2019" timestamp="164653593" timestamp2="164653593">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="9702" _type="Replace" date="Sun Aug 25 09:38:51 EDT 2019" docASTNodeCount="3075" docActiveCodeLength="24287" docExpressionCount="1723" docLength="40966" endLine="952" insertionLength="3" int_docASTNodeCount="3075" int_docActiveCodeLength="24284" int_docExpressionCount="1723" int_docLength="40963" length="3" offset="36250" startLine="952" timestamp="164654516">
    <deletedText><![CDATA[		 ]]></deletedText>
    <insertedText><![CDATA[	 }]]></insertedText>
  </DocumentChange>
  <Command __id="9703" _type="InsertStringCommand" date="Sun Aug 25 09:38:51 EDT 2019" timestamp="164654521" timestamp2="164654521">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="9704" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:38:56 EDT 2019" timestamp="164659592" />
  <Command __id="9705" _type="MoveCaretCommand" caretOffset="35807" date="Sun Aug 25 09:39:07 EDT 2019" docOffset="36256" timestamp="164670798" />
  <DocumentChange __id="9706" _type="Insert" date="Sun Aug 25 09:39:08 EDT 2019" docASTNodeCount="3075" docActiveCodeLength="24288" docExpressionCount="1723" docLength="40967" length="1" offset="36256" timestamp="164671561">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <Command __id="9707" _type="InsertStringCommand" date="Sun Aug 25 09:39:08 EDT 2019" timestamp="164671566" timestamp2="164671566">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="9708" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:39:09 EDT 2019" timestamp="164672602" />
  <Command __id="9709" _type="ShellCommand" date="Sun Aug 25 09:39:13 EDT 2019" timestamp="164676951" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9710" _type="ShellCommand" date="Sun Aug 25 09:39:18 EDT 2019" timestamp="164681350" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9711" _type="MoveCaretCommand" caretOffset="35863" date="Sun Aug 25 09:39:38 EDT 2019" docOffset="36312" timestamp="164701810" />
  <DocumentChange __id="9712" _type="Delete" date="Sun Aug 25 09:39:39 EDT 2019" docASTNodeCount="3075" docActiveCodeLength="24285" docExpressionCount="1723" docLength="40964" endLine="954" length="3" offset="36309" repeat="3" startLine="954" timestamp="164702668" timestamp2="164703507">
    <text><![CDATA[		 ]]></text>
  </DocumentChange>
  <Command __id="9713" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:39:39 EDT 2019" repeat="3" timestamp="164702693" timestamp2="164703511" />
  <Command __id="9718" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:39:41 EDT 2019" timestamp="164704914" />
  <Command __id="9719" _type="MoveCaretCommand" caretOffset="35995" date="Sun Aug 25 09:40:07 EDT 2019" docOffset="36444" timestamp="164730961" />
  <DocumentChange __id="9720" _type="Delete" date="Sun Aug 25 09:40:08 EDT 2019" docASTNodeCount="3075" docActiveCodeLength="24282" docExpressionCount="1723" docLength="40961" endLine="956" length="3" offset="36444" repeat="2" startLine="955" timestamp="164731750" timestamp2="164733214">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <Command __id="9721" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sun Aug 25 09:40:08 EDT 2019" repeat="2" timestamp="164731769" timestamp2="164733223" />
  <Command __id="9724" _type="SelectTextCommand" caretOffset="35863" date="Sun Aug 25 09:40:26 EDT 2019" end="35863" start="35759" timestamp="164749212" />
  <Command __id="9725" _type="ShellCommand" date="Sun Aug 25 09:40:37 EDT 2019" timestamp="164760747" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9726" _type="ShellCommand" date="Sun Aug 25 09:40:39 EDT 2019" timestamp="164762736" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9727" _type="EclipseCommand" commandID="" date="Sun Aug 25 09:40:39 EDT 2019" repeat="5" timestamp="164762846" timestamp2="164763583" />
  <Command __id="9732" _type="ShellCommand" date="Sun Aug 25 09:40:40 EDT 2019" timestamp="164763680" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9733" _type="EclipseCommand" commandID="" date="Sun Aug 25 09:40:40 EDT 2019" timestamp="164763705" />
  <Command __id="9734" _type="RunCommand" date="Sun Aug 25 09:40:40 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="164763951" type="Run" />
  <Command __id="9735" _type="RunCommand" date="Sun Aug 25 09:40:40 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="164763951" type="Run" />
  <Command __id="9736" _type="RunCommand" date="Sun Aug 25 09:40:41 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="164764464" type="Run" />
  <Command __id="9737" _type="RunCommand" date="Sun Aug 25 09:40:41 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="164764464" type="Run" />
  <Command __id="9738" _type="RunCommand" date="Sun Aug 25 09:40:41 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="164764628" type="Run" />
  <Command __id="9739" _type="RunCommand" date="Sun Aug 25 09:40:41 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="164764815" type="Run" />
  <Command __id="9740" _type="EHExceptionCommand" date="Sun Aug 25 09:40:41 EDT 2019" timestamp="164764936" type="Exception">
    <outputString><![CDATA[I***Tracer: showInfo = true
Buffer traced nessages =false
]]></outputString>
  </Command>
  <Command __id="9741" _type="RunCommand" date="Sun Aug 25 09:40:42 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="164765626" type="Run" />
  <Command __id="9742" _type="FileOpenCommand" date="Sun Aug 25 09:40:43 EDT 2019" docASTNodeCount="248" docActiveCodeLength="1892" docExpressionCount="136" docLength="2253" projectName="GraderBasics" timestamp="164766237">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\project\CurrentProjectHolder.java]]></filePath>
  </Command>
  <Command __id="9743" _type="MoveCaretCommand" caretOffset="1825" date="Sun Aug 25 09:40:43 EDT 2019" docOffset="2035" timestamp="164766447" />
  <Command __id="9744" _type="RunCommand" date="Sun Aug 25 09:40:43 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="164767040" type="Debug" />
  <Command __id="9745" _type="RunCommand" date="Sun Aug 25 09:40:43 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="164767040" type="Debug" />
  <Command __id="9746" _type="RunCommand" date="Sun Aug 25 09:40:43 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="164767040" type="Run" />
  <Command __id="9747" _type="ShellCommand" date="Sun Aug 25 09:40:43 EDT 2019" timestamp="164767072" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9748" _type="BreakPointCommand" date="Sun Aug 25 09:40:48 EDT 2019" lineNumber="58" timestamp="164771731" type="BreakPointRemoved" />
  <Command __id="9749" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sun Aug 25 09:40:48 EDT 2019" timestamp="164771760" />
  <Command __id="9750" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:40:49 EDT 2019" timestamp="164772728" />
  <Command __id="9751" _type="RunCommand" date="Sun Aug 25 09:40:49 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="164772728" type="Run" />
  <Command __id="9752" _type="EHExceptionCommand" date="Sun Aug 25 09:40:49 EDT 2019" timestamp="164772816" type="Exception">
    <outputString><![CDATA[W***./config/course.properties does not exist, using defaults
]]></outputString>
  </Command>
  <Command __id="9753" _type="FileOpenCommand" date="Sun Aug 25 09:40:50 EDT 2019" docASTNodeCount="353" docActiveCodeLength="3032" docExpressionCount="213" docLength="3539" projectName="GraderBasics" timestamp="164773087">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
  </Command>
  <Command __id="9754" _type="MoveCaretCommand" caretOffset="3017" date="Sun Aug 25 09:40:50 EDT 2019" docOffset="3017" timestamp="164773415" />
  <Command __id="9755" _type="FileOpenCommand" date="Sun Aug 25 09:41:03 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="164786181">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <Command __id="9756" _type="MoveCaretCommand" caretOffset="10065" date="Sun Aug 25 09:41:03 EDT 2019" docOffset="10065" timestamp="164786361" />
  <Command __id="9757" _type="ShellCommand" date="Sun Aug 25 09:41:03 EDT 2019" timestamp="164786954" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9758" _type="ShellCommand" date="Sun Aug 25 09:41:05 EDT 2019" timestamp="164789073" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9759" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sun Aug 25 09:41:30 EDT 2019" timestamp="164813304" />
  <Command __id="9760" _type="BreakPointCommand" date="Sun Aug 25 09:41:30 EDT 2019" lineNumber="226" timestamp="164813307" type="BreakPointAdded" />
  <Command __id="9761" _type="FileOpenCommand" date="Sun Aug 25 09:41:33 EDT 2019" docASTNodeCount="353" docActiveCodeLength="3032" docExpressionCount="213" docLength="3539" projectName="GraderBasics" timestamp="164816873">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
  </Command>
  <Command __id="9762" _type="MoveCaretCommand" caretOffset="3017" date="Sun Aug 25 09:41:33 EDT 2019" docOffset="3017" timestamp="164816947" />
  <Command __id="9763" _type="BreakPointCommand" date="Sun Aug 25 09:41:33 EDT 2019" lineNumber="89" timestamp="164817016" type="BreakPointRemoved" />
  <Command __id="9764" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sun Aug 25 09:41:33 EDT 2019" timestamp="164817051" />
  <Command __id="9765" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:41:34 EDT 2019" timestamp="164818012" />
  <Command __id="9766" _type="RunCommand" date="Sun Aug 25 09:41:34 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="164818012" type="Run" />
  <Command __id="9767" _type="FileOpenCommand" date="Sun Aug 25 09:41:35 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="164818538">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <Command __id="9768" _type="MoveCaretCommand" caretOffset="10023" date="Sun Aug 25 09:41:35 EDT 2019" docOffset="10023" timestamp="164818718" />
  <Command __id="9769" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 09:41:37 EDT 2019" timestamp="164820333" />
  <Command __id="9770" _type="RunCommand" date="Sun Aug 25 09:41:37 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="164820335" type="Run" />
  <Command __id="9771" _type="FileOpenCommand" date="Sun Aug 25 09:41:37 EDT 2019" docASTNodeCount="3075" docActiveCodeLength="24282" docExpressionCount="1723" docLength="40961" projectName="GraderBasics" timestamp="164820591">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.configuration.PropertiesConfiguration;

import grader.basics.BasicLanguageDependencyManager;
import grader.basics.execution.GradingMode;
import grader.basics.project.Project;
import grader.basics.settings.BasicGradingEnvironment;
import util.trace.Tracer;
/**
 * 
 *This serves two purposes.
 *It defines defaults for configurable properties.
 *It also reads project-based properties to be used in localchecks on student
 *computer.
 *Ultimate authority over properties in localchecks mode is ABasicExecution
 *
 */
public class BasicStaticConfigurationUtils {
	public static final String PRIVACY = "privacy";
	public static final String EXECUTION_COMMAND = "execution";

	public static final String LANGUAGE = "language";
	
	public static final String ENTRY_POINT = "entryPoint";
	public static final String BUILD_FOLDER = "buildFolder";
	public static final String PERMISSIONS = "permissions";

	public static final String CLASS_PATH = "classPath";
	public static final String OE_PATH = "oePath";
	public static final String JUNIT_PATH = "junitPath";
	public static final String LOCAL_GRADER_PATH = "localGraderPath";
	public static final String OE_AND_CLASS_PATH = "oeAndClassPath";
	public static final String CLASS_PATH_SEPARATOR = ":";

	public static final String PROCESS_TEAMS = "processTeams";

	public static final String ENTRY_TAG = "entryTag";
	public static final String ENTRY_TAGS = "entryTags";
	public static final String RESOURCE_RELEASE_TIME = "sleepTime";
	public static final String ARGS = "args";
	public static final String START_TAGS = "startTags";
	public static final String TERMINATING = "terminating";
	public static final String GENERATE_TRACE_FILES = "trace";

//	public static final String JAVA = "Java";

	public static final String CLASS_PATH_VAR = toVariable(CLASS_PATH);
	public static final String CLASS_PATH_SEPARATOR_VAR = toVariable(CLASS_PATH_SEPARATOR);
	public static final String OE_PATH_VAR = toVariable(OE_PATH);
	public static final String LOCAL_GRADER_PATH_VAR = toVariable(LOCAL_GRADER_PATH);

	public static final String JUNIT_PATH_VAR = toVariable(JUNIT_PATH);
	public static final String OE_AND_CLASS_PATH_VAR = toVariable(OE_AND_CLASS_PATH );
	public static final String PERMISSIONS_VAR = toVariable(PERMISSIONS);
	public static final String BUILD_FOLDER_VAR = toVariable(BUILD_FOLDER);
	public static final String IMPLICIT_REQUIRMENTS_ROOT = "implicitRequirementsRoot";
	public static final String DEFAULT_IMPLICIT_REQUIRMENTS_ROOT = "gradingTools";
	public static final String USE_EXECEUTOR = "useExecutor";
	public static final boolean DEFAULT_USE_EXECUTOR = false;
	public static final String EXECUTOR = "executor";
	// this makes no sense, but it is consistent with config file
	public static final String DEFAULT_EXECUTOR = "D:/dewan_backup/Java/Grader/executor";
	public static final String C_OBJ = "language.C.obj";
	public static final String DEFAULT_C_OBJ = "o";
	public static final String MODULES = "modules";
	public static final String DEFAULT_MODULE = "Comp101";
	public static final String FORK_MAIN = "forkMain";
	public static final Boolean DEFAULT_FORK_MAIN = true;
	public static final String GRADABLE_PROJECT_LOCATION = "gradableProjectLocation";
	public static final String SOURCE_LOCATION = "sourceLocation";
	public static final String BINARY_LOCATION = "binaryLocation";
	public static final String OBJECT_LOCATION = "objectLocation";
	public static final String OUTPUT_WAIT_TIME = "outputWaitTime";
	public static final String TEAM_OUTPUT_WAIT_TIME = "teamOutputWaitTime";
	public static final String WAIT_FOR_RESORT = "waitForResort";
	public static final String RESORT_TIME = "resortTime";
	public static final String PROCESS_TIMEOUT = "processTimeout";
	public static final String METHOD_TIMEOUT = "methodTimeout";
	public static final String CONSTRUCTOR_TIMEOUT = "constructorTimeout";
	public static final String USE_METHOD_CONSTRUCTOR_TIMEOUT = "useMethodConstructorTimeout";
	public static final String USE_PROCESS_TIMEOUT = "useProcessTimeout";
	public static final String WAIT_FOR_METHOD_CONSTRUCTOR_AND_PROCESSES = "waitFotMethodConstructorAndProcesses";
	public static final String USE_PROJECT_CONFIGURATION = "useProjectConfiguration";
	public static final boolean DEFAULT_USE_PROJECT_CONFIGURATION = false;






//	private static  List<String> basicCommand;
//	private static Map<String, List<String>> processToBasicCommand = new HashMap();
	private static String duplicatedClassPathSeparator;
	private static List<String> graderProcessTeams;

	private static boolean useProjectConfiguration;
	protected static String module;
	
	protected static String problem;
	protected static String test;
	protected static String testSuite;
	protected static List<String> emptyList = new ArrayList();


//	Comp533s18.execution = java, -cp, .{:}..{:}{classPath}{:}{oePath}{:}{junitPath}, {entryTags}, {args}


	//	public static final String[] DEFAULT_JAVA_BASIC_COMMAND_ARRAY = {
//			"java", "-cp", ".{:}..{:}{classPath}{:}{:}{junitPath}{:}{localGraderPath}", "{entryTags}", "{args}"
//	};
	public static final String[] DEFAULT_JAVA_BASIC_COMMAND_ARRAY = {
			"java", "-cp", ".{:}..{:}{classPath}{:}{:}{junitPath}{:}{localGraderPath}", "{entryPoint}", "{args}"
	};
	public static final String[] DEFAULT_OE_BASIC_COMMAND_ARRAY = {
			"java", "-cp", ".{:}..{:}{classPath}{:}{oePath}{:}{junitPath}{:}{localGraderPath}", "{entryTags}", "{args}"
	};

	public static final List<String> DEFAULT_JAVA_BASIC_COMMAND =
			Arrays.asList(DEFAULT_JAVA_BASIC_COMMAND_ARRAY);
	public static final List<String> DEFAULT_OE_BASIC_COMMAND =
			Arrays.asList(DEFAULT_OE_BASIC_COMMAND_ARRAY);
	public static final int DEFAULT_RESOURCE_RELEASE_TIME = 2000;
	public static final int DEFAULT_CONSTRUCTOR_TIME_OUT = 2000;// in
	// milliseconds
public static final int DEFAULT_METHOD_TIME_OUT = 2000; // in milliseconds
public static final int DEFAULT_PROCESS_TIME_OUT = 4; // in seconds
public static final  String CHECK_ALL_SPECIFIED_TAGS = "checkAllSpecifiedTags";
public static final  boolean DEFAULT_CHECK_ALL_SPECIFIED_TAGS = false;


	
	public static String toVariable(String aVariableName) {
		return "{" + aVariableName + "}";
	}
	public static void setBasicCommandToDefaultEntryPointCommand() {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderBasicCommand(DEFAULT_JAVA_BASIC_COMMAND);
//		basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
	}
	public static void setBasicCommandToDefaultEntryTagCommand() {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderBasicCommand(DEFAULT_OE_BASIC_COMMAND);
//		basicCommand =  DEFAULT_OE_BASIC_COMMAND;
	}
	public static List<String> getBasicCommand() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		if (basicCommand == null) {
//			basicCommand = DEFAULT_OE_BASIC_COMMAND;
//		}
//////		return getInheritedListModuleProblemProperty(EXECUTION_COMMAND);
//		return basicCommand;
	}
	public static boolean hasClassPath() {
//		getBasicCommand();
		return hasClassPath(getBasicCommand());
//		if (basicCommand == null) {
//			return false;
//		}
//		for (String aCommand:basicCommand) {
//			if (aCommand.contains(CLASS_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
//				return true;
//			}
//		}
//		return false;	
	}
	public static boolean hasClassPath(List<String> basicCommand) {
//		getBasicCommand();
		if (basicCommand == null) {
			return false;
		}
		for (String aCommand:basicCommand) {
			if (aCommand.contains(CLASS_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
				return true;
			}
		}
		return false;	
	}
	
	public static boolean hasOEClassPath() {
		return hasOEClassPath(getBasicCommand());
//		getBasicCommand();
//		if (basicCommand == null) {
//			return false;
//		}
//		for (String aCommand:basicCommand) {
//			if (aCommand.contains(OE_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
//				return true;
//			}
//		}
//		return false;	
	}
	public static boolean hasOEClassPath(List<String> basicCommand) {
//		getBasicCommand();
		if (basicCommand == null) {
			return false;
		}
		for (String aCommand:basicCommand) {
			if (aCommand.contains(OE_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
				return true;
			}
		}
		return false;	
	}
	
	public static boolean hasOEOrClassPath() {
		return hasClassPath(getBasicCommand()) || hasOEClassPath(getBasicCommand());
	}
	public static boolean hasOEOrClassPath(List<String> basicCommand) {
		return hasClassPath(basicCommand) || hasOEClassPath(basicCommand);
	}
	protected static String[] emptyEntryPoints = {};
	protected static String[] potentialMainEntryPoints;
//	public static String[] getPotentialMainEntryPointNames() {
//		String retVal = getInheritedStringModuleProblemProperty(ENTRY_POINT, null);
//		if (retVal != null) {
//			GraderSettingsManager manager = GraderSettingsManagerSelector.getGraderSettingsManager();
//			retVal = manager.replaceModuleProblemVars(retVal);
//			return new String[]{retVal.replaceAll(" ", "")};
//		}
//		return emptyEntryPoints;
//	}
	public static String[] getPotentialMainEntryPointNames() {
		return potentialMainEntryPoints;
//		if (potentialMainEntryPoints == null) {
//		String retVal = getInheritedStringModuleProblemProperty(ENTRY_POINT, null);
//		if (retVal != null) {
//			GraderSettingsManager manager = GraderSettingsManagerSelector.getGraderSettingsManager();
//			retVal = manager.replaceModuleProblemVars(retVal);
//			potentialMainEntryPoints = new String[]{retVal.replaceAll(" ", "")};
//		} else {
//			potentialMainEntryPoints = emptyEntryPoints;
//		}
//		}
//		return potentialMainEntryPoints;
	}
	
	public static void setPotentialMainEntryPointNames(String[] aNames) {
		potentialMainEntryPoints = aNames;
	}
	// we really do not need this method, for backwards compatibility
	public static List<String> getBasicCommand(String aProcessName) {	
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand(aProcessName);
//		List<String> retVal = processToBasicCommand.get(aProcessName);
//		if (retVal == null) {
////			retVal = getBasicCommand();
//			retVal = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		}
//		
//		return retVal;
		
	}
	public static void setBasicCommand(String aProcessName, List<String> aCommand) {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderBasicCommand(aProcessName, aCommand);
//		processToBasicCommand.put(aProcessName, aCommand);
	
	}
	public static boolean hasEntryPoint(List<String> aCommand) {
		return hasSubString(aCommand, ENTRY_POINT);
	}

	public static boolean hasSubString(List<String> aCommand, String aSubString) {
		for (String aCommmandComponent : aCommand) {
			if (aCommmandComponent.contains(aSubString)) {
				return true;
			}
		}
		return false;
	}

	public static boolean hasEntryTag(List<String> aProcessCommand) {
		return hasSubString(aProcessCommand, ENTRY_TAG);
	}

	public static boolean hasEntryTags(List<String> aProcessCommand) {
		return hasSubString(aProcessCommand, ENTRY_TAGS);
	}

	public static boolean haArgs(String aProcessCommand) {
		return aProcessCommand.contains(ARGS);
	}
	
//	public static final String FILE_SEPARATOR = System.getProperty("file.separator");
	public static final String FILE_SEPARATOR = "/";


	public static String quotePath(String path) {
		if (!path.contains(" ")) return path;
	    boolean startSlash = path.startsWith("\\") || path.startsWith("/");
	    boolean endSlash = path.endsWith("\\") || path.endsWith("/");
	    String[] split = path.split("[\\\\/]+");

	    StringBuilder quotPath = new StringBuilder(path.length());

	    if (startSlash) {
	        quotPath.append(FILE_SEPARATOR);
	    }
	    
	    for(int i = 0; i < split.length; i ++) {
	    	String s = split[i];
	        if (s.contains(" ")) {
//	            s = "\"" + s + "\"";
	            s = "\\\"" + s + "\\\"";

	        }
	        quotPath.append(s);
	        if (i+1 < split.length) {
	            quotPath.append(FILE_SEPARATOR);
	        }
	    }
	    
	    if (endSlash) {
	        quotPath.append(FILE_SEPARATOR);
	    }
	    
	    return quotPath.toString();
	}
	
	public static int getClassPathFlagIndex(List<String> aBasicCommand) {
		int aCpIndex = aBasicCommand.indexOf("-cp");
		if (aCpIndex < 0) 
			aCpIndex = aBasicCommand.indexOf("-classpath");
		return aCpIndex;
	}
	public static String getExecutionCommandRawClassPath() {
		return getExecutionCommandRawClassPath(getBasicCommand());
//		List<String> aBasicCommand = getBasicCommand();
//		int aCpIndex = getClassPathFlagIndex(aBasicCommand);
//		if (aCpIndex < 0)
//			return null;
//		if (aCpIndex + 1 >= aBasicCommand.size())
//			return null;
//		return getReplacedRawClassPath(aBasicCommand.get(aCpIndex + 1));
		
	}
	public static String getExecutionCommandRawClassPath(List<String> aBasicCommand) {
//		List<String> aBasicCommand = getBasicCommand();
		int aCpIndex = getClassPathFlagIndex(aBasicCommand);
		if (aCpIndex < 0)
			return null;
		if (aCpIndex + 1 >= aBasicCommand.size())
			return null;
		return getReplacedRawClassPath(aBasicCommand.get(aCpIndex + 1));
		
	}
	
	public static String getReplacedRawClassPath (String command) {
		// do we really need all of these ifs, more efficient without them? - debugging will be easier
					// all of these will be in the same command
					if (command.contains(CLASS_PATH_VAR)) {

						command = command.replace(CLASS_PATH_VAR,
								BasicGradingEnvironment.get().getClassPath());
					}

					if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
						command = command.replace(CLASS_PATH_SEPARATOR_VAR,
								BasicGradingEnvironment.get().getClassPathSeparator());
					}
					 
					if (command.contains(LOCAL_GRADER_PATH_VAR)) { // the config property does not have this, I suppose it is to allow student code to invoke api calls in grader

						command = command.replace(LOCAL_GRADER_PATH_VAR,
						// BasicGradingEnvironment.get().getClasspath());
								BasicGradingEnvironment.get().getLocalGraderClassPath());

					} 
					if (command.contains(OE_PATH_VAR)) {
						if (command.toLowerCase().contains("local")) { // we already have oeall
							command = command.replace(OE_PATH_VAR,
									// BasicGradingEnvironment.get().getClasspath());
									"");
						} else {
						command = command.replace(OE_PATH_VAR,
						// BasicGradingEnvironment.get().getClasspath());
								BasicGradingEnvironment.get().getOEClassPath());
						}

					}

					if (command.contains(JUNIT_PATH_VAR)) {
						command = command.replace(JUNIT_PATH_VAR,
								BasicGradingEnvironment.get().getJUnitClassPath());
						// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
						// command = command.replace(OE_AND_CLASS_PATH_VAR,
						// BasicGradingEnvironment.get().getClassPath());
					} 
					String aClassPathSeparator = BasicGradingEnvironment.get().getClassPathSeparator();
					if (duplicatedClassPathSeparator == null) {
						//just avoding new String creation
						duplicatedClassPathSeparator = aClassPathSeparator + aClassPathSeparator;
					}
					// certain libraries may not exist, specially in the server, see what happens without them
					command = command.replaceAll(duplicatedClassPathSeparator, aClassPathSeparator);
					return command;
					// javac wants no quotes!
//					String anOSPath = BasicGradingEnvironment.get().toOSClassPath(command);
//					return anOSPath;
	}
	public static void replaceClassPathVars (List<String> basicCommand) {
		int aCpIndex = getClassPathFlagIndex(basicCommand);
		if (aCpIndex < 0)
			return ;
		
		if (aCpIndex + 1 >= basicCommand.size()) {
			Tracer.warning("Nothing follows classpath flag");
			return ;
		}
		String aReplacement = getReplacedRawClassPath(basicCommand.get(aCpIndex + 1));
		String anOSPath = BasicGradingEnvironment.get().toOSClassPath(aReplacement);
		basicCommand.set(aCpIndex + 1, anOSPath);

		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			
////			// do we really need all of these ifs, more efficient without them? - debugging will be easier
////			// all of these will be in the same command
////			if (command.contains(CLASS_PATH_VAR)) {
////
////				command = command.replace(CLASS_PATH_VAR,
////						BasicGradingEnvironment.get().getClassPath());
////			}
////
////			if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
////				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
////						BasicGradingEnvironment.get().getClassPathSeparator());
////			}
////			if (command.contains(OE_PATH_VAR)) {
////
////				command = command.replace(OE_PATH_VAR,
////				// BasicGradingEnvironment.get().getClasspath());
////						BasicGradingEnvironment.get().getOEClassPath());
////
////			} 
////			if (command.contains(JUNIT_PATH_VAR)) {
////				command = command.replace(JUNIT_PATH_VAR,
////						BasicGradingEnvironment.get().getJUnitClassPath());
////				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
////				// command = command.replace(OE_AND_CLASS_PATH_VAR,
////				// BasicGradingEnvironment.get().getClassPath());
////			} 
//			command = getReplacedClassPath(command);
//			basicCommand.set(aCommandIndex, command);
//		}
	}
	
//	public static void replacePermissionVariables(List<String> basicCommand, Project aProject) {
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath);
//				basicCommand.set(aCommandIndex, command);
//
//			}
//		}
//	}
	
	public static void replaceEntryPoint(List<String> basicCommand,  String anEntryPoint,
			String anEntryTagTarget) {
		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {

			String command = basicCommand.get(aCommandIndex);
			if (anEntryPoint != null) {
				command = command
						.replace(toVariable(ENTRY_POINT), anEntryPoint);
				
			}
			if (anEntryTagTarget != null) {
				command = command.replace(toVariable(ENTRY_TAGS),
						anEntryTagTarget);
				command = command.replace(toVariable(ENTRY_TAG),
						anEntryTagTarget); // will match tags also

			}
			// check if entryTagTarget is empty and replace it with entry point
			basicCommand.set(aCommandIndex, command);
		}
	}
	public static void replaceBuildFolder(List<String> basicCommand,  File aBuildFolder) {
		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {

			String command = basicCommand.get(aCommandIndex);
			// we should always have a build folder I suppose
			// this is meant for C like programs
			if (command.contains(BUILD_FOLDER_VAR)) {
			command = command.replace(BUILD_FOLDER_VAR,
					aBuildFolder.getAbsolutePath());
			basicCommand.set(aCommandIndex, command);

			}
		}
	}
	public static void replaceArgs(List<String> basicCommand,  String[] anArgs) {
		int argsIndex = basicCommand.indexOf(toVariable(ARGS));
		if (argsIndex >= 0) {
			basicCommand.remove(argsIndex);
			if (anArgs != null) {
			for (int i = 0; i < anArgs.length; i++) {
				basicCommand.add(argsIndex + i, anArgs[i]);
			}
			}

		}
	}
//	public static String[] getExecutionCommand(Project aProject,
//			String aProcessName, File aBuildFolder, String anEntryPoint,
//			String anEntryTagTarget, String[] anArgs) {
//
//		List<String> basicCommand = null;
//		if (aProcessName == null || aProcessName.isEmpty()) {
//		    if (anEntryPoint != null) {
//		    	basicCommand = getBasicCommand();
////		    	basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
//
//		    } else {
//			basicCommand = getBasicCommand();
//		    }
//		} else {
//		
//			basicCommand = getBasicCommand(aProcessName);
//
//		}
//		return getExecutionCommand(basicCommand, aProject, aProcessName, aBuildFolder, anEntryPoint, anEntryTagTarget, anArgs);
//////		List<String> retVal = new ArrayList(basicCommand.size());
////		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
////		retVal.addAll(basicCommand);
////		replaceClassPathVars(retVal);
//////		replacePermissionVariables(retVal, aProject);
////		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
////		replaceBuildFolder(retVal, aBuildFolder);
////		replaceArgs(retVal, anArgs);
////		return retVal.toArray(new String[0]);
//
//
////		
////		
////		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
////
////			String command = basicCommand.get(aCommandIndex);
////			if (command.contains(CLASS_PATH_VAR)) {
////
////				command = command.replace(CLASS_PATH_VAR,
////						BasicGradingEnvironment.get().getClassPath());
////
////			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
////				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
////						BasicGradingEnvironment.get().getClassPathSeparator());
////			} else if (command.contains(OE_PATH_VAR)) {
////
////				command = command.replace(OE_PATH_VAR,
////				// BasicGradingEnvironment.get().getClasspath());
////						BasicGradingEnvironment.get().getOEClassPath());
////
////			} else if (command.contains(JUNIT_PATH_VAR)) {
////				command = command.replace(JUNIT_PATH_VAR,
////						BasicGradingEnvironment.get().getJUnitClassPath());
////				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
////				// command = command.replace(OE_AND_CLASS_PATH_VAR,
////				// BasicGradingEnvironment.get().getClassPath());
////			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
////
////				String aPolicyFilePath = JavaProjectToPermissionFile
////						.getPermissionFile(aProject).getAbsolutePath();
////				try {
////					aPolicyFilePath = JavaProjectToPermissionFile
////							.getPermissionFile(aProject).getCanonicalPath();
////				} catch (IOException e1) {
////					e1.printStackTrace();
////				}
////				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
////
////				aPolicyFilePath = quotePath(aPolicyFilePath);
////
////				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
////
////				);
////			}
////
////			if (anEntryPoint != null) {
////				command = command
////						.replace(toVariable(ENTRY_POINT), anEntryPoint);
////			}
////			if (anEntryTagTarget != null) {
////				command = command.replace(toVariable(ENTRY_TAGS),
////						anEntryTagTarget);
////				command = command.replace(toVariable(ENTRY_TAG),
////						anEntryTagTarget); // will match tags also
////
////			}
////
////			command = command.replace(toVariable(BUILD_FOLDER),
////					aBuildFolder.getAbsolutePath());
////
////			retVal.add(command);
////		}
////		int argsIndex = retVal.indexOf(toVariable(ARGS));
////		if (argsIndex >= 0) {
////			retVal.remove(argsIndex);
////			for (int i = 0; i < anArgs.length; i++) {
////				retVal.add(argsIndex + i, anArgs[i]);
////			}
////
////		}
////		return retVal.toArray(new String[0]);
//
//	}
	public static String[] getExecutionCommand(Project aProject,
			String aProcessName, File aBuildFolder, String anEntryPoint,
			String anEntryTagTarget, String[] anArgs) {

		List<String> basicCommand = null;
		if (aProcessName == null || aProcessName.isEmpty()) {
			basicCommand = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		    if (anEntryPoint != null) {
//		    	basicCommand = getBasicCommand();
////		    	basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
//
//		    } else {
//			basicCommand = getBasicCommand();
//		    }
		} else {
		
			basicCommand = getBasicCommand(aProcessName);

		}
		return getExecutionCommand(basicCommand, aProject, aProcessName, aBuildFolder, anEntryPoint, anEntryTagTarget, anArgs);
////		List<String> retVal = new ArrayList(basicCommand.size());
//		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
//		retVal.addAll(basicCommand);
//		replaceClassPathVars(retVal);
////		replacePermissionVariables(retVal, aProject);
//		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
//		replaceBuildFolder(retVal, aBuildFolder);
//		replaceArgs(retVal, anArgs);
//		return retVal.toArray(new String[0]);


//		
//		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (command.contains(CLASS_PATH_VAR)) {
//
//				command = command.replace(CLASS_PATH_VAR,
//						BasicGradingEnvironment.get().getClassPath());
//
//			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
//				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
//						BasicGradingEnvironment.get().getClassPathSeparator());
//			} else if (command.contains(OE_PATH_VAR)) {
//
//				command = command.replace(OE_PATH_VAR,
//				// BasicGradingEnvironment.get().getClasspath());
//						BasicGradingEnvironment.get().getOEClassPath());
//
//			} else if (command.contains(JUNIT_PATH_VAR)) {
//				command = command.replace(JUNIT_PATH_VAR,
//						BasicGradingEnvironment.get().getJUnitClassPath());
//				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
//				// command = command.replace(OE_AND_CLASS_PATH_VAR,
//				// BasicGradingEnvironment.get().getClassPath());
//			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
//
//				);
//			}
//
//			if (anEntryPoint != null) {
//				command = command
//						.replace(toVariable(ENTRY_POINT), anEntryPoint);
//			}
//			if (anEntryTagTarget != null) {
//				command = command.replace(toVariable(ENTRY_TAGS),
//						anEntryTagTarget);
//				command = command.replace(toVariable(ENTRY_TAG),
//						anEntryTagTarget); // will match tags also
//
//			}
//
//			command = command.replace(toVariable(BUILD_FOLDER),
//					aBuildFolder.getAbsolutePath());
//
//			retVal.add(command);
//		}
//		int argsIndex = retVal.indexOf(toVariable(ARGS));
//		if (argsIndex >= 0) {
//			retVal.remove(argsIndex);
//			for (int i = 0; i < anArgs.length; i++) {
//				retVal.add(argsIndex + i, anArgs[i]);
//			}
//
//		}
//		return retVal.toArray(new String[0]);

	}
	public static String[] getExecutionCommand(List<String> basicCommand, Project aProject,
			String aProcessName, File aBuildFolder, String anEntryPoint,
			String anEntryTagTarget, String[] anArgs) {

//		List<String> basicCommand = null;
//		if (aProcessName == null || aProcessName.isEmpty()) {
//		
//			basicCommand = getBasicCommand();
//		} else {
//		
//			basicCommand = getBasicCommand(aProcessName);
//
//		}
//		List<String> retVal = new ArrayList(basicCommand.size());
		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
		retVal.addAll(basicCommand);
		replaceClassPathVars(retVal);
//		replacePermissionVariables(retVal, aProject);
		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
		replaceBuildFolder(retVal, aBuildFolder);
		replaceArgs(retVal, anArgs);
		return retVal.toArray(new String[0]);


//		
//		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (command.contains(CLASS_PATH_VAR)) {
//
//				command = command.replace(CLASS_PATH_VAR,
//						BasicGradingEnvironment.get().getClassPath());
//
//			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
//				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
//						BasicGradingEnvironment.get().getClassPathSeparator());
//			} else if (command.contains(OE_PATH_VAR)) {
//
//				command = command.replace(OE_PATH_VAR,
//				// BasicGradingEnvironment.get().getClasspath());
//						BasicGradingEnvironment.get().getOEClassPath());
//
//			} else if (command.contains(JUNIT_PATH_VAR)) {
//				command = command.replace(JUNIT_PATH_VAR,
//						BasicGradingEnvironment.get().getJUnitClassPath());
//				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
//				// command = command.replace(OE_AND_CLASS_PATH_VAR,
//				// BasicGradingEnvironment.get().getClassPath());
//			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
//
//				);
//			}
//
//			if (anEntryPoint != null) {
//				command = command
//						.replace(toVariable(ENTRY_POINT), anEntryPoint);
//			}
//			if (anEntryTagTarget != null) {
//				command = command.replace(toVariable(ENTRY_TAGS),
//						anEntryTagTarget);
//				command = command.replace(toVariable(ENTRY_TAG),
//						anEntryTagTarget); // will match tags also
//
//			}
//
//			command = command.replace(toVariable(BUILD_FOLDER),
//					aBuildFolder.getAbsolutePath());
//
//			retVal.add(command);
//		}
//		int argsIndex = retVal.indexOf(toVariable(ARGS));
//		if (argsIndex >= 0) {
//			retVal.remove(argsIndex);
//			for (int i = 0; i < anArgs.length; i++) {
//				retVal.add(argsIndex + i, anArgs[i]);
//			}
//
//		}
//		return retVal.toArray(new String[0]);

	}
	public static List<String> getProcessTeams() {
		return graderProcessTeams;
	}
	public static void setProcessTeams(List<String> newVal) {
		 graderProcessTeams = newVal;;
	}
	public static boolean isTeamProcess() {
		return graderProcessTeams != null && graderProcessTeams.isEmpty();
	}
	public static boolean isUseProjectConfiguration() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().isUseProjectConfiguration();
//		return useProjectConfiguration;
	}
	public static void setUseProjectConfiguration(boolean newVal) {
//		BasicStaticConfigurationUtils.useProjectConfiguration = useProjectConfiguration;
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setUseProjectConfiguration(newVal);
	}
	public static Boolean getInheritedBooleanModuleProblemProperty(
			PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, Boolean defaultValue) {
		if (configuration == null) {
			return defaultValue;
		}
	
		Boolean retVal = configuration.getBoolean(module + "." + problem + "."
				+ property, null);
	
		if (retVal == null) {
			retVal = configuration.getBoolean(module + "." + property, null);
		}
		if (retVal == null) {
			retVal = configuration.getBoolean(DEFAULT + "." + property,
					defaultValue);
		}
	
		return retVal;
	
	}
	public static final String DEFAULT = "default";
	
	public static Integer getInheritedIntegerModuleProblemProperty(
			PropertiesConfiguration configuration, String module,
			String problem, String test, String property, Integer defaultValue) {
		if (configuration == null) {
			return defaultValue;
		}
	
		Integer retVal = configuration.getInteger(module + "." + problem + "."
				+ property, null);
	
		if (retVal == null) {
			retVal = configuration.getInteger(module + "." + property, null);
		}
		if (retVal == null) {
			retVal = configuration.getInteger(DEFAULT + "." + property,
					defaultValue);
		}
	
		return retVal;
	
	}
	
	public static String getConfigurationBasicDirectString (String property, String defaultValue) {
		
			if (!isUseProjectConfiguration()) {
				 // cannot use project configuration before location is known to create project
				return defaultValue;
			}
		 PropertiesConfiguration aConfiguration = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration();
		 if (aConfiguration == null) {
			 return defaultValue;
		 }
		 return aConfiguration.getString(property, defaultValue);
		
	}
	public static List getConfigurationBasicDirectList (String property, List  defaultValue) {
		
		if (property == BasicStaticConfigurationUtils.MODULES || // infinite recursion
			!isUseProjectConfiguration()) {
			 // cannot use project configuration before location is known to create project
			return defaultValue;
		}
	 PropertiesConfiguration aConfiguration = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration();
	 if (aConfiguration == null) {
		 return defaultValue;
	 }
	 List retVal = aConfiguration.getList(property);
	 if (retVal == null) {
		 return defaultValue;
	 }
	 return retVal;
	
}
	public static String getBasicInheritedStringModuleProblemProperty(
			String property, String defaultValue) {
		if (
			// cannot use project configuration before location is known to create project
			property == BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION || // can do == as we are using named constants
			!isUseProjectConfiguration() ) {
//			property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION){ 
			return defaultValue;
		}

	 return getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	}
	public static PropertiesConfiguration maybeGetLocalCourseConfguration() {
		if (GradingMode.getGraderRun()) {
			return null;
		}
		return 
		  BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration();
		
	}
	public static Boolean getBasicInheritedBooleanModuleProblemProperty(
			String property, Boolean defaultValue) {
		if (
			property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION || // avoiding recursion
			!isUseProjectConfiguration() ) {			  
			return defaultValue;
		}
//	 return getInheritedBooleanModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	 Boolean retVal = getInheritedBooleanModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, null);

	 if (retVal != null) {
		 return retVal;
	 }
	 return getInheritedBooleanModuleProblemProperty(
		BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration(), module, problem, test, property, defaultValue);
 
	}
	
	public static Integer getBasicInheritedIntegerModuleProblemProperty(
			String property, Integer defaultValue) {
		if (!isUseProjectConfiguration()) {
			return defaultValue;
		}

	 return getInheritedIntegerModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	}
	public static List getBasicInheritedListModuleProblemProperty(
			String property, List defaultValue) {
		if (!isUseProjectConfiguration() ) { // can do == as we are using named constants
			return defaultValue;
		}

	 return getInheritedListModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	}
	public static String getInheritedStringModuleProblemProperty(
			PropertiesConfiguration configuration, String module, 
			String problem, String aTest, String property, String defaultValue) {
		if (configuration == null) {
			System.err.println("Null configuration, returning " + defaultValue + " for " + property);
			return defaultValue;
		}
		String retVal = configuration.getString(module + "." + problem + "." + aTest + "."
				+ property, null);
		if (retVal != null) {
			return retVal;
		}
		retVal = configuration.getString(module + "." + problem + "."
				+ property, null);
	
//		String retVal = configuration.getString(module + "." + problem + "."
//				+ property, null);
		if (retVal != null) {
			return retVal;
		}
			retVal = configuration.getString(module + "." + property, null);
		if (retVal != null) {
			return retVal;
		}
//		if (retVal == null) {
			retVal = configuration.getString(DEFAULT + "." + property,
					defaultValue);
//		}
	
		return retVal;
	
	}
	public static List getInheritedListModuleProblemProperty(
			PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, List<String> aDefaultValue) {
		if (configuration == null) {
			return aDefaultValue;
		}
		List retVal = configuration.getList(module + "." + problem + "." + aTest + "."
				+ property);
	
		if (retVal.isEmpty()) {
			retVal = configuration.getList(module + "." + problem + "."
					+ property);
		}
		
	
//		List retVal = configuration.getList(module + "." + problem + "."
//				+ property);
	
		if (retVal.isEmpty()) {
			retVal = configuration.getList(module + "." + property);
		}
		if (retVal.isEmpty()) {
			retVal = configuration.getList(DEFAULT + "." + property);
		}
		if (retVal.isEmpty()) {
			retVal = aDefaultValue;
		}
	
		return retVal;
	
	}
	public static String getModule() {
		return module;
	}
	public static void setTest(Class aTest) {
		test = aTest.getSimpleName();
	}
	public static void setModuleProblemAndSuite(Class aSuiteClass) {
		testSuite = aSuiteClass.getSimpleName();
		Package aPackage = aSuiteClass.getPackage();
		String aPackageName = aPackage.getName();
		String[] aPackageComponents = aPackageName.split("\\.");
		if (aPackageComponents.length < 3) {
			System.err.println(aPackageName + " has < 3 components, cannot set module and problem ");
		}
		String aRawModuleName = aPackageComponents[1];
		String aRawProblemName = aPackageComponents[2];
		module = firstCharacterUpperCase(aRawModuleName);
		problem = firstCharacterUpperCase(aRawProblemName);
		
	}
	public static String firstCharacterUpperCase(String aLowerCaseString) {
		return Character.toUpperCase (aLowerCaseString.charAt(0)) + aLowerCaseString.substring(1);
	}
	public static void setModule(String module) {
		BasicStaticConfigurationUtils.module = module;
	}
	public static String getProblem() {
		return problem;
	}
	public static void setProblem(String problem) {
		BasicStaticConfigurationUtils.problem = problem;
	}
	public static String getTest() {
		return test;
	}
	public static void settest(String newVal) {
		test = newVal;
	}
	
	
	public static String getLanguage() {
		if (!isUseProjectConfiguration())
//			return JAVA;
			return BasicLanguageDependencyManager.JAVA_LANGUAGE;

		return getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, LANGUAGE, BasicLanguageDependencyManager.JAVA_LANGUAGE);

	}
	public static String toCompoundProperty(String aParent, String aChild) {
		return aParent + "." + aChild;
	}
}
]]></snapshot>
  </Command>
  <Command __id="9772" _type="MoveCaretCommand" caretOffset="35194" date="Sun Aug 25 09:41:37 EDT 2019" docOffset="35643" timestamp="164820738" />
  <Command __id="9773" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:41:40 EDT 2019" timestamp="164823541" />
  <Command __id="9774" _type="RunCommand" date="Sun Aug 25 09:41:40 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="164823544" type="Run" />
  <Command __id="9775" _type="RunCommand" date="Sun Aug 25 09:42:04 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="164847617" type="Debug" />
  <Command __id="9776" _type="RunCommand" date="Sun Aug 25 09:42:04 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="164847617" type="Debug" />
  <Command __id="9777" _type="RunCommand" date="Sun Aug 25 09:42:04 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="164847617" type="Run" />
  <Command __id="9778" _type="SelectTextCommand" caretOffset="35575" date="Sun Aug 25 09:42:21 EDT 2019" end="35575" start="35561" timestamp="164864236" />
  <Command __id="9779" _type="CopyCommand" date="Sun Aug 25 09:42:22 EDT 2019" timestamp="164865356" />
  <Command __id="9780" _type="MoveCaretCommand" caretOffset="35184" date="Sun Aug 25 09:42:24 EDT 2019" docOffset="35633" timestamp="164867217" />
  <DocumentChange __id="9781" _type="Insert" date="Sun Aug 25 09:42:24 EDT 2019" docASTNodeCount="3075" docActiveCodeLength="24286" docExpressionCount="1723" docLength="40965" length="4" offset="35633" timestamp="164868036">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <Command __id="9782" _type="InsertStringCommand" date="Sun Aug 25 09:42:24 EDT 2019" timestamp="164868044" timestamp2="164868044">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="9783" _type="Replace" date="Sun Aug 25 09:42:26 EDT 2019" docASTNodeCount="3080" docActiveCodeLength="24300" docExpressionCount="1725" docLength="40979" endLine="942" insertionLength="16" int_docASTNodeCount="3075" int_docActiveCodeLength="24284" int_docExpressionCount="1723" int_docLength="40963" length="2" offset="35635" startLine="942" timestamp="164869909">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		Boolean retVal]]></insertedText>
  </DocumentChange>
  <Command __id="9784" _type="PasteCommand" date="Sun Aug 25 09:42:26 EDT 2019" timestamp="164869919" />
  <DocumentChange __id="9785" _type="Insert" date="Sun Aug 25 09:42:28 EDT 2019" docASTNodeCount="3081" docActiveCodeLength="24308" docExpressionCount="1726" docLength="40987" length="8" offset="35651" repeat="8" timestamp="164871267" timestamp2="164873564">
    <text><![CDATA[ = null;]]></text>
  </DocumentChange>
  <Command __id="9786" _type="InsertStringCommand" date="Sun Aug 25 09:42:28 EDT 2019" repeat="8" timestamp="164871275" timestamp2="164873573">
    <data><![CDATA[ = null;]]></data>
  </Command>
  <Command __id="9801" _type="SelectTextCommand" caretOffset="35387" date="Sun Aug 25 09:42:48 EDT 2019" end="35387" start="35214" timestamp="164891305" />
  <DocumentChange __id="9802" _type="Insert" date="Sun Aug 25 09:42:49 EDT 2019" docASTNodeCount="3081" docActiveCodeLength="24302" docExpressionCount="1726" docLength="40989" length="2" offset="35661" timestamp="164892138">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="9803" _type="Insert" date="Sun Aug 25 09:42:49 EDT 2019" docASTNodeCount="3078" docActiveCodeLength="24228" docExpressionCount="1723" docLength="40991" length="2" offset="35671" timestamp="164892143">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="9804" _type="Insert" date="Sun Aug 25 09:42:49 EDT 2019" docASTNodeCount="3057" docActiveCodeLength="24188" docExpressionCount="1703" docLength="40993" length="2" offset="35770" timestamp="164892154">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="9805" _type="Insert" date="Sun Aug 25 09:42:49 EDT 2019" docASTNodeCount="3055" docActiveCodeLength="24165" docExpressionCount="1702" docLength="40995" length="2" offset="35814" timestamp="164892161">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="9806" _type="Insert" date="Sun Aug 25 09:42:49 EDT 2019" docASTNodeCount="3068" docActiveCodeLength="24162" docExpressionCount="1716" docLength="40997" length="2" offset="35841" timestamp="164892165">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9807" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 09:42:49 EDT 2019" timestamp="164892186" />
  <Command __id="9808" _type="MoveCaretCommand" caretOffset="35597" date="Sun Aug 25 09:42:51 EDT 2019" docOffset="36046" timestamp="164894988" />
  <DocumentChange __id="9809" _type="Insert" date="Sun Aug 25 09:42:52 EDT 2019" docASTNodeCount="3068" docActiveCodeLength="24170" docExpressionCount="1716" docLength="41005" length="8" offset="36046" repeat="2" timestamp="164895693" timestamp2="164895859">
    <text><![CDATA[
		
		]]></text>
  </DocumentChange>
  <Command __id="9810" _type="InsertStringCommand" date="Sun Aug 25 09:42:52 EDT 2019" timestamp="164895699" timestamp2="164895699">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="9812" _type="InsertStringCommand" date="Sun Aug 25 09:42:52 EDT 2019" timestamp="164895865" timestamp2="164895865">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="9813" _type="Delete" date="Sun Aug 25 09:42:53 EDT 2019" docASTNodeCount="3068" docActiveCodeLength="24169" docExpressionCount="1716" docLength="41004" endLine="951" length="1" offset="36053" startLine="951" timestamp="164896612">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="9814" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:42:53 EDT 2019" timestamp="164896617" />
  <Command __id="9815" _type="SelectTextCommand" caretOffset="35363" date="Sun Aug 25 09:43:00 EDT 2019" end="35363" start="35212" timestamp="164903531" />
  <Command __id="9816" _type="CopyCommand" date="Sun Aug 25 09:43:01 EDT 2019" timestamp="164904164" />
  <Command __id="9817" _type="MoveCaretCommand" caretOffset="35597" date="Sun Aug 25 09:43:03 EDT 2019" docOffset="36046" timestamp="164906331" />
  <DocumentChange __id="9818" _type="Replace" date="Sun Aug 25 09:43:03 EDT 2019" docASTNodeCount="3068" docActiveCodeLength="24171" docExpressionCount="1716" docLength="41151" endLine="949" insertionLength="149" int_docASTNodeCount="3068" int_docActiveCodeLength="24167" int_docExpressionCount="1716" int_docLength="41002" length="2" offset="36044" startLine="949" timestamp="164907026">
    <deletedText><![CDATA[	 ]]></deletedText>
    <insertedText><![CDATA[//		if (
//		property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION || // avoiding recursion
//		!isUseProjectConfiguration() ) {			  ]]></insertedText>
  </DocumentChange>
  <Command __id="9819" _type="PasteCommand" date="Sun Aug 25 09:43:03 EDT 2019" timestamp="164907040" />
  <Command __id="9820" _type="SelectTextCommand" caretOffset="35595" date="Sun Aug 25 09:43:12 EDT 2019" end="35705" start="35595" timestamp="164915303" />
  <DocumentChange __id="9821" _type="Delete" date="Sun Aug 25 09:43:12 EDT 2019" docASTNodeCount="3069" docActiveCodeLength="24177" docExpressionCount="1717" docLength="41149" endLine="949" length="2" offset="36044" startLine="949" timestamp="164915926">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="9822" _type="Delete" date="Sun Aug 25 09:43:12 EDT 2019" docASTNodeCount="3075" docActiveCodeLength="24250" docExpressionCount="1723" docLength="41147" endLine="950" length="2" offset="36052" startLine="950" timestamp="164915930">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="9823" _type="Delete" date="Sun Aug 25 09:43:12 EDT 2019" docASTNodeCount="3079" docActiveCodeLength="24289" docExpressionCount="1725" docLength="41145" endLine="951" length="2" offset="36148" startLine="951" timestamp="164915935">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="9824" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 09:43:12 EDT 2019" timestamp="164915954" />
  <Command __id="9825" _type="MoveCaretCommand" caretOffset="35712" date="Sun Aug 25 09:43:14 EDT 2019" docOffset="36161" timestamp="164917495" />
  <Command __id="9826" _type="MoveCaretCommand" caretOffset="35647" date="Sun Aug 25 09:43:50 EDT 2019" docOffset="36096" timestamp="164953487" />
  <Command __id="9827" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Aug 25 09:43:51 EDT 2019" timestamp="164954349" />
  <Command __id="9828" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Sun Aug 25 09:43:54 EDT 2019" timestamp="164957994" />
  <Command __id="9829" _type="ShellCommand" date="Sun Aug 25 09:44:00 EDT 2019" timestamp="164963770" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9830" _type="ShellCommand" date="Sun Aug 25 09:44:02 EDT 2019" timestamp="164965599" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9831" _type="MoveCaretCommand" caretOffset="35617" date="Sun Aug 25 09:44:15 EDT 2019" docOffset="36066" timestamp="164978600" />
  <Command __id="9832" _type="MoveCaretCommand" caretOffset="35647" date="Sun Aug 25 09:44:25 EDT 2019" docOffset="36096" timestamp="164989011" />
  <Command __id="9833" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.open.editor" date="Sun Aug 25 09:44:26 EDT 2019" timestamp="164989826" />
  <Command __id="9834" _type="EclipseCommand" commandID="org.eclipse.ui.navigate.backwardHistory" date="Sun Aug 25 09:44:29 EDT 2019" timestamp="164992950" />
  <Command __id="9835" _type="MoveCaretCommand" caretOffset="35615" date="Sun Aug 25 09:44:35 EDT 2019" docOffset="36064" timestamp="164998758" />
  <DocumentChange __id="9836" _type="Delete" date="Sun Aug 25 09:44:39 EDT 2019" docASTNodeCount="3079" docActiveCodeLength="24288" docExpressionCount="1725" docLength="41144" endLine="950" length="1" offset="36063" startLine="950" timestamp="165002177">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <Command __id="9837" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:44:39 EDT 2019" timestamp="165002181" />
  <DocumentChange __id="9838" _type="Insert" date="Sun Aug 25 09:44:41 EDT 2019" docASTNodeCount="3079" docActiveCodeLength="24289" docExpressionCount="1725" docLength="41145" length="1" offset="36063" timestamp="165004706">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <Command __id="9839" _type="InsertStringCommand" date="Sun Aug 25 09:44:41 EDT 2019" timestamp="165004709" timestamp2="165004709">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="9840" _type="SelectTextCommand" caretOffset="35673" date="Sun Aug 25 09:44:45 EDT 2019" end="35675" start="35673" timestamp="165008565" />
  <DocumentChange __id="9841" _type="Replace" date="Sun Aug 25 09:44:46 EDT 2019" docASTNodeCount="3079" docActiveCodeLength="24288" docExpressionCount="1725" docLength="41144" endLine="950" insertionLength="1" int_docASTNodeCount="3078" int_docActiveCodeLength="24287" int_docExpressionCount="1724" int_docLength="41143" length="2" offset="36122" startLine="950" timestamp="165009335">
    <deletedText><![CDATA[||]]></deletedText>
    <insertedText><![CDATA[&]]></insertedText>
  </DocumentChange>
  <Command __id="9842" _type="InsertStringCommand" date="Sun Aug 25 09:44:46 EDT 2019" repeat="2" timestamp="165009340" timestamp2="165009458">
    <data><![CDATA[&&]]></data>
  </Command>
  <DocumentChange __id="9843" _type="Insert" date="Sun Aug 25 09:44:46 EDT 2019" docASTNodeCount="3079" docActiveCodeLength="24289" docExpressionCount="1725" docLength="41145" length="1" offset="36123" timestamp="165009452">
    <text><![CDATA[&]]></text>
  </DocumentChange>
  <Command __id="9845" _type="MoveCaretCommand" caretOffset="35702" date="Sun Aug 25 09:44:51 EDT 2019" docOffset="36151" timestamp="165015015" />
  <DocumentChange __id="9846" _type="Delete" date="Sun Aug 25 09:44:52 EDT 2019" docASTNodeCount="3078" docActiveCodeLength="24288" docExpressionCount="1724" docLength="41144" endLine="951" length="1" offset="36150" startLine="951" timestamp="165015546">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <Command __id="9847" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:44:52 EDT 2019" timestamp="165015549" />
  <Command __id="9848" _type="PredictionCommand" date="Sun Aug 25 09:44:52 EDT 2019" prediction_type="MakingProgress" timestamp="165015550" />
  <Command __id="9849" _type="MoveCaretCommand" caretOffset="35747" date="Sun Aug 25 09:44:54 EDT 2019" docOffset="36196" timestamp="165017380" />
  <Command __id="9850" _type="SelectTextCommand" caretOffset="35751" date="Sun Aug 25 09:44:54 EDT 2019" end="35751" start="35744" timestamp="165017595" />
  <DocumentChange __id="9851" _type="Delete" date="Sun Aug 25 09:44:55 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24281" docExpressionCount="1724" docLength="41137" endLine="953" length="7" offset="36193" startLine="953" timestamp="165018120">
    <text><![CDATA[Boolean]]></text>
  </DocumentChange>
  <Command __id="9852" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:44:55 EDT 2019" timestamp="165018172" />
  <DocumentChange __id="9853" _type="Replace" date="Sun Aug 25 09:44:59 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24282" docExpressionCount="1724" docLength="41138" endLine="953" insertionLength="3" int_docASTNodeCount="3076" int_docActiveCodeLength="24279" int_docExpressionCount="1724" int_docLength="41135" length="2" offset="36192" startLine="953" timestamp="165023029">
    <deletedText><![CDATA[	 ]]></deletedText>
    <insertedText><![CDATA[			]]></insertedText>
  </DocumentChange>
  <Command __id="9854" _type="InsertStringCommand" date="Sun Aug 25 09:44:59 EDT 2019" timestamp="165023037" timestamp2="165023037">
    <data><![CDATA[	]]></data>
  </Command>
  <DocumentChange __id="9855" _type="Insert" date="Sun Aug 25 09:45:13 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24284" docExpressionCount="1724" docLength="41140" length="2" offset="36195" repeat="2" timestamp="165036239" timestamp2="165036466">
    <text><![CDATA[  ]]></text>
  </DocumentChange>
  <Command __id="9856" _type="InsertStringCommand" date="Sun Aug 25 09:45:13 EDT 2019" repeat="2" timestamp="165036243" timestamp2="165036471">
    <data><![CDATA[  ]]></data>
  </Command>
  <DocumentChange __id="9859" _type="Delete" date="Sun Aug 25 09:45:13 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24282" docExpressionCount="1724" docLength="41138" endLine="953" length="2" offset="36195" repeat="2" startLine="953" timestamp="165037072" timestamp2="165037242">
    <text><![CDATA[  ]]></text>
  </DocumentChange>
  <Command __id="9860" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:45:13 EDT 2019" repeat="2" timestamp="165037077" timestamp2="165037247" />
  <Command __id="9863" _type="MoveCaretCommand" caretOffset="35936" date="Sun Aug 25 09:45:16 EDT 2019" docOffset="36385" timestamp="165039562" />
  <Command __id="9864" _type="SelectTextCommand" caretOffset="35976" date="Sun Aug 25 09:45:18 EDT 2019" end="35976" start="35936" timestamp="165041122" />
  <DocumentChange __id="9865" _type="Insert" date="Sun Aug 25 09:45:19 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24283" docExpressionCount="1724" docLength="41139" length="1" offset="36383" timestamp="165042328">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="9866" _type="Insert" date="Sun Aug 25 09:45:19 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24284" docExpressionCount="1724" docLength="41140" length="1" offset="36409" timestamp="165042334">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="9867" _type="InsertStringCommand" date="Sun Aug 25 09:45:19 EDT 2019" timestamp="165042355" timestamp2="165042355">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="9868" _type="MoveCaretCommand" caretOffset="35982" date="Sun Aug 25 09:45:21 EDT 2019" docOffset="36431" timestamp="165044511" />
  <DocumentChange __id="9869" _type="Replace" date="Sun Aug 25 09:45:21 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24285" docExpressionCount="1724" docLength="41141" endLine="957" insertionLength="3" int_docASTNodeCount="3076" int_docActiveCodeLength="24282" int_docExpressionCount="1724" int_docLength="41138" length="2" offset="36429" startLine="957" timestamp="165044915">
    <deletedText><![CDATA[	 ]]></deletedText>
    <insertedText><![CDATA[		 ]]></insertedText>
  </DocumentChange>
  <Command __id="9870" _type="InsertStringCommand" date="Sun Aug 25 09:45:21 EDT 2019" timestamp="165044921" timestamp2="165044921">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="9871" _type="MoveCaretCommand" caretOffset="35984" date="Sun Aug 25 09:45:38 EDT 2019" docOffset="36433" timestamp="165061443" />
  <DocumentChange __id="9872" _type="Insert" date="Sun Aug 25 09:45:38 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" length="5" offset="36433" timestamp="165061814">
    <text><![CDATA[
		 ]]></text>
  </DocumentChange>
  <Command __id="9873" _type="InsertStringCommand" date="Sun Aug 25 09:45:38 EDT 2019" timestamp="165061820" timestamp2="165061820">
    <data><![CDATA[]]></data>
  </Command>
  <DocumentChange __id="9874" _type="Replace" date="Sun Aug 25 09:45:40 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" endLine="958" insertionLength="3" int_docASTNodeCount="3076" int_docActiveCodeLength="24287" int_docExpressionCount="1724" int_docLength="41143" length="3" offset="36435" startLine="958" timestamp="165063262">
    <deletedText><![CDATA[		 ]]></deletedText>
    <insertedText><![CDATA[		}]]></insertedText>
  </DocumentChange>
  <Command __id="9875" _type="InsertStringCommand" date="Sun Aug 25 09:45:40 EDT 2019" timestamp="165063269" timestamp2="165063269">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="9876" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:45:57 EDT 2019" timestamp="165080390" />
  <Command __id="9877" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sun Aug 25 09:46:06 EDT 2019" timestamp="165089717" />
  <Command __id="9878" _type="BreakPointCommand" date="Sun Aug 25 09:46:06 EDT 2019" lineNumber="943" timestamp="165089719" type="BreakPointAdded" />
  <Command __id="9879" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.DebugLast" date="Sun Aug 25 09:46:08 EDT 2019" timestamp="165091193" />
  <Command __id="9880" _type="EclipseCommand" commandID="" date="Sun Aug 25 09:46:08 EDT 2019" repeat="6" timestamp="165091501" timestamp2="165091648" />
  <Command __id="9886" _type="RunCommand" date="Sun Aug 25 09:46:08 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="165091757" type="Run" />
  <Command __id="9887" _type="RunCommand" date="Sun Aug 25 09:46:08 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="165091757" type="Run" />
  <Command __id="9888" _type="RunCommand" date="Sun Aug 25 09:46:08 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165091971" type="Run" />
  <Command __id="9889" _type="RunCommand" date="Sun Aug 25 09:46:09 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165092103" type="Run" />
  <Command __id="9890" _type="RunCommand" date="Sun Aug 25 09:46:09 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165092252" type="Run" />
  <Command __id="9891" _type="EHExceptionCommand" date="Sun Aug 25 09:46:09 EDT 2019" timestamp="165092343" type="Exception">
    <outputString><![CDATA[I***Tracer: showInfo = true
]]></outputString>
  </Command>
  <Command __id="9892" _type="EHExceptionCommand" date="Sun Aug 25 09:46:09 EDT 2019" timestamp="165092407" type="Exception">
    <outputString><![CDATA[Buffer traced nessages =false
]]></outputString>
  </Command>
  <Command __id="9893" _type="RunCommand" date="Sun Aug 25 09:46:09 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165092803" type="Run" />
  <Command __id="9894" _type="FileOpenCommand" date="Sun Aug 25 09:46:09 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="165092962">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <Command __id="9895" _type="MoveCaretCommand" caretOffset="10023" date="Sun Aug 25 09:46:10 EDT 2019" docOffset="10023" timestamp="165093157" />
  <Command __id="9896" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:46:12 EDT 2019" timestamp="165095226" />
  <Command __id="9897" _type="RunCommand" date="Sun Aug 25 09:46:12 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165095226" type="Run" />
  <Command __id="9898" _type="FileOpenCommand" date="Sun Aug 25 09:46:12 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" projectName="GraderBasics" timestamp="165095483">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.configuration.PropertiesConfiguration;

import grader.basics.BasicLanguageDependencyManager;
import grader.basics.execution.GradingMode;
import grader.basics.project.Project;
import grader.basics.settings.BasicGradingEnvironment;
import util.trace.Tracer;
/**
 * 
 *This serves two purposes.
 *It defines defaults for configurable properties.
 *It also reads project-based properties to be used in localchecks on student
 *computer.
 *Ultimate authority over properties in localchecks mode is ABasicExecution
 *
 */
public class BasicStaticConfigurationUtils {
	public static final String PRIVACY = "privacy";
	public static final String EXECUTION_COMMAND = "execution";

	public static final String LANGUAGE = "language";
	
	public static final String ENTRY_POINT = "entryPoint";
	public static final String BUILD_FOLDER = "buildFolder";
	public static final String PERMISSIONS = "permissions";

	public static final String CLASS_PATH = "classPath";
	public static final String OE_PATH = "oePath";
	public static final String JUNIT_PATH = "junitPath";
	public static final String LOCAL_GRADER_PATH = "localGraderPath";
	public static final String OE_AND_CLASS_PATH = "oeAndClassPath";
	public static final String CLASS_PATH_SEPARATOR = ":";

	public static final String PROCESS_TEAMS = "processTeams";

	public static final String ENTRY_TAG = "entryTag";
	public static final String ENTRY_TAGS = "entryTags";
	public static final String RESOURCE_RELEASE_TIME = "sleepTime";
	public static final String ARGS = "args";
	public static final String START_TAGS = "startTags";
	public static final String TERMINATING = "terminating";
	public static final String GENERATE_TRACE_FILES = "trace";

//	public static final String JAVA = "Java";

	public static final String CLASS_PATH_VAR = toVariable(CLASS_PATH);
	public static final String CLASS_PATH_SEPARATOR_VAR = toVariable(CLASS_PATH_SEPARATOR);
	public static final String OE_PATH_VAR = toVariable(OE_PATH);
	public static final String LOCAL_GRADER_PATH_VAR = toVariable(LOCAL_GRADER_PATH);

	public static final String JUNIT_PATH_VAR = toVariable(JUNIT_PATH);
	public static final String OE_AND_CLASS_PATH_VAR = toVariable(OE_AND_CLASS_PATH );
	public static final String PERMISSIONS_VAR = toVariable(PERMISSIONS);
	public static final String BUILD_FOLDER_VAR = toVariable(BUILD_FOLDER);
	public static final String IMPLICIT_REQUIRMENTS_ROOT = "implicitRequirementsRoot";
	public static final String DEFAULT_IMPLICIT_REQUIRMENTS_ROOT = "gradingTools";
	public static final String USE_EXECEUTOR = "useExecutor";
	public static final boolean DEFAULT_USE_EXECUTOR = false;
	public static final String EXECUTOR = "executor";
	// this makes no sense, but it is consistent with config file
	public static final String DEFAULT_EXECUTOR = "D:/dewan_backup/Java/Grader/executor";
	public static final String C_OBJ = "language.C.obj";
	public static final String DEFAULT_C_OBJ = "o";
	public static final String MODULES = "modules";
	public static final String DEFAULT_MODULE = "Comp101";
	public static final String FORK_MAIN = "forkMain";
	public static final Boolean DEFAULT_FORK_MAIN = true;
	public static final String GRADABLE_PROJECT_LOCATION = "gradableProjectLocation";
	public static final String SOURCE_LOCATION = "sourceLocation";
	public static final String BINARY_LOCATION = "binaryLocation";
	public static final String OBJECT_LOCATION = "objectLocation";
	public static final String OUTPUT_WAIT_TIME = "outputWaitTime";
	public static final String TEAM_OUTPUT_WAIT_TIME = "teamOutputWaitTime";
	public static final String WAIT_FOR_RESORT = "waitForResort";
	public static final String RESORT_TIME = "resortTime";
	public static final String PROCESS_TIMEOUT = "processTimeout";
	public static final String METHOD_TIMEOUT = "methodTimeout";
	public static final String CONSTRUCTOR_TIMEOUT = "constructorTimeout";
	public static final String USE_METHOD_CONSTRUCTOR_TIMEOUT = "useMethodConstructorTimeout";
	public static final String USE_PROCESS_TIMEOUT = "useProcessTimeout";
	public static final String WAIT_FOR_METHOD_CONSTRUCTOR_AND_PROCESSES = "waitFotMethodConstructorAndProcesses";
	public static final String USE_PROJECT_CONFIGURATION = "useProjectConfiguration";
	public static final boolean DEFAULT_USE_PROJECT_CONFIGURATION = false;






//	private static  List<String> basicCommand;
//	private static Map<String, List<String>> processToBasicCommand = new HashMap();
	private static String duplicatedClassPathSeparator;
	private static List<String> graderProcessTeams;

	private static boolean useProjectConfiguration;
	protected static String module;
	
	protected static String problem;
	protected static String test;
	protected static String testSuite;
	protected static List<String> emptyList = new ArrayList();


//	Comp533s18.execution = java, -cp, .{:}..{:}{classPath}{:}{oePath}{:}{junitPath}, {entryTags}, {args}


	//	public static final String[] DEFAULT_JAVA_BASIC_COMMAND_ARRAY = {
//			"java", "-cp", ".{:}..{:}{classPath}{:}{:}{junitPath}{:}{localGraderPath}", "{entryTags}", "{args}"
//	};
	public static final String[] DEFAULT_JAVA_BASIC_COMMAND_ARRAY = {
			"java", "-cp", ".{:}..{:}{classPath}{:}{:}{junitPath}{:}{localGraderPath}", "{entryPoint}", "{args}"
	};
	public static final String[] DEFAULT_OE_BASIC_COMMAND_ARRAY = {
			"java", "-cp", ".{:}..{:}{classPath}{:}{oePath}{:}{junitPath}{:}{localGraderPath}", "{entryTags}", "{args}"
	};

	public static final List<String> DEFAULT_JAVA_BASIC_COMMAND =
			Arrays.asList(DEFAULT_JAVA_BASIC_COMMAND_ARRAY);
	public static final List<String> DEFAULT_OE_BASIC_COMMAND =
			Arrays.asList(DEFAULT_OE_BASIC_COMMAND_ARRAY);
	public static final int DEFAULT_RESOURCE_RELEASE_TIME = 2000;
	public static final int DEFAULT_CONSTRUCTOR_TIME_OUT = 2000;// in
	// milliseconds
public static final int DEFAULT_METHOD_TIME_OUT = 2000; // in milliseconds
public static final int DEFAULT_PROCESS_TIME_OUT = 4; // in seconds
public static final  String CHECK_ALL_SPECIFIED_TAGS = "checkAllSpecifiedTags";
public static final  boolean DEFAULT_CHECK_ALL_SPECIFIED_TAGS = false;


	
	public static String toVariable(String aVariableName) {
		return "{" + aVariableName + "}";
	}
	public static void setBasicCommandToDefaultEntryPointCommand() {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderBasicCommand(DEFAULT_JAVA_BASIC_COMMAND);
//		basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
	}
	public static void setBasicCommandToDefaultEntryTagCommand() {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderBasicCommand(DEFAULT_OE_BASIC_COMMAND);
//		basicCommand =  DEFAULT_OE_BASIC_COMMAND;
	}
	public static List<String> getBasicCommand() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		if (basicCommand == null) {
//			basicCommand = DEFAULT_OE_BASIC_COMMAND;
//		}
//////		return getInheritedListModuleProblemProperty(EXECUTION_COMMAND);
//		return basicCommand;
	}
	public static boolean hasClassPath() {
//		getBasicCommand();
		return hasClassPath(getBasicCommand());
//		if (basicCommand == null) {
//			return false;
//		}
//		for (String aCommand:basicCommand) {
//			if (aCommand.contains(CLASS_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
//				return true;
//			}
//		}
//		return false;	
	}
	public static boolean hasClassPath(List<String> basicCommand) {
//		getBasicCommand();
		if (basicCommand == null) {
			return false;
		}
		for (String aCommand:basicCommand) {
			if (aCommand.contains(CLASS_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
				return true;
			}
		}
		return false;	
	}
	
	public static boolean hasOEClassPath() {
		return hasOEClassPath(getBasicCommand());
//		getBasicCommand();
//		if (basicCommand == null) {
//			return false;
//		}
//		for (String aCommand:basicCommand) {
//			if (aCommand.contains(OE_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
//				return true;
//			}
//		}
//		return false;	
	}
	public static boolean hasOEClassPath(List<String> basicCommand) {
//		getBasicCommand();
		if (basicCommand == null) {
			return false;
		}
		for (String aCommand:basicCommand) {
			if (aCommand.contains(OE_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
				return true;
			}
		}
		return false;	
	}
	
	public static boolean hasOEOrClassPath() {
		return hasClassPath(getBasicCommand()) || hasOEClassPath(getBasicCommand());
	}
	public static boolean hasOEOrClassPath(List<String> basicCommand) {
		return hasClassPath(basicCommand) || hasOEClassPath(basicCommand);
	}
	protected static String[] emptyEntryPoints = {};
	protected static String[] potentialMainEntryPoints;
//	public static String[] getPotentialMainEntryPointNames() {
//		String retVal = getInheritedStringModuleProblemProperty(ENTRY_POINT, null);
//		if (retVal != null) {
//			GraderSettingsManager manager = GraderSettingsManagerSelector.getGraderSettingsManager();
//			retVal = manager.replaceModuleProblemVars(retVal);
//			return new String[]{retVal.replaceAll(" ", "")};
//		}
//		return emptyEntryPoints;
//	}
	public static String[] getPotentialMainEntryPointNames() {
		return potentialMainEntryPoints;
//		if (potentialMainEntryPoints == null) {
//		String retVal = getInheritedStringModuleProblemProperty(ENTRY_POINT, null);
//		if (retVal != null) {
//			GraderSettingsManager manager = GraderSettingsManagerSelector.getGraderSettingsManager();
//			retVal = manager.replaceModuleProblemVars(retVal);
//			potentialMainEntryPoints = new String[]{retVal.replaceAll(" ", "")};
//		} else {
//			potentialMainEntryPoints = emptyEntryPoints;
//		}
//		}
//		return potentialMainEntryPoints;
	}
	
	public static void setPotentialMainEntryPointNames(String[] aNames) {
		potentialMainEntryPoints = aNames;
	}
	// we really do not need this method, for backwards compatibility
	public static List<String> getBasicCommand(String aProcessName) {	
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand(aProcessName);
//		List<String> retVal = processToBasicCommand.get(aProcessName);
//		if (retVal == null) {
////			retVal = getBasicCommand();
//			retVal = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		}
//		
//		return retVal;
		
	}
	public static void setBasicCommand(String aProcessName, List<String> aCommand) {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderBasicCommand(aProcessName, aCommand);
//		processToBasicCommand.put(aProcessName, aCommand);
	
	}
	public static boolean hasEntryPoint(List<String> aCommand) {
		return hasSubString(aCommand, ENTRY_POINT);
	}

	public static boolean hasSubString(List<String> aCommand, String aSubString) {
		for (String aCommmandComponent : aCommand) {
			if (aCommmandComponent.contains(aSubString)) {
				return true;
			}
		}
		return false;
	}

	public static boolean hasEntryTag(List<String> aProcessCommand) {
		return hasSubString(aProcessCommand, ENTRY_TAG);
	}

	public static boolean hasEntryTags(List<String> aProcessCommand) {
		return hasSubString(aProcessCommand, ENTRY_TAGS);
	}

	public static boolean haArgs(String aProcessCommand) {
		return aProcessCommand.contains(ARGS);
	}
	
//	public static final String FILE_SEPARATOR = System.getProperty("file.separator");
	public static final String FILE_SEPARATOR = "/";


	public static String quotePath(String path) {
		if (!path.contains(" ")) return path;
	    boolean startSlash = path.startsWith("\\") || path.startsWith("/");
	    boolean endSlash = path.endsWith("\\") || path.endsWith("/");
	    String[] split = path.split("[\\\\/]+");

	    StringBuilder quotPath = new StringBuilder(path.length());

	    if (startSlash) {
	        quotPath.append(FILE_SEPARATOR);
	    }
	    
	    for(int i = 0; i < split.length; i ++) {
	    	String s = split[i];
	        if (s.contains(" ")) {
//	            s = "\"" + s + "\"";
	            s = "\\\"" + s + "\\\"";

	        }
	        quotPath.append(s);
	        if (i+1 < split.length) {
	            quotPath.append(FILE_SEPARATOR);
	        }
	    }
	    
	    if (endSlash) {
	        quotPath.append(FILE_SEPARATOR);
	    }
	    
	    return quotPath.toString();
	}
	
	public static int getClassPathFlagIndex(List<String> aBasicCommand) {
		int aCpIndex = aBasicCommand.indexOf("-cp");
		if (aCpIndex < 0) 
			aCpIndex = aBasicCommand.indexOf("-classpath");
		return aCpIndex;
	}
	public static String getExecutionCommandRawClassPath() {
		return getExecutionCommandRawClassPath(getBasicCommand());
//		List<String> aBasicCommand = getBasicCommand();
//		int aCpIndex = getClassPathFlagIndex(aBasicCommand);
//		if (aCpIndex < 0)
//			return null;
//		if (aCpIndex + 1 >= aBasicCommand.size())
//			return null;
//		return getReplacedRawClassPath(aBasicCommand.get(aCpIndex + 1));
		
	}
	public static String getExecutionCommandRawClassPath(List<String> aBasicCommand) {
//		List<String> aBasicCommand = getBasicCommand();
		int aCpIndex = getClassPathFlagIndex(aBasicCommand);
		if (aCpIndex < 0)
			return null;
		if (aCpIndex + 1 >= aBasicCommand.size())
			return null;
		return getReplacedRawClassPath(aBasicCommand.get(aCpIndex + 1));
		
	}
	
	public static String getReplacedRawClassPath (String command) {
		// do we really need all of these ifs, more efficient without them? - debugging will be easier
					// all of these will be in the same command
					if (command.contains(CLASS_PATH_VAR)) {

						command = command.replace(CLASS_PATH_VAR,
								BasicGradingEnvironment.get().getClassPath());
					}

					if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
						command = command.replace(CLASS_PATH_SEPARATOR_VAR,
								BasicGradingEnvironment.get().getClassPathSeparator());
					}
					 
					if (command.contains(LOCAL_GRADER_PATH_VAR)) { // the config property does not have this, I suppose it is to allow student code to invoke api calls in grader

						command = command.replace(LOCAL_GRADER_PATH_VAR,
						// BasicGradingEnvironment.get().getClasspath());
								BasicGradingEnvironment.get().getLocalGraderClassPath());

					} 
					if (command.contains(OE_PATH_VAR)) {
						if (command.toLowerCase().contains("local")) { // we already have oeall
							command = command.replace(OE_PATH_VAR,
									// BasicGradingEnvironment.get().getClasspath());
									"");
						} else {
						command = command.replace(OE_PATH_VAR,
						// BasicGradingEnvironment.get().getClasspath());
								BasicGradingEnvironment.get().getOEClassPath());
						}

					}

					if (command.contains(JUNIT_PATH_VAR)) {
						command = command.replace(JUNIT_PATH_VAR,
								BasicGradingEnvironment.get().getJUnitClassPath());
						// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
						// command = command.replace(OE_AND_CLASS_PATH_VAR,
						// BasicGradingEnvironment.get().getClassPath());
					} 
					String aClassPathSeparator = BasicGradingEnvironment.get().getClassPathSeparator();
					if (duplicatedClassPathSeparator == null) {
						//just avoding new String creation
						duplicatedClassPathSeparator = aClassPathSeparator + aClassPathSeparator;
					}
					// certain libraries may not exist, specially in the server, see what happens without them
					command = command.replaceAll(duplicatedClassPathSeparator, aClassPathSeparator);
					return command;
					// javac wants no quotes!
//					String anOSPath = BasicGradingEnvironment.get().toOSClassPath(command);
//					return anOSPath;
	}
	public static void replaceClassPathVars (List<String> basicCommand) {
		int aCpIndex = getClassPathFlagIndex(basicCommand);
		if (aCpIndex < 0)
			return ;
		
		if (aCpIndex + 1 >= basicCommand.size()) {
			Tracer.warning("Nothing follows classpath flag");
			return ;
		}
		String aReplacement = getReplacedRawClassPath(basicCommand.get(aCpIndex + 1));
		String anOSPath = BasicGradingEnvironment.get().toOSClassPath(aReplacement);
		basicCommand.set(aCpIndex + 1, anOSPath);

		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			
////			// do we really need all of these ifs, more efficient without them? - debugging will be easier
////			// all of these will be in the same command
////			if (command.contains(CLASS_PATH_VAR)) {
////
////				command = command.replace(CLASS_PATH_VAR,
////						BasicGradingEnvironment.get().getClassPath());
////			}
////
////			if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
////				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
////						BasicGradingEnvironment.get().getClassPathSeparator());
////			}
////			if (command.contains(OE_PATH_VAR)) {
////
////				command = command.replace(OE_PATH_VAR,
////				// BasicGradingEnvironment.get().getClasspath());
////						BasicGradingEnvironment.get().getOEClassPath());
////
////			} 
////			if (command.contains(JUNIT_PATH_VAR)) {
////				command = command.replace(JUNIT_PATH_VAR,
////						BasicGradingEnvironment.get().getJUnitClassPath());
////				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
////				// command = command.replace(OE_AND_CLASS_PATH_VAR,
////				// BasicGradingEnvironment.get().getClassPath());
////			} 
//			command = getReplacedClassPath(command);
//			basicCommand.set(aCommandIndex, command);
//		}
	}
	
//	public static void replacePermissionVariables(List<String> basicCommand, Project aProject) {
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath);
//				basicCommand.set(aCommandIndex, command);
//
//			}
//		}
//	}
	
	public static void replaceEntryPoint(List<String> basicCommand,  String anEntryPoint,
			String anEntryTagTarget) {
		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {

			String command = basicCommand.get(aCommandIndex);
			if (anEntryPoint != null) {
				command = command
						.replace(toVariable(ENTRY_POINT), anEntryPoint);
				
			}
			if (anEntryTagTarget != null) {
				command = command.replace(toVariable(ENTRY_TAGS),
						anEntryTagTarget);
				command = command.replace(toVariable(ENTRY_TAG),
						anEntryTagTarget); // will match tags also

			}
			// check if entryTagTarget is empty and replace it with entry point
			basicCommand.set(aCommandIndex, command);
		}
	}
	public static void replaceBuildFolder(List<String> basicCommand,  File aBuildFolder) {
		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {

			String command = basicCommand.get(aCommandIndex);
			// we should always have a build folder I suppose
			// this is meant for C like programs
			if (command.contains(BUILD_FOLDER_VAR)) {
			command = command.replace(BUILD_FOLDER_VAR,
					aBuildFolder.getAbsolutePath());
			basicCommand.set(aCommandIndex, command);

			}
		}
	}
	public static void replaceArgs(List<String> basicCommand,  String[] anArgs) {
		int argsIndex = basicCommand.indexOf(toVariable(ARGS));
		if (argsIndex >= 0) {
			basicCommand.remove(argsIndex);
			if (anArgs != null) {
			for (int i = 0; i < anArgs.length; i++) {
				basicCommand.add(argsIndex + i, anArgs[i]);
			}
			}

		}
	}
//	public static String[] getExecutionCommand(Project aProject,
//			String aProcessName, File aBuildFolder, String anEntryPoint,
//			String anEntryTagTarget, String[] anArgs) {
//
//		List<String> basicCommand = null;
//		if (aProcessName == null || aProcessName.isEmpty()) {
//		    if (anEntryPoint != null) {
//		    	basicCommand = getBasicCommand();
////		    	basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
//
//		    } else {
//			basicCommand = getBasicCommand();
//		    }
//		} else {
//		
//			basicCommand = getBasicCommand(aProcessName);
//
//		}
//		return getExecutionCommand(basicCommand, aProject, aProcessName, aBuildFolder, anEntryPoint, anEntryTagTarget, anArgs);
//////		List<String> retVal = new ArrayList(basicCommand.size());
////		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
////		retVal.addAll(basicCommand);
////		replaceClassPathVars(retVal);
//////		replacePermissionVariables(retVal, aProject);
////		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
////		replaceBuildFolder(retVal, aBuildFolder);
////		replaceArgs(retVal, anArgs);
////		return retVal.toArray(new String[0]);
//
//
////		
////		
////		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
////
////			String command = basicCommand.get(aCommandIndex);
////			if (command.contains(CLASS_PATH_VAR)) {
////
////				command = command.replace(CLASS_PATH_VAR,
////						BasicGradingEnvironment.get().getClassPath());
////
////			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
////				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
////						BasicGradingEnvironment.get().getClassPathSeparator());
////			} else if (command.contains(OE_PATH_VAR)) {
////
////				command = command.replace(OE_PATH_VAR,
////				// BasicGradingEnvironment.get().getClasspath());
////						BasicGradingEnvironment.get().getOEClassPath());
////
////			} else if (command.contains(JUNIT_PATH_VAR)) {
////				command = command.replace(JUNIT_PATH_VAR,
////						BasicGradingEnvironment.get().getJUnitClassPath());
////				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
////				// command = command.replace(OE_AND_CLASS_PATH_VAR,
////				// BasicGradingEnvironment.get().getClassPath());
////			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
////
////				String aPolicyFilePath = JavaProjectToPermissionFile
////						.getPermissionFile(aProject).getAbsolutePath();
////				try {
////					aPolicyFilePath = JavaProjectToPermissionFile
////							.getPermissionFile(aProject).getCanonicalPath();
////				} catch (IOException e1) {
////					e1.printStackTrace();
////				}
////				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
////
////				aPolicyFilePath = quotePath(aPolicyFilePath);
////
////				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
////
////				);
////			}
////
////			if (anEntryPoint != null) {
////				command = command
////						.replace(toVariable(ENTRY_POINT), anEntryPoint);
////			}
////			if (anEntryTagTarget != null) {
////				command = command.replace(toVariable(ENTRY_TAGS),
////						anEntryTagTarget);
////				command = command.replace(toVariable(ENTRY_TAG),
////						anEntryTagTarget); // will match tags also
////
////			}
////
////			command = command.replace(toVariable(BUILD_FOLDER),
////					aBuildFolder.getAbsolutePath());
////
////			retVal.add(command);
////		}
////		int argsIndex = retVal.indexOf(toVariable(ARGS));
////		if (argsIndex >= 0) {
////			retVal.remove(argsIndex);
////			for (int i = 0; i < anArgs.length; i++) {
////				retVal.add(argsIndex + i, anArgs[i]);
////			}
////
////		}
////		return retVal.toArray(new String[0]);
//
//	}
	public static String[] getExecutionCommand(Project aProject,
			String aProcessName, File aBuildFolder, String anEntryPoint,
			String anEntryTagTarget, String[] anArgs) {

		List<String> basicCommand = null;
		if (aProcessName == null || aProcessName.isEmpty()) {
			basicCommand = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		    if (anEntryPoint != null) {
//		    	basicCommand = getBasicCommand();
////		    	basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
//
//		    } else {
//			basicCommand = getBasicCommand();
//		    }
		} else {
		
			basicCommand = getBasicCommand(aProcessName);

		}
		return getExecutionCommand(basicCommand, aProject, aProcessName, aBuildFolder, anEntryPoint, anEntryTagTarget, anArgs);
////		List<String> retVal = new ArrayList(basicCommand.size());
//		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
//		retVal.addAll(basicCommand);
//		replaceClassPathVars(retVal);
////		replacePermissionVariables(retVal, aProject);
//		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
//		replaceBuildFolder(retVal, aBuildFolder);
//		replaceArgs(retVal, anArgs);
//		return retVal.toArray(new String[0]);


//		
//		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (command.contains(CLASS_PATH_VAR)) {
//
//				command = command.replace(CLASS_PATH_VAR,
//						BasicGradingEnvironment.get().getClassPath());
//
//			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
//				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
//						BasicGradingEnvironment.get().getClassPathSeparator());
//			} else if (command.contains(OE_PATH_VAR)) {
//
//				command = command.replace(OE_PATH_VAR,
//				// BasicGradingEnvironment.get().getClasspath());
//						BasicGradingEnvironment.get().getOEClassPath());
//
//			} else if (command.contains(JUNIT_PATH_VAR)) {
//				command = command.replace(JUNIT_PATH_VAR,
//						BasicGradingEnvironment.get().getJUnitClassPath());
//				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
//				// command = command.replace(OE_AND_CLASS_PATH_VAR,
//				// BasicGradingEnvironment.get().getClassPath());
//			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
//
//				);
//			}
//
//			if (anEntryPoint != null) {
//				command = command
//						.replace(toVariable(ENTRY_POINT), anEntryPoint);
//			}
//			if (anEntryTagTarget != null) {
//				command = command.replace(toVariable(ENTRY_TAGS),
//						anEntryTagTarget);
//				command = command.replace(toVariable(ENTRY_TAG),
//						anEntryTagTarget); // will match tags also
//
//			}
//
//			command = command.replace(toVariable(BUILD_FOLDER),
//					aBuildFolder.getAbsolutePath());
//
//			retVal.add(command);
//		}
//		int argsIndex = retVal.indexOf(toVariable(ARGS));
//		if (argsIndex >= 0) {
//			retVal.remove(argsIndex);
//			for (int i = 0; i < anArgs.length; i++) {
//				retVal.add(argsIndex + i, anArgs[i]);
//			}
//
//		}
//		return retVal.toArray(new String[0]);

	}
	public static String[] getExecutionCommand(List<String> basicCommand, Project aProject,
			String aProcessName, File aBuildFolder, String anEntryPoint,
			String anEntryTagTarget, String[] anArgs) {

//		List<String> basicCommand = null;
//		if (aProcessName == null || aProcessName.isEmpty()) {
//		
//			basicCommand = getBasicCommand();
//		} else {
//		
//			basicCommand = getBasicCommand(aProcessName);
//
//		}
//		List<String> retVal = new ArrayList(basicCommand.size());
		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
		retVal.addAll(basicCommand);
		replaceClassPathVars(retVal);
//		replacePermissionVariables(retVal, aProject);
		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
		replaceBuildFolder(retVal, aBuildFolder);
		replaceArgs(retVal, anArgs);
		return retVal.toArray(new String[0]);


//		
//		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (command.contains(CLASS_PATH_VAR)) {
//
//				command = command.replace(CLASS_PATH_VAR,
//						BasicGradingEnvironment.get().getClassPath());
//
//			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
//				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
//						BasicGradingEnvironment.get().getClassPathSeparator());
//			} else if (command.contains(OE_PATH_VAR)) {
//
//				command = command.replace(OE_PATH_VAR,
//				// BasicGradingEnvironment.get().getClasspath());
//						BasicGradingEnvironment.get().getOEClassPath());
//
//			} else if (command.contains(JUNIT_PATH_VAR)) {
//				command = command.replace(JUNIT_PATH_VAR,
//						BasicGradingEnvironment.get().getJUnitClassPath());
//				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
//				// command = command.replace(OE_AND_CLASS_PATH_VAR,
//				// BasicGradingEnvironment.get().getClassPath());
//			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
//
//				);
//			}
//
//			if (anEntryPoint != null) {
//				command = command
//						.replace(toVariable(ENTRY_POINT), anEntryPoint);
//			}
//			if (anEntryTagTarget != null) {
//				command = command.replace(toVariable(ENTRY_TAGS),
//						anEntryTagTarget);
//				command = command.replace(toVariable(ENTRY_TAG),
//						anEntryTagTarget); // will match tags also
//
//			}
//
//			command = command.replace(toVariable(BUILD_FOLDER),
//					aBuildFolder.getAbsolutePath());
//
//			retVal.add(command);
//		}
//		int argsIndex = retVal.indexOf(toVariable(ARGS));
//		if (argsIndex >= 0) {
//			retVal.remove(argsIndex);
//			for (int i = 0; i < anArgs.length; i++) {
//				retVal.add(argsIndex + i, anArgs[i]);
//			}
//
//		}
//		return retVal.toArray(new String[0]);

	}
	public static List<String> getProcessTeams() {
		return graderProcessTeams;
	}
	public static void setProcessTeams(List<String> newVal) {
		 graderProcessTeams = newVal;;
	}
	public static boolean isTeamProcess() {
		return graderProcessTeams != null && graderProcessTeams.isEmpty();
	}
	public static boolean isUseProjectConfiguration() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().isUseProjectConfiguration();
//		return useProjectConfiguration;
	}
	public static void setUseProjectConfiguration(boolean newVal) {
//		BasicStaticConfigurationUtils.useProjectConfiguration = useProjectConfiguration;
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setUseProjectConfiguration(newVal);
	}
	public static Boolean getInheritedBooleanModuleProblemProperty(
			PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, Boolean defaultValue) {
		if (configuration == null) {
			return defaultValue;
		}
	
		Boolean retVal = configuration.getBoolean(module + "." + problem + "."
				+ property, null);
	
		if (retVal == null) {
			retVal = configuration.getBoolean(module + "." + property, null);
		}
		if (retVal == null) {
			retVal = configuration.getBoolean(DEFAULT + "." + property,
					defaultValue);
		}
	
		return retVal;
	
	}
	public static final String DEFAULT = "default";
	
	public static Integer getInheritedIntegerModuleProblemProperty(
			PropertiesConfiguration configuration, String module,
			String problem, String test, String property, Integer defaultValue) {
		if (configuration == null) {
			return defaultValue;
		}
	
		Integer retVal = configuration.getInteger(module + "." + problem + "."
				+ property, null);
	
		if (retVal == null) {
			retVal = configuration.getInteger(module + "." + property, null);
		}
		if (retVal == null) {
			retVal = configuration.getInteger(DEFAULT + "." + property,
					defaultValue);
		}
	
		return retVal;
	
	}
	
	public static String getConfigurationBasicDirectString (String property, String defaultValue) {
		
			if (!isUseProjectConfiguration()) {
				 // cannot use project configuration before location is known to create project
				return defaultValue;
			}
		 PropertiesConfiguration aConfiguration = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration();
		 if (aConfiguration == null) {
			 return defaultValue;
		 }
		 return aConfiguration.getString(property, defaultValue);
		
	}
	public static List getConfigurationBasicDirectList (String property, List  defaultValue) {
		
		if (property == BasicStaticConfigurationUtils.MODULES || // infinite recursion
			!isUseProjectConfiguration()) {
			 // cannot use project configuration before location is known to create project
			return defaultValue;
		}
	 PropertiesConfiguration aConfiguration = BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration();
	 if (aConfiguration == null) {
		 return defaultValue;
	 }
	 List retVal = aConfiguration.getList(property);
	 if (retVal == null) {
		 return defaultValue;
	 }
	 return retVal;
	
}
	public static String getBasicInheritedStringModuleProblemProperty(
			String property, String defaultValue) {
		if (
			// cannot use project configuration before location is known to create project
			property == BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION || // can do == as we are using named constants
			!isUseProjectConfiguration() ) {
//			property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION){ 
			return defaultValue;
		}

	 return getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	}
	public static PropertiesConfiguration maybeGetLocalCourseConfguration() {
		if (GradingMode.getGraderRun()) {
			return null;
		}
		return 
		  BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration();
		
	}
	public static Boolean getBasicInheritedBooleanModuleProblemProperty(
			String property, Boolean defaultValue) {
		Boolean retVal = null;
//		if (
//			property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION || // avoiding recursion
//			!isUseProjectConfiguration() ) {			  
//			return defaultValue;
//		}
//	 return getInheritedBooleanModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
		if (
		property != BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION && // avoiding recursion
		isUseProjectConfiguration() ) {			  
		
			retVal = getInheritedBooleanModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, null);

		 if (retVal != null) {
			 return retVal;
		 }
		}
	 return getInheritedBooleanModuleProblemProperty(
		BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration(), module, problem, test, property, defaultValue);
 
	}
	
	public static Integer getBasicInheritedIntegerModuleProblemProperty(
			String property, Integer defaultValue) {
		if (!isUseProjectConfiguration()) {
			return defaultValue;
		}

	 return getInheritedIntegerModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	}
	public static List getBasicInheritedListModuleProblemProperty(
			String property, List defaultValue) {
		if (!isUseProjectConfiguration() ) { // can do == as we are using named constants
			return defaultValue;
		}

	 return getInheritedListModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	}
	public static String getInheritedStringModuleProblemProperty(
			PropertiesConfiguration configuration, String module, 
			String problem, String aTest, String property, String defaultValue) {
		if (configuration == null) {
			System.err.println("Null configuration, returning " + defaultValue + " for " + property);
			return defaultValue;
		}
		String retVal = configuration.getString(module + "." + problem + "." + aTest + "."
				+ property, null);
		if (retVal != null) {
			return retVal;
		}
		retVal = configuration.getString(module + "." + problem + "."
				+ property, null);
	
//		String retVal = configuration.getString(module + "." + problem + "."
//				+ property, null);
		if (retVal != null) {
			return retVal;
		}
			retVal = configuration.getString(module + "." + property, null);
		if (retVal != null) {
			return retVal;
		}
//		if (retVal == null) {
			retVal = configuration.getString(DEFAULT + "." + property,
					defaultValue);
//		}
	
		return retVal;
	
	}
	public static List getInheritedListModuleProblemProperty(
			PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, List<String> aDefaultValue) {
		if (configuration == null) {
			return aDefaultValue;
		}
		List retVal = configuration.getList(module + "." + problem + "." + aTest + "."
				+ property);
	
		if (retVal.isEmpty()) {
			retVal = configuration.getList(module + "." + problem + "."
					+ property);
		}
		
	
//		List retVal = configuration.getList(module + "." + problem + "."
//				+ property);
	
		if (retVal.isEmpty()) {
			retVal = configuration.getList(module + "." + property);
		}
		if (retVal.isEmpty()) {
			retVal = configuration.getList(DEFAULT + "." + property);
		}
		if (retVal.isEmpty()) {
			retVal = aDefaultValue;
		}
	
		return retVal;
	
	}
	public static String getModule() {
		return module;
	}
	public static void setTest(Class aTest) {
		test = aTest.getSimpleName();
	}
	public static void setModuleProblemAndSuite(Class aSuiteClass) {
		testSuite = aSuiteClass.getSimpleName();
		Package aPackage = aSuiteClass.getPackage();
		String aPackageName = aPackage.getName();
		String[] aPackageComponents = aPackageName.split("\\.");
		if (aPackageComponents.length < 3) {
			System.err.println(aPackageName + " has < 3 components, cannot set module and problem ");
		}
		String aRawModuleName = aPackageComponents[1];
		String aRawProblemName = aPackageComponents[2];
		module = firstCharacterUpperCase(aRawModuleName);
		problem = firstCharacterUpperCase(aRawProblemName);
		
	}
	public static String firstCharacterUpperCase(String aLowerCaseString) {
		return Character.toUpperCase (aLowerCaseString.charAt(0)) + aLowerCaseString.substring(1);
	}
	public static void setModule(String module) {
		BasicStaticConfigurationUtils.module = module;
	}
	public static String getProblem() {
		return problem;
	}
	public static void setProblem(String problem) {
		BasicStaticConfigurationUtils.problem = problem;
	}
	public static String getTest() {
		return test;
	}
	public static void settest(String newVal) {
		test = newVal;
	}
	
	
	public static String getLanguage() {
		if (!isUseProjectConfiguration())
//			return JAVA;
			return BasicLanguageDependencyManager.JAVA_LANGUAGE;

		return getInheritedStringModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, LANGUAGE, BasicLanguageDependencyManager.JAVA_LANGUAGE);

	}
	public static String toCompoundProperty(String aParent, String aChild) {
		return aParent + "." + aChild;
	}
}
]]></snapshot>
  </Command>
  <Command __id="9899" _type="MoveCaretCommand" caretOffset="35186" date="Sun Aug 25 09:46:12 EDT 2019" docOffset="35635" timestamp="165095607" />
  <Command __id="9900" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:46:13 EDT 2019" timestamp="165096922" />
  <Command __id="9901" _type="RunCommand" date="Sun Aug 25 09:46:13 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165096932" type="Run" />
  <Command __id="9902" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:46:16 EDT 2019" timestamp="165099085" />
  <Command __id="9903" _type="RunCommand" date="Sun Aug 25 09:46:16 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165099090" type="Run" />
  <Command __id="9904" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 09:46:18 EDT 2019" timestamp="165102065" />
  <Command __id="9905" _type="RunCommand" date="Sun Aug 25 09:46:18 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165102068" type="Run" />
  <Command __id="9906" _type="FileOpenCommand" date="Sun Aug 25 09:46:19 EDT 2019" docASTNodeCount="52" docActiveCodeLength="549" docExpressionCount="26" docLength="549" projectName="GraderBasics" timestamp="165102425">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicConfigurationManagerSelector.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

public class BasicConfigurationManagerSelector {
	static BasicConfigurationManager configurationManager;

	public static BasicConfigurationManager getConfigurationManager() {
		if (configurationManager == null) {
			configurationManager = new ABasicConfigurationManager();
		}
		return configurationManager;
	}

	public static void setConfigurationManager(
			BasicConfigurationManager configurationManager) {
		BasicConfigurationManagerSelector.configurationManager = configurationManager;
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="9907" _type="MoveCaretCommand" caretOffset="212" date="Sun Aug 25 09:46:19 EDT 2019" docOffset="212" timestamp="165102556" />
  <Command __id="9908" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:46:20 EDT 2019" timestamp="165103447" />
  <Command __id="9909" _type="RunCommand" date="Sun Aug 25 09:46:20 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165103456" type="Run" />
  <Command __id="9910" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:46:21 EDT 2019" timestamp="165104449" />
  <Command __id="9911" _type="RunCommand" date="Sun Aug 25 09:46:21 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165104458" type="Run" />
  <Command __id="9912" _type="EHExceptionCommand" date="Sun Aug 25 09:46:21 EDT 2019" timestamp="165104748" type="Exception">
    <outputString><![CDATA[W***./config/course.properties does not exist, using defaults
]]></outputString>
  </Command>
  <Command __id="9913" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 09:46:23 EDT 2019" timestamp="165106764" />
  <Command __id="9914" _type="RunCommand" date="Sun Aug 25 09:46:23 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165106770" type="Run" />
  <Command __id="9915" _type="FileOpenCommand" date="Sun Aug 25 09:46:24 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" projectName="GraderBasics" timestamp="165107082">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <Command __id="9916" _type="MoveCaretCommand" caretOffset="36043" date="Sun Aug 25 09:46:24 EDT 2019" docOffset="36492" timestamp="165107245" />
  <Command __id="9917" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 09:46:25 EDT 2019" timestamp="165108282" />
  <Command __id="9918" _type="RunCommand" date="Sun Aug 25 09:46:25 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165108284" type="Run" />
  <Command __id="9919" _type="FileOpenCommand" date="Sun Aug 25 09:46:25 EDT 2019" docASTNodeCount="353" docActiveCodeLength="3032" docExpressionCount="213" docLength="3539" projectName="GraderBasics" timestamp="165108624">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
  </Command>
  <Command __id="9920" _type="MoveCaretCommand" caretOffset="2644" date="Sun Aug 25 09:46:25 EDT 2019" docOffset="2644" timestamp="165108752" />
  <Command __id="9921" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 09:46:30 EDT 2019" timestamp="165113139" />
  <Command __id="9922" _type="RunCommand" date="Sun Aug 25 09:46:30 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165113176" type="Run" />
  <Command __id="9923" _type="FileOpenCommand" date="Sun Aug 25 09:46:30 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" projectName="GraderBasics" timestamp="165113471">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <Command __id="9924" _type="MoveCaretCommand" caretOffset="36043" date="Sun Aug 25 09:46:30 EDT 2019" docOffset="36492" timestamp="165113627" />
  <Command __id="9925" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 09:46:31 EDT 2019" timestamp="165114587" />
  <Command __id="9926" _type="RunCommand" date="Sun Aug 25 09:46:31 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165114594" type="Run" />
  <Command __id="9927" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 09:46:32 EDT 2019" timestamp="165115790" />
  <Command __id="9928" _type="RunCommand" date="Sun Aug 25 09:46:32 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165115801" type="Run" />
  <Command __id="9929" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:46:33 EDT 2019" timestamp="165116819" />
  <Command __id="9930" _type="RunCommand" date="Sun Aug 25 09:46:33 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165116828" type="Run" />
  <Command __id="9931" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 09:46:36 EDT 2019" timestamp="165119746" />
  <Command __id="9932" _type="RunCommand" date="Sun Aug 25 09:46:36 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165119751" type="Run" />
  <Command __id="9933" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 09:46:38 EDT 2019" timestamp="165121212" />
  <Command __id="9934" _type="RunCommand" date="Sun Aug 25 09:46:38 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165121219" type="Run" />
  <Command __id="9935" _type="FileOpenCommand" date="Sun Aug 25 09:46:38 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="165121541">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <Command __id="9936" _type="MoveCaretCommand" caretOffset="10023" date="Sun Aug 25 09:46:38 EDT 2019" docOffset="10023" timestamp="165121703" />
  <Command __id="9937" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 09:46:50 EDT 2019" timestamp="165133622" />
  <Command __id="9938" _type="RunCommand" date="Sun Aug 25 09:46:50 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165133628" type="Run" />
  <Command __id="9939" _type="ShellCommand" date="Sun Aug 25 09:46:57 EDT 2019" timestamp="165140356" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="9940" _type="ShellCommand" date="Sun Aug 25 09:46:59 EDT 2019" timestamp="165142350" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="9941" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:46:59 EDT 2019" timestamp="165142497" />
  <Command __id="9942" _type="RunCommand" date="Sun Aug 25 09:46:59 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165142507" type="Run" />
  <Command __id="9943" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:46:59 EDT 2019" timestamp="165142999" />
  <Command __id="9944" _type="RunCommand" date="Sun Aug 25 09:46:59 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165143011" type="Run" />
  <Command __id="9945" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:47:00 EDT 2019" timestamp="165143553" />
  <Command __id="9946" _type="RunCommand" date="Sun Aug 25 09:47:00 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165143563" type="Run" />
  <Command __id="9947" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:47:00 EDT 2019" timestamp="165144016" />
  <Command __id="9948" _type="RunCommand" date="Sun Aug 25 09:47:00 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165144026" type="Run" />
  <Command __id="9949" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:47:02 EDT 2019" timestamp="165145497" />
  <Command __id="9950" _type="RunCommand" date="Sun Aug 25 09:47:02 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165145505" type="Run" />
  <Command __id="9951" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:47:02 EDT 2019" timestamp="165145999" />
  <Command __id="9952" _type="RunCommand" date="Sun Aug 25 09:47:02 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165146008" type="Run" />
  <Command __id="9953" _type="RunCommand" date="Sun Aug 25 09:47:06 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165149461" type="Run" />
  <Command __id="9954" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:47:15 EDT 2019" timestamp="165158666" />
  <Command __id="9955" _type="RunCommand" date="Sun Aug 25 09:47:15 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165158666" type="Run" />
  <Command __id="9956" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:47:21 EDT 2019" timestamp="165164976" />
  <Command __id="9957" _type="RunCommand" date="Sun Aug 25 09:47:21 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165164976" type="Run" />
  <Command __id="9958" _type="FileOpenCommand" date="Sun Aug 25 09:47:22 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" projectName="GraderBasics" timestamp="165165237">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <Command __id="9959" _type="MoveCaretCommand" caretOffset="35186" date="Sun Aug 25 09:47:22 EDT 2019" docOffset="35635" timestamp="165165373" />
  <Command __id="9960" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:47:24 EDT 2019" timestamp="165167895" />
  <Command __id="9961" _type="RunCommand" date="Sun Aug 25 09:47:24 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165167895" type="Run" />
  <Command __id="9962" _type="FileOpenCommand" date="Sun Aug 25 09:47:25 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="165168182">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <Command __id="9963" _type="MoveCaretCommand" caretOffset="10023" date="Sun Aug 25 09:47:25 EDT 2019" docOffset="10023" timestamp="165168308" />
  <Command __id="9964" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:47:30 EDT 2019" timestamp="165173546" />
  <Command __id="9965" _type="RunCommand" date="Sun Aug 25 09:47:30 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165173547" type="Run" />
  <Command __id="9966" _type="FileOpenCommand" date="Sun Aug 25 09:47:30 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" projectName="GraderBasics" timestamp="165173839">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <Command __id="9967" _type="MoveCaretCommand" caretOffset="35186" date="Sun Aug 25 09:47:30 EDT 2019" docOffset="35635" timestamp="165173999" />
  <Command __id="9968" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:47:31 EDT 2019" timestamp="165174710" />
  <Command __id="9969" _type="RunCommand" date="Sun Aug 25 09:47:31 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165174710" type="Run" />
  <Command __id="9970" _type="FileOpenCommand" date="Sun Aug 25 09:47:31 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="165174937">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <Command __id="9971" _type="MoveCaretCommand" caretOffset="10023" date="Sun Aug 25 09:47:32 EDT 2019" docOffset="10023" timestamp="165175112" />
  <Command __id="9972" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 09:47:41 EDT 2019" timestamp="165184512" />
  <Command __id="9973" _type="RunCommand" date="Sun Aug 25 09:47:41 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165184518" type="Run" />
  <Command __id="9974" _type="FileOpenCommand" date="Sun Aug 25 09:47:41 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" projectName="GraderBasics" timestamp="165184860">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <Command __id="9975" _type="MoveCaretCommand" caretOffset="35186" date="Sun Aug 25 09:47:41 EDT 2019" docOffset="35635" timestamp="165185026" />
  <Command __id="9976" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:47:43 EDT 2019" timestamp="165186187" />
  <Command __id="9977" _type="RunCommand" date="Sun Aug 25 09:47:43 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165186197" type="Run" />
  <Command __id="9978" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:47:43 EDT 2019" timestamp="165186746" />
  <Command __id="9979" _type="RunCommand" date="Sun Aug 25 09:47:43 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165186754" type="Run" />
  <Command __id="9980" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 09:47:48 EDT 2019" timestamp="165191085" />
  <Command __id="9981" _type="RunCommand" date="Sun Aug 25 09:47:48 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165191090" type="Run" />
  <Command __id="9982" _type="FileOpenCommand" date="Sun Aug 25 09:47:48 EDT 2019" docASTNodeCount="52" docActiveCodeLength="549" docExpressionCount="26" docLength="549" projectName="GraderBasics" timestamp="165191432">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicConfigurationManagerSelector.java]]></filePath>
  </Command>
  <Command __id="9983" _type="MoveCaretCommand" caretOffset="212" date="Sun Aug 25 09:47:48 EDT 2019" docOffset="212" timestamp="165191553" />
  <Command __id="9984" _type="PredictionCommand" date="Sun Aug 25 09:47:48 EDT 2019" prediction_type="MakingProgress" timestamp="165191554" />
  <Command __id="9985" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 09:47:50 EDT 2019" timestamp="165193220" />
  <Command __id="9986" _type="RunCommand" date="Sun Aug 25 09:47:50 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165193229" type="Run" />
  <Command __id="9987" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 09:47:51 EDT 2019" timestamp="165194400" />
  <Command __id="9988" _type="RunCommand" date="Sun Aug 25 09:47:51 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165194402" type="Run" />
  <Command __id="9989" _type="FileOpenCommand" date="Sun Aug 25 09:47:51 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" projectName="GraderBasics" timestamp="165194652">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <Command __id="9990" _type="MoveCaretCommand" caretOffset="36043" date="Sun Aug 25 09:47:51 EDT 2019" docOffset="36492" timestamp="165194811" />
  <Command __id="9991" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 09:47:52 EDT 2019" timestamp="165195829" />
  <Command __id="9992" _type="RunCommand" date="Sun Aug 25 09:47:52 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165195835" type="Run" />
  <Command __id="9993" _type="FileOpenCommand" date="Sun Aug 25 09:47:53 EDT 2019" docASTNodeCount="353" docActiveCodeLength="3032" docExpressionCount="213" docLength="3539" projectName="GraderBasics" timestamp="165196138">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
  </Command>
  <Command __id="9994" _type="MoveCaretCommand" caretOffset="2644" date="Sun Aug 25 09:47:53 EDT 2019" docOffset="2644" timestamp="165196306" />
  <Command __id="9995" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 09:47:54 EDT 2019" timestamp="165197414" />
  <Command __id="9996" _type="RunCommand" date="Sun Aug 25 09:47:54 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165197421" type="Run" />
  <Command __id="9997" _type="FileOpenCommand" date="Sun Aug 25 09:47:54 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" projectName="GraderBasics" timestamp="165197740">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <Command __id="9998" _type="MoveCaretCommand" caretOffset="36043" date="Sun Aug 25 09:47:54 EDT 2019" docOffset="36492" timestamp="165197899" />
  <Command __id="9999" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 09:47:55 EDT 2019" timestamp="165198603" />
  <Command __id="10000" _type="RunCommand" date="Sun Aug 25 09:47:55 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165198605" type="Run" />
  <Command __id="10001" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 09:47:56 EDT 2019" timestamp="165199317" />
  <Command __id="10002" _type="RunCommand" date="Sun Aug 25 09:47:56 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165199328" type="Run" />
  <Command __id="10003" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sun Aug 25 09:48:06 EDT 2019" timestamp="165209369" />
  <Command __id="10004" _type="BreakPointCommand" date="Sun Aug 25 09:48:06 EDT 2019" lineNumber="852" timestamp="165209370" type="BreakPointAdded" />
  <Command __id="10005" _type="BreakPointCommand" date="Sun Aug 25 09:48:11 EDT 2019" lineNumber="852" timestamp="165214136" type="BreakPointRemoved" />
  <Command __id="10006" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sun Aug 25 09:48:11 EDT 2019" timestamp="165214160" />
  <Command __id="10007" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 09:48:12 EDT 2019" timestamp="165215652" />
  <Command __id="10008" _type="RunCommand" date="Sun Aug 25 09:48:12 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165215654" type="Run" />
  <Command __id="10009" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 09:48:13 EDT 2019" timestamp="165216489" />
  <Command __id="10010" _type="RunCommand" date="Sun Aug 25 09:48:13 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165216495" type="Run" />
  <Command __id="10011" _type="FileOpenCommand" date="Sun Aug 25 09:48:13 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="165216806">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <Command __id="10012" _type="MoveCaretCommand" caretOffset="10023" date="Sun Aug 25 09:48:13 EDT 2019" docOffset="10023" timestamp="165216961" />
  <Command __id="10013" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 09:48:14 EDT 2019" timestamp="165217801" />
  <Command __id="10014" _type="RunCommand" date="Sun Aug 25 09:48:14 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165217808" type="Run" />
  <Command __id="10015" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:48:25 EDT 2019" timestamp="165228107" />
  <Command __id="10016" _type="RunCommand" date="Sun Aug 25 09:48:25 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165228108" type="Run" />
  <Command __id="10017" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:48:28 EDT 2019" timestamp="165231755" />
  <Command __id="10018" _type="RunCommand" date="Sun Aug 25 09:48:28 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165231756" type="Run" />
  <Command __id="10019" _type="FileOpenCommand" date="Sun Aug 25 09:48:28 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" projectName="GraderBasics" timestamp="165232021">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <Command __id="10020" _type="MoveCaretCommand" caretOffset="35186" date="Sun Aug 25 09:48:29 EDT 2019" docOffset="35635" timestamp="165232153" />
  <Command __id="10021" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:48:51 EDT 2019" timestamp="165254483" />
  <Command __id="10022" _type="RunCommand" date="Sun Aug 25 09:48:51 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165254483" type="Run" />
  <Command __id="10023" _type="FileOpenCommand" date="Sun Aug 25 09:48:51 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="165254718">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <Command __id="10024" _type="MoveCaretCommand" caretOffset="10023" date="Sun Aug 25 09:48:51 EDT 2019" docOffset="10023" timestamp="165254881" />
  <Command __id="10025" _type="BreakPointCommand" date="Sun Aug 25 09:48:53 EDT 2019" lineNumber="226" timestamp="165256588" type="BreakPointRemoved" />
  <Command __id="10026" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sun Aug 25 09:48:53 EDT 2019" timestamp="165256611" />
  <Command __id="10027" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:48:53 EDT 2019" timestamp="165257040" />
  <Command __id="10028" _type="RunCommand" date="Sun Aug 25 09:48:53 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165257040" type="Run" />
  <Command __id="10030" _type="MoveCaretCommand" caretOffset="35186" date="Sun Aug 25 09:48:54 EDT 2019" docOffset="35635" timestamp="165257497" />
  <Command __id="10031" _type="BreakPointCommand" date="Sun Aug 25 09:48:55 EDT 2019" lineNumber="943" timestamp="165258856" type="BreakPointRemoved" />
  <Command __id="10032" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sun Aug 25 09:48:55 EDT 2019" timestamp="165258877" />
  <Command __id="10033" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 09:48:56 EDT 2019" timestamp="165259127" />
  <Command __id="10034" _type="RunCommand" date="Sun Aug 25 09:48:56 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="165259127" type="Run" />
  <Command __id="10035" _type="RunCommand" date="Sun Aug 25 09:48:56 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165259809" type="Run" />
  <Command __id="10036" _type="RunCommand" date="Sun Aug 25 09:48:56 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165259810" type="Run" />
  <Command __id="10037" _type="RunCommand" date="Sun Aug 25 09:48:56 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165259811" type="Run" />
  <Command __id="10038" _type="RunCommand" date="Sun Aug 25 09:48:56 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165259812" type="Run" />
  <Command __id="10039" _type="EHExceptionCommand" date="Sun Aug 25 09:48:57 EDT 2019" timestamp="165260265" type="Exception">
    <outputString><![CDATA[ObjectEditor(Version 22, built on Thu Dec 06 16:26:09 EST 2018). Copyright Prasun Dewan, 2012, All rights reserved. US Patent Appl. No.: 12/532,327
]]></outputString>
  </Command>
  <Command __id="10040" _type="ShellCommand" date="Sun Aug 25 09:49:09 EDT 2019" timestamp="165272766" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10041" _type="EHExceptionCommand" date="Sun Aug 25 09:49:13 EDT 2019" timestamp="165276141" type="Exception">
    <outputString><![CDATA[W*** Received notification(s) for unknown (possibly invisible or unrecognized atomic-shape) property: TestRunStarted of object: PromptSuite[25.0 pts](grader.basics.junit.AGradableJUnitSuite@1c807b1d). Ignoring notification.
I***(TestCaseResult) ### gradingTools.comp524f19.assignment1.testcases.PromptTestCase: 1.0
]]></outputString>
  </Command>
  <Command __id="10042" _type="RunCommand" date="Sun Aug 25 09:49:13 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165276169" type="Run" />
  <Command __id="10043" _type="EHExceptionCommand" date="Sun Aug 25 09:49:13 EDT 2019" timestamp="165276227" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
]]></outputString>
  </Command>
  <Command __id="10044" _type="RunCommand" date="Sun Aug 25 09:49:13 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165276238" type="Run" />
  <Command __id="10045" _type="RunCommand" date="Sun Aug 25 09:49:13 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165276240" type="Run" />
  <Command __id="10046" _type="EHExceptionCommand" date="Sun Aug 25 09:49:13 EDT 2019" timestamp="165276362" type="Exception">
    <outputString><![CDATA[I***(BasicRunningProject) 1566740953162:Received output from main: Please input an integer
I***(ARunnerInputStreamProcessor) Provided Input:
Premature end of file before int was input, exiting
I***(BasicRunningProject) 1566740953170:Processing line from main: Please input an integer
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="10047" _type="RunCommand" date="Sun Aug 25 09:49:15 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165278255" type="Run" />
  <Command __id="10048" _type="RunCommand" date="Sun Aug 25 09:49:15 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165278269" type="Run" />
  <Command __id="10049" _type="RunCommand" date="Sun Aug 25 09:49:15 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165278273" type="Run" />
  <Command __id="10050" _type="EHExceptionCommand" date="Sun Aug 25 09:49:15 EDT 2019" timestamp="165278341" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:1
I***(BasicRunningProject) 1566740955220:Received output from main: Please input an integer
I***(BasicRunningProject) 1566740955220:Processing line from main: Please input an integer
Premature end of file before decimal was input, exitingI***(BasicRunningProject) 1566740955221:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566740955221:Processing line from main: Please input a decimal
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 

]]></outputString>
  </Command>
  <Command __id="10051" _type="RunCommand" date="Sun Aug 25 09:49:17 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165280303" type="Run" />
  <Command __id="10052" _type="RunCommand" date="Sun Aug 25 09:49:17 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165280312" type="Run" />
  <Command __id="10053" _type="RunCommand" date="Sun Aug 25 09:49:17 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165280315" type="Run" />
  <Command __id="10054" _type="EHExceptionCommand" date="Sun Aug 25 09:49:17 EDT 2019" timestamp="165280436" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:1.4
I***(BasicRunningProject) 1566740957264:Received output from main: Please input an integer
I***(BasicRunningProject) 1566740957265:Processing line from main: Please input an integer
I***(BasicRunningProject) 1566740957265:Received output from main: Please input a decimal
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) 1566740957265:Processing line from main: Please input a decimal
I***(BasicRunningProject) 1566740957266:Received output from main: The int addition:1
I***(BasicRunningProject) 1566740957266:Processing line from main: The int addition:1
I***(BasicRunningProject) 1566740957266:Received output from main: The double addition:1.400000
I***(BasicRunningProject) 1566740957267:Processing line from main: The double addition:1.400000
I***(BasicRunningProject) 1566740957267:Received output from main: The int multiplication:0
I***(BasicRunningProject) 1566740957267:Processing line from main: The int multiplication:0
I***(BasicRunningProject) 1566740957267:Received output from main: The double multiplication:0.400000
I***(BasicRunningProject) 1566740957268:Processing line from main: The double multiplication:0.400000
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="10055" _type="EHExceptionCommand" date="Sun Aug 25 09:49:19 EDT 2019" timestamp="165282400" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 0.0
I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 1.0
]]></outputString>
  </Command>
  <Command __id="10056" _type="ShellCommand" date="Sun Aug 25 09:49:23 EDT 2019" timestamp="165286737" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10057" _type="RunCommand" date="Sun Aug 25 09:49:23 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165286863" type="Debug" />
  <Command __id="10058" _type="RunCommand" date="Sun Aug 25 09:49:23 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="165286863" type="Debug" />
  <Command __id="10059" _type="RunCommand" date="Sun Aug 25 09:49:23 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="165286863" type="Run" />
  <Command __id="10060" _type="SelectTextCommand" caretOffset="36573" date="Sun Aug 25 09:49:52 EDT 2019" end="36573" start="36191" timestamp="165315424" />
  <Command __id="10061" _type="CopyCommand" date="Sun Aug 25 09:49:52 EDT 2019" timestamp="165316008" />
  <Command __id="10062" _type="ShellCommand" date="Sun Aug 25 09:49:54 EDT 2019" timestamp="165317137" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10063" _type="ShellCommand" date="Sun Aug 25 09:49:56 EDT 2019" timestamp="165319898" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10065" _type="InsertStringCommand" date="Sun Aug 25 09:49:57 EDT 2019" timestamp="165320680" timestamp2="165320680">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10067" _type="PasteCommand" date="Sun Aug 25 09:49:58 EDT 2019" timestamp="165321427" />
  <Command __id="10068" _type="SelectTextCommand" caretOffset="36191" date="Sun Aug 25 09:50:00 EDT 2019" end="36573" start="36191" timestamp="165323788" />
  <Command __id="10077" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 09:50:01 EDT 2019" timestamp="165324449" />
  <Command __id="10078" _type="MoveCaretCommand" caretOffset="36784" date="Sun Aug 25 09:50:07 EDT 2019" docOffset="37233" timestamp="165330847" />
  <Command __id="10079" _type="SelectTextCommand" caretOffset="36786" date="Sun Aug 25 09:50:07 EDT 2019" end="36786" start="36780" timestamp="165331054" />
  <Command __id="10081" _type="InsertStringCommand" date="Sun Aug 25 09:50:09 EDT 2019" repeat="8" timestamp="165332876" timestamp2="165334404">
    <data><![CDATA[Boolean ]]></data>
  </Command>
  <Command __id="10096" _type="MoveCaretCommand" caretOffset="36784" date="Sun Aug 25 09:50:14 EDT 2019" docOffset="37233" timestamp="165337811" />
  <Command __id="10097" _type="SelectTextCommand" caretOffset="36787" date="Sun Aug 25 09:50:14 EDT 2019" end="36787" start="36780" timestamp="165337991" />
  <Command __id="10099" _type="InsertStringCommand" date="Sun Aug 25 09:50:15 EDT 2019" repeat="16" timestamp="165338403" timestamp2="165342311">
    <data><![CDATA[Integer retVal =]]></data>
  </Command>
  <Command __id="10130" _type="MoveCaretCommand" caretOffset="37892" date="Sun Aug 25 09:50:25 EDT 2019" docOffset="38341" timestamp="165348979" />
  <Command __id="10131" _type="MoveCaretCommand" caretOffset="36972" date="Sun Aug 25 09:50:59 EDT 2019" docOffset="37421" timestamp="165382198" />
  <Command __id="10132" _type="MoveCaretCommand" caretOffset="36984" date="Sun Aug 25 09:51:03 EDT 2019" docOffset="37433" timestamp="165386969" />
  <Command __id="10134" _type="InsertStringCommand" date="Sun Aug 25 09:51:04 EDT 2019" timestamp="165387444" timestamp2="165387444">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10029" _type="FileOpenCommand" date="Sun Aug 25 09:48:54 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24290" docExpressionCount="1724" docLength="41146" projectName="GraderBasics" timestamp="165257369">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <DocumentChange __id="10064" _type="Insert" date="Sun Aug 25 09:49:57 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24293" docExpressionCount="1724" docLength="41149" length="3" offset="37022" timestamp="165320674">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="10066" _type="Replace" date="Sun Aug 25 09:49:58 EDT 2019" docASTNodeCount="3111" docActiveCodeLength="24675" docExpressionCount="1746" docLength="41531" endLine="972" insertionLength="383" int_docASTNodeCount="3076" int_docActiveCodeLength="24292" int_docExpressionCount="1724" int_docLength="41148" length="1" offset="37024" startLine="972" timestamp="165321411">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public static Integer getBasicInheritedIntegerModuleProblemProperty(
			String property, Integer defaultValue) {
		if (!isUseProjectConfiguration()) {
			return defaultValue;
		}

	 return getInheritedIntegerModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10069" _type="Insert" date="Sun Aug 25 09:50:01 EDT 2019" docASTNodeCount="3105" docActiveCodeLength="24606" docExpressionCount="1743" docLength="41533" length="2" offset="36639" timestamp="165324377">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10070" _type="Insert" date="Sun Aug 25 09:50:01 EDT 2019" docASTNodeCount="3095" docActiveCodeLength="24563" docExpressionCount="1738" docLength="41535" length="2" offset="36712" timestamp="165324382">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10071" _type="Insert" date="Sun Aug 25 09:50:01 EDT 2019" docASTNodeCount="3078" docActiveCodeLength="24526" docExpressionCount="1724" docLength="41537" length="2" offset="36759" timestamp="165324386">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10072" _type="Insert" date="Sun Aug 25 09:50:01 EDT 2019" docASTNodeCount="3078" docActiveCodeLength="24503" docExpressionCount="1724" docLength="41539" length="2" offset="36800" timestamp="165324390">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10073" _type="Insert" date="Sun Aug 25 09:50:01 EDT 2019" docASTNodeCount="3079" docActiveCodeLength="24500" docExpressionCount="1725" docLength="41541" length="2" offset="36827" timestamp="165324395">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10074" _type="Insert" date="Sun Aug 25 09:50:01 EDT 2019" docASTNodeCount="3079" docActiveCodeLength="24500" docExpressionCount="1725" docLength="41543" length="2" offset="36834" timestamp="165324423">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10075" _type="Insert" date="Sun Aug 25 09:50:01 EDT 2019" docASTNodeCount="3078" docActiveCodeLength="24308" docExpressionCount="1724" docLength="41545" length="2" offset="36838" timestamp="165324428">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10076" _type="Insert" date="Sun Aug 25 09:50:01 EDT 2019" docASTNodeCount="3076" docActiveCodeLength="24306" docExpressionCount="1724" docLength="41547" length="2" offset="37034" timestamp="165324430">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10080" _type="Replace" date="Sun Aug 25 09:50:09 EDT 2019" docASTNodeCount="3078" docActiveCodeLength="24301" docExpressionCount="1725" docLength="41542" endLine="978" insertionLength="1" int_docASTNodeCount="3076" int_docActiveCodeLength="24300" int_docExpressionCount="1724" int_docLength="41541" length="6" offset="37229" startLine="978" timestamp="165332869">
    <deletedText><![CDATA[return]]></deletedText>
    <insertedText><![CDATA[B]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10082" _type="Insert" date="Sun Aug 25 09:50:10 EDT 2019" docASTNodeCount="3078" docActiveCodeLength="24308" docExpressionCount="1725" docLength="41549" length="7" offset="37230" repeat="7" timestamp="165333397" timestamp2="165334398">
    <text><![CDATA[oolean ]]></text>
  </DocumentChange>
  <DocumentChange __id="10098" _type="Replace" date="Sun Aug 25 09:50:15 EDT 2019" docASTNodeCount="3078" docActiveCodeLength="24302" docExpressionCount="1725" docLength="41543" endLine="978" insertionLength="1" int_docASTNodeCount="3076" int_docActiveCodeLength="24301" int_docExpressionCount="1724" int_docLength="41542" length="7" offset="37229" startLine="978" timestamp="165338394">
    <deletedText><![CDATA[Boolean]]></deletedText>
    <insertedText><![CDATA[I]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10100" _type="Insert" date="Sun Aug 25 09:50:15 EDT 2019" docASTNodeCount="3080" docActiveCodeLength="24317" docExpressionCount="1726" docLength="41558" length="15" offset="37230" repeat="15" timestamp="165338595" timestamp2="165342308">
    <text><![CDATA[nteger retVal =]]></text>
  </DocumentChange>
  <DocumentChange __id="10133" _type="Insert" date="Sun Aug 25 09:51:04 EDT 2019" docASTNodeCount="3080" docActiveCodeLength="24320" docExpressionCount="1726" docLength="41561" length="3" offset="37433" timestamp="165387434">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="10136" _type="Insert" date="Sun Aug 25 09:51:06 EDT 2019" docASTNodeCount="3085" docActiveCodeLength="24340" docExpressionCount="1729" docLength="41581" length="20" offset="37433" repeat="19" timestamp="165389965" timestamp2="165395102">
    <text><![CDATA[ if (retVal != null)]]></text>
  </DocumentChange>
  <DocumentChange __id="10175" _type="Insert" date="Sun Aug 25 09:51:14 EDT 2019" docASTNodeCount="3087" docActiveCodeLength="24366" docExpressionCount="1730" docLength="41607" length="26" offset="37453" repeat="17" timestamp="165397250" timestamp2="165401240">
    <text><![CDATA[ {
		 return retVal;
	 }]]></text>
  </DocumentChange>
  <DocumentChange __id="10210" _type="Insert" date="Sun Aug 25 09:51:20 EDT 2019" docASTNodeCount="3087" docActiveCodeLength="24370" docExpressionCount="1730" docLength="41611" length="4" offset="37479" timestamp="165403487">
    <text><![CDATA[
	 ]]></text>
  </DocumentChange>
  <DocumentChange __id="10216" _type="Replace" date="Sun Aug 25 09:51:26 EDT 2019" docASTNodeCount="3104" docActiveCodeLength="24573" docExpressionCount="1744" docLength="41814" endLine="982" insertionLength="205" int_docASTNodeCount="3087" int_docActiveCodeLength="24368" int_docExpressionCount="1730" int_docLength="41609" length="2" offset="37481" startLine="982" timestamp="165409127">
    <deletedText><![CDATA[	 ]]></deletedText>
    <insertedText><![CDATA[	 Integer retVal =  getInheritedIntegerModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10219" _type="Replace" date="Sun Aug 25 09:51:29 EDT 2019" docASTNodeCount="3102" docActiveCodeLength="24558" docExpressionCount="1743" docLength="41799" endLine="982" insertionLength="1" int_docASTNodeCount="3100" int_docActiveCodeLength="24557" int_docExpressionCount="1742" int_docLength="41798" length="16" offset="37483" startLine="982" timestamp="165412136">
    <deletedText><![CDATA[Integer retVal =]]></deletedText>
    <insertedText><![CDATA[r]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10221" _type="Insert" date="Sun Aug 25 09:51:29 EDT 2019" docASTNodeCount="3100" docActiveCodeLength="24563" docExpressionCount="1742" docLength="41804" length="5" offset="37484" repeat="5" timestamp="165412213" timestamp2="165412840">
    <text><![CDATA[eturn]]></text>
  </DocumentChange>
  <DocumentChange __id="10233" _type="Replace" date="Sun Aug 25 09:51:34 EDT 2019" docASTNodeCount="3100" docActiveCodeLength="24552" docExpressionCount="1742" docLength="41793" endLine="978" insertionLength="1" int_docASTNodeCount="3100" int_docActiveCodeLength="24551" int_docExpressionCount="1742" int_docLength="41792" length="12" offset="37416" startLine="978" timestamp="165418063">
    <deletedText><![CDATA[defaultValue]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10235" _type="Insert" date="Sun Aug 25 09:51:35 EDT 2019" docASTNodeCount="3100" docActiveCodeLength="24555" docExpressionCount="1742" docLength="41796" length="3" offset="37417" repeat="3" timestamp="165418252" timestamp2="165418674">
    <text><![CDATA[ull]]></text>
  </DocumentChange>
  <Command __id="10135" _type="MoveCaretCommand" caretOffset="36984" date="Sun Aug 25 09:51:06 EDT 2019" docOffset="37433" timestamp="165389384" />
  <Command __id="10137" _type="InsertStringCommand" date="Sun Aug 25 09:51:06 EDT 2019" repeat="19" timestamp="165389969" timestamp2="165395105">
    <data><![CDATA[ if (retVal != null]]></data>
  </Command>
  <Command __id="10174" _type="MoveCaretCommand" caretOffset="37004" date="Sun Aug 25 09:51:13 EDT 2019" docOffset="37453" timestamp="165397013" />
  <Command __id="10176" _type="InsertStringCommand" date="Sun Aug 25 09:51:14 EDT 2019" repeat="2" timestamp="165397255" timestamp2="165397673">
    <data><![CDATA[ {]]></data>
  </Command>
  <Command __id="10180" _type="InsertStringCommand" date="Sun Aug 25 09:51:14 EDT 2019" timestamp="165397899" timestamp2="165397899">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10182" _type="InsertStringCommand" date="Sun Aug 25 09:51:15 EDT 2019" repeat="14" timestamp="165398469" timestamp2="165401243">
    <data><![CDATA[return retVal;]]></data>
  </Command>
  <Command __id="10209" _type="MoveCaretCommand" caretOffset="37030" date="Sun Aug 25 09:51:20 EDT 2019" docOffset="37479" timestamp="165403078" />
  <Command __id="10211" _type="InsertStringCommand" date="Sun Aug 25 09:51:20 EDT 2019" timestamp="165403496" timestamp2="165403496">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10212" _type="MoveCaretCommand" caretOffset="36795" date="Sun Aug 25 09:51:22 EDT 2019" docOffset="37244" timestamp="165405953" />
  <Command __id="10213" _type="SelectTextCommand" caretOffset="36983" date="Sun Aug 25 09:51:23 EDT 2019" end="36983" start="36778" timestamp="165406411" />
  <Command __id="10214" _type="CopyCommand" date="Sun Aug 25 09:51:24 EDT 2019" timestamp="165407282" />
  <Command __id="10215" _type="MoveCaretCommand" caretOffset="37034" date="Sun Aug 25 09:51:25 EDT 2019" docOffset="37483" timestamp="165408569" />
  <Command __id="10217" _type="PasteCommand" date="Sun Aug 25 09:51:26 EDT 2019" timestamp="165409138" />
  <Command __id="10218" _type="SelectTextCommand" caretOffset="37034" date="Sun Aug 25 09:51:28 EDT 2019" end="37050" start="37034" timestamp="165411721" />
  <Command __id="10220" _type="InsertStringCommand" date="Sun Aug 25 09:51:29 EDT 2019" repeat="6" timestamp="165412144" timestamp2="165412848">
    <data><![CDATA[return]]></data>
  </Command>
  <Command __id="10231" _type="MoveCaretCommand" caretOffset="36970" date="Sun Aug 25 09:51:34 EDT 2019" docOffset="37419" timestamp="165417295" />
  <Command __id="10232" _type="SelectTextCommand" caretOffset="36979" date="Sun Aug 25 09:51:34 EDT 2019" end="36979" start="36967" timestamp="165417516" />
  <Command __id="10234" _type="InsertStringCommand" date="Sun Aug 25 09:51:34 EDT 2019" repeat="4" timestamp="165418073" timestamp2="165418685">
    <data><![CDATA[null]]></data>
  </Command>
  <Command __id="10241" _type="SelectTextCommand" caretOffset="37138" date="Sun Aug 25 09:51:40 EDT 2019" end="37153" start="37138" timestamp="165424017" />
  <Command __id="10243" _type="InsertStringCommand" date="Sun Aug 25 09:51:41 EDT 2019" repeat="6" timestamp="165424619" timestamp2="165425688">
    <data><![CDATA[Course]]></data>
  </Command>
  <Command __id="10254" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:51:46 EDT 2019" timestamp="165430028" />
  <Command __id="10255" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sun Aug 25 09:51:54 EDT 2019" timestamp="165437270" />
  <Command __id="10256" _type="BreakPointCommand" date="Sun Aug 25 09:51:54 EDT 2019" lineNumber="975" timestamp="165437272" type="BreakPointAdded" />
  <Command __id="10257" _type="SelectTextCommand" caretOffset="37217" date="Sun Aug 25 09:52:13 EDT 2019" end="37633" start="37217" timestamp="165456107" />
  <Command __id="10258" _type="CopyCommand" date="Sun Aug 25 09:52:14 EDT 2019" timestamp="165457088" />
  <Command __id="10259" _type="PredictionCommand" date="Sun Aug 25 09:52:14 EDT 2019" prediction_type="MakingProgress" timestamp="165457103" />
  <Command __id="10260" _type="MoveCaretCommand" caretOffset="37633" date="Sun Aug 25 09:52:15 EDT 2019" docOffset="38082" timestamp="165458542" />
  <Command __id="10262" _type="InsertStringCommand" date="Sun Aug 25 09:52:15 EDT 2019" timestamp="165458950" timestamp2="165458950">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10264" _type="PasteCommand" date="Sun Aug 25 09:52:16 EDT 2019" timestamp="165459677" />
  <Command __id="10265" _type="MoveCaretCommand" caretOffset="37864" date="Sun Aug 25 09:52:19 EDT 2019" docOffset="38313" timestamp="165462996" />
  <Command __id="10266" _type="SelectTextCommand" caretOffset="37867" date="Sun Aug 25 09:52:20 EDT 2019" end="37867" start="37861" timestamp="165463209" />
  <Command __id="10268" _type="InsertStringCommand" date="Sun Aug 25 09:52:21 EDT 2019" repeat="13" timestamp="165464349" timestamp2="165467231">
    <data><![CDATA[List retVal =]]></data>
  </Command>
  <Command __id="10293" _type="MoveCaretCommand" caretOffset="38058" date="Sun Aug 25 09:52:30 EDT 2019" docOffset="38507" timestamp="165473513" />
  <Command __id="10295" _type="InsertStringCommand" date="Sun Aug 25 09:52:30 EDT 2019" timestamp="165473869" timestamp2="165473869">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10296" _type="MoveCaretCommand" caretOffset="38058" date="Sun Aug 25 09:52:32 EDT 2019" docOffset="38507" timestamp="165475138" />
  <Command __id="10298" _type="InsertStringCommand" date="Sun Aug 25 09:52:32 EDT 2019" repeat="19" timestamp="165475686" timestamp2="165480551">
    <data><![CDATA[	if (retVal == null]]></data>
  </Command>
  <Command __id="10336" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:52:38 EDT 2019" repeat="7" timestamp="165481441" timestamp2="165482387" />
  <Command __id="10350" _type="InsertStringCommand" date="Sun Aug 25 09:52:39 EDT 2019" repeat="7" timestamp="165482876" timestamp2="165484281">
    <data><![CDATA[!= null]]></data>
  </Command>
  <Command __id="10363" _type="MoveCaretCommand" caretOffset="38078" date="Sun Aug 25 09:52:43 EDT 2019" docOffset="38527" timestamp="165486328" />
  <Command __id="10365" _type="InsertStringCommand" date="Sun Aug 25 09:52:43 EDT 2019" repeat="2" timestamp="165486572" timestamp2="165487029">
    <data><![CDATA[ {]]></data>
  </Command>
  <Command __id="10369" _type="InsertStringCommand" date="Sun Aug 25 09:52:44 EDT 2019" timestamp="165487367" timestamp2="165487367">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10371" _type="InsertStringCommand" date="Sun Aug 25 09:52:45 EDT 2019" repeat="14" timestamp="165488202" timestamp2="165491054">
    <data><![CDATA[return retVal;]]></data>
  </Command>
  <Command __id="10398" _type="MoveCaretCommand" caretOffset="38104" date="Sun Aug 25 09:52:50 EDT 2019" docOffset="38553" timestamp="165493212" />
  <Command __id="10400" _type="InsertStringCommand" date="Sun Aug 25 09:52:50 EDT 2019" timestamp="165493610" timestamp2="165493610">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10402" _type="InsertStringCommand" date="Sun Aug 25 09:52:50 EDT 2019" repeat="5" timestamp="165493969" timestamp2="165494674">
    <data><![CDATA[retur]]></data>
  </Command>
  <Command __id="10411" _type="ShellCommand" date="Sun Aug 25 09:52:51 EDT 2019" timestamp="165494697" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="10412" _type="ShellCommand" date="Sun Aug 25 09:52:54 EDT 2019" timestamp="165497096" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="10413" _type="SelectTextCommand" caretOffset="38055" date="Sun Aug 25 09:52:57 EDT 2019" end="38055" start="37875" timestamp="165500415" />
  <DocumentChange __id="10242" _type="Replace" date="Sun Aug 25 09:51:41 EDT 2019" docASTNodeCount="3100" docActiveCodeLength="24541" docExpressionCount="1742" docLength="41782" endLine="982" insertionLength="1" int_docASTNodeCount="3100" int_docActiveCodeLength="24540" int_docExpressionCount="1742" int_docLength="41781" length="15" offset="37587" startLine="982" timestamp="165424608">
    <deletedText><![CDATA[OrCreateProject]]></deletedText>
    <insertedText><![CDATA[C]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10244" _type="Insert" date="Sun Aug 25 09:51:41 EDT 2019" docASTNodeCount="3100" docActiveCodeLength="24546" docExpressionCount="1742" docLength="41787" length="5" offset="37588" repeat="5" timestamp="165424872" timestamp2="165425685">
    <text><![CDATA[ourse]]></text>
  </DocumentChange>
  <DocumentChange __id="10261" _type="Insert" date="Sun Aug 25 09:52:15 EDT 2019" docASTNodeCount="3100" docActiveCodeLength="24549" docExpressionCount="1742" docLength="41790" length="3" offset="38082" timestamp="165458944">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="10263" _type="Replace" date="Sun Aug 25 09:52:16 EDT 2019" docASTNodeCount="3135" docActiveCodeLength="24921" docExpressionCount="1764" docLength="42206" endLine="993" insertionLength="417" int_docASTNodeCount="3100" int_docActiveCodeLength="24548" int_docExpressionCount="1742" int_docLength="41789" length="1" offset="38084" startLine="993" timestamp="165459662">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public static List getBasicInheritedListModuleProblemProperty(
			String property, List defaultValue) {
		if (!isUseProjectConfiguration() ) { // can do == as we are using named constants
			return defaultValue;
		}

	 return getInheritedListModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10267" _type="Replace" date="Sun Aug 25 09:52:21 EDT 2019" docASTNodeCount="3137" docActiveCodeLength="24916" docExpressionCount="1765" docLength="42201" endLine="999" insertionLength="1" int_docASTNodeCount="3135" int_docActiveCodeLength="24915" int_docExpressionCount="1764" int_docLength="42200" length="6" offset="38310" startLine="999" timestamp="165464340">
    <deletedText><![CDATA[return]]></deletedText>
    <insertedText><![CDATA[L]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10269" _type="Insert" date="Sun Aug 25 09:52:21 EDT 2019" docASTNodeCount="3139" docActiveCodeLength="24928" docExpressionCount="1766" docLength="42213" length="12" offset="38311" repeat="12" timestamp="165464630" timestamp2="165467225">
    <text><![CDATA[ist retVal =]]></text>
  </DocumentChange>
  <DocumentChange __id="10294" _type="Insert" date="Sun Aug 25 09:52:30 EDT 2019" docASTNodeCount="3139" docActiveCodeLength="24931" docExpressionCount="1766" docLength="42216" length="3" offset="38507" timestamp="165473864">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="10297" _type="Replace" date="Sun Aug 25 09:52:32 EDT 2019" docASTNodeCount="3139" docActiveCodeLength="24932" docExpressionCount="1766" docLength="42217" endLine="1000" insertionLength="2" int_docASTNodeCount="3139" int_docActiveCodeLength="24930" int_docExpressionCount="1766" int_docLength="42215" length="1" offset="38506" startLine="1000" timestamp="165475679">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	 ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10299" _type="Insert" date="Sun Aug 25 09:52:33 EDT 2019" docASTNodeCount="3144" docActiveCodeLength="24951" docExpressionCount="1769" docLength="42236" length="19" offset="38508" repeat="18" timestamp="165476627" timestamp2="165480548">
    <text><![CDATA[if (retVal == null)]]></text>
  </DocumentChange>
  <DocumentChange __id="10335" _type="Delete" date="Sun Aug 25 09:52:38 EDT 2019" docASTNodeCount="3142" docActiveCodeLength="24944" docExpressionCount="1767" docLength="42229" endLine="1000" length="7" offset="38519" repeat="7" startLine="1000" timestamp="165481435" timestamp2="165482381">
    <text><![CDATA[== null]]></text>
  </DocumentChange>
  <DocumentChange __id="10349" _type="Insert" date="Sun Aug 25 09:52:39 EDT 2019" docASTNodeCount="3144" docActiveCodeLength="24951" docExpressionCount="1769" docLength="42236" length="7" offset="38519" repeat="7" timestamp="165482873" timestamp2="165484278">
    <text><![CDATA[!= null]]></text>
  </DocumentChange>
  <DocumentChange __id="10364" _type="Insert" date="Sun Aug 25 09:52:43 EDT 2019" docASTNodeCount="3146" docActiveCodeLength="24977" docExpressionCount="1770" docLength="42262" length="26" offset="38527" repeat="17" timestamp="165486568" timestamp2="165491051">
    <text><![CDATA[ {
		 return retVal;
	 }]]></text>
  </DocumentChange>
  <DocumentChange __id="10399" _type="Insert" date="Sun Aug 25 09:52:50 EDT 2019" docASTNodeCount="3148" docActiveCodeLength="24986" docExpressionCount="1771" docLength="42271" length="9" offset="38553" repeat="6" timestamp="165493600" timestamp2="165494664">
    <text><![CDATA[
	 retur]]></text>
  </DocumentChange>
  <DocumentChange __id="10416" _type="Insert" date="Sun Aug 25 09:53:02 EDT 2019" docASTNodeCount="3160" docActiveCodeLength="25169" docExpressionCount="1782" docLength="42454" length="183" offset="38562" repeat="4" timestamp="165505539" timestamp2="165507310">
    <text><![CDATA[n getInheritedListModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);;]]></text>
  </DocumentChange>
  <DocumentChange __id="10426" _type="Replace" date="Sun Aug 25 09:53:06 EDT 2019" docASTNodeCount="3160" docActiveCodeLength="25158" docExpressionCount="1782" docLength="42443" endLine="999" insertionLength="1" int_docASTNodeCount="3160" int_docActiveCodeLength="25157" int_docExpressionCount="1782" int_docLength="42442" length="12" offset="38490" startLine="999" timestamp="165509743">
    <deletedText><![CDATA[defaultValue]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10428" _type="Insert" date="Sun Aug 25 09:53:07 EDT 2019" docASTNodeCount="3160" docActiveCodeLength="25161" docExpressionCount="1782" docLength="42446" length="3" offset="38491" repeat="3" timestamp="165510887" timestamp2="165510908">
    <text><![CDATA[ull]]></text>
  </DocumentChange>
  <DocumentChange __id="10435" _type="Replace" date="Sun Aug 25 09:53:16 EDT 2019" docASTNodeCount="3160" docActiveCodeLength="25147" docExpressionCount="1782" docLength="42432" endLine="1003" insertionLength="1" int_docASTNodeCount="3160" int_docActiveCodeLength="25146" int_docExpressionCount="1782" int_docLength="42431" length="15" offset="38657" startLine="1003" timestamp="165519625">
    <deletedText><![CDATA[OrCreateProject]]></deletedText>
    <insertedText><![CDATA[C]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10437" _type="Insert" date="Sun Aug 25 09:53:16 EDT 2019" docASTNodeCount="3160" docActiveCodeLength="25152" docExpressionCount="1782" docLength="42437" length="5" offset="38658" repeat="5" timestamp="165519911" timestamp2="165520731">
    <text><![CDATA[ourse]]></text>
  </DocumentChange>
  <DocumentChange __id="10449" _type="Insert" date="Sun Aug 25 09:53:32 EDT 2019" docASTNodeCount="3154" docActiveCodeLength="25089" docExpressionCount="1779" docLength="42439" length="2" offset="37665" timestamp="165535746">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10450" _type="Insert" date="Sun Aug 25 09:53:32 EDT 2019" docASTNodeCount="3144" docActiveCodeLength="25049" docExpressionCount="1774" docLength="42441" length="2" offset="37732" timestamp="165535752">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10451" _type="Insert" date="Sun Aug 25 09:53:32 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="25010" docExpressionCount="1760" docLength="42443" length="2" offset="37776" timestamp="165535756">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10452" _type="Insert" date="Sun Aug 25 09:53:32 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24987" docExpressionCount="1760" docLength="42445" length="2" offset="37863" timestamp="165535761">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10453" _type="Insert" date="Sun Aug 25 09:53:32 EDT 2019" docASTNodeCount="3128" docActiveCodeLength="24984" docExpressionCount="1761" docLength="42447" length="2" offset="37890" timestamp="165535766">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10454" _type="Insert" date="Sun Aug 25 09:53:32 EDT 2019" docASTNodeCount="3128" docActiveCodeLength="24984" docExpressionCount="1761" docLength="42449" length="2" offset="37897" timestamp="165535771">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="10414" _type="CopyCommand" date="Sun Aug 25 09:52:57 EDT 2019" timestamp="165500921" />
  <Command __id="10415" _type="MoveCaretCommand" caretOffset="38113" date="Sun Aug 25 09:53:01 EDT 2019" docOffset="38562" timestamp="165505024" />
  <Command __id="10417" _type="InsertStringCommand" date="Sun Aug 25 09:53:02 EDT 2019" repeat="2" timestamp="165505546" timestamp2="165505768">
    <data><![CDATA[n ]]></data>
  </Command>
  <Command __id="10421" _type="PasteCommand" date="Sun Aug 25 09:53:03 EDT 2019" timestamp="165506276" />
  <Command __id="10423" _type="InsertStringCommand" date="Sun Aug 25 09:53:04 EDT 2019" timestamp="165507326" timestamp2="165507326">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="10424" _type="MoveCaretCommand" caretOffset="38042" date="Sun Aug 25 09:53:06 EDT 2019" docOffset="38491" timestamp="165509168" />
  <Command __id="10425" _type="SelectTextCommand" caretOffset="38053" date="Sun Aug 25 09:53:06 EDT 2019" end="38053" start="38041" timestamp="165509342" />
  <Command __id="10427" _type="InsertStringCommand" date="Sun Aug 25 09:53:06 EDT 2019" repeat="4" timestamp="165509754" timestamp2="165510913">
    <data><![CDATA[null]]></data>
  </Command>
  <Command __id="10434" _type="SelectTextCommand" caretOffset="38223" date="Sun Aug 25 09:53:16 EDT 2019" end="38223" start="38208" timestamp="165519118" />
  <Command __id="10436" _type="InsertStringCommand" date="Sun Aug 25 09:53:16 EDT 2019" repeat="6" timestamp="165519631" timestamp2="165520738">
    <data><![CDATA[Course]]></data>
  </Command>
  <Command __id="10447" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:53:22 EDT 2019" timestamp="165525349" />
  <Command __id="10448" _type="SelectTextCommand" caretOffset="37217" date="Sun Aug 25 09:53:32 EDT 2019" end="37633" start="37217" timestamp="165535200" />
  <Command __id="10457" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 09:53:32 EDT 2019" timestamp="165535802" />
  <Command __id="10458" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:53:33 EDT 2019" timestamp="165536635" />
  <Command __id="10459" _type="EclipseCommand" commandID="AUTOGEN:::org.eclipse.jdt.debug.CompilationUnitEditor.BreakpointRulerActions/org.eclipse.jdt.debug.ui.actions.ManageBreakpointRulerAction" date="Sun Aug 25 09:53:38 EDT 2019" timestamp="165541345" />
  <Command __id="10460" _type="BreakPointCommand" date="Sun Aug 25 09:53:38 EDT 2019" lineNumber="996" timestamp="165541347" type="BreakPointAdded" />
  <Command __id="10461" _type="MoveCaretCommand" caretOffset="36705" date="Sun Aug 25 09:53:48 EDT 2019" docOffset="37154" timestamp="165551100" />
  <Command __id="10463" _type="InsertStringCommand" date="Sun Aug 25 09:53:48 EDT 2019" timestamp="165551789" timestamp2="165551789">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10464" _type="SelectTextCommand" caretOffset="36783" date="Sun Aug 25 09:53:55 EDT 2019" end="36799" start="36783" timestamp="165558136" />
  <Command __id="10465" _type="CopyCommand" date="Sun Aug 25 09:53:55 EDT 2019" timestamp="165558596" />
  <Command __id="10466" _type="MoveCaretCommand" caretOffset="36709" date="Sun Aug 25 09:53:56 EDT 2019" docOffset="37158" timestamp="165559665" />
  <Command __id="10468" _type="PasteCommand" date="Sun Aug 25 09:53:57 EDT 2019" timestamp="165560357" />
  <Command __id="10470" _type="InsertStringCommand" date="Sun Aug 25 09:53:58 EDT 2019" repeat="7" timestamp="165561836" timestamp2="165563639">
    <data><![CDATA[= null;]]></data>
  </Command>
  <Command __id="10483" _type="MoveCaretCommand" caretOffset="36742" date="Sun Aug 25 09:54:05 EDT 2019" docOffset="37191" timestamp="165568183" />
  <DocumentChange __id="10455" _type="Insert" date="Sun Aug 25 09:53:32 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24795" docExpressionCount="1760" docLength="42451" length="2" offset="37901" timestamp="165535776">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10456" _type="Insert" date="Sun Aug 25 09:53:32 EDT 2019" docASTNodeCount="3125" docActiveCodeLength="24793" docExpressionCount="1760" docLength="42453" length="2" offset="38094" timestamp="165535782">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10462" _type="Insert" date="Sun Aug 25 09:53:48 EDT 2019" docASTNodeCount="3125" docActiveCodeLength="24797" docExpressionCount="1760" docLength="42457" length="4" offset="37154" timestamp="165551782">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="10467" _type="Replace" date="Sun Aug 25 09:53:57 EDT 2019" docASTNodeCount="3130" docActiveCodeLength="24813" docExpressionCount="1762" docLength="42473" endLine="974" insertionLength="18" int_docASTNodeCount="3125" int_docActiveCodeLength="24795" int_docExpressionCount="1760" int_docLength="42455" length="2" offset="37156" startLine="974" timestamp="165560345">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		 Integer retVal ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10469" _type="Insert" date="Sun Aug 25 09:53:58 EDT 2019" docASTNodeCount="3131" docActiveCodeLength="24820" docExpressionCount="1763" docLength="42480" length="7" offset="37174" repeat="7" timestamp="165561825" timestamp2="165563629">
    <text><![CDATA[= null;]]></text>
  </DocumentChange>
  <DocumentChange __id="10484" _type="Delete" date="Sun Aug 25 09:54:05 EDT 2019" docASTNodeCount="3131" docActiveCodeLength="24819" docExpressionCount="1763" docLength="42479" endLine="975" length="1" offset="37190" startLine="975" timestamp="165568613">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="10486" _type="Insert" date="Sun Aug 25 09:54:08 EDT 2019" docASTNodeCount="3131" docActiveCodeLength="24820" docExpressionCount="1763" docLength="42480" length="1" offset="37190" timestamp="165571515">
    <text><![CDATA[i]]></text>
  </DocumentChange>
  <DocumentChange __id="10489" _type="Delete" date="Sun Aug 25 09:54:10 EDT 2019" docASTNodeCount="3130" docActiveCodeLength="24819" docExpressionCount="1762" docLength="42479" endLine="975" length="1" offset="37189" startLine="975" timestamp="165573541">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="10492" _type="Delete" date="Sun Aug 25 09:54:25 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24780" docExpressionCount="1761" docLength="42440" endLine="979" length="39" offset="37224" startLine="976" timestamp="165588317">
    <text><![CDATA[return defaultValue;
		}

	 Integer ]]></text>
  </DocumentChange>
  <DocumentChange __id="10495" _type="Insert" date="Sun Aug 25 09:54:29 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24781" docExpressionCount="1761" docLength="42441" length="1" offset="37411" timestamp="165592830">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="10496" _type="Insert" date="Sun Aug 25 09:54:29 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24782" docExpressionCount="1761" docLength="42442" length="1" offset="37437" timestamp="165592835">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="10497" _type="Insert" date="Sun Aug 25 09:54:29 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24783" docExpressionCount="1761" docLength="42443" length="1" offset="37457" timestamp="165592839">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="10499" _type="Insert" date="Sun Aug 25 09:54:32 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24784" docExpressionCount="1761" docLength="42444" length="1" offset="37411" timestamp="165595147">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="10500" _type="Insert" date="Sun Aug 25 09:54:32 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24785" docExpressionCount="1761" docLength="42445" length="1" offset="37438" timestamp="165595153">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="10501" _type="Insert" date="Sun Aug 25 09:54:32 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24786" docExpressionCount="1761" docLength="42446" length="1" offset="37459" timestamp="165595158">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="10503" _type="Insert" date="Sun Aug 25 09:54:34 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24792" docExpressionCount="1761" docLength="42452" length="6" offset="37464" timestamp="165597741">
    <text><![CDATA[
			 ]]></text>
  </DocumentChange>
  <DocumentChange __id="10505" _type="Replace" date="Sun Aug 25 09:54:35 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24791" docExpressionCount="1761" docLength="42451" endLine="980" insertionLength="3" int_docASTNodeCount="3126" int_docActiveCodeLength="24788" int_docExpressionCount="1761" int_docLength="42448" length="4" offset="37466" startLine="980" timestamp="165598669">
    <deletedText><![CDATA[			 ]]></deletedText>
    <insertedText><![CDATA[		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10511" _type="Insert" date="Sun Aug 25 09:54:52 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24795" docExpressionCount="1761" docLength="42455" length="4" offset="38203" timestamp="165616056">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="10513" _type="Replace" date="Sun Aug 25 09:54:53 EDT 2019" docASTNodeCount="3131" docActiveCodeLength="24807" docExpressionCount="1763" docLength="42467" endLine="994" insertionLength="14" int_docASTNodeCount="3126" int_docActiveCodeLength="24793" int_docExpressionCount="1761" int_docLength="42453" length="2" offset="38205" startLine="994" timestamp="165616876">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		List retVal ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10515" _type="Insert" date="Sun Aug 25 09:54:55 EDT 2019" docASTNodeCount="3132" docActiveCodeLength="24814" docExpressionCount="1764" docLength="42474" length="7" offset="38219" repeat="7" timestamp="165618207" timestamp2="165619835">
    <text><![CDATA[= null;]]></text>
  </DocumentChange>
  <DocumentChange __id="10530" _type="Delete" date="Sun Aug 25 09:55:03 EDT 2019" docASTNodeCount="3131" docActiveCodeLength="24813" docExpressionCount="1763" docLength="42473" endLine="995" length="1" offset="38234" startLine="995" timestamp="165627016">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="10533" _type="Delete" date="Sun Aug 25 09:55:07 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24777" docExpressionCount="1762" docLength="42437" endLine="999" length="36" offset="38314" startLine="996" timestamp="165630186">
    <text><![CDATA[	return defaultValue;
		}

	 List]]></text>
  </DocumentChange>
  <DocumentChange __id="10536" _type="Insert" date="Sun Aug 25 09:55:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24778" docExpressionCount="1762" docLength="42438" length="1" offset="38498" timestamp="165634481">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="10537" _type="Insert" date="Sun Aug 25 09:55:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24779" docExpressionCount="1762" docLength="42439" length="1" offset="38524" timestamp="165634488">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <Command __id="10485" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:54:05 EDT 2019" timestamp="165568616" />
  <Command __id="10487" _type="UndoCommand" date="Sun Aug 25 09:54:08 EDT 2019" timestamp="165571525" />
  <Command __id="10488" _type="MoveCaretCommand" caretOffset="36741" date="Sun Aug 25 09:54:09 EDT 2019" docOffset="37190" timestamp="165572758" />
  <Command __id="10490" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:54:10 EDT 2019" timestamp="165573548" />
  <Command __id="10491" _type="SelectTextCommand" caretOffset="36814" date="Sun Aug 25 09:54:22 EDT 2019" end="36814" start="36775" timestamp="165586048" />
  <Command __id="10493" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sun Aug 25 09:54:25 EDT 2019" timestamp="165588329" />
  <Command __id="10494" _type="SelectTextCommand" caretOffset="37009" date="Sun Aug 25 09:54:29 EDT 2019" end="37009" start="36964" timestamp="165592355" />
  <Command __id="10498" _type="InsertStringCommand" date="Sun Aug 25 09:54:29 EDT 2019" timestamp="165592860" timestamp2="165592860">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="10502" _type="InsertStringCommand" date="Sun Aug 25 09:54:32 EDT 2019" timestamp="165595178" timestamp2="165595178">
    <data><![CDATA[	]]></data>
  </Command>
  <Command __id="10504" _type="InsertStringCommand" date="Sun Aug 25 09:54:34 EDT 2019" timestamp="165597748" timestamp2="165597748">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10506" _type="InsertStringCommand" date="Sun Aug 25 09:54:35 EDT 2019" timestamp="165598675" timestamp2="165598675">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="10507" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:54:36 EDT 2019" timestamp="165599542" />
  <Command __id="10508" _type="SelectTextCommand" caretOffset="37887" date="Sun Aug 25 09:54:50 EDT 2019" end="37887" start="37875" timestamp="165613621" />
  <Command __id="10509" _type="CopyCommand" date="Sun Aug 25 09:54:51 EDT 2019" timestamp="165614166" />
  <Command __id="10510" _type="MoveCaretCommand" caretOffset="37754" date="Sun Aug 25 09:54:52 EDT 2019" docOffset="38203" timestamp="165615570" />
  <Command __id="10512" _type="InsertStringCommand" date="Sun Aug 25 09:54:52 EDT 2019" timestamp="165616063" timestamp2="165616063">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10514" _type="PasteCommand" date="Sun Aug 25 09:54:53 EDT 2019" timestamp="165616886" />
  <Command __id="10516" _type="InsertStringCommand" date="Sun Aug 25 09:54:55 EDT 2019" repeat="7" timestamp="165618210" timestamp2="165619842">
    <data><![CDATA[= null;]]></data>
  </Command>
  <Command __id="10529" _type="MoveCaretCommand" caretOffset="37786" date="Sun Aug 25 09:55:03 EDT 2019" docOffset="38235" timestamp="165626414" />
  <Command __id="10531" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:55:03 EDT 2019" timestamp="165627022" />
  <Command __id="10532" _type="SelectTextCommand" caretOffset="37901" date="Sun Aug 25 09:55:06 EDT 2019" end="37901" start="37865" timestamp="165629715" />
  <Command __id="10534" _type="EclipseCommand" commandID="org.eclipse.ui.edit.delete" date="Sun Aug 25 09:55:07 EDT 2019" timestamp="165630207" />
  <Command __id="10535" _type="SelectTextCommand" caretOffset="38096" date="Sun Aug 25 09:55:10 EDT 2019" end="38096" start="38051" timestamp="165634069" />
  <Command __id="10539" _type="InsertStringCommand" date="Sun Aug 25 09:55:11 EDT 2019" timestamp="165634519" timestamp2="165634519">
    <data><![CDATA[	]]></data>
  </Command>
  <DocumentChange __id="10538" _type="Insert" date="Sun Aug 25 09:55:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24780" docExpressionCount="1762" docLength="42440" length="1" offset="38544" timestamp="165634494">
    <text><![CDATA[	]]></text>
  </DocumentChange>
  <DocumentChange __id="10540" _type="Insert" date="Sun Aug 25 09:55:13 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24785" docExpressionCount="1762" docLength="42445" length="5" offset="38548" timestamp="165636844">
    <text><![CDATA[
		 ]]></text>
  </DocumentChange>
  <DocumentChange __id="10543" _type="Replace" date="Sun Aug 25 09:55:14 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24785" docExpressionCount="1762" docLength="42445" endLine="1000" insertionLength="3" int_docASTNodeCount="3127" int_docActiveCodeLength="24782" int_docExpressionCount="1762" int_docLength="42442" length="3" offset="38550" startLine="1000" timestamp="165637737">
    <deletedText><![CDATA[		 ]]></deletedText>
    <insertedText><![CDATA[		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10546" _type="Delete" date="Sun Aug 25 09:55:41 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24784" docExpressionCount="1762" docLength="42444" endLine="1000" length="1" offset="38552" startLine="1000" timestamp="165664796">
    <text><![CDATA[}]]></text>
  </DocumentChange>
  <DocumentChange __id="10548" _type="Replace" date="Sun Aug 25 09:55:48 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24785" docExpressionCount="1762" docLength="42445" endLine="1000" insertionLength="3" int_docASTNodeCount="3127" int_docActiveCodeLength="24782" int_docExpressionCount="1762" int_docLength="42442" length="2" offset="38550" startLine="1000" timestamp="165671284">
    <deletedText><![CDATA[		]]></deletedText>
    <insertedText><![CDATA[		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10551" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24787" docExpressionCount="1762" docLength="42447" endLine="1114" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24782" int_docExpressionCount="1762" int_docLength="42442" length="3" offset="42327" startLine="1113" timestamp="165691799">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10552" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24792" docExpressionCount="1762" docLength="42452" endLine="1111" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24786" int_docExpressionCount="1762" int_docLength="42446" length="1" offset="42249" startLine="1111" timestamp="165691815">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10553" _type="Insert" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24798" docExpressionCount="1762" docLength="42458" length="6" offset="42147" timestamp="165691818">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="10554" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24794" docExpressionCount="1762" docLength="42454" endLine="1106" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24789" int_docExpressionCount="1762" int_docLength="42449" length="9" offset="41936" startLine="1103" timestamp="165691823">
    <deletedText><![CDATA[
	
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10555" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24796" docExpressionCount="1762" docLength="42456" endLine="1101" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24791" int_docExpressionCount="1762" int_docLength="42451" length="3" offset="41868" startLine="1100" timestamp="165691829">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10556" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24798" docExpressionCount="1762" docLength="42458" endLine="1098" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24793" int_docExpressionCount="1762" int_docLength="42453" length="3" offset="41813" startLine="1097" timestamp="165691834">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10557" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24800" docExpressionCount="1762" docLength="42460" endLine="1095" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24795" int_docExpressionCount="1762" int_docLength="42455" length="3" offset="41707" startLine="1094" timestamp="165691840">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10558" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24802" docExpressionCount="1762" docLength="42462" endLine="1092" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24797" int_docExpressionCount="1762" int_docLength="42457" length="3" offset="41646" startLine="1091" timestamp="165691845">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10559" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24804" docExpressionCount="1762" docLength="42464" endLine="1089" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24799" int_docExpressionCount="1762" int_docLength="42459" length="3" offset="41544" startLine="1088" timestamp="165691850">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10560" _type="Delete" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24803" docExpressionCount="1762" docLength="42463" endLine="1087" length="1" offset="41478" startLine="1087" timestamp="165691852">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10561" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24805" docExpressionCount="1762" docLength="42465" endLine="1086" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24800" int_docExpressionCount="1762" int_docLength="42460" length="3" offset="41372" startLine="1085" timestamp="165691858">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10562" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24803" docExpressionCount="1762" docLength="42463" endLine="1085" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24798" int_docExpressionCount="1762" int_docLength="42458" length="7" offset="41364" startLine="1083" timestamp="165691863">
    <deletedText><![CDATA[
		
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10563" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24805" docExpressionCount="1762" docLength="42465" endLine="1072" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24800" int_docExpressionCount="1762" int_docLength="42460" length="3" offset="40752" startLine="1071" timestamp="165691868">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10564" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24807" docExpressionCount="1762" docLength="42467" endLine="1069" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24802" int_docExpressionCount="1762" int_docLength="42462" length="3" offset="40671" startLine="1068" timestamp="165691874">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10565" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24809" docExpressionCount="1762" docLength="42469" endLine="1066" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24804" int_docExpressionCount="1762" int_docLength="42464" length="3" offset="40612" startLine="1065" timestamp="165691879">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10566" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24808" docExpressionCount="1762" docLength="42468" endLine="1065" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24803" int_docExpressionCount="1762" int_docLength="42463" length="6" offset="40605" startLine="1063" timestamp="165691884">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10567" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24807" docExpressionCount="1762" docLength="42467" endLine="1063" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24801" int_docExpressionCount="1762" int_docLength="42461" length="7" offset="40584" startLine="1061" timestamp="165691890">
    <deletedText><![CDATA[
	
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10568" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24806" docExpressionCount="1762" docLength="42466" endLine="1053" insertionLength="6" int_docASTNodeCount="3116" int_docActiveCodeLength="24777" int_docExpressionCount="1752" int_docLength="42460" length="7" offset="40334" startLine="1051" timestamp="165691897">
    <deletedText><![CDATA[
	
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10569" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24801" docExpressionCount="1762" docLength="42461" endLine="1050" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24797" int_docExpressionCount="1762" int_docLength="42457" length="9" offset="40237" startLine="1047" timestamp="165691903">
    <deletedText><![CDATA[
		
	
]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10570" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24795" docExpressionCount="1762" docLength="42455" endLine="1046" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24794" int_docExpressionCount="1762" int_docLength="42454" length="7" offset="40213" startLine="1045" timestamp="165691908">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10571" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24794" docExpressionCount="1762" docLength="42454" endLine="1044" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24788" int_docExpressionCount="1762" int_docLength="42448" length="7" offset="40119" startLine="1042" timestamp="165691918">
    <deletedText><![CDATA[
	
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10572" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24789" docExpressionCount="1762" docLength="42449" endLine="1042" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24788" int_docExpressionCount="1762" int_docLength="42448" length="6" offset="40101" startLine="1041" timestamp="165691923">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10573" _type="Delete" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24784" docExpressionCount="1762" docLength="42444" endLine="1036" length="5" offset="39817" startLine="1035" timestamp="165691926">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="10574" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24786" docExpressionCount="1762" docLength="42446" endLine="1035" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24781" int_docExpressionCount="1762" int_docLength="42441" length="3" offset="39757" startLine="1034" timestamp="165691931">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10575" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24785" docExpressionCount="1762" docLength="42445" endLine="1034" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24780" int_docExpressionCount="1762" int_docLength="42440" length="6" offset="39750" startLine="1032" timestamp="165691937">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10576" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24784" docExpressionCount="1762" docLength="42444" endLine="1032" insertionLength="6" int_docASTNodeCount="3125" int_docActiveCodeLength="24764" int_docExpressionCount="1761" int_docLength="42438" length="7" offset="39729" startLine="1030" timestamp="165691942">
    <deletedText><![CDATA[
	
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10577" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24778" docExpressionCount="1762" docLength="42438" endLine="1029" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24777" int_docExpressionCount="1762" int_docLength="42437" length="7" offset="39701" startLine="1028" timestamp="165691947">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10578" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24777" docExpressionCount="1762" docLength="42437" endLine="1028" insertionLength="4" int_docASTNodeCount="3116" int_docActiveCodeLength="24700" int_docExpressionCount="1752" int_docLength="42433" length="5" offset="39638" startLine="1027" timestamp="165691953">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10579" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24776" docExpressionCount="1762" docLength="42436" endLine="1023" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24772" int_docExpressionCount="1762" int_docLength="42432" length="5" offset="39493" startLine="1022" timestamp="165691958">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10580" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24775" docExpressionCount="1762" docLength="42435" endLine="1018" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24771" int_docExpressionCount="1762" int_docLength="42431" length="5" offset="39341" startLine="1016" timestamp="165691967">
    <deletedText><![CDATA[
	
]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10581" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24770" docExpressionCount="1762" docLength="42430" endLine="1016" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24769" int_docExpressionCount="1762" int_docLength="42429" length="6" offset="39317" startLine="1015" timestamp="165691972">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10582" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24765" docExpressionCount="1762" docLength="42425" endLine="1011" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24764" int_docExpressionCount="1762" int_docLength="42424" length="6" offset="39179" startLine="1010" timestamp="165691978">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10583" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24764" docExpressionCount="1762" docLength="42424" endLine="1005" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24759" int_docExpressionCount="1762" int_docLength="42419" length="6" offset="38862" startLine="1004" timestamp="165691983">
    <deletedText><![CDATA[ 
			]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10584" _type="Delete" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24759" docExpressionCount="1762" docLength="42419" endLine="1004" length="5" offset="38804" startLine="1003" timestamp="165691986">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="10585" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24761" docExpressionCount="1762" docLength="42421" endLine="1003" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24756" int_docExpressionCount="1762" int_docLength="42416" length="3" offset="38740" startLine="1002" timestamp="165691991">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10586" _type="Insert" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24765" docExpressionCount="1762" docLength="42425" length="4" offset="38735" timestamp="165691994">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="10587" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24770" docExpressionCount="1762" docLength="42430" endLine="1001" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24764" int_docExpressionCount="1762" int_docLength="42424" length="1" offset="38704" startLine="1001" timestamp="165691999">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10588" _type="Insert" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24776" docExpressionCount="1762" docLength="42436" length="6" offset="38602" timestamp="165692002">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="10589" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24776" docExpressionCount="1762" docLength="42436" endLine="1001" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24772" int_docExpressionCount="1762" int_docLength="42432" length="4" offset="38553" startLine="1000" timestamp="165692007">
    <deletedText><![CDATA[
	 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10590" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24776" docExpressionCount="1762" docLength="42436" endLine="999" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24771" int_docExpressionCount="1762" int_docLength="42431" length="5" offset="38542" startLine="998" timestamp="165692013">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10591" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24776" docExpressionCount="1762" docLength="42436" endLine="998" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24770" int_docExpressionCount="1762" int_docLength="42430" length="6" offset="38522" startLine="997" timestamp="165692018">
    <deletedText><![CDATA[
			 ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10592" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24776" docExpressionCount="1762" docLength="42436" endLine="997" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24771" int_docExpressionCount="1762" int_docLength="42431" length="5" offset="38496" startLine="996" timestamp="165692023">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10593" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24782" docExpressionCount="1762" docLength="42442" endLine="996" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24775" int_docExpressionCount="1762" int_docLength="42435" length="1" offset="38456" startLine="996" timestamp="165692029">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
					]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10594" _type="Insert" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24789" docExpressionCount="1762" docLength="42449" length="7" offset="38362" timestamp="165692032">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="10595" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24789" docExpressionCount="1762" docLength="42449" endLine="996" insertionLength="5" int_docASTNodeCount="3087" int_docActiveCodeLength="24737" int_docExpressionCount="1730" int_docLength="42444" length="5" offset="38310" startLine="995" timestamp="165692041">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10596" _type="Delete" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24788" docExpressionCount="1762" docLength="42448" endLine="995" length="1" offset="38261" startLine="995" timestamp="165692044">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10597" _type="Delete" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24783" docExpressionCount="1762" docLength="42443" endLine="993" length="5" offset="38161" startLine="992" timestamp="165692046">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="10598" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24785" docExpressionCount="1762" docLength="42445" endLine="984" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24781" int_docExpressionCount="1762" int_docLength="42441" length="2" offset="37661" startLine="983" timestamp="165692052">
    <deletedText><![CDATA[
]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10599" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24790" docExpressionCount="1762" docLength="42450" endLine="981" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24784" int_docExpressionCount="1762" int_docLength="42444" length="1" offset="37624" startLine="981" timestamp="165692057">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10600" _type="Insert" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24796" docExpressionCount="1762" docLength="42456" length="6" offset="37522" timestamp="165692060">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="10601" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24795" docExpressionCount="1762" docLength="42455" endLine="981" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24794" int_docExpressionCount="1762" int_docLength="42454" length="2" offset="37479" startLine="981" timestamp="165692065">
    <deletedText><![CDATA[  ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10602" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24795" docExpressionCount="1762" docLength="42455" endLine="981" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24791" int_docExpressionCount="1762" int_docLength="42451" length="4" offset="37469" startLine="980" timestamp="165692070">
    <deletedText><![CDATA[
	 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10603" _type="Replace" date="Sun Aug 25 09:56:08 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24794" docExpressionCount="1762" docLength="42454" endLine="979" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24789" int_docExpressionCount="1762" int_docLength="42449" length="6" offset="37457" startLine="978" timestamp="165692076">
    <deletedText><![CDATA[
			 ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10604" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24793" docExpressionCount="1762" docLength="42453" endLine="978" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24787" int_docExpressionCount="1762" int_docLength="42447" length="7" offset="37436" startLine="977" timestamp="165692082">
    <deletedText><![CDATA[
				 ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10605" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24792" docExpressionCount="1762" docLength="42452" endLine="977" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24787" int_docExpressionCount="1762" int_docLength="42447" length="6" offset="37409" startLine="976" timestamp="165692088">
    <deletedText><![CDATA[
			 ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10606" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24798" docExpressionCount="1762" docLength="42458" endLine="976" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24791" int_docExpressionCount="1762" int_docLength="42451" length="1" offset="37369" startLine="976" timestamp="165692096">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
					]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10607" _type="Insert" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24805" docExpressionCount="1762" docLength="42465" length="7" offset="37275" timestamp="165692098">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="10608" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24804" docExpressionCount="1762" docLength="42464" endLine="976" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24803" int_docExpressionCount="1762" int_docLength="42463" length="2" offset="37232" startLine="976" timestamp="165692104">
    <deletedText><![CDATA[  ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10609" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24803" docExpressionCount="1762" docLength="42463" endLine="974" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24799" int_docExpressionCount="1762" int_docLength="42459" length="5" offset="37154" startLine="973" timestamp="165692109">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10610" _type="Delete" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24798" docExpressionCount="1762" docLength="42458" endLine="973" length="5" offset="37109" startLine="972" timestamp="165692112">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="10611" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24797" docExpressionCount="1762" docLength="42457" endLine="964" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24793" int_docExpressionCount="1762" int_docLength="42453" length="5" offset="36634" startLine="962" timestamp="165692117">
    <deletedText><![CDATA[
	
]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10612" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24796" docExpressionCount="1762" docLength="42456" endLine="962" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24791" int_docExpressionCount="1762" int_docLength="42451" length="6" offset="36627" startLine="960" timestamp="165692123">
    <deletedText><![CDATA[
 
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10613" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24801" docExpressionCount="1762" docLength="42461" endLine="960" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24795" int_docExpressionCount="1762" int_docLength="42455" length="1" offset="36596" startLine="960" timestamp="165692128">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10614" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24803" docExpressionCount="1762" docLength="42463" endLine="960" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24797" int_docExpressionCount="1762" int_docLength="42457" length="4" offset="36490" startLine="959" timestamp="165692133">
    <deletedText><![CDATA[
		]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10615" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24803" docExpressionCount="1762" docLength="42463" endLine="959" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24799" int_docExpressionCount="1762" int_docLength="42459" length="4" offset="36438" startLine="958" timestamp="165692139">
    <deletedText><![CDATA[
	 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10616" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24803" docExpressionCount="1762" docLength="42463" endLine="957" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24798" int_docExpressionCount="1762" int_docLength="42458" length="5" offset="36427" startLine="956" timestamp="165692145">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10617" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24803" docExpressionCount="1762" docLength="42463" endLine="956" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24797" int_docExpressionCount="1762" int_docLength="42457" length="6" offset="36407" startLine="955" timestamp="165692150">
    <deletedText><![CDATA[
			 ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10618" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24803" docExpressionCount="1762" docLength="42463" endLine="955" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24796" int_docExpressionCount="1762" int_docLength="42456" length="7" offset="36379" startLine="953" timestamp="165692156">
    <deletedText><![CDATA[

		 ]]></deletedText>
    <insertedText><![CDATA[

			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10619" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24809" docExpressionCount="1762" docLength="42469" endLine="953" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24802" int_docExpressionCount="1762" int_docLength="42462" length="1" offset="36339" startLine="953" timestamp="165692165">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
					]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10620" _type="Insert" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24816" docExpressionCount="1762" docLength="42476" length="7" offset="36245" timestamp="165692168">
    <text><![CDATA[
					]]></text>
  </DocumentChange>
  <DocumentChange __id="10621" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24809" docExpressionCount="1762" docLength="42469" endLine="953" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24802" int_docExpressionCount="1762" int_docLength="42462" length="14" offset="36181" startLine="951" timestamp="165692172">
    <deletedText><![CDATA[			  
		
			]]></deletedText>
    <insertedText><![CDATA[

			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10622" _type="Delete" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24808" docExpressionCount="1762" docLength="42468" endLine="951" length="1" offset="36177" startLine="951" timestamp="165692175">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10623" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24810" docExpressionCount="1762" docLength="42470" endLine="951" insertionLength="6" int_docASTNodeCount="3113" int_docActiveCodeLength="24774" int_docExpressionCount="1748" int_docLength="42464" length="4" offset="36146" startLine="950" timestamp="165692183">
    <deletedText><![CDATA[
		]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10624" _type="Delete" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24806" docExpressionCount="1762" docLength="42466" endLine="950" length="4" offset="36050" startLine="949" timestamp="165692186">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="10625" _type="Delete" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24801" docExpressionCount="1762" docLength="42461" endLine="941" length="5" offset="35588" startLine="940" timestamp="165692189">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="10626" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24803" docExpressionCount="1762" docLength="42463" endLine="940" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24798" int_docExpressionCount="1762" int_docLength="42458" length="3" offset="35517" startLine="939" timestamp="165692194">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10627" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24801" docExpressionCount="1762" docLength="42461" endLine="939" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24796" int_docExpressionCount="1762" int_docLength="42456" length="7" offset="35509" startLine="937" timestamp="165692199">
    <deletedText><![CDATA[
		
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10628" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24795" docExpressionCount="1762" docLength="42455" endLine="937" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24794" int_docExpressionCount="1762" int_docLength="42454" length="7" offset="35417" startLine="936" timestamp="165692205">
    <deletedText><![CDATA[ 
		  ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10629" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24797" docExpressionCount="1762" docLength="42457" endLine="932" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24792" int_docExpressionCount="1762" int_docLength="42452" length="3" offset="35272" startLine="931" timestamp="165692210">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10630" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24802" docExpressionCount="1762" docLength="42462" endLine="930" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24796" int_docExpressionCount="1762" int_docLength="42456" length="1" offset="35228" startLine="930" timestamp="165692215">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10631" _type="Insert" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24808" docExpressionCount="1762" docLength="42468" length="6" offset="35126" timestamp="165692218">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="10632" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24808" docExpressionCount="1762" docLength="42468" endLine="930" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24802" int_docExpressionCount="1762" int_docLength="42462" length="6" offset="35073" startLine="928" timestamp="165692223">
    <deletedText><![CDATA[

	 ]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10633" _type="Delete" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24807" docExpressionCount="1762" docLength="42467" endLine="925" length="1" offset="34962" startLine="925" timestamp="165692226">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10634" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24808" docExpressionCount="1762" docLength="42468" endLine="925" insertionLength="6" int_docASTNodeCount="3112" int_docActiveCodeLength="24771" int_docExpressionCount="1747" int_docLength="42462" length="5" offset="34929" startLine="924" timestamp="165692234">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10635" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24830" docExpressionCount="1762" docLength="42492" endLine="924" insertionLength="25" int_docASTNodeCount="3127" int_docActiveCodeLength="24808" int_docExpressionCount="1762" int_docLength="42467" length="1" offset="34919" startLine="924" timestamp="165692239">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
																				// ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10636" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24829" docExpressionCount="1762" docLength="42491" endLine="924" insertionLength="4" int_docASTNodeCount="3121" int_docActiveCodeLength="24754" int_docExpressionCount="1756" int_docLength="42487" length="5" offset="34809" startLine="923" timestamp="165692245">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10637" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24828" docExpressionCount="1762" docLength="42490" endLine="923" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24824" int_docExpressionCount="1762" int_docLength="42486" length="5" offset="34726" startLine="922" timestamp="165692250">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10638" _type="Delete" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24823" docExpressionCount="1762" docLength="42485" endLine="921" length="5" offset="34674" startLine="920" timestamp="165692253">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="10639" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24825" docExpressionCount="1762" docLength="42487" endLine="920" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24820" int_docExpressionCount="1762" int_docLength="42482" length="3" offset="34605" startLine="919" timestamp="165692258">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10640" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24825" docExpressionCount="1762" docLength="42487" endLine="919" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24820" int_docExpressionCount="1762" int_docLength="42482" length="5" offset="34599" startLine="917" timestamp="165692264">
    <deletedText><![CDATA[
	
]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10641" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24825" docExpressionCount="1762" docLength="42487" endLine="917" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24821" int_docExpressionCount="1762" int_docLength="42483" length="4" offset="34581" startLine="916" timestamp="165692269">
    <deletedText><![CDATA[
	 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10642" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24825" docExpressionCount="1762" docLength="42487" endLine="916" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24821" int_docExpressionCount="1762" int_docLength="42483" length="4" offset="34576" startLine="915" timestamp="165692275">
    <deletedText><![CDATA[
	 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10643" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24825" docExpressionCount="1762" docLength="42487" endLine="915" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24820" int_docExpressionCount="1762" int_docLength="42482" length="5" offset="34551" startLine="914" timestamp="165692284">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10644" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24825" docExpressionCount="1762" docLength="42487" endLine="914" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24821" int_docExpressionCount="1762" int_docLength="42483" length="4" offset="34526" startLine="913" timestamp="165692289">
    <deletedText><![CDATA[
	 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10645" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24825" docExpressionCount="1762" docLength="42487" endLine="913" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24821" int_docExpressionCount="1762" int_docLength="42483" length="4" offset="34475" startLine="912" timestamp="165692295">
    <deletedText><![CDATA[
	 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10646" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24825" docExpressionCount="1762" docLength="42487" endLine="912" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24821" int_docExpressionCount="1762" int_docLength="42483" length="4" offset="34470" startLine="911" timestamp="165692300">
    <deletedText><![CDATA[
	 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10647" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24825" docExpressionCount="1762" docLength="42487" endLine="911" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24820" int_docExpressionCount="1762" int_docLength="42482" length="5" offset="34445" startLine="910" timestamp="165692305">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10648" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24825" docExpressionCount="1762" docLength="42487" endLine="910" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24821" int_docExpressionCount="1762" int_docLength="42483" length="4" offset="34412" startLine="909" timestamp="165692311">
    <deletedText><![CDATA[
	 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10649" _type="Insert" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24831" docExpressionCount="1762" docLength="42493" length="6" offset="34377" timestamp="165692314">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="10650" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24831" docExpressionCount="1762" docLength="42493" endLine="909" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24827" int_docExpressionCount="1762" int_docLength="42489" length="4" offset="34273" startLine="908" timestamp="165692319">
    <deletedText><![CDATA[
	 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10651" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24830" docExpressionCount="1762" docLength="42492" endLine="906" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24825" int_docExpressionCount="1762" int_docLength="42487" length="6" offset="34159" startLine="905" timestamp="165692324">
    <deletedText><![CDATA[
			 ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10652" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24831" docExpressionCount="1762" docLength="42493" endLine="905" insertionLength="6" int_docASTNodeCount="3116" int_docActiveCodeLength="24794" int_docExpressionCount="1751" int_docLength="42487" length="5" offset="34123" startLine="904" timestamp="165692332">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10653" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24829" docExpressionCount="1762" docLength="42491" endLine="904" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24823" int_docExpressionCount="1762" int_docLength="42485" length="8" offset="34037" startLine="902" timestamp="165692337">
    <deletedText><![CDATA[
		
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10654" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24828" docExpressionCount="1762" docLength="42490" endLine="902" insertionLength="1" int_docASTNodeCount="3075" int_docActiveCodeLength="24827" int_docExpressionCount="1728" int_docLength="42489" length="2" offset="34020" startLine="902" timestamp="165692344">
    <deletedText><![CDATA[  ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10655" _type="Delete" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24827" docExpressionCount="1762" docLength="42489" endLine="902" length="1" offset="33997" startLine="902" timestamp="165692347">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10656" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24829" docExpressionCount="1762" docLength="42491" endLine="902" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24824" int_docExpressionCount="1762" int_docLength="42486" length="3" offset="33944" startLine="901" timestamp="165692353">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10657" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24827" docExpressionCount="1762" docLength="42489" endLine="901" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24822" int_docExpressionCount="1762" int_docLength="42484" length="7" offset="33936" startLine="899" timestamp="165692358">
    <deletedText><![CDATA[
		
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10658" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24826" docExpressionCount="1762" docLength="42488" endLine="899" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24822" int_docExpressionCount="1762" int_docLength="42484" length="5" offset="33875" startLine="898" timestamp="165692363">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10659" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24825" docExpressionCount="1762" docLength="42487" endLine="898" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24821" int_docExpressionCount="1762" int_docLength="42483" length="5" offset="33869" startLine="897" timestamp="165692369">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10660" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24824" docExpressionCount="1762" docLength="42486" endLine="897" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24819" int_docExpressionCount="1762" int_docLength="42481" length="6" offset="33843" startLine="896" timestamp="165692374">
    <deletedText><![CDATA[
			 ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10661" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24823" docExpressionCount="1762" docLength="42485" endLine="896" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24819" int_docExpressionCount="1762" int_docLength="42481" length="5" offset="33809" startLine="895" timestamp="165692379">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10662" _type="Insert" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24829" docExpressionCount="1762" docLength="42491" length="6" offset="33774" timestamp="165692382">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="10663" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24828" docExpressionCount="1762" docLength="42490" endLine="895" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24824" int_docExpressionCount="1762" int_docLength="42486" length="5" offset="33669" startLine="894" timestamp="165692387">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10664" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24827" docExpressionCount="1762" docLength="42489" endLine="894" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24823" int_docExpressionCount="1762" int_docLength="42485" length="5" offset="33663" startLine="893" timestamp="165692393">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10665" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24826" docExpressionCount="1762" docLength="42488" endLine="893" insertionLength="5" int_docASTNodeCount="3125" int_docActiveCodeLength="24801" int_docExpressionCount="1761" int_docLength="42483" length="6" offset="33637" startLine="892" timestamp="165692398">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10666" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24824" docExpressionCount="1762" docLength="42486" endLine="892" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24819" int_docExpressionCount="1762" int_docLength="42481" length="7" offset="33552" startLine="891" timestamp="165692403">
    <deletedText><![CDATA[
				 ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10668" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24821" docExpressionCount="1762" docLength="42483" endLine="891" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24815" int_docExpressionCount="1762" int_docLength="42477" length="9" offset="33508" startLine="889" timestamp="165692412">
    <deletedText><![CDATA[
		
			]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10669" _type="Delete" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24820" docExpressionCount="1762" docLength="42482" endLine="889" length="1" offset="33467" startLine="889" timestamp="165692415">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10670" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24819" docExpressionCount="1762" docLength="42481" endLine="889" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24814" int_docExpressionCount="1762" int_docLength="42476" length="6" offset="33407" startLine="887" timestamp="165692420">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10671" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24818" docExpressionCount="1762" docLength="42480" endLine="887" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24813" int_docExpressionCount="1762" int_docLength="42475" length="6" offset="33400" startLine="885" timestamp="165692425">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10672" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24817" docExpressionCount="1762" docLength="42479" endLine="885" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24811" int_docExpressionCount="1762" int_docLength="42473" length="7" offset="33379" startLine="883" timestamp="165692431">
    <deletedText><![CDATA[
	
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10673" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24811" docExpressionCount="1762" docLength="42473" endLine="882" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24810" int_docExpressionCount="1762" int_docLength="42472" length="7" offset="33353" startLine="881" timestamp="165692436">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10674" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24810" docExpressionCount="1762" docLength="42472" endLine="877" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24804" int_docExpressionCount="1762" int_docLength="42466" length="7" offset="33161" startLine="875" timestamp="165692441">
    <deletedText><![CDATA[
	
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10675" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24805" docExpressionCount="1762" docLength="42467" endLine="875" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24804" int_docExpressionCount="1762" int_docLength="42466" length="6" offset="33137" startLine="874" timestamp="165692447">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10676" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24804" docExpressionCount="1762" docLength="42466" endLine="874" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24798" int_docExpressionCount="1762" int_docLength="42460" length="7" offset="33060" startLine="872" timestamp="165692452">
    <deletedText><![CDATA[
	
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10677" _type="Delete" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24799" docExpressionCount="1762" docLength="42461" endLine="868" length="5" offset="32866" startLine="867" timestamp="165692455">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="10678" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24798" docExpressionCount="1762" docLength="42460" endLine="867" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24793" int_docExpressionCount="1762" int_docLength="42455" length="6" offset="32797" startLine="865" timestamp="165692460">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10679" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24800" docExpressionCount="1762" docLength="42462" endLine="865" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24795" int_docExpressionCount="1762" int_docLength="42457" length="3" offset="32747" startLine="864" timestamp="165692466">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10680" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24799" docExpressionCount="1762" docLength="42461" endLine="864" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24794" int_docExpressionCount="1762" int_docLength="42456" length="6" offset="32740" startLine="862" timestamp="165692471">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10681" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24798" docExpressionCount="1762" docLength="42460" endLine="862" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24792" int_docExpressionCount="1762" int_docLength="42454" length="7" offset="32719" startLine="860" timestamp="165692842">
    <deletedText><![CDATA[
	
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10682" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24792" docExpressionCount="1762" docLength="42454" endLine="859" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24791" int_docExpressionCount="1762" int_docLength="42453" length="7" offset="32693" startLine="858" timestamp="165692847">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10683" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24791" docExpressionCount="1762" docLength="42453" endLine="854" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24785" int_docExpressionCount="1762" int_docLength="42447" length="7" offset="32501" startLine="852" timestamp="165692853">
    <deletedText><![CDATA[
	
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10684" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24786" docExpressionCount="1762" docLength="42448" endLine="852" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24785" int_docExpressionCount="1762" int_docLength="42447" length="6" offset="32477" startLine="851" timestamp="165692859">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10685" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24785" docExpressionCount="1762" docLength="42447" endLine="851" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24779" int_docExpressionCount="1762" int_docLength="42441" length="7" offset="32400" startLine="849" timestamp="165692864">
    <deletedText><![CDATA[
	
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10686" _type="Delete" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24780" docExpressionCount="1762" docLength="42442" endLine="845" length="5" offset="32205" startLine="844" timestamp="165692867">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="10687" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24782" docExpressionCount="1762" docLength="42444" endLine="844" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24777" int_docExpressionCount="1762" int_docLength="42439" length="3" offset="32139" startLine="843" timestamp="165692872">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10688" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24784" docExpressionCount="1762" docLength="42446" endLine="840" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24779" int_docExpressionCount="1762" int_docLength="42441" length="3" offset="31875" startLine="839" timestamp="165692878">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10689" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24786" docExpressionCount="1762" docLength="42448" endLine="836" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24781" int_docExpressionCount="1762" int_docLength="42443" length="3" offset="31672" startLine="835" timestamp="165692883">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10690" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24788" docExpressionCount="1762" docLength="42450" endLine="833" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24783" int_docExpressionCount="1762" int_docLength="42445" length="3" offset="31556" startLine="832" timestamp="165692901">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10691" _type="Insert" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24792" docExpressionCount="1762" docLength="42454" length="4" offset="31551" timestamp="165692904">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="10692" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24791" docExpressionCount="1762" docLength="42453" endLine="831" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24787" int_docExpressionCount="1762" int_docLength="42449" length="5" offset="31518" startLine="830" timestamp="165692913">
    <deletedText><![CDATA[
		 ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10693" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24793" docExpressionCount="1762" docLength="42455" endLine="830" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24788" int_docExpressionCount="1762" int_docLength="42450" length="3" offset="31458" startLine="829" timestamp="165692919">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10694" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24795" docExpressionCount="1762" docLength="42457" endLine="827" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24790" int_docExpressionCount="1762" int_docLength="42452" length="3" offset="31375" startLine="826" timestamp="165692924">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10695" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24793" docExpressionCount="1762" docLength="42455" endLine="755" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24789" int_docExpressionCount="1762" int_docLength="42451" length="6" offset="28913" startLine="752" timestamp="165692929">
    <deletedText><![CDATA[


]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10696" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24789" docExpressionCount="1762" docLength="42451" endLine="733" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24788" int_docExpressionCount="1762" int_docLength="42450" length="5" offset="28189" startLine="732" timestamp="165692935">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10697" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24793" docExpressionCount="1762" docLength="42455" endLine="732" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24788" int_docExpressionCount="1762" int_docLength="42450" length="1" offset="28149" startLine="732" timestamp="165692940">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10698" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24789" docExpressionCount="1762" docLength="42451" endLine="732" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24788" int_docExpressionCount="1762" int_docLength="42450" length="5" offset="28124" startLine="731" timestamp="165692946">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10699" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24791" docExpressionCount="1762" docLength="42453" endLine="731" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24786" int_docExpressionCount="1762" int_docLength="42448" length="3" offset="28034" startLine="730" timestamp="165692951">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10700" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24789" docExpressionCount="1762" docLength="42451" endLine="659" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24785" int_docExpressionCount="1762" int_docLength="42447" length="6" offset="25572" startLine="656" timestamp="165692956">
    <deletedText><![CDATA[


]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10701" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24794" docExpressionCount="1762" docLength="42456" endLine="647" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24788" int_docExpressionCount="1762" int_docLength="42450" length="1" offset="25098" startLine="647" timestamp="165692962">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10702" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24792" docExpressionCount="1762" docLength="42454" endLine="644" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24785" int_docExpressionCount="1762" int_docLength="42447" length="9" offset="24923" startLine="642" timestamp="165692967">
    <deletedText><![CDATA[
		
			]]></deletedText>
    <insertedText><![CDATA[

			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10703" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24788" docExpressionCount="1762" docLength="42450" endLine="630" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24787" int_docExpressionCount="1762" int_docLength="42449" length="5" offset="24451" startLine="629" timestamp="165692972">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10704" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24792" docExpressionCount="1762" docLength="42454" endLine="629" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24787" int_docExpressionCount="1762" int_docLength="42449" length="1" offset="24430" startLine="629" timestamp="165692978">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10705" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24788" docExpressionCount="1762" docLength="42450" endLine="629" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24787" int_docExpressionCount="1762" int_docLength="42449" length="5" offset="24386" startLine="628" timestamp="165692983">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10706" _type="Replace" date="Sun Aug 25 09:56:09 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24790" docExpressionCount="1762" docLength="42452" endLine="526" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24786" int_docExpressionCount="1762" int_docLength="42448" length="2" offset="20529" startLine="525" timestamp="165692989">
    <deletedText><![CDATA[
]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10707" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24791" docExpressionCount="1762" docLength="42453" endLine="521" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24785" int_docExpressionCount="1762" int_docLength="42447" length="5" offset="20506" startLine="520" timestamp="165693212">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10708" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24792" docExpressionCount="1762" docLength="42454" endLine="520" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24785" int_docExpressionCount="1762" int_docLength="42447" length="6" offset="20457" startLine="519" timestamp="165693218">
    <deletedText><![CDATA[
				]]></deletedText>
    <insertedText><![CDATA[
					]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10709" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24793" docExpressionCount="1762" docLength="42455" endLine="519" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24787" int_docExpressionCount="1762" int_docLength="42449" length="5" offset="20411" startLine="518" timestamp="165693223">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10710" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24792" docExpressionCount="1762" docLength="42454" endLine="514" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24791" int_docExpressionCount="1762" int_docLength="42453" length="2" offset="20245" startLine="514" timestamp="165693229">
    <deletedText><![CDATA[  ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10711" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24794" docExpressionCount="1762" docLength="42456" endLine="514" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24789" int_docExpressionCount="1762" int_docLength="42451" length="3" offset="20185" startLine="513" timestamp="165693234">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10712" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24795" docExpressionCount="1762" docLength="42457" endLine="509" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24789" int_docExpressionCount="1762" int_docLength="42451" length="5" offset="20122" startLine="508" timestamp="165693239">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10713" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24789" docExpressionCount="1762" docLength="42451" endLine="508" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24788" int_docExpressionCount="1762" int_docLength="42450" length="7" offset="20083" startLine="507" timestamp="165693244">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10714" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24790" docExpressionCount="1762" docLength="42452" endLine="507" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24784" int_docExpressionCount="1762" int_docLength="42446" length="5" offset="20035" startLine="506" timestamp="165693250">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10715" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24789" docExpressionCount="1762" docLength="42451" endLine="500" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24788" int_docExpressionCount="1762" int_docLength="42450" length="2" offset="19729" startLine="500" timestamp="165693255">
    <deletedText><![CDATA[  ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10716" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24791" docExpressionCount="1762" docLength="42453" endLine="500" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24786" int_docExpressionCount="1762" int_docLength="42448" length="3" offset="19662" startLine="499" timestamp="165693264">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10717" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24784" docExpressionCount="1762" docLength="42446" endLine="493" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24783" int_docExpressionCount="1762" int_docLength="42445" length="8" offset="19477" startLine="492" timestamp="165693270">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10718" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24777" docExpressionCount="1762" docLength="42439" endLine="491" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24776" int_docExpressionCount="1762" int_docLength="42438" length="8" offset="19397" startLine="490" timestamp="165693275">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10719" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24773" docExpressionCount="1762" docLength="42435" endLine="488" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24766" int_docExpressionCount="1762" int_docLength="42428" length="11" offset="19294" startLine="486" timestamp="165693281">
    <deletedText><![CDATA[
				
			]]></deletedText>
    <insertedText><![CDATA[

			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10720" _type="Delete" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24765" docExpressionCount="1762" docLength="42427" endLine="486" length="8" offset="19238" startLine="485" timestamp="165693284">
    <text><![CDATA[
						]]></text>
  </DocumentChange>
  <DocumentChange __id="10721" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24761" docExpressionCount="1762" docLength="42423" endLine="480" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24760" int_docExpressionCount="1762" int_docLength="42422" length="5" offset="19009" startLine="479" timestamp="165693290">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10722" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24760" docExpressionCount="1762" docLength="42422" endLine="479" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24759" int_docExpressionCount="1762" int_docLength="42421" length="2" offset="18987" startLine="479" timestamp="165693295">
    <deletedText><![CDATA[  ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10723" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24759" docExpressionCount="1762" docLength="42421" endLine="479" insertionLength="5" int_docASTNodeCount="3101" int_docActiveCodeLength="24643" int_docExpressionCount="1746" int_docLength="42416" length="6" offset="18918" startLine="477" timestamp="165693303">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10724" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24758" docExpressionCount="1762" docLength="42420" endLine="454" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24754" int_docExpressionCount="1762" int_docLength="42416" length="5" offset="18021" startLine="452" timestamp="165693309">
    <deletedText><![CDATA[
	
]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10725" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24754" docExpressionCount="1762" docLength="42416" endLine="419" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24750" int_docExpressionCount="1762" int_docLength="42412" length="8" offset="16629" startLine="416" timestamp="165693315">
    <deletedText><![CDATA[

		
]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10726" _type="Delete" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24753" docExpressionCount="1762" docLength="42415" endLine="412" length="1" offset="16415" startLine="412" timestamp="165693318">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10727" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24751" docExpressionCount="1762" docLength="42413" endLine="410" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24745" int_docExpressionCount="1762" int_docLength="42407" length="8" offset="16300" startLine="408" timestamp="165693323">
    <deletedText><![CDATA[
		
		]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10728" _type="Delete" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24750" docExpressionCount="1762" docLength="42412" endLine="408" length="1" offset="16298" startLine="408" timestamp="165693326">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10729" _type="Delete" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24749" docExpressionCount="1762" docLength="42411" endLine="405" length="1" offset="16181" startLine="405" timestamp="165693329">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10730" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24751" docExpressionCount="1762" docLength="42413" endLine="405" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24746" int_docExpressionCount="1762" int_docLength="42408" length="3" offset="16139" startLine="404" timestamp="165693335">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10731" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24748" docExpressionCount="1762" docLength="42410" endLine="401" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24744" int_docExpressionCount="1762" int_docLength="42406" length="7" offset="15998" startLine="400" timestamp="165693567">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10732" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24745" docExpressionCount="1762" docLength="42407" endLine="400" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24741" int_docExpressionCount="1762" int_docLength="42403" length="7" offset="15976" startLine="399" timestamp="165693572">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10733" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24742" docExpressionCount="1762" docLength="42404" endLine="399" insertionLength="4" int_docASTNodeCount="3119" int_docActiveCodeLength="24658" int_docExpressionCount="1755" int_docLength="42400" length="7" offset="15889" startLine="398" timestamp="165693578">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10734" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24746" docExpressionCount="1762" docLength="42410" endLine="398" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24742" int_docExpressionCount="1762" int_docLength="42403" length="1" offset="15876" startLine="398" timestamp="165693583">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
		// ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10735" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24743" docExpressionCount="1762" docLength="42407" endLine="398" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24739" int_docExpressionCount="1762" int_docLength="42403" length="7" offset="15792" startLine="397" timestamp="165693589">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10736" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24740" docExpressionCount="1762" docLength="42404" endLine="397" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24736" int_docExpressionCount="1762" int_docLength="42400" length="7" offset="15784" startLine="396" timestamp="165693594">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10737" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24737" docExpressionCount="1762" docLength="42401" endLine="396" insertionLength="5" int_docASTNodeCount="3121" int_docActiveCodeLength="24659" int_docExpressionCount="1757" int_docLength="42396" length="8" offset="15703" startLine="395" timestamp="165693599">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10738" _type="Insert" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24737" docExpressionCount="1762" docLength="42402" length="1" offset="15671" timestamp="165693602">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10739" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24734" docExpressionCount="1762" docLength="42399" endLine="395" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24729" int_docExpressionCount="1762" int_docLength="42394" length="8" offset="15661" startLine="394" timestamp="165693608">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10740" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24731" docExpressionCount="1762" docLength="42396" endLine="394" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24727" int_docExpressionCount="1762" int_docLength="42392" length="7" offset="15611" startLine="393" timestamp="165693616">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10741" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24727" docExpressionCount="1762" docLength="42392" endLine="393" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24723" int_docExpressionCount="1762" int_docLength="42388" length="8" offset="15520" startLine="392" timestamp="165693622">
    <deletedText><![CDATA[ 
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10742" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24724" docExpressionCount="1762" docLength="42389" endLine="392" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24719" int_docExpressionCount="1762" int_docLength="42385" length="7" offset="15512" startLine="391" timestamp="165693629">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10743" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24721" docExpressionCount="1762" docLength="42386" endLine="391" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24716" int_docExpressionCount="1762" int_docLength="42381" length="8" offset="15455" startLine="390" timestamp="165693634">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10744" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24718" docExpressionCount="1762" docLength="42383" endLine="390" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24713" int_docExpressionCount="1762" int_docLength="42378" length="8" offset="15396" startLine="389" timestamp="165693640">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10745" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24715" docExpressionCount="1762" docLength="42380" endLine="389" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24710" int_docExpressionCount="1762" int_docLength="42375" length="8" offset="15332" startLine="388" timestamp="165693645">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10746" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24706" docExpressionCount="1762" docLength="42371" endLine="388" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24705" int_docExpressionCount="1762" int_docLength="42370" length="10" offset="15271" startLine="387" timestamp="165693650">
    <deletedText><![CDATA[
								]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10747" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24703" docExpressionCount="1762" docLength="42368" endLine="387" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24698" int_docExpressionCount="1762" int_docLength="42363" length="8" offset="15222" startLine="386" timestamp="165693656">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10748" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24700" docExpressionCount="1762" docLength="42365" endLine="386" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24694" int_docExpressionCount="1762" int_docLength="42359" length="9" offset="15174" startLine="384" timestamp="165693661">
    <deletedText><![CDATA[

					]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10749" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24697" docExpressionCount="1762" docLength="42362" endLine="384" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24691" int_docExpressionCount="1762" int_docLength="42356" length="9" offset="15164" startLine="382" timestamp="165693667">
    <deletedText><![CDATA[

					]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10750" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24694" docExpressionCount="1762" docLength="42359" endLine="382" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24689" int_docExpressionCount="1762" int_docLength="42354" length="8" offset="15155" startLine="381" timestamp="165693672">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10751" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24692" docExpressionCount="1762" docLength="42357" endLine="381" insertionLength="8" int_docASTNodeCount="3115" int_docActiveCodeLength="24636" int_docExpressionCount="1751" int_docLength="42349" length="10" offset="15097" startLine="380" timestamp="165693679">
    <deletedText><![CDATA[
								]]></deletedText>
    <insertedText><![CDATA[
						]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10752" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24690" docExpressionCount="1762" docLength="42355" endLine="379" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24684" int_docExpressionCount="1762" int_docLength="42349" length="8" offset="14994" startLine="378" timestamp="165693684">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10753" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24687" docExpressionCount="1762" docLength="42352" endLine="378" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24682" int_docExpressionCount="1762" int_docLength="42347" length="8" offset="14978" startLine="377" timestamp="165693690">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10754" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24684" docExpressionCount="1762" docLength="42349" endLine="377" insertionLength="8" int_docASTNodeCount="3119" int_docActiveCodeLength="24672" int_docExpressionCount="1755" int_docLength="42341" length="11" offset="14963" startLine="376" timestamp="165693696">
    <deletedText><![CDATA[
									]]></deletedText>
    <insertedText><![CDATA[
						]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10755" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24681" docExpressionCount="1762" docLength="42346" endLine="376" insertionLength="8" int_docASTNodeCount="3127" int_docActiveCodeLength="24673" int_docExpressionCount="1762" int_docLength="42338" length="11" offset="14903" startLine="375" timestamp="165693963">
    <deletedText><![CDATA[
									]]></deletedText>
    <insertedText><![CDATA[
						]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10756" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24678" docExpressionCount="1762" docLength="42343" endLine="375" insertionLength="6" int_docASTNodeCount="3121" int_docActiveCodeLength="24634" int_docExpressionCount="1756" int_docLength="42337" length="9" offset="14856" startLine="374" timestamp="165693969">
    <deletedText><![CDATA[
							]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10757" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24675" docExpressionCount="1762" docLength="42340" endLine="374" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24670" int_docExpressionCount="1762" int_docLength="42335" length="8" offset="14777" startLine="373" timestamp="165693975">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10758" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24671" docExpressionCount="1762" docLength="42336" endLine="373" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24667" int_docExpressionCount="1762" int_docLength="42332" length="8" offset="14733" startLine="372" timestamp="165693981">
    <deletedText><![CDATA[ 
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10759" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24668" docExpressionCount="1762" docLength="42333" endLine="372" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24662" int_docExpressionCount="1762" int_docLength="42327" length="9" offset="14723" startLine="370" timestamp="165693986">
    <deletedText><![CDATA[

					]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10760" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24665" docExpressionCount="1762" docLength="42330" endLine="370" insertionLength="7" int_docASTNodeCount="3115" int_docActiveCodeLength="24601" int_docExpressionCount="1751" int_docLength="42323" length="10" offset="14656" startLine="369" timestamp="165693992">
    <deletedText><![CDATA[
								]]></deletedText>
    <insertedText><![CDATA[
					]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10761" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24664" docExpressionCount="1762" docLength="42329" endLine="369" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24657" int_docExpressionCount="1762" int_docLength="42322" length="8" offset="14599" startLine="368" timestamp="165693998">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
					]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10762" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24661" docExpressionCount="1762" docLength="42326" endLine="368" insertionLength="7" int_docASTNodeCount="3121" int_docActiveCodeLength="24606" int_docExpressionCount="1756" int_docLength="42319" length="10" offset="14541" startLine="366" timestamp="165694004">
    <deletedText><![CDATA[

						]]></deletedText>
    <insertedText><![CDATA[

			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10763" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24677" docExpressionCount="1762" docLength="42344" endLine="366" insertionLength="19" int_docASTNodeCount="3127" int_docActiveCodeLength="24661" int_docExpressionCount="1762" int_docLength="42325" length="1" offset="14492" startLine="366" timestamp="165694009">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
														// ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10764" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24668" docExpressionCount="1762" docLength="42335" endLine="366" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24662" int_docExpressionCount="1762" int_docLength="42329" length="15" offset="14369" startLine="364" timestamp="165694018">
    <deletedText><![CDATA[
					 
					]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10765" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24665" docExpressionCount="1762" docLength="42332" endLine="364" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24661" int_docExpressionCount="1762" int_docLength="42328" length="7" offset="14361" startLine="363" timestamp="165694023">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10766" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24656" docExpressionCount="1762" docLength="42323" endLine="363" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24655" int_docExpressionCount="1762" int_docLength="42322" length="10" offset="14296" startLine="362" timestamp="165694028">
    <deletedText><![CDATA[
								]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10767" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24653" docExpressionCount="1762" docLength="42320" endLine="362" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24648" int_docExpressionCount="1762" int_docLength="42315" length="8" offset="14237" startLine="361" timestamp="165694034">
    <deletedText><![CDATA[
						]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10768" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24650" docExpressionCount="1762" docLength="42317" endLine="361" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24644" int_docExpressionCount="1762" int_docLength="42311" length="9" offset="14179" startLine="359" timestamp="165694039">
    <deletedText><![CDATA[

					]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10769" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24647" docExpressionCount="1762" docLength="42314" endLine="359" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24643" int_docExpressionCount="1762" int_docLength="42310" length="7" offset="14171" startLine="358" timestamp="165694044">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10770" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24638" docExpressionCount="1762" docLength="42305" endLine="358" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24637" int_docExpressionCount="1762" int_docLength="42304" length="10" offset="14115" startLine="357" timestamp="165694050">
    <deletedText><![CDATA[
								]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10771" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24635" docExpressionCount="1762" docLength="42302" endLine="357" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24628" int_docExpressionCount="1762" int_docLength="42295" length="10" offset="14064" startLine="355" timestamp="165694055">
    <deletedText><![CDATA[

						]]></deletedText>
    <insertedText><![CDATA[

			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10772" _type="Replace" date="Sun Aug 25 09:56:10 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24632" docExpressionCount="1762" docLength="42299" endLine="355" insertionLength="4" int_docASTNodeCount="3094" int_docActiveCodeLength="24589" int_docExpressionCount="1731" int_docLength="42295" length="7" offset="14018" startLine="354" timestamp="165694063">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10773" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24629" docExpressionCount="1762" docLength="42296" endLine="354" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24625" int_docExpressionCount="1762" int_docLength="42292" length="7" offset="13968" startLine="353" timestamp="165694346">
    <deletedText><![CDATA[
					]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10774" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24633" docExpressionCount="1762" docLength="42302" endLine="353" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24629" int_docExpressionCount="1762" int_docLength="42295" length="1" offset="13953" startLine="353" timestamp="165694352">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
		// ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10775" _type="Delete" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24632" docExpressionCount="1762" docLength="42301" endLine="352" length="1" offset="13851" startLine="352" timestamp="165694355">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10776" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24631" docExpressionCount="1762" docLength="42300" endLine="352" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24626" int_docExpressionCount="1762" int_docLength="42295" length="6" offset="13801" startLine="350" timestamp="165694360">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10777" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24629" docExpressionCount="1762" docLength="42298" endLine="350" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24624" int_docExpressionCount="1762" int_docLength="42293" length="7" offset="13793" startLine="348" timestamp="165694365">
    <deletedText><![CDATA[
		
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10778" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24631" docExpressionCount="1762" docLength="42300" endLine="341" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24626" int_docExpressionCount="1762" int_docLength="42295" length="3" offset="13431" startLine="340" timestamp="165694371">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10779" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24629" docExpressionCount="1762" docLength="42298" endLine="340" insertionLength="5" int_docASTNodeCount="3122" int_docActiveCodeLength="24623" int_docExpressionCount="1758" int_docLength="42293" length="7" offset="13423" startLine="338" timestamp="165694378">
    <deletedText><![CDATA[
		
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10780" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24631" docExpressionCount="1762" docLength="42300" endLine="330" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24626" int_docExpressionCount="1762" int_docLength="42295" length="3" offset="13013" startLine="329" timestamp="165694383">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10781" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24630" docExpressionCount="1762" docLength="42299" endLine="327" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24625" int_docExpressionCount="1762" int_docLength="42294" length="6" offset="12936" startLine="326" timestamp="165694388">
    <deletedText><![CDATA[ 
			]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10782" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24629" docExpressionCount="1762" docLength="42298" endLine="324" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24624" int_docExpressionCount="1762" int_docLength="42293" length="6" offset="12792" startLine="322" timestamp="165694394">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10783" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24621" docExpressionCount="1762" docLength="42290" endLine="321" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24615" int_docExpressionCount="1762" int_docLength="42284" length="14" offset="12747" startLine="319" timestamp="165694399">
    <deletedText><![CDATA[
	    
	    ]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10784" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24618" docExpressionCount="1762" docLength="42287" endLine="319" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24614" int_docExpressionCount="1762" int_docLength="42283" length="7" offset="12739" startLine="318" timestamp="165694404">
    <deletedText><![CDATA[
	    ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10785" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24612" docExpressionCount="1762" docLength="42281" endLine="318" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24607" int_docExpressionCount="1762" int_docLength="42276" length="11" offset="12696" startLine="317" timestamp="165694410">
    <deletedText><![CDATA[
	        ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10786" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24604" docExpressionCount="1762" docLength="42273" endLine="317" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24598" int_docExpressionCount="1762" int_docLength="42267" length="14" offset="12667" startLine="315" timestamp="165694415">
    <deletedText><![CDATA[
	    
	    ]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10787" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24601" docExpressionCount="1762" docLength="42270" endLine="315" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24597" int_docExpressionCount="1762" int_docLength="42266" length="7" offset="12659" startLine="314" timestamp="165694421">
    <deletedText><![CDATA[
	    ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10788" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24595" docExpressionCount="1762" docLength="42264" endLine="314" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24590" int_docExpressionCount="1762" int_docLength="42259" length="11" offset="12647" startLine="313" timestamp="165694429">
    <deletedText><![CDATA[
	        ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10790" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24586" docExpressionCount="1762" docLength="42255" endLine="313" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24580" int_docExpressionCount="1762" int_docLength="42249" length="15" offset="12600" startLine="312" timestamp="165694435">
    <deletedText><![CDATA[
	            ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10791" _type="Insert" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24587" docExpressionCount="1762" docLength="42256" length="1" offset="12581" timestamp="165694437">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10792" _type="Insert" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24588" docExpressionCount="1762" docLength="42257" length="1" offset="12580" timestamp="165694440">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10793" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24582" docExpressionCount="1762" docLength="42251" endLine="312" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24577" int_docExpressionCount="1762" int_docLength="42246" length="11" offset="12564" startLine="311" timestamp="165694445">
    <deletedText><![CDATA[
	        ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10794" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24576" docExpressionCount="1762" docLength="42245" endLine="311" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24571" int_docExpressionCount="1762" int_docLength="42240" length="11" offset="12534" startLine="310" timestamp="165694450">
    <deletedText><![CDATA[
	        ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10795" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24570" docExpressionCount="1762" docLength="42239" endLine="310" insertionLength="7" int_docASTNodeCount="3127" int_docActiveCodeLength="24563" int_docExpressionCount="1762" int_docLength="42232" length="13" offset="12520" startLine="308" timestamp="165694456">
    <deletedText><![CDATA[

	        ]]></deletedText>
    <insertedText><![CDATA[

			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10796" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24561" docExpressionCount="1762" docLength="42230" endLine="308" insertionLength="6" int_docASTNodeCount="3120" int_docActiveCodeLength="24531" int_docExpressionCount="1756" int_docLength="42224" length="15" offset="12481" startLine="307" timestamp="165694461">
    <deletedText><![CDATA[
	            ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10797" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24555" docExpressionCount="1762" docLength="42224" endLine="306" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24550" int_docExpressionCount="1762" int_docLength="42219" length="11" offset="12411" startLine="305" timestamp="165694467">
    <deletedText><![CDATA[
	        ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10798" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24552" docExpressionCount="1762" docLength="42221" endLine="305" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24547" int_docExpressionCount="1762" int_docLength="42216" length="8" offset="12383" startLine="304" timestamp="165694472">
    <deletedText><![CDATA[
	    	]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10799" _type="Delete" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24551" docExpressionCount="1762" docLength="42220" endLine="304" length="1" offset="12377" startLine="304" timestamp="165694475">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10800" _type="Insert" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24552" docExpressionCount="1762" docLength="42221" length="1" offset="12346" timestamp="165694477">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10801" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24544" docExpressionCount="1762" docLength="42213" endLine="304" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24538" int_docExpressionCount="1762" int_docLength="42207" length="14" offset="12329" startLine="302" timestamp="165694482">
    <deletedText><![CDATA[
	    
	    ]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10802" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24541" docExpressionCount="1762" docLength="42210" endLine="302" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24537" int_docExpressionCount="1762" int_docLength="42206" length="7" offset="12321" startLine="301" timestamp="165694487">
    <deletedText><![CDATA[
	    ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10803" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24535" docExpressionCount="1762" docLength="42204" endLine="301" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24530" int_docExpressionCount="1762" int_docLength="42199" length="11" offset="12278" startLine="300" timestamp="165694492">
    <deletedText><![CDATA[
	        ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10804" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24532" docExpressionCount="1762" docLength="42201" endLine="300" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24526" int_docExpressionCount="1762" int_docLength="42195" length="9" offset="12252" startLine="298" timestamp="165694498">
    <deletedText><![CDATA[

	    ]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10805" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24529" docExpressionCount="1762" docLength="42198" endLine="298" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24523" int_docExpressionCount="1762" int_docLength="42192" length="9" offset="12185" startLine="296" timestamp="165694503">
    <deletedText><![CDATA[

	    ]]></deletedText>
    <insertedText><![CDATA[

		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10806" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24526" docExpressionCount="1762" docLength="42195" endLine="296" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24522" int_docExpressionCount="1762" int_docLength="42191" length="7" offset="12138" startLine="295" timestamp="165694508">
    <deletedText><![CDATA[
	    ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10807" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24523" docExpressionCount="1762" docLength="42192" endLine="295" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24519" int_docExpressionCount="1762" int_docLength="42188" length="7" offset="12070" startLine="294" timestamp="165694830">
    <deletedText><![CDATA[
	    ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10808" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24520" docExpressionCount="1762" docLength="42189" endLine="294" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24516" int_docExpressionCount="1762" int_docLength="42185" length="7" offset="11996" startLine="293" timestamp="165694836">
    <deletedText><![CDATA[
	    ]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10809" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24524" docExpressionCount="1762" docLength="42193" endLine="293" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24519" int_docExpressionCount="1762" int_docLength="42188" length="1" offset="11983" startLine="293" timestamp="165694841">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10810" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24522" docExpressionCount="1762" docLength="42191" endLine="292" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24517" int_docExpressionCount="1762" int_docLength="42186" length="7" offset="11903" startLine="289" timestamp="165694846">
    <deletedText><![CDATA[


	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10811" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24521" docExpressionCount="1762" docLength="42190" endLine="288" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24517" int_docExpressionCount="1762" int_docLength="42186" length="5" offset="11763" startLine="286" timestamp="165694851">
    <deletedText><![CDATA[
	
]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10812" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24523" docExpressionCount="1762" docLength="42192" endLine="263" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24518" int_docExpressionCount="1762" int_docLength="42187" length="3" offset="11058" startLine="262" timestamp="165694856">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10813" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24522" docExpressionCount="1762" docLength="42191" endLine="262" insertionLength="5" int_docASTNodeCount="3119" int_docActiveCodeLength="24516" int_docExpressionCount="1755" int_docLength="42186" length="6" offset="11051" startLine="260" timestamp="165694866">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10814" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24527" docExpressionCount="1762" docLength="42196" endLine="259" insertionLength="6" int_docASTNodeCount="3127" int_docActiveCodeLength="24521" int_docExpressionCount="1762" int_docLength="42190" length="1" offset="10984" startLine="259" timestamp="165694872">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
				]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10815" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24529" docExpressionCount="1762" docLength="42198" endLine="258" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24524" int_docExpressionCount="1762" int_docLength="42193" length="3" offset="10793" startLine="257" timestamp="165694877">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10816" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24527" docExpressionCount="1762" docLength="42196" endLine="257" insertionLength="5" int_docASTNodeCount="3120" int_docActiveCodeLength="24521" int_docExpressionCount="1756" int_docLength="42191" length="7" offset="10785" startLine="255" timestamp="165694885">
    <deletedText><![CDATA[
		
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10817" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24526" docExpressionCount="1762" docLength="42195" endLine="248" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24522" int_docExpressionCount="1762" int_docLength="42191" length="5" offset="10407" startLine="247" timestamp="165694891">
    <deletedText><![CDATA[	
		]]></deletedText>
    <insertedText><![CDATA[
		]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10818" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24528" docExpressionCount="1762" docLength="42197" endLine="246" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24523" int_docExpressionCount="1762" int_docLength="42192" length="3" offset="10271" startLine="245" timestamp="165694897">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10819" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24527" docExpressionCount="1762" docLength="42196" endLine="243" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24522" int_docExpressionCount="1762" int_docLength="42191" length="6" offset="10154" startLine="241" timestamp="165694903">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10820" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24529" docExpressionCount="1762" docLength="42198" endLine="219" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24525" int_docExpressionCount="1762" int_docLength="42194" length="2" offset="9133" startLine="218" timestamp="165694909">
    <deletedText><![CDATA[
]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10821" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24531" docExpressionCount="1762" docLength="42200" endLine="217" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24526" int_docExpressionCount="1762" int_docLength="42195" length="3" offset="9028" startLine="216" timestamp="165694915">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10822" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24533" docExpressionCount="1762" docLength="42202" endLine="214" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24528" int_docExpressionCount="1762" int_docLength="42197" length="3" offset="8884" startLine="213" timestamp="165694920">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10823" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24532" docExpressionCount="1762" docLength="42201" endLine="211" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24527" int_docExpressionCount="1762" int_docLength="42196" length="6" offset="8752" startLine="209" timestamp="165694926">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10824" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24531" docExpressionCount="1762" docLength="42200" endLine="209" insertionLength="3" int_docASTNodeCount="3127" int_docActiveCodeLength="24528" int_docExpressionCount="1762" int_docLength="42197" length="4" offset="8747" startLine="208" timestamp="165694931">
    <deletedText><![CDATA[	
	]]></deletedText>
    <insertedText><![CDATA[
	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10825" _type="Insert" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24532" docExpressionCount="1762" docLength="42201" length="1" offset="8600" timestamp="165694935">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10826" _type="Insert" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24533" docExpressionCount="1762" docLength="42202" length="1" offset="8599" timestamp="165694938">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10827" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24535" docExpressionCount="1762" docLength="42204" endLine="198" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24530" int_docExpressionCount="1762" int_docLength="42199" length="3" offset="8429" startLine="197" timestamp="165694943">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10828" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24534" docExpressionCount="1762" docLength="42203" endLine="185" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24529" int_docExpressionCount="1762" int_docLength="42198" length="6" offset="8065" startLine="183" timestamp="165694949">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10829" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24533" docExpressionCount="1762" docLength="42202" endLine="183" insertionLength="3" int_docASTNodeCount="3127" int_docActiveCodeLength="24530" int_docExpressionCount="1762" int_docLength="42199" length="4" offset="8060" startLine="182" timestamp="165694955">
    <deletedText><![CDATA[	
	]]></deletedText>
    <insertedText><![CDATA[
	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10830" _type="Insert" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24534" docExpressionCount="1762" docLength="42203" length="1" offset="7910" timestamp="165694958">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10831" _type="Insert" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24535" docExpressionCount="1762" docLength="42204" length="1" offset="7909" timestamp="165694961">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10832" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24537" docExpressionCount="1762" docLength="42206" endLine="172" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24532" int_docExpressionCount="1762" int_docLength="42201" length="3" offset="7741" startLine="171" timestamp="165694966">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10833" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24539" docExpressionCount="1762" docLength="42208" endLine="159" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24534" int_docExpressionCount="1762" int_docLength="42203" length="3" offset="7381" startLine="158" timestamp="165694972">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10834" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24541" docExpressionCount="1762" docLength="42210" endLine="151" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24536" int_docExpressionCount="1762" int_docLength="42205" length="3" offset="7043" startLine="150" timestamp="165694977">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10835" _type="Insert" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24547" docExpressionCount="1762" docLength="42216" length="6" offset="6943" timestamp="165694980">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="10836" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24549" docExpressionCount="1762" docLength="42218" endLine="147" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24544" int_docExpressionCount="1762" int_docLength="42213" length="3" offset="6806" startLine="146" timestamp="165694985">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10837" _type="Insert" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24555" docExpressionCount="1762" docLength="42224" length="6" offset="6703" timestamp="165694991">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <DocumentChange __id="10838" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24557" docExpressionCount="1762" docLength="42226" endLine="143" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24552" int_docExpressionCount="1762" int_docLength="42221" length="3" offset="6564" startLine="142" timestamp="165694996">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10839" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24552" docExpressionCount="1762" docLength="42221" endLine="140" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24547" int_docExpressionCount="1762" int_docLength="42216" length="10" offset="6458" startLine="136" timestamp="165695002">
    <deletedText><![CDATA[


	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10840" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24551" docExpressionCount="1762" docLength="42220" endLine="136" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24550" int_docExpressionCount="1763" int_docLength="42219" length="2" offset="6407" startLine="136" timestamp="165695007">
    <deletedText><![CDATA[  ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10841" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24552" docExpressionCount="1762" docLength="42221" endLine="136" insertionLength="3" int_docASTNodeCount="3127" int_docActiveCodeLength="24549" int_docExpressionCount="1762" int_docLength="42218" length="2" offset="6386" startLine="135" timestamp="165695012">
    <deletedText><![CDATA[
]]></deletedText>
    <insertedText><![CDATA[
	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10842" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24551" docExpressionCount="1762" docLength="42220" endLine="135" insertionLength="1" int_docASTNodeCount="3126" int_docActiveCodeLength="24550" int_docExpressionCount="1762" int_docLength="42219" length="2" offset="6326" startLine="135" timestamp="165695018">
    <deletedText><![CDATA[  ]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10843" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24552" docExpressionCount="1762" docLength="42221" endLine="135" insertionLength="3" int_docASTNodeCount="3118" int_docActiveCodeLength="24471" int_docExpressionCount="1759" int_docLength="42218" length="2" offset="6305" startLine="134" timestamp="165695023">
    <deletedText><![CDATA[
]]></deletedText>
    <insertedText><![CDATA[
	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10844" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24553" docExpressionCount="1762" docLength="42222" endLine="134" insertionLength="3" int_docASTNodeCount="3119" int_docActiveCodeLength="24496" int_docExpressionCount="1760" int_docLength="42219" length="2" offset="6236" startLine="133" timestamp="165695028">
    <deletedText><![CDATA[
]]></deletedText>
    <insertedText><![CDATA[
	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10845" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24554" docExpressionCount="1762" docLength="42223" endLine="133" insertionLength="3" int_docASTNodeCount="3119" int_docActiveCodeLength="24495" int_docExpressionCount="1760" int_docLength="42220" length="2" offset="6160" startLine="132" timestamp="165695034">
    <deletedText><![CDATA[
]]></deletedText>
    <insertedText><![CDATA[
	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10846" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24550" docExpressionCount="1762" docLength="42219" endLine="129" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24549" int_docExpressionCount="1762" int_docLength="42218" length="5" offset="5959" startLine="128" timestamp="165695039">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10847" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24546" docExpressionCount="1762" docLength="42215" endLine="127" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24545" int_docExpressionCount="1762" int_docLength="42214" length="5" offset="5844" startLine="126" timestamp="165695045">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10848" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24544" docExpressionCount="1762" docLength="42213" endLine="124" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24543" int_docExpressionCount="1762" int_docLength="42212" length="3" offset="5773" startLine="123" timestamp="165695050">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10849" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24548" docExpressionCount="1762" docLength="42217" endLine="123" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24543" int_docExpressionCount="1762" int_docLength="42212" length="1" offset="5680" startLine="123" timestamp="165695055">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10850" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24544" docExpressionCount="1762" docLength="42213" endLine="123" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24543" int_docExpressionCount="1762" int_docLength="42212" length="5" offset="5661" startLine="122" timestamp="165695061">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10851" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24542" docExpressionCount="1762" docLength="42211" endLine="121" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24541" int_docExpressionCount="1762" int_docLength="42210" length="3" offset="5590" startLine="120" timestamp="165695066">
    <deletedText><![CDATA[
	]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10852" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24546" docExpressionCount="1762" docLength="42215" endLine="120" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24541" int_docExpressionCount="1762" int_docLength="42210" length="1" offset="5504" startLine="120" timestamp="165695071">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
			]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10853" _type="Replace" date="Sun Aug 25 09:56:11 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24542" docExpressionCount="1762" docLength="42211" endLine="120" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24541" int_docExpressionCount="1762" int_docLength="42210" length="5" offset="5485" startLine="119" timestamp="165695077">
    <deletedText><![CDATA[
			]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10854" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24542" docExpressionCount="1762" docLength="42211" endLine="116" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24542" int_docExpressionCount="1762" int_docLength="42210" length="1" offset="5238" startLine="116" timestamp="165695082">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10855" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24540" docExpressionCount="1762" docLength="42209" endLine="116" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24535" int_docExpressionCount="1762" int_docLength="42204" length="7" offset="5229" startLine="113" timestamp="165695088">
    <deletedText><![CDATA[


	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10856" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24538" docExpressionCount="1762" docLength="42207" endLine="113" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24534" int_docExpressionCount="1762" int_docLength="42203" length="6" offset="5120" startLine="110" timestamp="165695094">
    <deletedText><![CDATA[


]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10857" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24537" docExpressionCount="1762" docLength="42206" endLine="107" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24532" int_docExpressionCount="1762" int_docLength="42201" length="6" offset="4952" startLine="105" timestamp="165695100">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10858" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24527" docExpressionCount="1762" docLength="42196" endLine="99" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24523" int_docExpressionCount="1762" int_docLength="42192" length="14" offset="4619" startLine="92" timestamp="165695105">
    <deletedText><![CDATA[






]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10859" _type="Delete" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24526" docExpressionCount="1762" docLength="42195" endLine="61" length="1" offset="2482" startLine="61" timestamp="165695108">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10860" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24525" docExpressionCount="1762" docLength="42194" endLine="32" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24520" int_docExpressionCount="1762" int_docLength="42189" length="6" offset="983" startLine="30" timestamp="165695113">
    <deletedText><![CDATA[
	
	]]></deletedText>
    <insertedText><![CDATA[

	]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10861" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24525" docExpressionCount="1762" docLength="42198" endLine="23" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24525" int_docExpressionCount="1762" int_docLength="42193" length="1" offset="746" startLine="23" timestamp="165695344">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
 * ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10862" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24525" docExpressionCount="1762" docLength="42195" endLine="23" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24525" int_docExpressionCount="1762" int_docLength="42194" length="4" offset="685" startLine="22" timestamp="165695351">
    <deletedText><![CDATA[
 *]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10863" _type="Insert" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24525" docExpressionCount="1762" docLength="42196" length="1" offset="676" timestamp="165695355">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10864" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24525" docExpressionCount="1762" docLength="42200" endLine="21" insertionLength="5" int_docASTNodeCount="3127" int_docActiveCodeLength="24525" int_docExpressionCount="1762" int_docLength="42195" length="1" offset="599" startLine="21" timestamp="165695361">
    <deletedText><![CDATA[ ]]></deletedText>
    <insertedText><![CDATA[
 * ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10865" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24525" docExpressionCount="1762" docLength="42197" endLine="21" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24525" int_docExpressionCount="1762" int_docLength="42196" length="4" offset="593" startLine="20" timestamp="165695367">
    <deletedText><![CDATA[
 *]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10866" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24525" docExpressionCount="1762" docLength="42194" endLine="20" insertionLength="1" int_docASTNodeCount="3127" int_docActiveCodeLength="24525" int_docExpressionCount="1762" int_docLength="42193" length="4" offset="541" startLine="19" timestamp="165695374">
    <deletedText><![CDATA[
 *]]></deletedText>
    <insertedText><![CDATA[ ]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10867" _type="Insert" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24525" docExpressionCount="1762" docLength="42195" length="1" offset="516" timestamp="165695378">
    <text><![CDATA[ ]]></text>
  </DocumentChange>
  <DocumentChange __id="10868" _type="Replace" date="Sun Aug 25 09:56:12 EDT 2019" docASTNodeCount="3127" docActiveCodeLength="24527" docExpressionCount="1762" docLength="42197" endLine="17" insertionLength="4" int_docASTNodeCount="3127" int_docActiveCodeLength="24523" int_docExpressionCount="1762" int_docLength="42193" length="2" offset="502" startLine="16" timestamp="165695384">
    <deletedText><![CDATA[
]]></deletedText>
    <insertedText><![CDATA[

]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10872" _type="Delete" date="Sun Aug 25 09:56:20 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24526" docExpressionCount="1762" docLength="42196" endLine="1019" length="1" offset="38511" startLine="1019" timestamp="165703950">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="10878" _type="Insert" date="Sun Aug 25 09:58:00 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24529" docExpressionCount="1762" docLength="42199" length="3" offset="35012" timestamp="165803507">
    <text><![CDATA[
	]]></text>
  </DocumentChange>
  <DocumentChange __id="10880" _type="Replace" date="Sun Aug 25 09:58:01 EDT 2019" docASTNodeCount="3167" docActiveCodeLength="25022" docExpressionCount="1790" docLength="42891" endLine="940" insertionLength="693" int_docASTNodeCount="3126" int_docActiveCodeLength="24528" int_docExpressionCount="1762" int_docLength="42198" length="1" offset="35014" startLine="940" timestamp="165804103">
    <deletedText><![CDATA[	]]></deletedText>
    <insertedText><![CDATA[	public static String getBasicInheritedStringModuleProblemProperty(String property, String defaultValue) {
		if (
		// cannot use project configuration before location is known to create project
		property == BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION || // can do == as we are using named
																				// constants
				!isUseProjectConfiguration()) {
//			property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION){ 
			return defaultValue;
		}

		return getInheritedStringModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module,
				problem, test, property, defaultValue);
	}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10883" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3145" docActiveCodeLength="24916" docExpressionCount="1776" docLength="42893" length="2" offset="34319" timestamp="165808741">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10884" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3145" docActiveCodeLength="24910" docExpressionCount="1776" docLength="42895" length="2" offset="34429" timestamp="165808746">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10885" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3145" docActiveCodeLength="24908" docExpressionCount="1776" docLength="42897" length="2" offset="34439" timestamp="165808751">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10886" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3145" docActiveCodeLength="24835" docExpressionCount="1776" docLength="42899" length="2" offset="34523" timestamp="165808755">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10887" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3145" docActiveCodeLength="24815" docExpressionCount="1776" docLength="42901" length="2" offset="34634" timestamp="165808760">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10888" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3128" docActiveCodeLength="24780" docExpressionCount="1762" docLength="42903" length="2" offset="34670" timestamp="165808764">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10889" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3128" docActiveCodeLength="24780" docExpressionCount="1762" docLength="42905" length="2" offset="34709" timestamp="165808769">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10890" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3128" docActiveCodeLength="24757" docExpressionCount="1762" docLength="42907" length="2" offset="34788" timestamp="165808774">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10891" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3129" docActiveCodeLength="24754" docExpressionCount="1763" docLength="42909" length="2" offset="34815" timestamp="165808806">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10892" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3129" docActiveCodeLength="24754" docExpressionCount="1763" docLength="42911" length="2" offset="34822" timestamp="165808812">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10893" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3128" docActiveCodeLength="24705" docExpressionCount="1762" docLength="42913" length="2" offset="34826" timestamp="165808818">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10894" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3128" docActiveCodeLength="24599" docExpressionCount="1762" docLength="42915" length="2" offset="34879" timestamp="165808822">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="10541" _type="InsertStringCommand" date="Sun Aug 25 09:55:13 EDT 2019" timestamp="165636855" timestamp2="165636855">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10542" _type="PredictionCommand" date="Sun Aug 25 09:55:13 EDT 2019" prediction_type="MakingProgress" timestamp="165636858" />
  <Command __id="10544" _type="InsertStringCommand" date="Sun Aug 25 09:55:14 EDT 2019" timestamp="165637743" timestamp2="165637743">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="10545" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:55:16 EDT 2019" timestamp="165639449" />
  <Command __id="10547" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:55:41 EDT 2019" timestamp="165664809" />
  <Command __id="10549" _type="InsertStringCommand" date="Sun Aug 25 09:55:48 EDT 2019" timestamp="165671292" timestamp2="165671292">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="10550" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:55:52 EDT 2019" timestamp="165675602" />
  <Command __id="10667" _type="PredictionCommand" date="Sun Aug 25 09:56:09 EDT 2019" prediction_type="HavingDifficulty" timestamp="165692406" />
  <Command __id="10789" _type="PredictionCommand" date="Sun Aug 25 09:56:11 EDT 2019" prediction_type="HavingDifficulty" timestamp="165694424" />
  <Command __id="10869" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.format" date="Sun Aug 25 09:56:12 EDT 2019" timestamp="165695412" />
  <Command __id="10870" _type="MoveCaretCommand" caretOffset="37504" date="Sun Aug 25 09:56:12 EDT 2019" docOffset="37955" timestamp="165695425" />
  <Command __id="10871" _type="MoveCaretCommand" caretOffset="38061" date="Sun Aug 25 09:56:20 EDT 2019" docOffset="38512" timestamp="165703540" />
  <Command __id="10873" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:56:20 EDT 2019" timestamp="165703956" />
  <Command __id="10874" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 09:56:21 EDT 2019" timestamp="165705016" />
  <Command __id="10875" _type="SelectTextCommand" caretOffset="33869" date="Sun Aug 25 09:57:57 EDT 2019" end="34561" start="33869" timestamp="165800683" />
  <Command __id="10876" _type="CopyCommand" date="Sun Aug 25 09:57:58 EDT 2019" timestamp="165801224" />
  <Command __id="10877" _type="MoveCaretCommand" caretOffset="34561" date="Sun Aug 25 09:57:59 EDT 2019" docOffset="35012" timestamp="165802952" />
  <Command __id="10879" _type="InsertStringCommand" date="Sun Aug 25 09:58:00 EDT 2019" timestamp="165803513" timestamp2="165803513">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10881" _type="PasteCommand" date="Sun Aug 25 09:58:01 EDT 2019" timestamp="165804120" />
  <Command __id="10882" _type="SelectTextCommand" caretOffset="33868" date="Sun Aug 25 09:58:05 EDT 2019" end="34561" start="33868" timestamp="165808167" />
  <Command __id="10897" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 09:58:05 EDT 2019" timestamp="165808853" />
  <Command __id="10898" _type="MoveCaretCommand" caretOffset="34697" date="Sun Aug 25 09:58:25 EDT 2019" docOffset="35148" timestamp="165828498" />
  <Command __id="10900" _type="InsertStringCommand" date="Sun Aug 25 09:58:26 EDT 2019" timestamp="165829130" timestamp2="165829130">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="10902" _type="InsertStringCommand" date="Sun Aug 25 09:58:27 EDT 2019" repeat="20" timestamp="165830896" timestamp2="165835589">
    <data><![CDATA[String retVal = nul;]]></data>
  </Command>
  <Command __id="10942" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:58:33 EDT 2019" timestamp="165836844" />
  <Command __id="10944" _type="InsertStringCommand" date="Sun Aug 25 09:58:34 EDT 2019" repeat="2" timestamp="165837389" timestamp2="165839100">
    <data><![CDATA[l;]]></data>
  </Command>
  <Command __id="10947" _type="MoveCaretCommand" caretOffset="34826" date="Sun Aug 25 09:58:50 EDT 2019" docOffset="35277" timestamp="165853708" />
  <Command __id="10949" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:58:51 EDT 2019" timestamp="165854689" />
  <Command __id="10951" _type="InsertStringCommand" date="Sun Aug 25 09:58:53 EDT 2019" timestamp="165856195" timestamp2="165856195">
    <data><![CDATA[!]]></data>
  </Command>
  <Command __id="10952" _type="SelectTextCommand" caretOffset="34884" date="Sun Aug 25 09:58:57 EDT 2019" end="34886" start="34884" timestamp="165860793" />
  <Command __id="10954" _type="InsertStringCommand" date="Sun Aug 25 09:59:01 EDT 2019" repeat="2" timestamp="165864212" timestamp2="165864380">
    <data><![CDATA[&&]]></data>
  </Command>
  <Command __id="10957" _type="MoveCaretCommand" caretOffset="34962" date="Sun Aug 25 09:59:03 EDT 2019" docOffset="35413" timestamp="165867025" />
  <Command __id="10959" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:59:04 EDT 2019" timestamp="165867731" />
  <Command __id="10960" _type="SelectTextCommand" caretOffset="35100" date="Sun Aug 25 09:59:08 EDT 2019" end="35100" start="34998" timestamp="165871583" />
  <Command __id="10962" _type="InsertStringCommand" date="Sun Aug 25 09:59:09 EDT 2019" repeat="3" timestamp="165872699" timestamp2="165872935">
    <data><![CDATA[ret]]></data>
  </Command>
  <Command __id="10968" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:59:11 EDT 2019" repeat="8" timestamp="165874098" timestamp2="165875232" />
  <Command __id="10984" _type="InsertStringCommand" date="Sun Aug 25 09:59:12 EDT 2019" repeat="9" timestamp="165875976" timestamp2="165878968">
    <data><![CDATA[	retVal =]]></data>
  </Command>
  <Command __id="11001" _type="MoveCaretCommand" caretOffset="35013" date="Sun Aug 25 09:59:18 EDT 2019" docOffset="35464" timestamp="165881742" />
  <Command __id="11002" _type="SelectTextCommand" caretOffset="35014" date="Sun Aug 25 09:59:18 EDT 2019" end="35014" start="35008" timestamp="165881943" />
  <Command __id="11004" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:59:19 EDT 2019" timestamp="165882334" />
  <Command __id="11005" _type="MoveCaretCommand" caretOffset="35202" date="Sun Aug 25 09:59:24 EDT 2019" docOffset="35653" timestamp="165887375" />
  <Command __id="11007" _type="InsertStringCommand" date="Sun Aug 25 09:59:25 EDT 2019" timestamp="165889065" timestamp2="165889065">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="11009" _type="InsertStringCommand" date="Sun Aug 25 09:59:26 EDT 2019" repeat="18" timestamp="165889810" timestamp2="165894570">
    <data><![CDATA[if (retVal != null]]></data>
  </Command>
  <Command __id="11044" _type="MoveCaretCommand" caretOffset="35226" date="Sun Aug 25 09:59:33 EDT 2019" docOffset="35677" timestamp="165896225" />
  <Command __id="11046" _type="InsertStringCommand" date="Sun Aug 25 09:59:33 EDT 2019" repeat="2" timestamp="165896453" timestamp2="165896871">
    <data><![CDATA[ {]]></data>
  </Command>
  <Command __id="11050" _type="InsertStringCommand" date="Sun Aug 25 09:59:34 EDT 2019" timestamp="165897137" timestamp2="165897137">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="11052" _type="InsertStringCommand" date="Sun Aug 25 09:59:34 EDT 2019" repeat="6" timestamp="165897771" timestamp2="165898588">
    <data><![CDATA[retyrn]]></data>
  </Command>
  <Command __id="11064" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:59:35 EDT 2019" repeat="3" timestamp="165899021" timestamp2="165899341" />
  <DocumentChange __id="10895" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3128" docActiveCodeLength="24556" docExpressionCount="1762" docLength="42917" length="2" offset="34989" timestamp="165808826">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10896" _type="Insert" date="Sun Aug 25 09:58:05 EDT 2019" docASTNodeCount="3126" docActiveCodeLength="24554" docExpressionCount="1762" docLength="42919" length="2" offset="35036" timestamp="165808833">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="10899" _type="Insert" date="Sun Aug 25 09:58:26 EDT 2019" docASTNodeCount="3132" docActiveCodeLength="24578" docExpressionCount="1765" docLength="42943" length="24" offset="35148" repeat="21" timestamp="165829123" timestamp2="165835579">
    <text><![CDATA[
		String retVal = nul;]]></text>
  </DocumentChange>
  <DocumentChange __id="10941" _type="Delete" date="Sun Aug 25 09:58:33 EDT 2019" docASTNodeCount="3132" docActiveCodeLength="24577" docExpressionCount="1765" docLength="42942" endLine="941" length="1" offset="35171" startLine="941" timestamp="165836842">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="10943" _type="Insert" date="Sun Aug 25 09:58:34 EDT 2019" docASTNodeCount="3132" docActiveCodeLength="24579" docExpressionCount="1765" docLength="42944" length="2" offset="35171" repeat="2" timestamp="165837382" timestamp2="165839091">
    <text><![CDATA[l;]]></text>
  </DocumentChange>
  <DocumentChange __id="10948" _type="Delete" date="Sun Aug 25 09:58:51 EDT 2019" docASTNodeCount="3132" docActiveCodeLength="24578" docExpressionCount="1765" docLength="42943" endLine="944" length="1" offset="35276" startLine="944" timestamp="165854684">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="10950" _type="Insert" date="Sun Aug 25 09:58:53 EDT 2019" docASTNodeCount="3132" docActiveCodeLength="24579" docExpressionCount="1765" docLength="42944" length="1" offset="35276" timestamp="165856186">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="10953" _type="Replace" date="Sun Aug 25 09:59:01 EDT 2019" docASTNodeCount="3132" docActiveCodeLength="24578" docExpressionCount="1765" docLength="42943" endLine="944" insertionLength="1" int_docASTNodeCount="3131" int_docActiveCodeLength="24577" int_docExpressionCount="1764" int_docLength="42942" length="2" offset="35335" startLine="944" timestamp="165864204">
    <deletedText><![CDATA[||]]></deletedText>
    <insertedText><![CDATA[&]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10955" _type="Insert" date="Sun Aug 25 09:59:01 EDT 2019" docASTNodeCount="3132" docActiveCodeLength="24579" docExpressionCount="1765" docLength="42944" length="1" offset="35336" timestamp="165864377">
    <text><![CDATA[&]]></text>
  </DocumentChange>
  <DocumentChange __id="10958" _type="Delete" date="Sun Aug 25 09:59:04 EDT 2019" docASTNodeCount="3131" docActiveCodeLength="24578" docExpressionCount="1764" docLength="42943" endLine="946" length="1" offset="35412" startLine="946" timestamp="165867724">
    <text><![CDATA[!]]></text>
  </DocumentChange>
  <DocumentChange __id="10961" _type="Replace" date="Sun Aug 25 09:59:09 EDT 2019" docASTNodeCount="3129" docActiveCodeLength="24546" docExpressionCount="1763" docLength="42842" endLine="950" insertionLength="1" int_docASTNodeCount="3129" int_docActiveCodeLength="24546" int_docExpressionCount="1763" int_docLength="42841" length="102" offset="35449" startLine="947" timestamp="165872687">
    <deletedText><![CDATA[property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION){ 
			return defaultValue;
		}
]]></deletedText>
    <insertedText><![CDATA[r]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="10963" _type="Insert" date="Sun Aug 25 09:59:09 EDT 2019" docASTNodeCount="3129" docActiveCodeLength="24546" docExpressionCount="1763" docLength="42844" length="2" offset="35450" repeat="2" timestamp="165872739" timestamp2="165872931">
    <text><![CDATA[et]]></text>
  </DocumentChange>
  <DocumentChange __id="10967" _type="Delete" date="Sun Aug 25 09:59:11 EDT 2019" docASTNodeCount="3129" docActiveCodeLength="24546" docExpressionCount="1763" docLength="42836" endLine="947" length="8" offset="35444" repeat="8" startLine="947" timestamp="165874095" timestamp2="165875228">
    <text><![CDATA[//			ret]]></text>
  </DocumentChange>
  <DocumentChange __id="10983" _type="Insert" date="Sun Aug 25 09:59:12 EDT 2019" docASTNodeCount="3129" docActiveCodeLength="24557" docExpressionCount="1763" docLength="42847" length="11" offset="35444" repeat="9" timestamp="165875972" timestamp2="165878965">
    <text><![CDATA[			retVal =]]></text>
  </DocumentChange>
  <DocumentChange __id="11003" _type="Delete" date="Sun Aug 25 09:59:19 EDT 2019" docASTNodeCount="3131" docActiveCodeLength="24551" docExpressionCount="1765" docLength="42841" endLine="948" length="6" offset="35459" startLine="948" timestamp="165882326">
    <text><![CDATA[return]]></text>
  </DocumentChange>
  <DocumentChange __id="11006" _type="Insert" date="Sun Aug 25 09:59:25 EDT 2019" docASTNodeCount="3129" docActiveCodeLength="24595" docExpressionCount="1761" docLength="42885" length="44" offset="35653" repeat="28" timestamp="165889056" timestamp2="165898583">
    <text><![CDATA[
			if (retVal != null) {
				retyrn
			}]]></text>
  </DocumentChange>
  <DocumentChange __id="11063" _type="Delete" date="Sun Aug 25 09:59:35 EDT 2019" docASTNodeCount="3129" docActiveCodeLength="24592" docExpressionCount="1761" docLength="42882" endLine="952" length="3" offset="35688" repeat="3" startLine="952" timestamp="165899019" timestamp2="165899337">
    <text><![CDATA[yrn]]></text>
  </DocumentChange>
  <DocumentChange __id="11069" _type="Insert" date="Sun Aug 25 09:59:36 EDT 2019" docASTNodeCount="3142" docActiveCodeLength="24604" docExpressionCount="1770" docLength="42894" length="12" offset="35688" repeat="12" timestamp="165899814" timestamp2="165902271">
    <text><![CDATA[turn retVal;]]></text>
  </DocumentChange>
  <DocumentChange __id="11095" _type="Delete" date="Sun Aug 25 09:59:42 EDT 2019" docASTNodeCount="3139" docActiveCodeLength="24603" docExpressionCount="1769" docLength="42893" endLine="952" length="1" offset="35687" startLine="952" timestamp="165905192">
    <text><![CDATA[t]]></text>
  </DocumentChange>
  <DocumentChange __id="11098" _type="Insert" date="Sun Aug 25 09:59:47 EDT 2019" docASTNodeCount="3139" docActiveCodeLength="24608" docExpressionCount="1769" docLength="42898" length="5" offset="35705" timestamp="165910783">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="11100" _type="Replace" date="Sun Aug 25 09:59:48 EDT 2019" docASTNodeCount="3138" docActiveCodeLength="24608" docExpressionCount="1769" docLength="42898" endLine="954" insertionLength="3" int_docASTNodeCount="3139" int_docActiveCodeLength="24605" int_docExpressionCount="1769" int_docLength="42895" length="3" offset="35707" startLine="954" timestamp="165911374">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[		}]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="11102" _type="Insert" date="Sun Aug 25 09:59:49 EDT 2019" docASTNodeCount="3138" docActiveCodeLength="24612" docExpressionCount="1769" docLength="42902" length="4" offset="35710" timestamp="165912904">
    <text><![CDATA[
		]]></text>
  </DocumentChange>
  <DocumentChange __id="11107" _type="Insert" date="Sun Aug 25 09:59:59 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24812" docExpressionCount="1781" docLength="43102" length="200" offset="35714" repeat="8" timestamp="165922362" timestamp2="165923914">
    <text><![CDATA[return getInheritedStringModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module,
				problem, test, property, defaultValue);]]></text>
  </DocumentChange>
  <DocumentChange __id="11125" _type="Replace" date="Sun Aug 25 10:00:04 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24801" docExpressionCount="1781" docLength="43091" endLine="950" insertionLength="1" int_docASTNodeCount="3151" int_docActiveCodeLength="24800" int_docExpressionCount="1781" int_docLength="43090" length="12" offset="35639" startLine="950" timestamp="165927423">
    <deletedText><![CDATA[defaultValue]]></deletedText>
    <insertedText><![CDATA[n]]></insertedText>
  </DocumentChange>
  <Command __id="11070" _type="InsertStringCommand" date="Sun Aug 25 09:59:36 EDT 2019" timestamp="165899818" timestamp2="165899818">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="11071" _type="PredictionCommand" date="Sun Aug 25 09:59:36 EDT 2019" prediction_type="HavingDifficulty" timestamp="165899821" />
  <Command __id="11073" _type="InsertStringCommand" date="Sun Aug 25 09:59:36 EDT 2019" repeat="11" timestamp="165900053" timestamp2="165902278">
    <data><![CDATA[urn retVal;]]></data>
  </Command>
  <Command __id="11094" _type="MoveCaretCommand" caretOffset="35237" date="Sun Aug 25 09:59:41 EDT 2019" docOffset="35688" timestamp="165904830" />
  <Command __id="11096" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 09:59:42 EDT 2019" timestamp="165905199" />
  <Command __id="11097" _type="MoveCaretCommand" caretOffset="35254" date="Sun Aug 25 09:59:47 EDT 2019" docOffset="35705" timestamp="165910308" />
  <Command __id="11099" _type="InsertStringCommand" date="Sun Aug 25 09:59:47 EDT 2019" timestamp="165910793" timestamp2="165910793">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="11101" _type="InsertStringCommand" date="Sun Aug 25 09:59:48 EDT 2019" timestamp="165911381" timestamp2="165911381">
    <data><![CDATA[}]]></data>
  </Command>
  <Command __id="11103" _type="InsertStringCommand" date="Sun Aug 25 09:59:49 EDT 2019" timestamp="165912910" timestamp2="165912910">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="11104" _type="SelectTextCommand" caretOffset="35009" date="Sun Aug 25 09:59:57 EDT 2019" end="35202" start="35009" timestamp="165920101" />
  <Command __id="11105" _type="CopyCommand" date="Sun Aug 25 09:59:57 EDT 2019" timestamp="165920563" />
  <Command __id="11106" _type="MoveCaretCommand" caretOffset="35263" date="Sun Aug 25 09:59:58 EDT 2019" docOffset="35714" timestamp="165921753" />
  <Command __id="11108" _type="InsertStringCommand" date="Sun Aug 25 09:59:59 EDT 2019" repeat="7" timestamp="165922369" timestamp2="165923445">
    <data><![CDATA[return ]]></data>
  </Command>
  <Command __id="11122" _type="PasteCommand" date="Sun Aug 25 10:00:00 EDT 2019" timestamp="165923925" />
  <Command __id="11123" _type="MoveCaretCommand" caretOffset="35194" date="Sun Aug 25 10:00:03 EDT 2019" docOffset="35645" timestamp="165926681" />
  <Command __id="11124" _type="SelectTextCommand" caretOffset="35200" date="Sun Aug 25 10:00:03 EDT 2019" end="35200" start="35188" timestamp="165926903" />
  <Command __id="11126" _type="InsertStringCommand" date="Sun Aug 25 10:00:04 EDT 2019" repeat="4" timestamp="165927430" timestamp2="165928038">
    <data><![CDATA[null]]></data>
  </Command>
  <Command __id="11133" _type="SelectTextCommand" caretOffset="35386" date="Sun Aug 25 10:00:11 EDT 2019" end="35386" start="35371" timestamp="165934986" />
  <Command __id="11135" _type="InsertStringCommand" date="Sun Aug 25 10:00:12 EDT 2019" repeat="6" timestamp="165935487" timestamp2="165936451">
    <data><![CDATA[Course]]></data>
  </Command>
  <Command __id="11146" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 10:00:15 EDT 2019" timestamp="165938188" />
  <Command __id="11147" _type="MoveCaretCommand" caretOffset="34589" date="Sun Aug 25 10:01:27 EDT 2019" docOffset="35040" timestamp="166010955" />
  <Command __id="11149" _type="InsertStringCommand" date="Sun Aug 25 10:01:28 EDT 2019" timestamp="166011688" timestamp2="166011688">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="11151" _type="InsertStringCommand" date="Sun Aug 25 10:01:29 EDT 2019" repeat="2" timestamp="166012377" timestamp2="166012521">
    <data><![CDATA[//]]></data>
  </Command>
  <Command __id="11155" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Sun Aug 25 10:01:30 EDT 2019" timestamp="166013660" />
  <DocumentChange __id="11127" _type="Insert" date="Sun Aug 25 10:00:04 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24804" docExpressionCount="1781" docLength="43094" length="3" offset="35640" repeat="3" timestamp="165927608" timestamp2="165928025">
    <text><![CDATA[ull]]></text>
  </DocumentChange>
  <DocumentChange __id="11134" _type="Replace" date="Sun Aug 25 10:00:12 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24790" docExpressionCount="1781" docLength="43080" endLine="956" insertionLength="1" int_docASTNodeCount="3151" int_docActiveCodeLength="24789" int_docExpressionCount="1781" int_docLength="43079" length="15" offset="35822" startLine="956" timestamp="165935483">
    <deletedText><![CDATA[OrCreateProject]]></deletedText>
    <insertedText><![CDATA[C]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="11136" _type="Insert" date="Sun Aug 25 10:00:12 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24795" docExpressionCount="1781" docLength="43085" length="5" offset="35823" repeat="5" timestamp="165935709" timestamp2="165936448">
    <text><![CDATA[ourse]]></text>
  </DocumentChange>
  <DocumentChange __id="11148" _type="Insert" date="Sun Aug 25 10:01:28 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43090" length="5" offset="35040" repeat="3" timestamp="166011681" timestamp2="166012509">
    <text><![CDATA[
	//]]></text>
  </DocumentChange>
  <DocumentChange __id="11154" _type="Delete" date="Sun Aug 25 10:01:30 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24799" docExpressionCount="1781" docLength="43089" endLine="940" length="1" offset="35044" startLine="940" timestamp="166013656">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="11156" _type="Insert" date="Sun Aug 25 10:01:31 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43173" length="84" offset="35044" repeat="15" timestamp="166014671" timestamp2="166017978">
    <text><![CDATA[**
	 * Maybe we wh
	 * @param property
	 * @param defaultValue
	 * @return
	 */]]></text>
  </DocumentChange>
  <DocumentChange __id="11185" _type="Delete" date="Sun Aug 25 10:01:35 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43171" endLine="941" length="2" offset="35061" repeat="2" startLine="941" timestamp="166018385" timestamp2="166018540">
    <text><![CDATA[wh]]></text>
  </DocumentChange>
  <DocumentChange __id="11189" _type="Insert" date="Sun Aug 25 10:01:35 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43186" length="15" offset="35061" repeat="15" timestamp="166018676" timestamp2="166020793">
    <text><![CDATA[should also hae]]></text>
  </DocumentChange>
  <DocumentChange __id="11220" _type="Delete" date="Sun Aug 25 10:01:40 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43133" endLine="944" length="53" offset="35082" startLine="942" timestamp="166023632">
    <text><![CDATA[@param property
	 * @param defaultValue
	 * @return]]></text>
  </DocumentChange>
  <DocumentChange __id="11223" _type="Delete" date="Sun Aug 25 10:01:42 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43132" endLine="941" length="1" offset="35075" startLine="941" timestamp="166026055">
    <text><![CDATA[e]]></text>
  </DocumentChange>
  <DocumentChange __id="11225" _type="Insert" date="Sun Aug 25 10:01:43 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43154" length="22" offset="35075" repeat="22" timestamp="166026416" timestamp2="166030199">
    <text><![CDATA[ve course configuraton]]></text>
  </DocumentChange>
  <DocumentChange __id="11269" _type="Delete" date="Sun Aug 25 10:01:47 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43135" endLine="941" length="19" offset="35078" repeat="19" startLine="941" timestamp="166031003" timestamp2="166032384">
    <text><![CDATA[course configuraton]]></text>
  </DocumentChange>
  <DocumentChange __id="11307" _type="Insert" date="Sun Aug 25 10:01:50 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43155" length="20" offset="35078" repeat="20" timestamp="166033280" timestamp2="166038826">
    <text><![CDATA[static configuration]]></text>
  </DocumentChange>
  <Command __id="11378" _type="FileOpenCommand" date="Sun Aug 25 10:03:59 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="166162622">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <Command __id="11390" _type="FileOpenCommand" date="Sun Aug 25 10:04:33 EDT 2019" docASTNodeCount="1390" docActiveCodeLength="11547" docExpressionCount="908" docLength="18769" projectName="GraderBasics" timestamp="166196287">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\project\BasicProject.java]]></filePath>
  </Command>
  <Command __id="11410" _type="FileOpenCommand" date="Sun Aug 25 10:04:55 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43155" projectName="GraderBasics" timestamp="166218609">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.configuration.PropertiesConfiguration;

import grader.basics.BasicLanguageDependencyManager;
import grader.basics.execution.GradingMode;
import grader.basics.project.Project;
import grader.basics.settings.BasicGradingEnvironment;
import util.trace.Tracer;

/**
 * 
 * This serves two purposes. It defines defaults for configurable properties. It
 * also reads project-based properties to be used in localchecks on student
 * computer. Ultimate authority over properties in localchecks mode is
 * ABasicExecution
 *
 */
public class BasicStaticConfigurationUtils {
	public static final String PRIVACY = "privacy";
	public static final String EXECUTION_COMMAND = "execution";

	public static final String LANGUAGE = "language";

	public static final String ENTRY_POINT = "entryPoint";
	public static final String BUILD_FOLDER = "buildFolder";
	public static final String PERMISSIONS = "permissions";

	public static final String CLASS_PATH = "classPath";
	public static final String OE_PATH = "oePath";
	public static final String JUNIT_PATH = "junitPath";
	public static final String LOCAL_GRADER_PATH = "localGraderPath";
	public static final String OE_AND_CLASS_PATH = "oeAndClassPath";
	public static final String CLASS_PATH_SEPARATOR = ":";

	public static final String PROCESS_TEAMS = "processTeams";

	public static final String ENTRY_TAG = "entryTag";
	public static final String ENTRY_TAGS = "entryTags";
	public static final String RESOURCE_RELEASE_TIME = "sleepTime";
	public static final String ARGS = "args";
	public static final String START_TAGS = "startTags";
	public static final String TERMINATING = "terminating";
	public static final String GENERATE_TRACE_FILES = "trace";

//	public static final String JAVA = "Java";

	public static final String CLASS_PATH_VAR = toVariable(CLASS_PATH);
	public static final String CLASS_PATH_SEPARATOR_VAR = toVariable(CLASS_PATH_SEPARATOR);
	public static final String OE_PATH_VAR = toVariable(OE_PATH);
	public static final String LOCAL_GRADER_PATH_VAR = toVariable(LOCAL_GRADER_PATH);

	public static final String JUNIT_PATH_VAR = toVariable(JUNIT_PATH);
	public static final String OE_AND_CLASS_PATH_VAR = toVariable(OE_AND_CLASS_PATH);
	public static final String PERMISSIONS_VAR = toVariable(PERMISSIONS);
	public static final String BUILD_FOLDER_VAR = toVariable(BUILD_FOLDER);
	public static final String IMPLICIT_REQUIRMENTS_ROOT = "implicitRequirementsRoot";
	public static final String DEFAULT_IMPLICIT_REQUIRMENTS_ROOT = "gradingTools";
	public static final String USE_EXECEUTOR = "useExecutor";
	public static final boolean DEFAULT_USE_EXECUTOR = false;
	public static final String EXECUTOR = "executor";
	// this makes no sense, but it is consistent with config file
	public static final String DEFAULT_EXECUTOR = "D:/dewan_backup/Java/Grader/executor";
	public static final String C_OBJ = "language.C.obj";
	public static final String DEFAULT_C_OBJ = "o";
	public static final String MODULES = "modules";
	public static final String DEFAULT_MODULE = "Comp101";
	public static final String FORK_MAIN = "forkMain";
	public static final Boolean DEFAULT_FORK_MAIN = true;
	public static final String GRADABLE_PROJECT_LOCATION = "gradableProjectLocation";
	public static final String SOURCE_LOCATION = "sourceLocation";
	public static final String BINARY_LOCATION = "binaryLocation";
	public static final String OBJECT_LOCATION = "objectLocation";
	public static final String OUTPUT_WAIT_TIME = "outputWaitTime";
	public static final String TEAM_OUTPUT_WAIT_TIME = "teamOutputWaitTime";
	public static final String WAIT_FOR_RESORT = "waitForResort";
	public static final String RESORT_TIME = "resortTime";
	public static final String PROCESS_TIMEOUT = "processTimeout";
	public static final String METHOD_TIMEOUT = "methodTimeout";
	public static final String CONSTRUCTOR_TIMEOUT = "constructorTimeout";
	public static final String USE_METHOD_CONSTRUCTOR_TIMEOUT = "useMethodConstructorTimeout";
	public static final String USE_PROCESS_TIMEOUT = "useProcessTimeout";
	public static final String WAIT_FOR_METHOD_CONSTRUCTOR_AND_PROCESSES = "waitFotMethodConstructorAndProcesses";
	public static final String USE_PROJECT_CONFIGURATION = "useProjectConfiguration";
	public static final boolean DEFAULT_USE_PROJECT_CONFIGURATION = false;

//	private static  List<String> basicCommand;
//	private static Map<String, List<String>> processToBasicCommand = new HashMap();
	private static String duplicatedClassPathSeparator;
	private static List<String> graderProcessTeams;

	private static boolean useProjectConfiguration;
	protected static String module;

	protected static String problem;
	protected static String test;
	protected static String testSuite;
	protected static List<String> emptyList = new ArrayList();

//	Comp533s18.execution = java, -cp, .{:}..{:}{classPath}{:}{oePath}{:}{junitPath}, {entryTags}, {args}

	// public static final String[] DEFAULT_JAVA_BASIC_COMMAND_ARRAY = {
//			"java", "-cp", ".{:}..{:}{classPath}{:}{:}{junitPath}{:}{localGraderPath}", "{entryTags}", "{args}"
//	};
	public static final String[] DEFAULT_JAVA_BASIC_COMMAND_ARRAY = { "java", "-cp",
			".{:}..{:}{classPath}{:}{:}{junitPath}{:}{localGraderPath}", "{entryPoint}", "{args}" };
	public static final String[] DEFAULT_OE_BASIC_COMMAND_ARRAY = { "java", "-cp",
			".{:}..{:}{classPath}{:}{oePath}{:}{junitPath}{:}{localGraderPath}", "{entryTags}", "{args}" };

	public static final List<String> DEFAULT_JAVA_BASIC_COMMAND = Arrays.asList(DEFAULT_JAVA_BASIC_COMMAND_ARRAY);
	public static final List<String> DEFAULT_OE_BASIC_COMMAND = Arrays.asList(DEFAULT_OE_BASIC_COMMAND_ARRAY);
	public static final int DEFAULT_RESOURCE_RELEASE_TIME = 2000;
	public static final int DEFAULT_CONSTRUCTOR_TIME_OUT = 2000;// in
	// milliseconds
	public static final int DEFAULT_METHOD_TIME_OUT = 2000; // in milliseconds
	public static final int DEFAULT_PROCESS_TIME_OUT = 4; // in seconds
	public static final String CHECK_ALL_SPECIFIED_TAGS = "checkAllSpecifiedTags";
	public static final boolean DEFAULT_CHECK_ALL_SPECIFIED_TAGS = false;

	public static String toVariable(String aVariableName) {
		return "{" + aVariableName + "}";
	}

	public static void setBasicCommandToDefaultEntryPointCommand() {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification()
				.setGraderBasicCommand(DEFAULT_JAVA_BASIC_COMMAND);
//		basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
	}

	public static void setBasicCommandToDefaultEntryTagCommand() {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification()
				.setGraderBasicCommand(DEFAULT_OE_BASIC_COMMAND);
//		basicCommand =  DEFAULT_OE_BASIC_COMMAND;
	}

	public static List<String> getBasicCommand() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		if (basicCommand == null) {
//			basicCommand = DEFAULT_OE_BASIC_COMMAND;
//		}
//////		return getInheritedListModuleProblemProperty(EXECUTION_COMMAND);
//		return basicCommand;
	}

	public static boolean hasClassPath() {
//		getBasicCommand();
		return hasClassPath(getBasicCommand());
//		if (basicCommand == null) {
//			return false;
//		}
//		for (String aCommand:basicCommand) {
//			if (aCommand.contains(CLASS_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
//				return true;
//			}
//		}
//		return false;	
	}

	public static boolean hasClassPath(List<String> basicCommand) {
//		getBasicCommand();
		if (basicCommand == null) {
			return false;
		}
		for (String aCommand : basicCommand) {
			if (aCommand.contains(CLASS_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
				return true;
			}
		}
		return false;
	}

	public static boolean hasOEClassPath() {
		return hasOEClassPath(getBasicCommand());
//		getBasicCommand();
//		if (basicCommand == null) {
//			return false;
//		}
//		for (String aCommand:basicCommand) {
//			if (aCommand.contains(OE_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
//				return true;
//			}
//		}
//		return false;	
	}

	public static boolean hasOEClassPath(List<String> basicCommand) {
//		getBasicCommand();
		if (basicCommand == null) {
			return false;
		}
		for (String aCommand : basicCommand) {
			if (aCommand.contains(OE_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
				return true;
			}
		}
		return false;
	}

	public static boolean hasOEOrClassPath() {
		return hasClassPath(getBasicCommand()) || hasOEClassPath(getBasicCommand());
	}

	public static boolean hasOEOrClassPath(List<String> basicCommand) {
		return hasClassPath(basicCommand) || hasOEClassPath(basicCommand);
	}

	protected static String[] emptyEntryPoints = {};
	protected static String[] potentialMainEntryPoints;

//	public static String[] getPotentialMainEntryPointNames() {
//		String retVal = getInheritedStringModuleProblemProperty(ENTRY_POINT, null);
//		if (retVal != null) {
//			GraderSettingsManager manager = GraderSettingsManagerSelector.getGraderSettingsManager();
//			retVal = manager.replaceModuleProblemVars(retVal);
//			return new String[]{retVal.replaceAll(" ", "")};
//		}
//		return emptyEntryPoints;
//	}
	public static String[] getPotentialMainEntryPointNames() {
		return potentialMainEntryPoints;
//		if (potentialMainEntryPoints == null) {
//		String retVal = getInheritedStringModuleProblemProperty(ENTRY_POINT, null);
//		if (retVal != null) {
//			GraderSettingsManager manager = GraderSettingsManagerSelector.getGraderSettingsManager();
//			retVal = manager.replaceModuleProblemVars(retVal);
//			potentialMainEntryPoints = new String[]{retVal.replaceAll(" ", "")};
//		} else {
//			potentialMainEntryPoints = emptyEntryPoints;
//		}
//		}
//		return potentialMainEntryPoints;
	}

	public static void setPotentialMainEntryPointNames(String[] aNames) {
		potentialMainEntryPoints = aNames;
	}

	// we really do not need this method, for backwards compatibility
	public static List<String> getBasicCommand(String aProcessName) {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand(aProcessName);
//		List<String> retVal = processToBasicCommand.get(aProcessName);
//		if (retVal == null) {
////			retVal = getBasicCommand();
//			retVal = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		}
//		
//		return retVal;

	}

	public static void setBasicCommand(String aProcessName, List<String> aCommand) {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderBasicCommand(aProcessName,
				aCommand);
//		processToBasicCommand.put(aProcessName, aCommand);

	}

	public static boolean hasEntryPoint(List<String> aCommand) {
		return hasSubString(aCommand, ENTRY_POINT);
	}

	public static boolean hasSubString(List<String> aCommand, String aSubString) {
		for (String aCommmandComponent : aCommand) {
			if (aCommmandComponent.contains(aSubString)) {
				return true;
			}
		}
		return false;
	}

	public static boolean hasEntryTag(List<String> aProcessCommand) {
		return hasSubString(aProcessCommand, ENTRY_TAG);
	}

	public static boolean hasEntryTags(List<String> aProcessCommand) {
		return hasSubString(aProcessCommand, ENTRY_TAGS);
	}

	public static boolean haArgs(String aProcessCommand) {
		return aProcessCommand.contains(ARGS);
	}

//	public static final String FILE_SEPARATOR = System.getProperty("file.separator");
	public static final String FILE_SEPARATOR = "/";

	public static String quotePath(String path) {
		if (!path.contains(" "))
			return path;
		boolean startSlash = path.startsWith("\\") || path.startsWith("/");
		boolean endSlash = path.endsWith("\\") || path.endsWith("/");
		String[] split = path.split("[\\\\/]+");

		StringBuilder quotPath = new StringBuilder(path.length());

		if (startSlash) {
			quotPath.append(FILE_SEPARATOR);
		}

		for (int i = 0; i < split.length; i++) {
			String s = split[i];
			if (s.contains(" ")) {
//	            s = "\"" + s + "\"";
				s = "\\\"" + s + "\\\"";

			}
			quotPath.append(s);
			if (i + 1 < split.length) {
				quotPath.append(FILE_SEPARATOR);
			}
		}

		if (endSlash) {
			quotPath.append(FILE_SEPARATOR);
		}

		return quotPath.toString();
	}

	public static int getClassPathFlagIndex(List<String> aBasicCommand) {
		int aCpIndex = aBasicCommand.indexOf("-cp");
		if (aCpIndex < 0)
			aCpIndex = aBasicCommand.indexOf("-classpath");
		return aCpIndex;
	}

	public static String getExecutionCommandRawClassPath() {
		return getExecutionCommandRawClassPath(getBasicCommand());
//		List<String> aBasicCommand = getBasicCommand();
//		int aCpIndex = getClassPathFlagIndex(aBasicCommand);
//		if (aCpIndex < 0)
//			return null;
//		if (aCpIndex + 1 >= aBasicCommand.size())
//			return null;
//		return getReplacedRawClassPath(aBasicCommand.get(aCpIndex + 1));

	}

	public static String getExecutionCommandRawClassPath(List<String> aBasicCommand) {
//		List<String> aBasicCommand = getBasicCommand();
		int aCpIndex = getClassPathFlagIndex(aBasicCommand);
		if (aCpIndex < 0)
			return null;
		if (aCpIndex + 1 >= aBasicCommand.size())
			return null;
		return getReplacedRawClassPath(aBasicCommand.get(aCpIndex + 1));

	}

	public static String getReplacedRawClassPath(String command) {
		// do we really need all of these ifs, more efficient without them? - debugging
		// will be easier
		// all of these will be in the same command
		if (command.contains(CLASS_PATH_VAR)) {

			command = command.replace(CLASS_PATH_VAR, BasicGradingEnvironment.get().getClassPath());
		}

		if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
			command = command.replace(CLASS_PATH_SEPARATOR_VAR, BasicGradingEnvironment.get().getClassPathSeparator());
		}

		if (command.contains(LOCAL_GRADER_PATH_VAR)) { // the config property does not have this, I suppose it is to
														// allow student code to invoke api calls in grader

			command = command.replace(LOCAL_GRADER_PATH_VAR,
					// BasicGradingEnvironment.get().getClasspath());
					BasicGradingEnvironment.get().getLocalGraderClassPath());

		}
		if (command.contains(OE_PATH_VAR)) {
			if (command.toLowerCase().contains("local")) { // we already have oeall
				command = command.replace(OE_PATH_VAR,
						// BasicGradingEnvironment.get().getClasspath());
						"");
			} else {
				command = command.replace(OE_PATH_VAR,
						// BasicGradingEnvironment.get().getClasspath());
						BasicGradingEnvironment.get().getOEClassPath());
			}

		}

		if (command.contains(JUNIT_PATH_VAR)) {
			command = command.replace(JUNIT_PATH_VAR, BasicGradingEnvironment.get().getJUnitClassPath());
			// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
			// command = command.replace(OE_AND_CLASS_PATH_VAR,
			// BasicGradingEnvironment.get().getClassPath());
		}
		String aClassPathSeparator = BasicGradingEnvironment.get().getClassPathSeparator();
		if (duplicatedClassPathSeparator == null) {
			// just avoding new String creation
			duplicatedClassPathSeparator = aClassPathSeparator + aClassPathSeparator;
		}
		// certain libraries may not exist, specially in the server, see what happens
		// without them
		command = command.replaceAll(duplicatedClassPathSeparator, aClassPathSeparator);
		return command;
		// javac wants no quotes!
//					String anOSPath = BasicGradingEnvironment.get().toOSClassPath(command);
//					return anOSPath;
	}

	public static void replaceClassPathVars(List<String> basicCommand) {
		int aCpIndex = getClassPathFlagIndex(basicCommand);
		if (aCpIndex < 0)
			return;

		if (aCpIndex + 1 >= basicCommand.size()) {
			Tracer.warning("Nothing follows classpath flag");
			return;
		}
		String aReplacement = getReplacedRawClassPath(basicCommand.get(aCpIndex + 1));
		String anOSPath = BasicGradingEnvironment.get().toOSClassPath(aReplacement);
		basicCommand.set(aCpIndex + 1, anOSPath);

//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			
////			// do we really need all of these ifs, more efficient without them? - debugging will be easier
////			// all of these will be in the same command
////			if (command.contains(CLASS_PATH_VAR)) {
////
////				command = command.replace(CLASS_PATH_VAR,
////						BasicGradingEnvironment.get().getClassPath());
////			}
////
////			if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
////				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
////						BasicGradingEnvironment.get().getClassPathSeparator());
////			}
////			if (command.contains(OE_PATH_VAR)) {
////
////				command = command.replace(OE_PATH_VAR,
////				// BasicGradingEnvironment.get().getClasspath());
////						BasicGradingEnvironment.get().getOEClassPath());
////
////			} 
////			if (command.contains(JUNIT_PATH_VAR)) {
////				command = command.replace(JUNIT_PATH_VAR,
////						BasicGradingEnvironment.get().getJUnitClassPath());
////				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
////				// command = command.replace(OE_AND_CLASS_PATH_VAR,
////				// BasicGradingEnvironment.get().getClassPath());
////			} 
//			command = getReplacedClassPath(command);
//			basicCommand.set(aCommandIndex, command);
//		}
	}

//	public static void replacePermissionVariables(List<String> basicCommand, Project aProject) {
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath);
//				basicCommand.set(aCommandIndex, command);
//
//			}
//		}
//	}

	public static void replaceEntryPoint(List<String> basicCommand, String anEntryPoint, String anEntryTagTarget) {
		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {

			String command = basicCommand.get(aCommandIndex);
			if (anEntryPoint != null) {
				command = command.replace(toVariable(ENTRY_POINT), anEntryPoint);

			}
			if (anEntryTagTarget != null) {
				command = command.replace(toVariable(ENTRY_TAGS), anEntryTagTarget);
				command = command.replace(toVariable(ENTRY_TAG), anEntryTagTarget); // will match tags also

			}
			// check if entryTagTarget is empty and replace it with entry point
			basicCommand.set(aCommandIndex, command);
		}
	}

	public static void replaceBuildFolder(List<String> basicCommand, File aBuildFolder) {
		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {

			String command = basicCommand.get(aCommandIndex);
			// we should always have a build folder I suppose
			// this is meant for C like programs
			if (command.contains(BUILD_FOLDER_VAR)) {
				command = command.replace(BUILD_FOLDER_VAR, aBuildFolder.getAbsolutePath());
				basicCommand.set(aCommandIndex, command);

			}
		}
	}

	public static void replaceArgs(List<String> basicCommand, String[] anArgs) {
		int argsIndex = basicCommand.indexOf(toVariable(ARGS));
		if (argsIndex >= 0) {
			basicCommand.remove(argsIndex);
			if (anArgs != null) {
				for (int i = 0; i < anArgs.length; i++) {
					basicCommand.add(argsIndex + i, anArgs[i]);
				}
			}

		}
	}

//	public static String[] getExecutionCommand(Project aProject,
//			String aProcessName, File aBuildFolder, String anEntryPoint,
//			String anEntryTagTarget, String[] anArgs) {
//
//		List<String> basicCommand = null;
//		if (aProcessName == null || aProcessName.isEmpty()) {
//		    if (anEntryPoint != null) {
//		    	basicCommand = getBasicCommand();
////		    	basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
//
//		    } else {
//			basicCommand = getBasicCommand();
//		    }
//		} else {
//		
//			basicCommand = getBasicCommand(aProcessName);
//
//		}
//		return getExecutionCommand(basicCommand, aProject, aProcessName, aBuildFolder, anEntryPoint, anEntryTagTarget, anArgs);
//////		List<String> retVal = new ArrayList(basicCommand.size());
////		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
////		retVal.addAll(basicCommand);
////		replaceClassPathVars(retVal);
//////		replacePermissionVariables(retVal, aProject);
////		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
////		replaceBuildFolder(retVal, aBuildFolder);
////		replaceArgs(retVal, anArgs);
////		return retVal.toArray(new String[0]);
//
//
////		
////		
////		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
////
////			String command = basicCommand.get(aCommandIndex);
////			if (command.contains(CLASS_PATH_VAR)) {
////
////				command = command.replace(CLASS_PATH_VAR,
////						BasicGradingEnvironment.get().getClassPath());
////
////			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
////				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
////						BasicGradingEnvironment.get().getClassPathSeparator());
////			} else if (command.contains(OE_PATH_VAR)) {
////
////				command = command.replace(OE_PATH_VAR,
////				// BasicGradingEnvironment.get().getClasspath());
////						BasicGradingEnvironment.get().getOEClassPath());
////
////			} else if (command.contains(JUNIT_PATH_VAR)) {
////				command = command.replace(JUNIT_PATH_VAR,
////						BasicGradingEnvironment.get().getJUnitClassPath());
////				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
////				// command = command.replace(OE_AND_CLASS_PATH_VAR,
////				// BasicGradingEnvironment.get().getClassPath());
////			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
////
////				String aPolicyFilePath = JavaProjectToPermissionFile
////						.getPermissionFile(aProject).getAbsolutePath();
////				try {
////					aPolicyFilePath = JavaProjectToPermissionFile
////							.getPermissionFile(aProject).getCanonicalPath();
////				} catch (IOException e1) {
////					e1.printStackTrace();
////				}
////				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
////
////				aPolicyFilePath = quotePath(aPolicyFilePath);
////
////				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
////
////				);
////			}
////
////			if (anEntryPoint != null) {
////				command = command
////						.replace(toVariable(ENTRY_POINT), anEntryPoint);
////			}
////			if (anEntryTagTarget != null) {
////				command = command.replace(toVariable(ENTRY_TAGS),
////						anEntryTagTarget);
////				command = command.replace(toVariable(ENTRY_TAG),
////						anEntryTagTarget); // will match tags also
////
////			}
////
////			command = command.replace(toVariable(BUILD_FOLDER),
////					aBuildFolder.getAbsolutePath());
////
////			retVal.add(command);
////		}
////		int argsIndex = retVal.indexOf(toVariable(ARGS));
////		if (argsIndex >= 0) {
////			retVal.remove(argsIndex);
////			for (int i = 0; i < anArgs.length; i++) {
////				retVal.add(argsIndex + i, anArgs[i]);
////			}
////
////		}
////		return retVal.toArray(new String[0]);
//
//	}
	public static String[] getExecutionCommand(Project aProject, String aProcessName, File aBuildFolder,
			String anEntryPoint, String anEntryTagTarget, String[] anArgs) {

		List<String> basicCommand = null;
		if (aProcessName == null || aProcessName.isEmpty()) {
			basicCommand = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		    if (anEntryPoint != null) {
//		    	basicCommand = getBasicCommand();
////		    	basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
//
//		    } else {
//			basicCommand = getBasicCommand();
//		    }
		} else {

			basicCommand = getBasicCommand(aProcessName);

		}
		return getExecutionCommand(basicCommand, aProject, aProcessName, aBuildFolder, anEntryPoint, anEntryTagTarget,
				anArgs);
////		List<String> retVal = new ArrayList(basicCommand.size());
//		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
//		retVal.addAll(basicCommand);
//		replaceClassPathVars(retVal);
////		replacePermissionVariables(retVal, aProject);
//		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
//		replaceBuildFolder(retVal, aBuildFolder);
//		replaceArgs(retVal, anArgs);
//		return retVal.toArray(new String[0]);

//		
//		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (command.contains(CLASS_PATH_VAR)) {
//
//				command = command.replace(CLASS_PATH_VAR,
//						BasicGradingEnvironment.get().getClassPath());
//
//			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
//				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
//						BasicGradingEnvironment.get().getClassPathSeparator());
//			} else if (command.contains(OE_PATH_VAR)) {
//
//				command = command.replace(OE_PATH_VAR,
//				// BasicGradingEnvironment.get().getClasspath());
//						BasicGradingEnvironment.get().getOEClassPath());
//
//			} else if (command.contains(JUNIT_PATH_VAR)) {
//				command = command.replace(JUNIT_PATH_VAR,
//						BasicGradingEnvironment.get().getJUnitClassPath());
//				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
//				// command = command.replace(OE_AND_CLASS_PATH_VAR,
//				// BasicGradingEnvironment.get().getClassPath());
//			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
//
//				);
//			}
//
//			if (anEntryPoint != null) {
//				command = command
//						.replace(toVariable(ENTRY_POINT), anEntryPoint);
//			}
//			if (anEntryTagTarget != null) {
//				command = command.replace(toVariable(ENTRY_TAGS),
//						anEntryTagTarget);
//				command = command.replace(toVariable(ENTRY_TAG),
//						anEntryTagTarget); // will match tags also
//
//			}
//
//			command = command.replace(toVariable(BUILD_FOLDER),
//					aBuildFolder.getAbsolutePath());
//
//			retVal.add(command);
//		}
//		int argsIndex = retVal.indexOf(toVariable(ARGS));
//		if (argsIndex >= 0) {
//			retVal.remove(argsIndex);
//			for (int i = 0; i < anArgs.length; i++) {
//				retVal.add(argsIndex + i, anArgs[i]);
//			}
//
//		}
//		return retVal.toArray(new String[0]);

	}

	public static String[] getExecutionCommand(List<String> basicCommand, Project aProject, String aProcessName,
			File aBuildFolder, String anEntryPoint, String anEntryTagTarget, String[] anArgs) {

//		List<String> basicCommand = null;
//		if (aProcessName == null || aProcessName.isEmpty()) {
//		
//			basicCommand = getBasicCommand();
//		} else {
//		
//			basicCommand = getBasicCommand(aProcessName);
//
//		}
//		List<String> retVal = new ArrayList(basicCommand.size());
		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
		retVal.addAll(basicCommand);
		replaceClassPathVars(retVal);
//		replacePermissionVariables(retVal, aProject);
		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
		replaceBuildFolder(retVal, aBuildFolder);
		replaceArgs(retVal, anArgs);
		return retVal.toArray(new String[0]);

//		
//		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (command.contains(CLASS_PATH_VAR)) {
//
//				command = command.replace(CLASS_PATH_VAR,
//						BasicGradingEnvironment.get().getClassPath());
//
//			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
//				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
//						BasicGradingEnvironment.get().getClassPathSeparator());
//			} else if (command.contains(OE_PATH_VAR)) {
//
//				command = command.replace(OE_PATH_VAR,
//				// BasicGradingEnvironment.get().getClasspath());
//						BasicGradingEnvironment.get().getOEClassPath());
//
//			} else if (command.contains(JUNIT_PATH_VAR)) {
//				command = command.replace(JUNIT_PATH_VAR,
//						BasicGradingEnvironment.get().getJUnitClassPath());
//				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
//				// command = command.replace(OE_AND_CLASS_PATH_VAR,
//				// BasicGradingEnvironment.get().getClassPath());
//			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
//
//				);
//			}
//
//			if (anEntryPoint != null) {
//				command = command
//						.replace(toVariable(ENTRY_POINT), anEntryPoint);
//			}
//			if (anEntryTagTarget != null) {
//				command = command.replace(toVariable(ENTRY_TAGS),
//						anEntryTagTarget);
//				command = command.replace(toVariable(ENTRY_TAG),
//						anEntryTagTarget); // will match tags also
//
//			}
//
//			command = command.replace(toVariable(BUILD_FOLDER),
//					aBuildFolder.getAbsolutePath());
//
//			retVal.add(command);
//		}
//		int argsIndex = retVal.indexOf(toVariable(ARGS));
//		if (argsIndex >= 0) {
//			retVal.remove(argsIndex);
//			for (int i = 0; i < anArgs.length; i++) {
//				retVal.add(argsIndex + i, anArgs[i]);
//			}
//
//		}
//		return retVal.toArray(new String[0]);

	}

	public static List<String> getProcessTeams() {
		return graderProcessTeams;
	}

	public static void setProcessTeams(List<String> newVal) {
		graderProcessTeams = newVal;
		;
	}

	public static boolean isTeamProcess() {
		return graderProcessTeams != null && graderProcessTeams.isEmpty();
	}

	public static boolean isUseProjectConfiguration() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().isUseProjectConfiguration();
//		return useProjectConfiguration;
	}

	public static void setUseProjectConfiguration(boolean newVal) {
//		BasicStaticConfigurationUtils.useProjectConfiguration = useProjectConfiguration;
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setUseProjectConfiguration(newVal);
	}

	public static Boolean getInheritedBooleanModuleProblemProperty(PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, Boolean defaultValue) {
		if (configuration == null) {
			return defaultValue;
		}

		Boolean retVal = configuration.getBoolean(module + "." + problem + "." + property, null);

		if (retVal == null) {
			retVal = configuration.getBoolean(module + "." + property, null);
		}
		if (retVal == null) {
			retVal = configuration.getBoolean(DEFAULT + "." + property, defaultValue);
		}

		return retVal;

	}

	public static final String DEFAULT = "default";

	public static Integer getInheritedIntegerModuleProblemProperty(PropertiesConfiguration configuration, String module,
			String problem, String test, String property, Integer defaultValue) {
		if (configuration == null) {
			return defaultValue;
		}

		Integer retVal = configuration.getInteger(module + "." + problem + "." + property, null);

		if (retVal == null) {
			retVal = configuration.getInteger(module + "." + property, null);
		}
		if (retVal == null) {
			retVal = configuration.getInteger(DEFAULT + "." + property, defaultValue);
		}

		return retVal;

	}

	public static String getConfigurationBasicDirectString(String property, String defaultValue) {

		if (!isUseProjectConfiguration()) {
			// cannot use project configuration before location is known to create project
			return defaultValue;
		}
		PropertiesConfiguration aConfiguration = BasicConfigurationManagerSelector.getConfigurationManager()
				.getOrCreateProjectConfiguration();
		if (aConfiguration == null) {
			return defaultValue;
		}
		return aConfiguration.getString(property, defaultValue);

	}

	public static List getConfigurationBasicDirectList(String property, List defaultValue) {

		if (property == BasicStaticConfigurationUtils.MODULES || // infinite recursion
				!isUseProjectConfiguration()) {
			// cannot use project configuration before location is known to create project
			return defaultValue;
		}
		PropertiesConfiguration aConfiguration = BasicConfigurationManagerSelector.getConfigurationManager()
				.getOrCreateProjectConfiguration();
		if (aConfiguration == null) {
			return defaultValue;
		}
		List retVal = aConfiguration.getList(property);
		if (retVal == null) {
			return defaultValue;
		}
		return retVal;

	}

//	public static String getBasicInheritedStringModuleProblemProperty(String property, String defaultValue) {
//		if (
//		// cannot use project configuration before location is known to create project
//		property == BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION || // can do == as we are using named
//																				// constants
//				!isUseProjectConfiguration()) {
////			property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION){ 
//			return defaultValue;
//		}
//
//		return getInheritedStringModuleProblemProperty(
//				BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module,
//				problem, test, property, defaultValue);
//	}
	/**
	 * Maybe we should also have static configuration
	 * 
	 */
	public static String getBasicInheritedStringModuleProblemProperty(String property, String defaultValue) {
		String retVal = null;
		if (
		// cannot use project configuration before location is known to create project
		property != BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION && // can do == as we are using named
																				// constants
				isUseProjectConfiguration()) {
			retVal =
		 getInheritedStringModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module,
				problem, test, property, null);
			if (retVal != null) {
				return retVal;
			}
		}
		return getInheritedStringModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration(), module,
				problem, test, property, defaultValue);
	}

	public static PropertiesConfiguration maybeGetLocalCourseConfguration() {
		if (GradingMode.getGraderRun()) {
			return null;
		}
		return BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration();

	}

	public static Boolean getBasicInheritedBooleanModuleProblemProperty(String property, Boolean defaultValue) {
		Boolean retVal = null;
//		if (
//			property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION || // avoiding recursion
//			!isUseProjectConfiguration() ) {			  
//			return defaultValue;
//		}
//	 return getInheritedBooleanModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
		if (property != BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION && // avoiding recursion
				isUseProjectConfiguration()) {

			retVal = getInheritedBooleanModuleProblemProperty(
					BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(),
					module, problem, test, property, null);

			if (retVal != null) {
				return retVal;
			}
		}
		return getInheritedBooleanModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration(), module, problem,
				test, property, defaultValue);

	}

//	public static Integer getBasicInheritedIntegerModuleProblemProperty(
//			String property, Integer defaultValue) {
//		if (!isUseProjectConfiguration()) {
//			return defaultValue;
//		}
//
//	 return getInheritedIntegerModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
//	}
	public static Integer getBasicInheritedIntegerModuleProblemProperty(String property, Integer defaultValue) {
		Integer retVal = null;
		if (isUseProjectConfiguration()) {
			retVal = getInheritedIntegerModuleProblemProperty(
					BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(),
					module, problem, test, property, null);
			if (retVal != null) {
				return retVal;
			}
		}
		return getInheritedIntegerModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration(), module, problem,
				test, property, defaultValue);

	}

//	public static List getBasicInheritedListModuleProblemProperty(
//			String property, List defaultValue) {
//		if (!isUseProjectConfiguration() ) { // can do == as we are using named constants
//			return defaultValue;
//		}
//
//	 return getInheritedListModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
//	}
	public static List getBasicInheritedListModuleProblemProperty(String property, List defaultValue) {
		List retVal = null;
		if (isUseProjectConfiguration()) { // can do == as we are using named constants
			retVal = getInheritedListModuleProblemProperty(
					BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(),
					module, problem, test, property, null);
			if (retVal != null) {
				return retVal;
			}
		}
		return getInheritedListModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration(), module, problem,
				test, property, defaultValue);
		
	}

	public static String getInheritedStringModuleProblemProperty(PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, String defaultValue) {
		if (configuration == null) {
			System.err.println("Null configuration, returning " + defaultValue + " for " + property);
			return defaultValue;
		}
		String retVal = configuration.getString(module + "." + problem + "." + aTest + "." + property, null);
		if (retVal != null) {
			return retVal;
		}
		retVal = configuration.getString(module + "." + problem + "." + property, null);

//		String retVal = configuration.getString(module + "." + problem + "."
//				+ property, null);
		if (retVal != null) {
			return retVal;
		}
		retVal = configuration.getString(module + "." + property, null);
		if (retVal != null) {
			return retVal;
		}
//		if (retVal == null) {
		retVal = configuration.getString(DEFAULT + "." + property, defaultValue);
//		}

		return retVal;

	}

	public static List getInheritedListModuleProblemProperty(PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, List<String> aDefaultValue) {
		if (configuration == null) {
			return aDefaultValue;
		}
		List retVal = configuration.getList(module + "." + problem + "." + aTest + "." + property);

		if (retVal.isEmpty()) {
			retVal = configuration.getList(module + "." + problem + "." + property);
		}

//		List retVal = configuration.getList(module + "." + problem + "."
//				+ property);

		if (retVal.isEmpty()) {
			retVal = configuration.getList(module + "." + property);
		}
		if (retVal.isEmpty()) {
			retVal = configuration.getList(DEFAULT + "." + property);
		}
		if (retVal.isEmpty()) {
			retVal = aDefaultValue;
		}

		return retVal;

	}

	public static String getModule() {
		return module;
	}

	public static void setTest(Class aTest) {
		test = aTest.getSimpleName();
	}

	public static void setModuleProblemAndSuite(Class aSuiteClass) {
		testSuite = aSuiteClass.getSimpleName();
		Package aPackage = aSuiteClass.getPackage();
		String aPackageName = aPackage.getName();
		String[] aPackageComponents = aPackageName.split("\\.");
		if (aPackageComponents.length < 3) {
			System.err.println(aPackageName + " has < 3 components, cannot set module and problem ");
		}
		String aRawModuleName = aPackageComponents[1];
		String aRawProblemName = aPackageComponents[2];
		module = firstCharacterUpperCase(aRawModuleName);
		problem = firstCharacterUpperCase(aRawProblemName);

	}

	public static String firstCharacterUpperCase(String aLowerCaseString) {
		return Character.toUpperCase(aLowerCaseString.charAt(0)) + aLowerCaseString.substring(1);
	}

	public static void setModule(String module) {
		BasicStaticConfigurationUtils.module = module;
	}

	public static String getProblem() {
		return problem;
	}

	public static void setProblem(String problem) {
		BasicStaticConfigurationUtils.problem = problem;
	}

	public static String getTest() {
		return test;
	}

	public static void settest(String newVal) {
		test = newVal;
	}

	public static String getLanguage() {
		if (!isUseProjectConfiguration())
//			return JAVA;
			return BasicLanguageDependencyManager.JAVA_LANGUAGE;

		return getInheritedStringModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module,
				problem, test, LANGUAGE, BasicLanguageDependencyManager.JAVA_LANGUAGE);

	}

	public static String toCompoundProperty(String aParent, String aChild) {
		return aParent + "." + aChild;
	}
}
]]></snapshot>
  </Command>
  <Command __id="11419" _type="FileOpenCommand" date="Sun Aug 25 10:05:28 EDT 2019" docASTNodeCount="52" docActiveCodeLength="549" docExpressionCount="26" docLength="549" projectName="GraderBasics" timestamp="166251679">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicConfigurationManagerSelector.java]]></filePath>
  </Command>
  <Command __id="11428" _type="FileOpenCommand" date="Sun Aug 25 10:05:31 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43155" projectName="GraderBasics" timestamp="166254801">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <Command __id="11432" _type="FileOpenCommand" date="Sun Aug 25 10:05:33 EDT 2019" docASTNodeCount="353" docActiveCodeLength="3032" docExpressionCount="213" docLength="3539" projectName="GraderBasics" timestamp="166256743">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicConfigurationManager.java]]></filePath>
  </Command>
  <Command __id="11436" _type="FileOpenCommand" date="Sun Aug 25 10:05:35 EDT 2019" docASTNodeCount="3151" docActiveCodeLength="24798" docExpressionCount="1781" docLength="43155" projectName="GraderBasics" timestamp="166258424">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
  </Command>
  <DocumentChange __id="11445" _type="Insert" date="Sun Aug 25 10:05:42 EDT 2019" docASTNodeCount="3140" docActiveCodeLength="24706" docExpressionCount="1771" docLength="43157" length="2" offset="39701" timestamp="166265602">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <Command __id="11453" _type="FileOpenCommand" date="Sun Aug 25 10:05:54 EDT 2019" docASTNodeCount="2381" docActiveCodeLength="20765" docExpressionCount="1479" docLength="31053" projectName="GraderBasics" timestamp="166277627">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\ABasicExecutionSpecification.java]]></filePath>
  </Command>
  <Command __id="11465" _type="FileOpenCommand" date="Sun Aug 25 10:06:06 EDT 2019" docASTNodeCount="3140" docActiveCodeLength="24706" docExpressionCount="1771" docLength="43157" projectName="GraderBasics" timestamp="166289356">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicStaticConfigurationUtils.java]]></filePath>
    <snapshot><![CDATA[package grader.basics.config;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.configuration.PropertiesConfiguration;

import grader.basics.BasicLanguageDependencyManager;
import grader.basics.execution.GradingMode;
import grader.basics.project.Project;
import grader.basics.settings.BasicGradingEnvironment;
import util.trace.Tracer;

/**
 * 
 * This serves two purposes. It defines defaults for configurable properties. It
 * also reads project-based properties to be used in localchecks on student
 * computer. Ultimate authority over properties in localchecks mode is
 * ABasicExecution
 *
 */
public class BasicStaticConfigurationUtils {
	public static final String PRIVACY = "privacy";
	public static final String EXECUTION_COMMAND = "execution";

	public static final String LANGUAGE = "language";

	public static final String ENTRY_POINT = "entryPoint";
	public static final String BUILD_FOLDER = "buildFolder";
	public static final String PERMISSIONS = "permissions";

	public static final String CLASS_PATH = "classPath";
	public static final String OE_PATH = "oePath";
	public static final String JUNIT_PATH = "junitPath";
	public static final String LOCAL_GRADER_PATH = "localGraderPath";
	public static final String OE_AND_CLASS_PATH = "oeAndClassPath";
	public static final String CLASS_PATH_SEPARATOR = ":";

	public static final String PROCESS_TEAMS = "processTeams";

	public static final String ENTRY_TAG = "entryTag";
	public static final String ENTRY_TAGS = "entryTags";
	public static final String RESOURCE_RELEASE_TIME = "sleepTime";
	public static final String ARGS = "args";
	public static final String START_TAGS = "startTags";
	public static final String TERMINATING = "terminating";
	public static final String GENERATE_TRACE_FILES = "trace";

//	public static final String JAVA = "Java";

	public static final String CLASS_PATH_VAR = toVariable(CLASS_PATH);
	public static final String CLASS_PATH_SEPARATOR_VAR = toVariable(CLASS_PATH_SEPARATOR);
	public static final String OE_PATH_VAR = toVariable(OE_PATH);
	public static final String LOCAL_GRADER_PATH_VAR = toVariable(LOCAL_GRADER_PATH);

	public static final String JUNIT_PATH_VAR = toVariable(JUNIT_PATH);
	public static final String OE_AND_CLASS_PATH_VAR = toVariable(OE_AND_CLASS_PATH);
	public static final String PERMISSIONS_VAR = toVariable(PERMISSIONS);
	public static final String BUILD_FOLDER_VAR = toVariable(BUILD_FOLDER);
	public static final String IMPLICIT_REQUIRMENTS_ROOT = "implicitRequirementsRoot";
	public static final String DEFAULT_IMPLICIT_REQUIRMENTS_ROOT = "gradingTools";
	public static final String USE_EXECEUTOR = "useExecutor";
	public static final boolean DEFAULT_USE_EXECUTOR = false;
	public static final String EXECUTOR = "executor";
	// this makes no sense, but it is consistent with config file
	public static final String DEFAULT_EXECUTOR = "D:/dewan_backup/Java/Grader/executor";
	public static final String C_OBJ = "language.C.obj";
	public static final String DEFAULT_C_OBJ = "o";
	public static final String MODULES = "modules";
	public static final String DEFAULT_MODULE = "Comp101";
	public static final String FORK_MAIN = "forkMain";
	public static final Boolean DEFAULT_FORK_MAIN = true;
	public static final String GRADABLE_PROJECT_LOCATION = "gradableProjectLocation";
	public static final String SOURCE_LOCATION = "sourceLocation";
	public static final String BINARY_LOCATION = "binaryLocation";
	public static final String OBJECT_LOCATION = "objectLocation";
	public static final String OUTPUT_WAIT_TIME = "outputWaitTime";
	public static final String TEAM_OUTPUT_WAIT_TIME = "teamOutputWaitTime";
	public static final String WAIT_FOR_RESORT = "waitForResort";
	public static final String RESORT_TIME = "resortTime";
	public static final String PROCESS_TIMEOUT = "processTimeout";
	public static final String METHOD_TIMEOUT = "methodTimeout";
	public static final String CONSTRUCTOR_TIMEOUT = "constructorTimeout";
	public static final String USE_METHOD_CONSTRUCTOR_TIMEOUT = "useMethodConstructorTimeout";
	public static final String USE_PROCESS_TIMEOUT = "useProcessTimeout";
	public static final String WAIT_FOR_METHOD_CONSTRUCTOR_AND_PROCESSES = "waitFotMethodConstructorAndProcesses";
	public static final String USE_PROJECT_CONFIGURATION = "useProjectConfiguration";
	public static final boolean DEFAULT_USE_PROJECT_CONFIGURATION = false;

//	private static  List<String> basicCommand;
//	private static Map<String, List<String>> processToBasicCommand = new HashMap();
	private static String duplicatedClassPathSeparator;
	private static List<String> graderProcessTeams;

	private static boolean useProjectConfiguration;
	protected static String module;

	protected static String problem;
	protected static String test;
	protected static String testSuite;
	protected static List<String> emptyList = new ArrayList();

//	Comp533s18.execution = java, -cp, .{:}..{:}{classPath}{:}{oePath}{:}{junitPath}, {entryTags}, {args}

	// public static final String[] DEFAULT_JAVA_BASIC_COMMAND_ARRAY = {
//			"java", "-cp", ".{:}..{:}{classPath}{:}{:}{junitPath}{:}{localGraderPath}", "{entryTags}", "{args}"
//	};
	public static final String[] DEFAULT_JAVA_BASIC_COMMAND_ARRAY = { "java", "-cp",
			".{:}..{:}{classPath}{:}{:}{junitPath}{:}{localGraderPath}", "{entryPoint}", "{args}" };
	public static final String[] DEFAULT_OE_BASIC_COMMAND_ARRAY = { "java", "-cp",
			".{:}..{:}{classPath}{:}{oePath}{:}{junitPath}{:}{localGraderPath}", "{entryTags}", "{args}" };

	public static final List<String> DEFAULT_JAVA_BASIC_COMMAND = Arrays.asList(DEFAULT_JAVA_BASIC_COMMAND_ARRAY);
	public static final List<String> DEFAULT_OE_BASIC_COMMAND = Arrays.asList(DEFAULT_OE_BASIC_COMMAND_ARRAY);
	public static final int DEFAULT_RESOURCE_RELEASE_TIME = 2000;
	public static final int DEFAULT_CONSTRUCTOR_TIME_OUT = 2000;// in
	// milliseconds
	public static final int DEFAULT_METHOD_TIME_OUT = 2000; // in milliseconds
	public static final int DEFAULT_PROCESS_TIME_OUT = 4; // in seconds
	public static final String CHECK_ALL_SPECIFIED_TAGS = "checkAllSpecifiedTags";
	public static final boolean DEFAULT_CHECK_ALL_SPECIFIED_TAGS = false;

	public static String toVariable(String aVariableName) {
		return "{" + aVariableName + "}";
	}

	public static void setBasicCommandToDefaultEntryPointCommand() {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification()
				.setGraderBasicCommand(DEFAULT_JAVA_BASIC_COMMAND);
//		basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
	}

	public static void setBasicCommandToDefaultEntryTagCommand() {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification()
				.setGraderBasicCommand(DEFAULT_OE_BASIC_COMMAND);
//		basicCommand =  DEFAULT_OE_BASIC_COMMAND;
	}

	public static List<String> getBasicCommand() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		if (basicCommand == null) {
//			basicCommand = DEFAULT_OE_BASIC_COMMAND;
//		}
//////		return getInheritedListModuleProblemProperty(EXECUTION_COMMAND);
//		return basicCommand;
	}

	public static boolean hasClassPath() {
//		getBasicCommand();
		return hasClassPath(getBasicCommand());
//		if (basicCommand == null) {
//			return false;
//		}
//		for (String aCommand:basicCommand) {
//			if (aCommand.contains(CLASS_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
//				return true;
//			}
//		}
//		return false;	
	}

	public static boolean hasClassPath(List<String> basicCommand) {
//		getBasicCommand();
		if (basicCommand == null) {
			return false;
		}
		for (String aCommand : basicCommand) {
			if (aCommand.contains(CLASS_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
				return true;
			}
		}
		return false;
	}

	public static boolean hasOEClassPath() {
		return hasOEClassPath(getBasicCommand());
//		getBasicCommand();
//		if (basicCommand == null) {
//			return false;
//		}
//		for (String aCommand:basicCommand) {
//			if (aCommand.contains(OE_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
//				return true;
//			}
//		}
//		return false;	
	}

	public static boolean hasOEClassPath(List<String> basicCommand) {
//		getBasicCommand();
		if (basicCommand == null) {
			return false;
		}
		for (String aCommand : basicCommand) {
			if (aCommand.contains(OE_PATH_VAR) || aCommand.contains(OE_AND_CLASS_PATH_VAR)) {
				return true;
			}
		}
		return false;
	}

	public static boolean hasOEOrClassPath() {
		return hasClassPath(getBasicCommand()) || hasOEClassPath(getBasicCommand());
	}

	public static boolean hasOEOrClassPath(List<String> basicCommand) {
		return hasClassPath(basicCommand) || hasOEClassPath(basicCommand);
	}

	protected static String[] emptyEntryPoints = {};
	protected static String[] potentialMainEntryPoints;

//	public static String[] getPotentialMainEntryPointNames() {
//		String retVal = getInheritedStringModuleProblemProperty(ENTRY_POINT, null);
//		if (retVal != null) {
//			GraderSettingsManager manager = GraderSettingsManagerSelector.getGraderSettingsManager();
//			retVal = manager.replaceModuleProblemVars(retVal);
//			return new String[]{retVal.replaceAll(" ", "")};
//		}
//		return emptyEntryPoints;
//	}
	public static String[] getPotentialMainEntryPointNames() {
		return potentialMainEntryPoints;
//		if (potentialMainEntryPoints == null) {
//		String retVal = getInheritedStringModuleProblemProperty(ENTRY_POINT, null);
//		if (retVal != null) {
//			GraderSettingsManager manager = GraderSettingsManagerSelector.getGraderSettingsManager();
//			retVal = manager.replaceModuleProblemVars(retVal);
//			potentialMainEntryPoints = new String[]{retVal.replaceAll(" ", "")};
//		} else {
//			potentialMainEntryPoints = emptyEntryPoints;
//		}
//		}
//		return potentialMainEntryPoints;
	}

	public static void setPotentialMainEntryPointNames(String[] aNames) {
		potentialMainEntryPoints = aNames;
	}

	// we really do not need this method, for backwards compatibility
	public static List<String> getBasicCommand(String aProcessName) {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand(aProcessName);
//		List<String> retVal = processToBasicCommand.get(aProcessName);
//		if (retVal == null) {
////			retVal = getBasicCommand();
//			retVal = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		}
//		
//		return retVal;

	}

	public static void setBasicCommand(String aProcessName, List<String> aCommand) {
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setGraderBasicCommand(aProcessName,
				aCommand);
//		processToBasicCommand.put(aProcessName, aCommand);

	}

	public static boolean hasEntryPoint(List<String> aCommand) {
		return hasSubString(aCommand, ENTRY_POINT);
	}

	public static boolean hasSubString(List<String> aCommand, String aSubString) {
		for (String aCommmandComponent : aCommand) {
			if (aCommmandComponent.contains(aSubString)) {
				return true;
			}
		}
		return false;
	}

	public static boolean hasEntryTag(List<String> aProcessCommand) {
		return hasSubString(aProcessCommand, ENTRY_TAG);
	}

	public static boolean hasEntryTags(List<String> aProcessCommand) {
		return hasSubString(aProcessCommand, ENTRY_TAGS);
	}

	public static boolean haArgs(String aProcessCommand) {
		return aProcessCommand.contains(ARGS);
	}

//	public static final String FILE_SEPARATOR = System.getProperty("file.separator");
	public static final String FILE_SEPARATOR = "/";

	public static String quotePath(String path) {
		if (!path.contains(" "))
			return path;
		boolean startSlash = path.startsWith("\\") || path.startsWith("/");
		boolean endSlash = path.endsWith("\\") || path.endsWith("/");
		String[] split = path.split("[\\\\/]+");

		StringBuilder quotPath = new StringBuilder(path.length());

		if (startSlash) {
			quotPath.append(FILE_SEPARATOR);
		}

		for (int i = 0; i < split.length; i++) {
			String s = split[i];
			if (s.contains(" ")) {
//	            s = "\"" + s + "\"";
				s = "\\\"" + s + "\\\"";

			}
			quotPath.append(s);
			if (i + 1 < split.length) {
				quotPath.append(FILE_SEPARATOR);
			}
		}

		if (endSlash) {
			quotPath.append(FILE_SEPARATOR);
		}

		return quotPath.toString();
	}

	public static int getClassPathFlagIndex(List<String> aBasicCommand) {
		int aCpIndex = aBasicCommand.indexOf("-cp");
		if (aCpIndex < 0)
			aCpIndex = aBasicCommand.indexOf("-classpath");
		return aCpIndex;
	}

	public static String getExecutionCommandRawClassPath() {
		return getExecutionCommandRawClassPath(getBasicCommand());
//		List<String> aBasicCommand = getBasicCommand();
//		int aCpIndex = getClassPathFlagIndex(aBasicCommand);
//		if (aCpIndex < 0)
//			return null;
//		if (aCpIndex + 1 >= aBasicCommand.size())
//			return null;
//		return getReplacedRawClassPath(aBasicCommand.get(aCpIndex + 1));

	}

	public static String getExecutionCommandRawClassPath(List<String> aBasicCommand) {
//		List<String> aBasicCommand = getBasicCommand();
		int aCpIndex = getClassPathFlagIndex(aBasicCommand);
		if (aCpIndex < 0)
			return null;
		if (aCpIndex + 1 >= aBasicCommand.size())
			return null;
		return getReplacedRawClassPath(aBasicCommand.get(aCpIndex + 1));

	}

	public static String getReplacedRawClassPath(String command) {
		// do we really need all of these ifs, more efficient without them? - debugging
		// will be easier
		// all of these will be in the same command
		if (command.contains(CLASS_PATH_VAR)) {

			command = command.replace(CLASS_PATH_VAR, BasicGradingEnvironment.get().getClassPath());
		}

		if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
			command = command.replace(CLASS_PATH_SEPARATOR_VAR, BasicGradingEnvironment.get().getClassPathSeparator());
		}

		if (command.contains(LOCAL_GRADER_PATH_VAR)) { // the config property does not have this, I suppose it is to
														// allow student code to invoke api calls in grader

			command = command.replace(LOCAL_GRADER_PATH_VAR,
					// BasicGradingEnvironment.get().getClasspath());
					BasicGradingEnvironment.get().getLocalGraderClassPath());

		}
		if (command.contains(OE_PATH_VAR)) {
			if (command.toLowerCase().contains("local")) { // we already have oeall
				command = command.replace(OE_PATH_VAR,
						// BasicGradingEnvironment.get().getClasspath());
						"");
			} else {
				command = command.replace(OE_PATH_VAR,
						// BasicGradingEnvironment.get().getClasspath());
						BasicGradingEnvironment.get().getOEClassPath());
			}

		}

		if (command.contains(JUNIT_PATH_VAR)) {
			command = command.replace(JUNIT_PATH_VAR, BasicGradingEnvironment.get().getJUnitClassPath());
			// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
			// command = command.replace(OE_AND_CLASS_PATH_VAR,
			// BasicGradingEnvironment.get().getClassPath());
		}
		String aClassPathSeparator = BasicGradingEnvironment.get().getClassPathSeparator();
		if (duplicatedClassPathSeparator == null) {
			// just avoding new String creation
			duplicatedClassPathSeparator = aClassPathSeparator + aClassPathSeparator;
		}
		// certain libraries may not exist, specially in the server, see what happens
		// without them
		command = command.replaceAll(duplicatedClassPathSeparator, aClassPathSeparator);
		return command;
		// javac wants no quotes!
//					String anOSPath = BasicGradingEnvironment.get().toOSClassPath(command);
//					return anOSPath;
	}

	public static void replaceClassPathVars(List<String> basicCommand) {
		int aCpIndex = getClassPathFlagIndex(basicCommand);
		if (aCpIndex < 0)
			return;

		if (aCpIndex + 1 >= basicCommand.size()) {
			Tracer.warning("Nothing follows classpath flag");
			return;
		}
		String aReplacement = getReplacedRawClassPath(basicCommand.get(aCpIndex + 1));
		String anOSPath = BasicGradingEnvironment.get().toOSClassPath(aReplacement);
		basicCommand.set(aCpIndex + 1, anOSPath);

//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			
////			// do we really need all of these ifs, more efficient without them? - debugging will be easier
////			// all of these will be in the same command
////			if (command.contains(CLASS_PATH_VAR)) {
////
////				command = command.replace(CLASS_PATH_VAR,
////						BasicGradingEnvironment.get().getClassPath());
////			}
////
////			if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
////				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
////						BasicGradingEnvironment.get().getClassPathSeparator());
////			}
////			if (command.contains(OE_PATH_VAR)) {
////
////				command = command.replace(OE_PATH_VAR,
////				// BasicGradingEnvironment.get().getClasspath());
////						BasicGradingEnvironment.get().getOEClassPath());
////
////			} 
////			if (command.contains(JUNIT_PATH_VAR)) {
////				command = command.replace(JUNIT_PATH_VAR,
////						BasicGradingEnvironment.get().getJUnitClassPath());
////				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
////				// command = command.replace(OE_AND_CLASS_PATH_VAR,
////				// BasicGradingEnvironment.get().getClassPath());
////			} 
//			command = getReplacedClassPath(command);
//			basicCommand.set(aCommandIndex, command);
//		}
	}

//	public static void replacePermissionVariables(List<String> basicCommand, Project aProject) {
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath);
//				basicCommand.set(aCommandIndex, command);
//
//			}
//		}
//	}

	public static void replaceEntryPoint(List<String> basicCommand, String anEntryPoint, String anEntryTagTarget) {
		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {

			String command = basicCommand.get(aCommandIndex);
			if (anEntryPoint != null) {
				command = command.replace(toVariable(ENTRY_POINT), anEntryPoint);

			}
			if (anEntryTagTarget != null) {
				command = command.replace(toVariable(ENTRY_TAGS), anEntryTagTarget);
				command = command.replace(toVariable(ENTRY_TAG), anEntryTagTarget); // will match tags also

			}
			// check if entryTagTarget is empty and replace it with entry point
			basicCommand.set(aCommandIndex, command);
		}
	}

	public static void replaceBuildFolder(List<String> basicCommand, File aBuildFolder) {
		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {

			String command = basicCommand.get(aCommandIndex);
			// we should always have a build folder I suppose
			// this is meant for C like programs
			if (command.contains(BUILD_FOLDER_VAR)) {
				command = command.replace(BUILD_FOLDER_VAR, aBuildFolder.getAbsolutePath());
				basicCommand.set(aCommandIndex, command);

			}
		}
	}

	public static void replaceArgs(List<String> basicCommand, String[] anArgs) {
		int argsIndex = basicCommand.indexOf(toVariable(ARGS));
		if (argsIndex >= 0) {
			basicCommand.remove(argsIndex);
			if (anArgs != null) {
				for (int i = 0; i < anArgs.length; i++) {
					basicCommand.add(argsIndex + i, anArgs[i]);
				}
			}

		}
	}

//	public static String[] getExecutionCommand(Project aProject,
//			String aProcessName, File aBuildFolder, String anEntryPoint,
//			String anEntryTagTarget, String[] anArgs) {
//
//		List<String> basicCommand = null;
//		if (aProcessName == null || aProcessName.isEmpty()) {
//		    if (anEntryPoint != null) {
//		    	basicCommand = getBasicCommand();
////		    	basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
//
//		    } else {
//			basicCommand = getBasicCommand();
//		    }
//		} else {
//		
//			basicCommand = getBasicCommand(aProcessName);
//
//		}
//		return getExecutionCommand(basicCommand, aProject, aProcessName, aBuildFolder, anEntryPoint, anEntryTagTarget, anArgs);
//////		List<String> retVal = new ArrayList(basicCommand.size());
////		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
////		retVal.addAll(basicCommand);
////		replaceClassPathVars(retVal);
//////		replacePermissionVariables(retVal, aProject);
////		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
////		replaceBuildFolder(retVal, aBuildFolder);
////		replaceArgs(retVal, anArgs);
////		return retVal.toArray(new String[0]);
//
//
////		
////		
////		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
////
////			String command = basicCommand.get(aCommandIndex);
////			if (command.contains(CLASS_PATH_VAR)) {
////
////				command = command.replace(CLASS_PATH_VAR,
////						BasicGradingEnvironment.get().getClassPath());
////
////			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
////				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
////						BasicGradingEnvironment.get().getClassPathSeparator());
////			} else if (command.contains(OE_PATH_VAR)) {
////
////				command = command.replace(OE_PATH_VAR,
////				// BasicGradingEnvironment.get().getClasspath());
////						BasicGradingEnvironment.get().getOEClassPath());
////
////			} else if (command.contains(JUNIT_PATH_VAR)) {
////				command = command.replace(JUNIT_PATH_VAR,
////						BasicGradingEnvironment.get().getJUnitClassPath());
////				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
////				// command = command.replace(OE_AND_CLASS_PATH_VAR,
////				// BasicGradingEnvironment.get().getClassPath());
////			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
////
////				String aPolicyFilePath = JavaProjectToPermissionFile
////						.getPermissionFile(aProject).getAbsolutePath();
////				try {
////					aPolicyFilePath = JavaProjectToPermissionFile
////							.getPermissionFile(aProject).getCanonicalPath();
////				} catch (IOException e1) {
////					e1.printStackTrace();
////				}
////				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
////
////				aPolicyFilePath = quotePath(aPolicyFilePath);
////
////				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
////
////				);
////			}
////
////			if (anEntryPoint != null) {
////				command = command
////						.replace(toVariable(ENTRY_POINT), anEntryPoint);
////			}
////			if (anEntryTagTarget != null) {
////				command = command.replace(toVariable(ENTRY_TAGS),
////						anEntryTagTarget);
////				command = command.replace(toVariable(ENTRY_TAG),
////						anEntryTagTarget); // will match tags also
////
////			}
////
////			command = command.replace(toVariable(BUILD_FOLDER),
////					aBuildFolder.getAbsolutePath());
////
////			retVal.add(command);
////		}
////		int argsIndex = retVal.indexOf(toVariable(ARGS));
////		if (argsIndex >= 0) {
////			retVal.remove(argsIndex);
////			for (int i = 0; i < anArgs.length; i++) {
////				retVal.add(argsIndex + i, anArgs[i]);
////			}
////
////		}
////		return retVal.toArray(new String[0]);
//
//	}
	public static String[] getExecutionCommand(Project aProject, String aProcessName, File aBuildFolder,
			String anEntryPoint, String anEntryTagTarget, String[] anArgs) {

		List<String> basicCommand = null;
		if (aProcessName == null || aProcessName.isEmpty()) {
			basicCommand = BasicExecutionSpecificationSelector.getBasicExecutionSpecification().getBasicCommand();
//		    if (anEntryPoint != null) {
//		    	basicCommand = getBasicCommand();
////		    	basicCommand = DEFAULT_JAVA_BASIC_COMMAND;
//
//		    } else {
//			basicCommand = getBasicCommand();
//		    }
		} else {

			basicCommand = getBasicCommand(aProcessName);

		}
		return getExecutionCommand(basicCommand, aProject, aProcessName, aBuildFolder, anEntryPoint, anEntryTagTarget,
				anArgs);
////		List<String> retVal = new ArrayList(basicCommand.size());
//		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
//		retVal.addAll(basicCommand);
//		replaceClassPathVars(retVal);
////		replacePermissionVariables(retVal, aProject);
//		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
//		replaceBuildFolder(retVal, aBuildFolder);
//		replaceArgs(retVal, anArgs);
//		return retVal.toArray(new String[0]);

//		
//		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (command.contains(CLASS_PATH_VAR)) {
//
//				command = command.replace(CLASS_PATH_VAR,
//						BasicGradingEnvironment.get().getClassPath());
//
//			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
//				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
//						BasicGradingEnvironment.get().getClassPathSeparator());
//			} else if (command.contains(OE_PATH_VAR)) {
//
//				command = command.replace(OE_PATH_VAR,
//				// BasicGradingEnvironment.get().getClasspath());
//						BasicGradingEnvironment.get().getOEClassPath());
//
//			} else if (command.contains(JUNIT_PATH_VAR)) {
//				command = command.replace(JUNIT_PATH_VAR,
//						BasicGradingEnvironment.get().getJUnitClassPath());
//				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
//				// command = command.replace(OE_AND_CLASS_PATH_VAR,
//				// BasicGradingEnvironment.get().getClassPath());
//			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
//
//				);
//			}
//
//			if (anEntryPoint != null) {
//				command = command
//						.replace(toVariable(ENTRY_POINT), anEntryPoint);
//			}
//			if (anEntryTagTarget != null) {
//				command = command.replace(toVariable(ENTRY_TAGS),
//						anEntryTagTarget);
//				command = command.replace(toVariable(ENTRY_TAG),
//						anEntryTagTarget); // will match tags also
//
//			}
//
//			command = command.replace(toVariable(BUILD_FOLDER),
//					aBuildFolder.getAbsolutePath());
//
//			retVal.add(command);
//		}
//		int argsIndex = retVal.indexOf(toVariable(ARGS));
//		if (argsIndex >= 0) {
//			retVal.remove(argsIndex);
//			for (int i = 0; i < anArgs.length; i++) {
//				retVal.add(argsIndex + i, anArgs[i]);
//			}
//
//		}
//		return retVal.toArray(new String[0]);

	}

	public static String[] getExecutionCommand(List<String> basicCommand, Project aProject, String aProcessName,
			File aBuildFolder, String anEntryPoint, String anEntryTagTarget, String[] anArgs) {

//		List<String> basicCommand = null;
//		if (aProcessName == null || aProcessName.isEmpty()) {
//		
//			basicCommand = getBasicCommand();
//		} else {
//		
//			basicCommand = getBasicCommand(aProcessName);
//
//		}
//		List<String> retVal = new ArrayList(basicCommand.size());
		List<String> retVal = new ArrayList(basicCommand.size() + 5); // to accommodate args
		retVal.addAll(basicCommand);
		replaceClassPathVars(retVal);
//		replacePermissionVariables(retVal, aProject);
		replaceEntryPoint(retVal, anEntryPoint, anEntryTagTarget);
		replaceBuildFolder(retVal, aBuildFolder);
		replaceArgs(retVal, anArgs);
		return retVal.toArray(new String[0]);

//		
//		
//		for (int aCommandIndex = 0; aCommandIndex < basicCommand.size(); aCommandIndex++) {
//
//			String command = basicCommand.get(aCommandIndex);
//			if (command.contains(CLASS_PATH_VAR)) {
//
//				command = command.replace(CLASS_PATH_VAR,
//						BasicGradingEnvironment.get().getClassPath());
//
//			} else if (command.contains(CLASS_PATH_SEPARATOR_VAR)) {
//				command = command.replace(CLASS_PATH_SEPARATOR_VAR,
//						BasicGradingEnvironment.get().getClassPathSeparator());
//			} else if (command.contains(OE_PATH_VAR)) {
//
//				command = command.replace(OE_PATH_VAR,
//				// BasicGradingEnvironment.get().getClasspath());
//						BasicGradingEnvironment.get().getOEClassPath());
//
//			} else if (command.contains(JUNIT_PATH_VAR)) {
//				command = command.replace(JUNIT_PATH_VAR,
//						BasicGradingEnvironment.get().getJUnitClassPath());
//				// } else if (command.contains(OE_AND_CLASS_PATH_VAR)) {
//				// command = command.replace(OE_AND_CLASS_PATH_VAR,
//				// BasicGradingEnvironment.get().getClassPath());
//			} else if (doPermissions && command.contains(PERMISSIONS_VAR)) {
//
//				String aPolicyFilePath = JavaProjectToPermissionFile
//						.getPermissionFile(aProject).getAbsolutePath();
//				try {
//					aPolicyFilePath = JavaProjectToPermissionFile
//							.getPermissionFile(aProject).getCanonicalPath();
//				} catch (IOException e1) {
//					e1.printStackTrace();
//				}
//				aPolicyFilePath = aPolicyFilePath.replace("\\", "/");
//
//				aPolicyFilePath = quotePath(aPolicyFilePath);
//
//				command = command.replace(PERMISSIONS_VAR, aPolicyFilePath
//
//				);
//			}
//
//			if (anEntryPoint != null) {
//				command = command
//						.replace(toVariable(ENTRY_POINT), anEntryPoint);
//			}
//			if (anEntryTagTarget != null) {
//				command = command.replace(toVariable(ENTRY_TAGS),
//						anEntryTagTarget);
//				command = command.replace(toVariable(ENTRY_TAG),
//						anEntryTagTarget); // will match tags also
//
//			}
//
//			command = command.replace(toVariable(BUILD_FOLDER),
//					aBuildFolder.getAbsolutePath());
//
//			retVal.add(command);
//		}
//		int argsIndex = retVal.indexOf(toVariable(ARGS));
//		if (argsIndex >= 0) {
//			retVal.remove(argsIndex);
//			for (int i = 0; i < anArgs.length; i++) {
//				retVal.add(argsIndex + i, anArgs[i]);
//			}
//
//		}
//		return retVal.toArray(new String[0]);

	}

	public static List<String> getProcessTeams() {
		return graderProcessTeams;
	}

	public static void setProcessTeams(List<String> newVal) {
		graderProcessTeams = newVal;
		;
	}

	public static boolean isTeamProcess() {
		return graderProcessTeams != null && graderProcessTeams.isEmpty();
	}

	public static boolean isUseProjectConfiguration() {
		return BasicExecutionSpecificationSelector.getBasicExecutionSpecification().isUseProjectConfiguration();
//		return useProjectConfiguration;
	}

	public static void setUseProjectConfiguration(boolean newVal) {
//		BasicStaticConfigurationUtils.useProjectConfiguration = useProjectConfiguration;
		BasicExecutionSpecificationSelector.getBasicExecutionSpecification().setUseProjectConfiguration(newVal);
	}

	public static Boolean getInheritedBooleanModuleProblemProperty(PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, Boolean defaultValue) {
		if (configuration == null) {
			return defaultValue;
		}

		Boolean retVal = configuration.getBoolean(module + "." + problem + "." + property, null);

		if (retVal == null) {
			retVal = configuration.getBoolean(module + "." + property, null);
		}
		if (retVal == null) {
			retVal = configuration.getBoolean(DEFAULT + "." + property, defaultValue);
		}

		return retVal;

	}

	public static final String DEFAULT = "default";

	public static Integer getInheritedIntegerModuleProblemProperty(PropertiesConfiguration configuration, String module,
			String problem, String test, String property, Integer defaultValue) {
		if (configuration == null) {
			return defaultValue;
		}

		Integer retVal = configuration.getInteger(module + "." + problem + "." + property, null);

		if (retVal == null) {
			retVal = configuration.getInteger(module + "." + property, null);
		}
		if (retVal == null) {
			retVal = configuration.getInteger(DEFAULT + "." + property, defaultValue);
		}

		return retVal;

	}

	public static String getConfigurationBasicDirectString(String property, String defaultValue) {

		if (!isUseProjectConfiguration()) {
			// cannot use project configuration before location is known to create project
			return defaultValue;
		}
		PropertiesConfiguration aConfiguration = BasicConfigurationManagerSelector.getConfigurationManager()
				.getOrCreateProjectConfiguration();
		if (aConfiguration == null) {
			return defaultValue;
		}
		return aConfiguration.getString(property, defaultValue);

	}

	public static List getConfigurationBasicDirectList(String property, List defaultValue) {

		if (property == BasicStaticConfigurationUtils.MODULES || // infinite recursion
				!isUseProjectConfiguration()) {
			// cannot use project configuration before location is known to create project
			return defaultValue;
		}
		PropertiesConfiguration aConfiguration = BasicConfigurationManagerSelector.getConfigurationManager()
				.getOrCreateProjectConfiguration();
		if (aConfiguration == null) {
			return defaultValue;
		}
		List retVal = aConfiguration.getList(property);
		if (retVal == null) {
			return defaultValue;
		}
		return retVal;

	}

//	public static String getBasicInheritedStringModuleProblemProperty(String property, String defaultValue) {
//		if (
//		// cannot use project configuration before location is known to create project
//		property == BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION || // can do == as we are using named
//																				// constants
//				!isUseProjectConfiguration()) {
////			property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION){ 
//			return defaultValue;
//		}
//
//		return getInheritedStringModuleProblemProperty(
//				BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module,
//				problem, test, property, defaultValue);
//	}
	/**
	 * Maybe we should also have static configuration
	 * 
	 */
	public static String getBasicInheritedStringModuleProblemProperty(String property, String defaultValue) {
		String retVal = null;
		if (
		// cannot use project configuration before location is known to create project
		property != BasicStaticConfigurationUtils.GRADABLE_PROJECT_LOCATION && // can do == as we are using named
																				// constants
				isUseProjectConfiguration()) {
			retVal =
		 getInheritedStringModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module,
				problem, test, property, null);
			if (retVal != null) {
				return retVal;
			}
		}
		return getInheritedStringModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration(), module,
				problem, test, property, defaultValue);
	}

	public static PropertiesConfiguration maybeGetLocalCourseConfguration() {
		if (GradingMode.getGraderRun()) {
			return null;
		}
		return BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration();

	}

	public static Boolean getBasicInheritedBooleanModuleProblemProperty(String property, Boolean defaultValue) {
		Boolean retVal = null;
//		if (
//			property == BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION || // avoiding recursion
//			!isUseProjectConfiguration() ) {			  
//			return defaultValue;
//		}
//	 return getInheritedBooleanModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
		if (property != BasicStaticConfigurationUtils.USE_PROJECT_CONFIGURATION && // avoiding recursion
				isUseProjectConfiguration()) {

			retVal = getInheritedBooleanModuleProblemProperty(
					BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(),
					module, problem, test, property, null);

			if (retVal != null) {
				return retVal;
			}
		}
		return getInheritedBooleanModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration(), module, problem,
				test, property, defaultValue);

	}

//	public static Integer getBasicInheritedIntegerModuleProblemProperty(
//			String property, Integer defaultValue) {
//		if (!isUseProjectConfiguration()) {
//			return defaultValue;
//		}
//
//	 return getInheritedIntegerModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
//	}
	public static Integer getBasicInheritedIntegerModuleProblemProperty(String property, Integer defaultValue) {
		Integer retVal = null;
		if (isUseProjectConfiguration()) {
			retVal = getInheritedIntegerModuleProblemProperty(
					BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(),
					module, problem, test, property, null);
			if (retVal != null) {
				return retVal;
			}
		}
		return getInheritedIntegerModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration(), module, problem,
				test, property, defaultValue);

	}

//	public static List getBasicInheritedListModuleProblemProperty(
//			String property, List defaultValue) {
//		if (!isUseProjectConfiguration() ) { // can do == as we are using named constants
//			return defaultValue;
//		}
//
//	 return getInheritedListModuleProblemProperty(BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module, problem, test, property, defaultValue);
//	}
	public static List getBasicInheritedListModuleProblemProperty(String property, List defaultValue) {
		List retVal = null;
		if (isUseProjectConfiguration()) { // can do == as we are using named constants
			retVal = getInheritedListModuleProblemProperty(
					BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(),
					module, problem, test, property, null);
			if (retVal != null) {
				return retVal;
			}
		}
		return getInheritedListModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getCourseConfiguration(), module, problem,
				test, property, defaultValue);
		
	}

	public static String getInheritedStringModuleProblemProperty(PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, String defaultValue) {
		if (configuration == null) {
//			System.err.println("Null configuration, returning " + defaultValue + " for " + property);
			return defaultValue;
		}
		String retVal = configuration.getString(module + "." + problem + "." + aTest + "." + property, null);
		if (retVal != null) {
			return retVal;
		}
		retVal = configuration.getString(module + "." + problem + "." + property, null);

//		String retVal = configuration.getString(module + "." + problem + "."
//				+ property, null);
		if (retVal != null) {
			return retVal;
		}
		retVal = configuration.getString(module + "." + property, null);
		if (retVal != null) {
			return retVal;
		}
//		if (retVal == null) {
		retVal = configuration.getString(DEFAULT + "." + property, defaultValue);
//		}

		return retVal;

	}

	public static List getInheritedListModuleProblemProperty(PropertiesConfiguration configuration, String module,
			String problem, String aTest, String property, List<String> aDefaultValue) {
		if (configuration == null) {
			return aDefaultValue;
		}
		List retVal = configuration.getList(module + "." + problem + "." + aTest + "." + property);

		if (retVal.isEmpty()) {
			retVal = configuration.getList(module + "." + problem + "." + property);
		}

//		List retVal = configuration.getList(module + "." + problem + "."
//				+ property);

		if (retVal.isEmpty()) {
			retVal = configuration.getList(module + "." + property);
		}
		if (retVal.isEmpty()) {
			retVal = configuration.getList(DEFAULT + "." + property);
		}
		if (retVal.isEmpty()) {
			retVal = aDefaultValue;
		}

		return retVal;

	}

	public static String getModule() {
		return module;
	}

	public static void setTest(Class aTest) {
		test = aTest.getSimpleName();
	}

	public static void setModuleProblemAndSuite(Class aSuiteClass) {
		testSuite = aSuiteClass.getSimpleName();
		Package aPackage = aSuiteClass.getPackage();
		String aPackageName = aPackage.getName();
		String[] aPackageComponents = aPackageName.split("\\.");
		if (aPackageComponents.length < 3) {
			System.err.println(aPackageName + " has < 3 components, cannot set module and problem ");
		}
		String aRawModuleName = aPackageComponents[1];
		String aRawProblemName = aPackageComponents[2];
		module = firstCharacterUpperCase(aRawModuleName);
		problem = firstCharacterUpperCase(aRawProblemName);

	}

	public static String firstCharacterUpperCase(String aLowerCaseString) {
		return Character.toUpperCase(aLowerCaseString.charAt(0)) + aLowerCaseString.substring(1);
	}

	public static void setModule(String module) {
		BasicStaticConfigurationUtils.module = module;
	}

	public static String getProblem() {
		return problem;
	}

	public static void setProblem(String problem) {
		BasicStaticConfigurationUtils.problem = problem;
	}

	public static String getTest() {
		return test;
	}

	public static void settest(String newVal) {
		test = newVal;
	}

	public static String getLanguage() {
		if (!isUseProjectConfiguration())
//			return JAVA;
			return BasicLanguageDependencyManager.JAVA_LANGUAGE;

		return getInheritedStringModuleProblemProperty(
				BasicConfigurationManagerSelector.getConfigurationManager().getOrCreateProjectConfiguration(), module,
				problem, test, LANGUAGE, BasicLanguageDependencyManager.JAVA_LANGUAGE);

	}

	public static String toCompoundProperty(String aParent, String aChild) {
		return aParent + "." + aChild;
	}
}
]]></snapshot>
  </Command>
  <Command __id="11477" _type="FileOpenCommand" date="Sun Aug 25 10:06:17 EDT 2019" docASTNodeCount="52" docActiveCodeLength="549" docExpressionCount="26" docLength="549" projectName="GraderBasics" timestamp="166300203">
    <filePath><![CDATA[D:\dewan_backup\Java\GraderBasics\src\grader\basics\config\BasicConfigurationManagerSelector.java]]></filePath>
  </Command>
  <Command __id="11470" _type="RunCommand" date="Sun Aug 25 10:06:09 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166292295" type="Run" />
  <Command __id="11471" _type="EHExceptionCommand" date="Sun Aug 25 10:06:09 EDT 2019" timestamp="166292512" type="Exception">
    <outputString><![CDATA[Null configuration, returning null for binaryLocation
Null configuration, returning null for objectLocation
]]></outputString>
  </Command>
  <Command __id="11472" _type="RunCommand" date="Sun Aug 25 10:06:10 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166293099" type="Run" />
  <Command __id="11473" _type="RunCommand" date="Sun Aug 25 10:06:10 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166293101" type="Run" />
  <Command __id="11474" _type="RunCommand" date="Sun Aug 25 10:06:10 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166293102" type="Run" />
  <Command __id="11475" _type="RunCommand" date="Sun Aug 25 10:06:10 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166293103" type="Run" />
  <Command __id="11476" _type="EHExceptionCommand" date="Sun Aug 25 10:06:10 EDT 2019" timestamp="166293503" type="Exception">
    <outputString><![CDATA[ObjectEditor(Version 22, built on Thu Dec 06 16:26:09 EST 2018). Copyright Prasun Dewan, 2012, All rights reserved. US Patent Appl. No.: 12/532,327
]]></outputString>
  </Command>
  <Command __id="11478" _type="MoveCaretCommand" caretOffset="317" date="Sun Aug 25 10:06:17 EDT 2019" docOffset="317" timestamp="166300320" />
  <Command __id="11479" _type="ShellCommand" date="Sun Aug 25 10:06:25 EDT 2019" timestamp="166308938" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="11480" _type="ShellCommand" date="Sun Aug 25 10:06:29 EDT 2019" timestamp="166312402" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="11481" _type="EHExceptionCommand" date="Sun Aug 25 10:06:29 EDT 2019" timestamp="166312437" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### gradingTools.comp524f19.assignment1.testcases.PromptTestCase: 1.0
]]></outputString>
  </Command>
  <Command __id="11483" _type="MoveCaretCommand" caretOffset="38485" date="Sun Aug 25 10:06:29 EDT 2019" docOffset="38936" timestamp="166312852" />
  <Command __id="11484" _type="MoveCaretCommand" caretOffset="38638" date="Sun Aug 25 10:06:31 EDT 2019" docOffset="39089" timestamp="166314765" />
  <Command __id="11485" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 10:06:32 EDT 2019" timestamp="166315924" />
  <Command __id="11486" _type="RunCommand" date="Sun Aug 25 10:06:32 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166315924" type="Run" />
  <Command __id="11487" _type="EHExceptionCommand" date="Sun Aug 25 10:06:32 EDT 2019" timestamp="166316033" type="Exception">
    <outputString><![CDATA[Null configuration, returning null for entryPoint
]]></outputString>
  </Command>
  <Command __id="11488" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 10:06:35 EDT 2019" timestamp="166318548" />
  <Command __id="11489" _type="RunCommand" date="Sun Aug 25 10:06:35 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166318548" type="Run" />
  <Command __id="11490" _type="RunCommand" date="Sun Aug 25 10:06:35 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166318561" type="Run" />
  <Command __id="11491" _type="RunCommand" date="Sun Aug 25 10:06:35 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166318593" type="Run" />
  <Command __id="11492" _type="RunCommand" date="Sun Aug 25 10:06:35 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166318594" type="Run" />
  <Command __id="11493" _type="EHExceptionCommand" date="Sun Aug 25 10:06:35 EDT 2019" timestamp="166318683" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) 1566741995516:Received output from main: Please input an integer
I***(BasicRunningProject) 1566741995517:Processing line from main: Please input an integer
I***(ARunnerInputStreamProcessor) Provided Input:
Premature end of file before int was input, exiting
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
]]></outputString>
  </Command>
  <Command __id="11494" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 10:06:37 EDT 2019" timestamp="166320305" />
  <Command __id="11495" _type="RunCommand" date="Sun Aug 25 10:06:37 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166320305" type="Run" />
  <Command __id="11520" _type="RunCommand" date="Sun Aug 25 10:06:55 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166338204" type="Run" />
  <Command __id="11521" _type="PredictionCommand" date="Sun Aug 25 10:06:55 EDT 2019" prediction_type="MakingProgress" timestamp="166338211" />
  <Command __id="11522" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:03 EDT 2019" timestamp="166346354" />
  <Command __id="11523" _type="RunCommand" date="Sun Aug 25 10:07:03 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166346365" type="Run" />
  <Command __id="11524" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:04 EDT 2019" timestamp="166347953" />
  <Command __id="11525" _type="RunCommand" date="Sun Aug 25 10:07:04 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166347962" type="Run" />
  <Command __id="11526" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 10:07:08 EDT 2019" timestamp="166351971" />
  <Command __id="11527" _type="RunCommand" date="Sun Aug 25 10:07:08 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166351979" type="Run" />
  <Command __id="11528" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepInto" date="Sun Aug 25 10:07:09 EDT 2019" timestamp="166352589" />
  <Command __id="11529" _type="RunCommand" date="Sun Aug 25 10:07:09 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166352592" type="Run" />
  <Command __id="11530" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:11 EDT 2019" timestamp="166354378" />
  <Command __id="11531" _type="RunCommand" date="Sun Aug 25 10:07:11 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166354388" type="Run" />
  <Command __id="11532" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:13 EDT 2019" timestamp="166356697" />
  <Command __id="11533" _type="RunCommand" date="Sun Aug 25 10:07:13 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166356706" type="Run" />
  <Command __id="11534" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:14 EDT 2019" timestamp="166357230" />
  <Command __id="11535" _type="RunCommand" date="Sun Aug 25 10:07:14 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166357239" type="Run" />
  <Command __id="11536" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:14 EDT 2019" timestamp="166357746" />
  <Command __id="11537" _type="RunCommand" date="Sun Aug 25 10:07:14 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166357756" type="Run" />
  <Command __id="11538" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:15 EDT 2019" timestamp="166358300" />
  <Command __id="11539" _type="RunCommand" date="Sun Aug 25 10:07:15 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166358309" type="Run" />
  <Command __id="11540" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:15 EDT 2019" timestamp="166358826" />
  <Command __id="11541" _type="RunCommand" date="Sun Aug 25 10:07:15 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166358837" type="Run" />
  <Command __id="11542" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:16 EDT 2019" timestamp="166359783" />
  <Command __id="11543" _type="RunCommand" date="Sun Aug 25 10:07:16 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166359792" type="Run" />
  <Command __id="11598" _type="RunCommand" date="Sun Aug 25 10:07:54 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166397122" type="Run" />
  <Command __id="11600" _type="MoveCaretCommand" caretOffset="8744" date="Sun Aug 25 10:07:54 EDT 2019" docOffset="8744" timestamp="166397514" />
  <Command __id="11601" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 10:07:55 EDT 2019" timestamp="166398196" />
  <Command __id="11602" _type="RunCommand" date="Sun Aug 25 10:07:55 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166398204" type="Run" />
  <Command __id="11603" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:57 EDT 2019" timestamp="166400918" />
  <Command __id="11604" _type="RunCommand" date="Sun Aug 25 10:07:57 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166400929" type="Run" />
  <Command __id="11605" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:58 EDT 2019" timestamp="166401387" />
  <Command __id="11606" _type="RunCommand" date="Sun Aug 25 10:07:58 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166401398" type="Run" />
  <Command __id="11607" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:58 EDT 2019" timestamp="166401852" />
  <Command __id="11608" _type="RunCommand" date="Sun Aug 25 10:07:58 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166401863" type="Run" />
  <Command __id="11609" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:07:59 EDT 2019" timestamp="166402389" />
  <Command __id="11610" _type="RunCommand" date="Sun Aug 25 10:07:59 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166402399" type="Run" />
  <Command __id="11611" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:08:00 EDT 2019" timestamp="166403097" />
  <Command __id="11612" _type="RunCommand" date="Sun Aug 25 10:08:00 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166403100" type="Run" />
  <Command __id="11613" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Sun Aug 25 10:08:00 EDT 2019" timestamp="166403732" />
  <Command __id="11614" _type="RunCommand" date="Sun Aug 25 10:08:00 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166403742" type="Run" />
  <Command __id="11615" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepReturn" date="Sun Aug 25 10:08:02 EDT 2019" timestamp="166405127" />
  <Command __id="11616" _type="RunCommand" date="Sun Aug 25 10:08:02 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166405130" type="Run" />
  <Command __id="11617" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.Resume" date="Sun Aug 25 10:08:03 EDT 2019" timestamp="166406607" />
  <Command __id="11618" _type="RunCommand" date="Sun Aug 25 10:08:03 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166406608" type="Run" />
  <Command __id="11619" _type="RunCommand" date="Sun Aug 25 10:08:03 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166406614" type="Run" />
  <Command __id="11620" _type="RunCommand" date="Sun Aug 25 10:08:03 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166406618" type="Run" />
  <Command __id="11621" _type="RunCommand" date="Sun Aug 25 10:08:03 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166406619" type="Run" />
  <Command __id="11622" _type="EHExceptionCommand" date="Sun Aug 25 10:08:03 EDT 2019" timestamp="166406712" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:1.4
I***(BasicRunningProject) 1566742083562:Received output from main: Please input an integer
I***(BasicRunningProject) 1566742083563:Processing line from main: Please input an integer
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) 1566742083563:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566742083563:Processing line from main: Please input a decimal
I***(BasicRunningProject) 1566742083564:Received output from main: The int addition:1
I***(BasicRunningProject) 1566742083564:Processing line from main: The int addition:1
I***(BasicRunningProject) 1566742083564:Received output from main: The double addition:1.400000
I***(BasicRunningProject) 1566742083564:Processing line from main: The double addition:1.400000
I***(BasicRunningProject) 1566742083564:Received output from main: The int multiplication:0
I***(BasicRunningProject) 1566742083565:Processing line from main: The int multiplication:0
I***(BasicRunningProject) 1566742083565:Received output from main: The double multiplication:0.400000
I***(BasicRunningProject) 1566742083565:Processing line from main: The double multiplication:0.400000
]]></outputString>
  </Command>
  <Command __id="11677" _type="RunCommand" date="Sun Aug 25 10:08:33 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166436970" type="Run" />
  <Command __id="11678" _type="EHExceptionCommand" date="Sun Aug 25 10:08:33 EDT 2019" timestamp="166437022" type="Exception">
    <outputString><![CDATA[I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="11679" _type="RunCommand" date="Sun Aug 25 10:08:35 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166438999" type="Run" />
  <Command __id="11680" _type="RunCommand" date="Sun Aug 25 10:08:35 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166439003" type="Run" />
  <Command __id="11681" _type="RunCommand" date="Sun Aug 25 10:08:35 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166439005" type="Run" />
  <Command __id="11682" _type="EHExceptionCommand" date="Sun Aug 25 10:08:35 EDT 2019" timestamp="166439023" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 0.0
I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### gradingTools.comp524f19.assignment1.testcases.IncrementalInputPromptTestCase: 1.0
Null configuration, returning null for entryPoint
I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
]]></outputString>
  </Command>
  <Command __id="11683" _type="EHExceptionCommand" date="Sun Aug 25 10:08:36 EDT 2019" timestamp="166439094" type="Exception">
    <outputString><![CDATA[I***(BasicRunningProject) 1566742115947:Received output from main: Please input an integer
I***(BasicRunningProject) 1566742115947:Processing line from main: Please input an integer
main output:Please input an integer

Found int prompt true
I***(BasicRunningProject) New input 1for main
I***(ARunnerInputStreamProcessor) Provided Input:1

I***(BasicRunningProject) 1566742115949:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566742115949:Processing line from main: Please input a decimal
main output:Please input a decimal

Found double prompt true
I***(BasicRunningProject) New input 1.4for main
I***(ARunnerInputStreamProcessor) Provided Input:1.4

I***(BasicRunningProject) 1566742115950:Received output from main: The int addition:2
I***(BasicRunningProject) 1566742115950:Processing line from main: The int addition:2
I***(BasicRunningProject) 1566742115950:Received output from main: The double addition:2.400000
I***(BasicRunningProject) 1566742115950:Processing line from main: The double addition:2.400000
I***(BasicRunningProject) 1566742115951:Received output from main: The int multiplication:1
I***(BasicRunningProject) 1566742115951:Processing line from main: The int multiplication:1
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) 1566742115951:Received output from main: The double multiplication:1.400000
I***(BasicRunningProject) 1566742115951:Processing line from main: The double multiplication:1.400000
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="11684" _type="EHExceptionCommand" date="Sun Aug 25 10:08:38 EDT 2019" timestamp="166441083" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### PromptSuite: 1.0
]]></outputString>
  </Command>
  <Command __id="11685" _type="RunCommand" date="Sun Aug 25 10:08:41 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166444173" type="Debug" />
  <Command __id="11686" _type="RunCommand" date="Sun Aug 25 10:08:41 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166444173" type="Debug" />
  <Command __id="11687" _type="RunCommand" date="Sun Aug 25 10:08:41 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="166444173" type="Run" />
  <Command __id="11688" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.DebugLast" date="Sun Aug 25 10:08:43 EDT 2019" timestamp="166446770" />
  <Command __id="11689" _type="EclipseCommand" commandID="" date="Sun Aug 25 10:08:43 EDT 2019" repeat="6" timestamp="166446929" timestamp2="166447035" />
  <Command __id="11695" _type="RunCommand" date="Sun Aug 25 10:08:44 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="166447151" type="Run" />
  <Command __id="11696" _type="RunCommand" date="Sun Aug 25 10:08:44 EDT 2019" kind="HitBreakPoint" projectName="PL_Java" timestamp="166447151" type="Run" />
  <Command __id="11697" _type="RunCommand" date="Sun Aug 25 10:08:44 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166447357" type="Run" />
  <Command __id="11698" _type="RunCommand" date="Sun Aug 25 10:08:44 EDT 2019" kind="StepInto" projectName="(Unknown)" timestamp="166447441" type="Run" />
  <Command __id="11699" _type="RunCommand" date="Sun Aug 25 10:08:44 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166447600" type="Run" />
  <Command __id="11700" _type="EHExceptionCommand" date="Sun Aug 25 10:08:44 EDT 2019" timestamp="166447737" type="Exception">
    <outputString><![CDATA[I***Tracer: showInfo = true
Buffer traced nessages =false
]]></outputString>
  </Command>
  <Command __id="11701" _type="EHExceptionCommand" date="Sun Aug 25 10:08:44 EDT 2019" timestamp="166447947" type="Exception">
    <outputString><![CDATA[W***./config/course.properties does not exist, using defaults
]]></outputString>
  </Command>
  <Command __id="11702" _type="RunCommand" date="Sun Aug 25 10:08:45 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166448506" type="Run" />
  <Command __id="11703" _type="RunCommand" date="Sun Aug 25 10:08:45 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166448507" type="Run" />
  <Command __id="11704" _type="RunCommand" date="Sun Aug 25 10:08:45 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166448508" type="Run" />
  <Command __id="11705" _type="RunCommand" date="Sun Aug 25 10:08:45 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166448509" type="Run" />
  <Command __id="11706" _type="EHExceptionCommand" date="Sun Aug 25 10:08:45 EDT 2019" timestamp="166448884" type="Exception">
    <outputString><![CDATA[ObjectEditor(Version 22, built on Thu Dec 06 16:26:09 EST 2018). Copyright Prasun Dewan, 2012, All rights reserved. US Patent Appl. No.: 12/532,327
]]></outputString>
  </Command>
  <Command __id="11707" _type="ShellCommand" date="Sun Aug 25 10:08:46 EDT 2019" timestamp="166449740" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="11708" _type="EHExceptionCommand" date="Sun Aug 25 10:09:10 EDT 2019" timestamp="166473712" type="Exception">
    <outputString><![CDATA[W*** Received notification(s) for unknown (possibly invisible or unrecognized atomic-shape) property: TestRunStarted of object: PromptSuite[25.0 pts](grader.basics.junit.AGradableJUnitSuite@1c807b1d). Ignoring notification.
I***(TestCaseResult) ### gradingTools.comp524f19.assignment1.testcases.PromptTestCase: 1.0
]]></outputString>
  </Command>
  <Command __id="11709" _type="RunCommand" date="Sun Aug 25 10:09:10 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166473752" type="Run" />
  <Command __id="11710" _type="RunCommand" date="Sun Aug 25 10:09:10 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166473785" type="Run" />
  <Command __id="11711" _type="RunCommand" date="Sun Aug 25 10:09:10 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166473787" type="Run" />
  <Command __id="11712" _type="EHExceptionCommand" date="Sun Aug 25 10:09:10 EDT 2019" timestamp="166473838" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:
I***(BasicRunningProject) 1566742150712:Received output from main: Please input an integer
Premature end of file before int was input, exiting
I***(BasicRunningProject) 1566742150715:Processing line from main: Please input an integer
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="11713" _type="RunCommand" date="Sun Aug 25 10:09:12 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166475798" type="Run" />
  <Command __id="11714" _type="RunCommand" date="Sun Aug 25 10:09:12 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166475810" type="Run" />
  <Command __id="11715" _type="RunCommand" date="Sun Aug 25 10:09:12 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166475815" type="Run" />
  <Command __id="11716" _type="EHExceptionCommand" date="Sun Aug 25 10:09:12 EDT 2019" timestamp="166475885" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:1
I***(BasicRunningProject) 1566742152766:Received output from main: Please input an integer
I***(BasicRunningProject) 1566742152766:Processing line from main: Please input an integer
I***(BasicRunningProject) 1566742152766:Received output from main: Please input a decimalPremature end of file before decimal was input, exiting

I***(BasicRunningProject) 1566742152767:Processing line from main: Please input a decimal
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="11717" _type="RunCommand" date="Sun Aug 25 10:09:14 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166477849" type="Run" />
  <Command __id="11718" _type="RunCommand" date="Sun Aug 25 10:09:14 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166477860" type="Run" />
  <Command __id="11719" _type="RunCommand" date="Sun Aug 25 10:09:14 EDT 2019" kind="HitBreakPoint" projectName="(Unknown)" timestamp="166477863" type="Run" />
  <Command __id="11720" _type="EHExceptionCommand" date="Sun Aug 25 10:09:14 EDT 2019" timestamp="166477950" type="Exception">
    <outputString><![CDATA[I***(BasicProcessRunner) Running command:D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe
I***(BasicProcessRunner) Running in folder: D:\dewan_backup\Java\eclipse\test-c\Debug
I***(BasicProcessRunner)  Process started: D:\dewan_backup\Java\eclipse\test-c\Debug\test-c.exe folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(ARunnerInputStreamProcessor) Provided Input:1.4
I***(BasicRunningProject) 1566742154810:Received output from main: Please input an integer
I***(BasicRunningProject) 1566742154810:Processing line from main: Please input an integer
I***(BasicRunningProject) 1566742154810:Received output from main: Please input a decimal
I***(BasicRunningProject) 1566742154811:Processing line from main: Please input a decimal
I***(BasicRunningProject) 1566742154811:Received output from main: The int addition:1
I***(BasicRunningProject) 1566742154811:Processing line from main: The int addition:1
I***(BasicRunningProject) 1566742154811:Received output from main: The double addition:1.400000
I***(BasicProcessRunner)  Process finished; folder: D:\dewan_backup\Java\eclipse\test-c\Debug entry point: null class path: D:\dewan_backup\Java\PLTeaching\PL_Java\bin;D:\dewan_backup\Java\Comp524LocalChecks\target\classes;D:\dewan_backup\Java\GraderBasics\target\classes;D:\dewan_backup\Java\lib\oeall22.jar;C:\Users\dewan\.p2\pool\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\dewan\.p2\pool\plugins\org.hamcrest.core_1.3.0.v20180420-1519.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-configuration-1.9.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-lang-2.6.jar;D:\dewan_backup\Java\GraderBasics\lib\commons-logging-1.1.1.jar;G:\My Drive\Java\lib\Herrmes\lib\weka3_6.jar
I***(BasicRunningProject) 1566742154811:Processing line from main: The double addition:1.400000
I***(BasicRunningProject) 1566742154811:Received output from main: The int multiplication:0
I***(BasicRunningProject) 1566742154811:Processing line from main: The int multiplication:0
I***(BasicRunningProject) 1566742154812:Received output from main: The double multiplication:0.400000
I***(BasicRunningProject) 1566742154812:Processing line from main: The double multiplication:0.400000
I***(BasicRunningProject) Thread[AWT-EventQueue-0,6,main] sleeping for ms:2000 waiting for pending output from threads 
]]></outputString>
  </Command>
  <Command __id="11721" _type="EHExceptionCommand" date="Sun Aug 25 10:09:16 EDT 2019" timestamp="166479993" type="Exception">
    <outputString><![CDATA[I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 0.0
I***(TestCaseResult) ### anonymous: 1.0
I***(TestCaseResult) ### anonymous: 1.0
]]></outputString>
  </Command>
  <Command __id="11722" _type="ShellCommand" date="Sun Aug 25 10:09:19 EDT 2019" timestamp="166482837" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="11723" _type="MoveCaretCommand" caretOffset="3520" date="Sun Aug 25 10:09:19 EDT 2019" docOffset="3520" timestamp="166482938" />
  <Command __id="11724" _type="ShellCommand" date="Sun Aug 25 10:09:30 EDT 2019" timestamp="166493192" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="11725" _type="ShellCommand" date="Sun Aug 25 10:09:31 EDT 2019" timestamp="166494367" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="11726" _type="CopyCommand" date="Sun Aug 25 10:09:37 EDT 2019" timestamp="166500784" />
  <Command __id="11727" _type="ShellCommand" date="Sun Aug 25 10:09:41 EDT 2019" timestamp="166504140" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="11728" _type="ShellCommand" date="Sun Aug 25 10:09:45 EDT 2019" timestamp="166509006" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="11729" _type="EclipseCommand" commandID="org.eclipse.search.ui.openFileSearchPage" date="Sun Aug 25 10:09:45 EDT 2019" timestamp="166509022" />
  <Command __id="11730" _type="ShellCommand" date="Sun Aug 25 10:09:51 EDT 2019" timestamp="166514110" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="11731" _type="PasteCommand" date="Sun Aug 25 10:09:54 EDT 2019" timestamp="166517088" />
  <Command __id="11732" _type="ShellCommand" date="Sun Aug 25 10:09:56 EDT 2019" timestamp="166519703" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="11733" _type="EclipseCommand" commandID="org.eclipse.search.ui.openFileSearchPage" date="Sun Aug 25 10:09:56 EDT 2019" timestamp="166519756" />
  <Command __id="11735" _type="SelectTextCommand" caretOffset="2259" date="Sun Aug 25 10:09:59 EDT 2019" end="2259" start="2229" timestamp="166522140" />
  <Command __id="11736" _type="MoveCaretCommand" caretOffset="2160" date="Sun Aug 25 10:10:03 EDT 2019" docOffset="2160" timestamp="166526156" />
  <Command __id="11737" _type="SelectTextCommand" caretOffset="2165" date="Sun Aug 25 10:10:03 EDT 2019" end="2165" start="2158" timestamp="166526384" />
  <Command __id="11738" _type="MoveCaretCommand" caretOffset="2160" date="Sun Aug 25 10:10:07 EDT 2019" docOffset="2160" timestamp="166530733" />
  <Command __id="11739" _type="SelectTextCommand" caretOffset="2165" date="Sun Aug 25 10:10:07 EDT 2019" end="2165" start="2158" timestamp="166530921" />
  <Command __id="11740" _type="SelectTextCommand" caretOffset="2264" date="Sun Aug 25 10:10:08 EDT 2019" end="2264" start="2141" timestamp="166531144" />
  <Command __id="11741" _type="CopyCommand" date="Sun Aug 25 10:10:08 EDT 2019" timestamp="166531818" />
  <Command __id="11742" _type="MoveCaretCommand" caretOffset="2274" date="Sun Aug 25 10:10:09 EDT 2019" docOffset="2274" timestamp="166532983" />
  <Command __id="11744" _type="InsertStringCommand" date="Sun Aug 25 10:10:10 EDT 2019" timestamp="166533430" timestamp2="166533430">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="11745" _type="MoveCaretCommand" caretOffset="2274" date="Sun Aug 25 10:10:11 EDT 2019" docOffset="2274" timestamp="166534748" />
  <Command __id="11747" _type="PasteCommand" date="Sun Aug 25 10:10:13 EDT 2019" timestamp="166536298" />
  <Command __id="11748" _type="MoveCaretCommand" caretOffset="2151" date="Sun Aug 25 10:10:14 EDT 2019" docOffset="2151" timestamp="166537481" />
  <Command __id="11750" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Sun Aug 25 10:10:15 EDT 2019" timestamp="166538088" />
  <Command __id="11751" _type="MoveCaretCommand" caretOffset="2288" date="Sun Aug 25 10:10:16 EDT 2019" docOffset="2288" timestamp="166539543" />
  <Command __id="11752" _type="SelectTextCommand" caretOffset="2290" date="Sun Aug 25 10:10:16 EDT 2019" end="2290" start="2283" timestamp="166539805" />
  <Command __id="11754" _type="InsertStringCommand" date="Sun Aug 25 10:10:17 EDT 2019" repeat="4" timestamp="166540712" timestamp2="166541234">
    <data><![CDATA[info]]></data>
  </Command>
  <Command __id="11761" _type="MoveCaretCommand" caretOffset="2289" date="Sun Aug 25 10:10:20 EDT 2019" docOffset="2289" timestamp="166543090" />
  <Command __id="11763" _type="InsertStringCommand" date="Sun Aug 25 10:10:21 EDT 2019" repeat="6" timestamp="166544078" timestamp2="166545151">
    <data><![CDATA[this, ]]></data>
  </Command>
  <Command __id="11774" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Sun Aug 25 10:10:22 EDT 2019" timestamp="166545706" />
  <Command __id="11775" _type="ShellCommand" date="Sun Aug 25 10:10:31 EDT 2019" timestamp="166554823" type="ECLIPSE_LOST_FOCUS" />
</Events>
